cscope 15 K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb"               0001939015
	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Doc\PS2 Keyboard.pdf

1 %
	gPDF
-1.4

3 4 0 
	gobj


4 <</
	gFûãr
 /
	gFœãDecode


5 /
	gLígth
 6604

7 
°ªam


8 
	gx
úÕ]
	gY
ì›∂ï~Ô
	g_qkj
™¶
	go
 
	gM
ƒ
	gB
–Û‰
	g$
Æ
	gT
º
	gd
ú∏]3
	gS
…<¥•ñ‰
	gXR
Àí
	gZ
âÊ◊¿¯@ú
	gC
Ä
	gW
∑Â
	gI
 
	gU
‘
	gm
Î¡
	gw
ˆ√
	g_
#∫CÎˇø<<~
	gy
ÒË/˝·Ÿ€ãÒÁ√_˛0?º
	gyv
ÒÀÖm§ˇﬂ¯>?~y¯Ìµ{
	gq8
 Õ`◊
	gO
/⁄
	gf
€Où

9 ˜
	g_o
•„˙Â≈
	g_
/Øè
	gW
¬4Ω0‚Ú˘
	gQ7
≠Ü·Úˆ
	gx
’5F)!/«+ŸË∂µÚÚ;◊
	gT4R
[{˘˝±
u
Ô
tF
´À
G
Ó
QjcZy
ŸØ˙¶
m
Ö1¯⁄∑«+’
t
÷*}
y
‹
O
É
Yq
˘ˆÿπæ§Ó√∞≤√^øˆø
v
∂Ô6¯
p
}#¸ åù
B
ˇ7±Èõ„ïˆøv√Âì|Ü ÑÖ ÿ‘˜u˘.
Nc
¸˜„©
W
∑”ø
_
ªﬁ˛œıW™öŒ 
ns
Øü∏]ù∑≤
	gMz
Ä«◊”<:9\~}
D
>˛„ÿâ∆
jC
<4”

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f103xb.h

37 #i‚de‡
__STM32F103xB_H


38 
	#__STM32F103xB_H


	)

40 #ifde‡
__˝lu•lus


50 
	#__CM3_REV
 0x0200U

	)

51 
	#__MPU_PRESENT
 0U

	)

52 
	#__NVIC_PRIO_BITS
 4U

	)

53 
	#__Víd‹_SysTickC⁄fig
 0U

	)

72 
N⁄MaskabÀI¡_IRQn
 = -14,

73 
H¨dFau…_IRQn
 = -13,

74 
Mem‹yM™agemít_IRQn
 = -12,

75 
BusFau…_IRQn
 = -11,

76 
UßgeFau…_IRQn
 = -10,

77 
SVCÆl_IRQn
 = -5,

78 
DebugM⁄ô‹_IRQn
 = -4,

79 
PídSV_IRQn
 = -2,

80 
SysTick_IRQn
 = -1,

83 
WWDG_IRQn
 = 0,

84 
PVD_IRQn
 = 1,

85 
TAMPER_IRQn
 = 2,

86 
RTC_IRQn
 = 3,

87 
FLASH_IRQn
 = 4,

88 
RCC_IRQn
 = 5,

89 
EXTI0_IRQn
 = 6,

90 
EXTI1_IRQn
 = 7,

91 
EXTI2_IRQn
 = 8,

92 
EXTI3_IRQn
 = 9,

93 
EXTI4_IRQn
 = 10,

94 
DMA1_Ch™√l1_IRQn
 = 11,

95 
DMA1_Ch™√l2_IRQn
 = 12,

96 
DMA1_Ch™√l3_IRQn
 = 13,

97 
DMA1_Ch™√l4_IRQn
 = 14,

98 
DMA1_Ch™√l5_IRQn
 = 15,

99 
DMA1_Ch™√l6_IRQn
 = 16,

100 
DMA1_Ch™√l7_IRQn
 = 17,

101 
ADC1_2_IRQn
 = 18,

102 
USB_HP_CAN1_TX_IRQn
 = 19,

103 
USB_LP_CAN1_RX0_IRQn
 = 20,

104 
CAN1_RX1_IRQn
 = 21,

105 
CAN1_SCE_IRQn
 = 22,

106 
EXTI9_5_IRQn
 = 23,

107 
TIM1_BRK_IRQn
 = 24,

108 
TIM1_UP_IRQn
 = 25,

109 
TIM1_TRG_COM_IRQn
 = 26,

110 
TIM1_CC_IRQn
 = 27,

111 
TIM2_IRQn
 = 28,

112 
TIM3_IRQn
 = 29,

113 
TIM4_IRQn
 = 30,

114 
I2C1_EV_IRQn
 = 31,

115 
I2C1_ER_IRQn
 = 32,

116 
I2C2_EV_IRQn
 = 33,

117 
I2C2_ER_IRQn
 = 34,

118 
SPI1_IRQn
 = 35,

119 
SPI2_IRQn
 = 36,

120 
USART1_IRQn
 = 37,

121 
USART2_IRQn
 = 38,

122 
USART3_IRQn
 = 39,

123 
EXTI15_10_IRQn
 = 40,

124 
RTC_Aœrm_IRQn
 = 41,

125 
USBWakeUp_IRQn
 = 42,

126 } 
	tIRQn_Ty≥
;

132 
	~"c‹e_cm3.h
"

133 
	~"sy°em_°m32f1xx.h
"

134 
	~<°döt.h
>

146 
__IO
 
uöt32_t
 
SR
;

147 
__IO
 
uöt32_t
 
CR1
;

148 
__IO
 
uöt32_t
 
CR2
;

149 
__IO
 
uöt32_t
 
SMPR1
;

150 
__IO
 
uöt32_t
 
SMPR2
;

151 
__IO
 
uöt32_t
 
JOFR1
;

152 
__IO
 
uöt32_t
 
JOFR2
;

153 
__IO
 
uöt32_t
 
JOFR3
;

154 
__IO
 
uöt32_t
 
JOFR4
;

155 
__IO
 
uöt32_t
 
HTR
;

156 
__IO
 
uöt32_t
 
LTR
;

157 
__IO
 
uöt32_t
 
SQR1
;

158 
__IO
 
uöt32_t
 
SQR2
;

159 
__IO
 
uöt32_t
 
SQR3
;

160 
__IO
 
uöt32_t
 
JSQR
;

161 
__IO
 
uöt32_t
 
JDR1
;

162 
__IO
 
uöt32_t
 
JDR2
;

163 
__IO
 
uöt32_t
 
JDR3
;

164 
__IO
 
uöt32_t
 
JDR4
;

165 
__IO
 
uöt32_t
 
DR
;

166 } 
	tADC_Ty≥Def
;

170 
__IO
 
uöt32_t
 
SR
;

171 
__IO
 
uöt32_t
 
CR1
;

172 
__IO
 
uöt32_t
 
CR2
;

173 
uöt32_t
 
RESERVED
[16];

174 
__IO
 
uöt32_t
 
DR
;

175 } 
	tADC_Comm⁄_Ty≥Def
;

183 
uöt32_t
 
RESERVED0
;

184 
__IO
 
uöt32_t
 
DR1
;

185 
__IO
 
uöt32_t
 
DR2
;

186 
__IO
 
uöt32_t
 
DR3
;

187 
__IO
 
uöt32_t
 
DR4
;

188 
__IO
 
uöt32_t
 
DR5
;

189 
__IO
 
uöt32_t
 
DR6
;

190 
__IO
 
uöt32_t
 
DR7
;

191 
__IO
 
uöt32_t
 
DR8
;

192 
__IO
 
uöt32_t
 
DR9
;

193 
__IO
 
uöt32_t
 
DR10
;

194 
__IO
 
uöt32_t
 
RTCCR
;

195 
__IO
 
uöt32_t
 
CR
;

196 
__IO
 
uöt32_t
 
CSR
;

197 } 
	tBKP_Ty≥Def
;

205 
__IO
 
uöt32_t
 
TIR
;

206 
__IO
 
uöt32_t
 
TDTR
;

207 
__IO
 
uöt32_t
 
TDLR
;

208 
__IO
 
uöt32_t
 
TDHR
;

209 } 
	tCAN_TxMaûBox_Ty≥Def
;

217 
__IO
 
uöt32_t
 
RIR
;

218 
__IO
 
uöt32_t
 
RDTR
;

219 
__IO
 
uöt32_t
 
RDLR
;

220 
__IO
 
uöt32_t
 
RDHR
;

221 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

229 
__IO
 
uöt32_t
 
FR1
;

230 
__IO
 
uöt32_t
 
FR2
;

231 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

239 
__IO
 
uöt32_t
 
MCR
;

240 
__IO
 
uöt32_t
 
MSR
;

241 
__IO
 
uöt32_t
 
TSR
;

242 
__IO
 
uöt32_t
 
RF0R
;

243 
__IO
 
uöt32_t
 
RF1R
;

244 
__IO
 
uöt32_t
 
IER
;

245 
__IO
 
uöt32_t
 
ESR
;

246 
__IO
 
uöt32_t
 
BTR
;

247 
uöt32_t
 
RESERVED0
[88];

248 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

249 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

250 
uöt32_t
 
RESERVED1
[12];

251 
__IO
 
uöt32_t
 
FMR
;

252 
__IO
 
uöt32_t
 
FM1R
;

253 
uöt32_t
 
RESERVED2
;

254 
__IO
 
uöt32_t
 
FS1R
;

255 
uöt32_t
 
RESERVED3
;

256 
__IO
 
uöt32_t
 
FFA1R
;

257 
uöt32_t
 
RESERVED4
;

258 
__IO
 
uöt32_t
 
FA1R
;

259 
uöt32_t
 
RESERVED5
[8];

260 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[14];

261 } 
	tCAN_Ty≥Def
;

269 
__IO
 
uöt32_t
 
DR
;

270 
__IO
 
uöt8_t
 
IDR
;

271 
uöt8_t
 
RESERVED0
;

272 
uöt16_t
 
RESERVED1
;

273 
__IO
 
uöt32_t
 
CR
;

274 } 
	tCRC_Ty≥Def
;

283 
__IO
 
uöt32_t
 
IDCODE
;

284 
__IO
 
uöt32_t
 
CR
;

285 }
	tDBGMCU_Ty≥Def
;

293 
__IO
 
uöt32_t
 
CCR
;

294 
__IO
 
uöt32_t
 
CNDTR
;

295 
__IO
 
uöt32_t
 
CPAR
;

296 
__IO
 
uöt32_t
 
CMAR
;

297 } 
	tDMA_Ch™√l_Ty≥Def
;

301 
__IO
 
uöt32_t
 
ISR
;

302 
__IO
 
uöt32_t
 
IFCR
;

303 } 
	tDMA_Ty≥Def
;

313 
__IO
 
uöt32_t
 
IMR
;

314 
__IO
 
uöt32_t
 
EMR
;

315 
__IO
 
uöt32_t
 
RTSR
;

316 
__IO
 
uöt32_t
 
FTSR
;

317 
__IO
 
uöt32_t
 
SWIER
;

318 
__IO
 
uöt32_t
 
PR
;

319 } 
	tEXTI_Ty≥Def
;

327 
__IO
 
uöt32_t
 
ACR
;

328 
__IO
 
uöt32_t
 
KEYR
;

329 
__IO
 
uöt32_t
 
OPTKEYR
;

330 
__IO
 
uöt32_t
 
SR
;

331 
__IO
 
uöt32_t
 
CR
;

332 
__IO
 
uöt32_t
 
AR
;

333 
__IO
 
uöt32_t
 
RESERVED
;

334 
__IO
 
uöt32_t
 
OBR
;

335 
__IO
 
uöt32_t
 
WRPR
;

336 } 
	tFLASH_Ty≥Def
;

344 
__IO
 
uöt16_t
 
RDP
;

345 
__IO
 
uöt16_t
 
USER
;

346 
__IO
 
uöt16_t
 
D©a0
;

347 
__IO
 
uöt16_t
 
D©a1
;

348 
__IO
 
uöt16_t
 
WRP0
;

349 
__IO
 
uöt16_t
 
WRP1
;

350 
__IO
 
uöt16_t
 
WRP2
;

351 
__IO
 
uöt16_t
 
WRP3
;

352 } 
	tOB_Ty≥Def
;

360 
__IO
 
uöt32_t
 
CRL
;

361 
__IO
 
uöt32_t
 
CRH
;

362 
__IO
 
uöt32_t
 
IDR
;

363 
__IO
 
uöt32_t
 
ODR
;

364 
__IO
 
uöt32_t
 
BSRR
;

365 
__IO
 
uöt32_t
 
BRR
;

366 
__IO
 
uöt32_t
 
LCKR
;

367 } 
	tGPIO_Ty≥Def
;

375 
__IO
 
uöt32_t
 
EVCR
;

376 
__IO
 
uöt32_t
 
MAPR
;

377 
__IO
 
uöt32_t
 
EXTICR
[4];

378 
uöt32_t
 
RESERVED0
;

379 
__IO
 
uöt32_t
 
MAPR2
;

380 } 
	tAFIO_Ty≥Def
;

387 
__IO
 
uöt32_t
 
CR1
;

388 
__IO
 
uöt32_t
 
CR2
;

389 
__IO
 
uöt32_t
 
OAR1
;

390 
__IO
 
uöt32_t
 
OAR2
;

391 
__IO
 
uöt32_t
 
DR
;

392 
__IO
 
uöt32_t
 
SR1
;

393 
__IO
 
uöt32_t
 
SR2
;

394 
__IO
 
uöt32_t
 
CCR
;

395 
__IO
 
uöt32_t
 
TRISE
;

396 } 
	tI2C_Ty≥Def
;

404 
__IO
 
uöt32_t
 
KR
;

405 
__IO
 
uöt32_t
 
PR
;

406 
__IO
 
uöt32_t
 
RLR
;

407 
__IO
 
uöt32_t
 
SR
;

408 } 
	tIWDG_Ty≥Def
;

416 
__IO
 
uöt32_t
 
CR
;

417 
__IO
 
uöt32_t
 
CSR
;

418 } 
	tPWR_Ty≥Def
;

426 
__IO
 
uöt32_t
 
CR
;

427 
__IO
 
uöt32_t
 
CFGR
;

428 
__IO
 
uöt32_t
 
CIR
;

429 
__IO
 
uöt32_t
 
APB2RSTR
;

430 
__IO
 
uöt32_t
 
APB1RSTR
;

431 
__IO
 
uöt32_t
 
AHBENR
;

432 
__IO
 
uöt32_t
 
APB2ENR
;

433 
__IO
 
uöt32_t
 
APB1ENR
;

434 
__IO
 
uöt32_t
 
BDCR
;

435 
__IO
 
uöt32_t
 
CSR
;

438 } 
	tRCC_Ty≥Def
;

446 
__IO
 
uöt32_t
 
CRH
;

447 
__IO
 
uöt32_t
 
CRL
;

448 
__IO
 
uöt32_t
 
PRLH
;

449 
__IO
 
uöt32_t
 
PRLL
;

450 
__IO
 
uöt32_t
 
DIVH
;

451 
__IO
 
uöt32_t
 
DIVL
;

452 
__IO
 
uöt32_t
 
CNTH
;

453 
__IO
 
uöt32_t
 
CNTL
;

454 
__IO
 
uöt32_t
 
ALRH
;

455 
__IO
 
uöt32_t
 
ALRL
;

456 } 
	tRTC_Ty≥Def
;

464 
__IO
 
uöt32_t
 
CR1
;

465 
__IO
 
uöt32_t
 
CR2
;

466 
__IO
 
uöt32_t
 
SR
;

467 
__IO
 
uöt32_t
 
DR
;

468 
__IO
 
uöt32_t
 
CRCPR
;

469 
__IO
 
uöt32_t
 
RXCRCR
;

470 
__IO
 
uöt32_t
 
TXCRCR
;

471 
__IO
 
uöt32_t
 
I2SCFGR
;

472 } 
	tSPI_Ty≥Def
;

479 
__IO
 
uöt32_t
 
CR1
;

480 
__IO
 
uöt32_t
 
CR2
;

481 
__IO
 
uöt32_t
 
SMCR
;

482 
__IO
 
uöt32_t
 
DIER
;

483 
__IO
 
uöt32_t
 
SR
;

484 
__IO
 
uöt32_t
 
EGR
;

485 
__IO
 
uöt32_t
 
CCMR1
;

486 
__IO
 
uöt32_t
 
CCMR2
;

487 
__IO
 
uöt32_t
 
CCER
;

488 
__IO
 
uöt32_t
 
CNT
;

489 
__IO
 
uöt32_t
 
PSC
;

490 
__IO
 
uöt32_t
 
ARR
;

491 
__IO
 
uöt32_t
 
RCR
;

492 
__IO
 
uöt32_t
 
CCR1
;

493 
__IO
 
uöt32_t
 
CCR2
;

494 
__IO
 
uöt32_t
 
CCR3
;

495 
__IO
 
uöt32_t
 
CCR4
;

496 
__IO
 
uöt32_t
 
BDTR
;

497 
__IO
 
uöt32_t
 
DCR
;

498 
__IO
 
uöt32_t
 
DMAR
;

499 
__IO
 
uöt32_t
 
OR
;

500 }
	tTIM_Ty≥Def
;

509 
__IO
 
uöt32_t
 
SR
;

510 
__IO
 
uöt32_t
 
DR
;

511 
__IO
 
uöt32_t
 
BRR
;

512 
__IO
 
uöt32_t
 
CR1
;

513 
__IO
 
uöt32_t
 
CR2
;

514 
__IO
 
uöt32_t
 
CR3
;

515 
__IO
 
uöt32_t
 
GTPR
;

516 } 
	tUSART_Ty≥Def
;

524 
__IO
 
uöt16_t
 
EP0R
;

525 
__IO
 
uöt16_t
 
RESERVED0
;

526 
__IO
 
uöt16_t
 
EP1R
;

527 
__IO
 
uöt16_t
 
RESERVED1
;

528 
__IO
 
uöt16_t
 
EP2R
;

529 
__IO
 
uöt16_t
 
RESERVED2
;

530 
__IO
 
uöt16_t
 
EP3R
;

531 
__IO
 
uöt16_t
 
RESERVED3
;

532 
__IO
 
uöt16_t
 
EP4R
;

533 
__IO
 
uöt16_t
 
RESERVED4
;

534 
__IO
 
uöt16_t
 
EP5R
;

535 
__IO
 
uöt16_t
 
RESERVED5
;

536 
__IO
 
uöt16_t
 
EP6R
;

537 
__IO
 
uöt16_t
 
RESERVED6
;

538 
__IO
 
uöt16_t
 
EP7R
;

539 
__IO
 
uöt16_t
 
RESERVED7
[17];

540 
__IO
 
uöt16_t
 
CNTR
;

541 
__IO
 
uöt16_t
 
RESERVED8
;

542 
__IO
 
uöt16_t
 
ISTR
;

543 
__IO
 
uöt16_t
 
RESERVED9
;

544 
__IO
 
uöt16_t
 
FNR
;

545 
__IO
 
uöt16_t
 
RESERVEDA
;

546 
__IO
 
uöt16_t
 
DADDR
;

547 
__IO
 
uöt16_t
 
RESERVEDB
;

548 
__IO
 
uöt16_t
 
BTABLE
;

549 
__IO
 
uöt16_t
 
RESERVEDC
;

550 } 
	tUSB_Ty≥Def
;

559 
__IO
 
uöt32_t
 
CR
;

560 
__IO
 
uöt32_t
 
CFR
;

561 
__IO
 
uöt32_t
 
SR
;

562 } 
	tWWDG_Ty≥Def
;

573 
	#FLASH_BASE
 0x08000000UL

	)

574 
	#FLASH_BANK1_END
 0x0801FFFFUL

	)

575 
	#SRAM_BASE
 0x20000000UL

	)

576 
	#PERIPH_BASE
 0x40000000UL

	)

578 
	#SRAM_BB_BASE
 0x22000000UL

	)

579 
	#PERIPH_BB_BASE
 0x42000000UL

	)

583 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

584 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000UL)

	)

585 
	#AHBPERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000UL)

	)

587 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x00000000UL)

	)

588 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x00000400UL)

	)

589 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x00000800UL)

	)

590 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x00002800UL)

	)

591 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00002C00UL)

	)

592 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00003000UL)

	)

593 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x00003800UL)

	)

594 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x00004400UL)

	)

595 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x00004800UL)

	)

596 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x00005400UL)

	)

597 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x00005800UL)

	)

598 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x00006400UL)

	)

599 
	#BKP_BASE
 (
APB1PERIPH_BASE
 + 0x00006C00UL)

	)

600 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x00007000UL)

	)

601 
	#AFIO_BASE
 (
APB2PERIPH_BASE
 + 0x00000000UL)

	)

602 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x00000400UL)

	)

603 
	#GPIOA_BASE
 (
APB2PERIPH_BASE
 + 0x00000800UL)

	)

604 
	#GPIOB_BASE
 (
APB2PERIPH_BASE
 + 0x00000C00UL)

	)

605 
	#GPIOC_BASE
 (
APB2PERIPH_BASE
 + 0x00001000UL)

	)

606 
	#GPIOD_BASE
 (
APB2PERIPH_BASE
 + 0x00001400UL)

	)

607 
	#GPIOE_BASE
 (
APB2PERIPH_BASE
 + 0x00001800UL)

	)

608 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x00002400UL)

	)

609 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x00002800UL)

	)

610 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x00002C00UL)

	)

611 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x00003000UL)

	)

612 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x00003800UL)

	)

615 
	#DMA1_BASE
 (
AHBPERIPH_BASE
 + 0x00000000UL)

	)

616 
	#DMA1_Ch™√l1_BASE
 (
AHBPERIPH_BASE
 + 0x00000008UL)

	)

617 
	#DMA1_Ch™√l2_BASE
 (
AHBPERIPH_BASE
 + 0x0000001CUL)

	)

618 
	#DMA1_Ch™√l3_BASE
 (
AHBPERIPH_BASE
 + 0x00000030UL)

	)

619 
	#DMA1_Ch™√l4_BASE
 (
AHBPERIPH_BASE
 + 0x00000044UL)

	)

620 
	#DMA1_Ch™√l5_BASE
 (
AHBPERIPH_BASE
 + 0x00000058UL)

	)

621 
	#DMA1_Ch™√l6_BASE
 (
AHBPERIPH_BASE
 + 0x0000006CUL)

	)

622 
	#DMA1_Ch™√l7_BASE
 (
AHBPERIPH_BASE
 + 0x00000080UL)

	)

623 
	#RCC_BASE
 (
AHBPERIPH_BASE
 + 0x00001000UL)

	)

624 
	#CRC_BASE
 (
AHBPERIPH_BASE
 + 0x00003000UL)

	)

626 
	#FLASH_R_BASE
 (
AHBPERIPH_BASE
 + 0x00002000ULË

	)

627 
	#FLASHSIZE_BASE
 0x1FFFF7E0UL

	)

628 
	#UID_BASE
 0x1FFFF7E8UL

	)

629 
	#OB_BASE
 0x1FFFF800UL

	)

633 
	#DBGMCU_BASE
 0xE0042000UL

	)

636 
	#USB_BASE
 (
APB1PERIPH_BASE
 + 0x00005C00ULË

	)

637 
	#USB_PMAADDR
 (
APB1PERIPH_BASE
 + 0x00006000ULË

	)

648 
	#TIM2
 ((
TIM_Ty≥Def
 *)
TIM2_BASE
)

	)

649 
	#TIM3
 ((
TIM_Ty≥Def
 *)
TIM3_BASE
)

	)

650 
	#TIM4
 ((
TIM_Ty≥Def
 *)
TIM4_BASE
)

	)

651 
	#RTC
 ((
RTC_Ty≥Def
 *)
RTC_BASE
)

	)

652 
	#WWDG
 ((
WWDG_Ty≥Def
 *)
WWDG_BASE
)

	)

653 
	#IWDG
 ((
IWDG_Ty≥Def
 *)
IWDG_BASE
)

	)

654 
	#SPI2
 ((
SPI_Ty≥Def
 *)
SPI2_BASE
)

	)

655 
	#USART2
 ((
USART_Ty≥Def
 *)
USART2_BASE
)

	)

656 
	#USART3
 ((
USART_Ty≥Def
 *)
USART3_BASE
)

	)

657 
	#I2C1
 ((
I2C_Ty≥Def
 *)
I2C1_BASE
)

	)

658 
	#I2C2
 ((
I2C_Ty≥Def
 *)
I2C2_BASE
)

	)

659 
	#USB
 ((
USB_Ty≥Def
 *)
USB_BASE
)

	)

660 
	#CAN1
 ((
CAN_Ty≥Def
 *)
CAN1_BASE
)

	)

661 
	#BKP
 ((
BKP_Ty≥Def
 *)
BKP_BASE
)

	)

662 
	#PWR
 ((
PWR_Ty≥Def
 *)
PWR_BASE
)

	)

663 
	#AFIO
 ((
AFIO_Ty≥Def
 *)
AFIO_BASE
)

	)

664 
	#EXTI
 ((
EXTI_Ty≥Def
 *)
EXTI_BASE
)

	)

665 
	#GPIOA
 ((
GPIO_Ty≥Def
 *)
GPIOA_BASE
)

	)

666 
	#GPIOB
 ((
GPIO_Ty≥Def
 *)
GPIOB_BASE
)

	)

667 
	#GPIOC
 ((
GPIO_Ty≥Def
 *)
GPIOC_BASE
)

	)

668 
	#GPIOD
 ((
GPIO_Ty≥Def
 *)
GPIOD_BASE
)

	)

669 
	#GPIOE
 ((
GPIO_Ty≥Def
 *)
GPIOE_BASE
)

	)

670 
	#ADC1
 ((
ADC_Ty≥Def
 *)
ADC1_BASE
)

	)

671 
	#ADC2
 ((
ADC_Ty≥Def
 *)
ADC2_BASE
)

	)

672 
	#ADC12_COMMON
 ((
ADC_Comm⁄_Ty≥Def
 *)
ADC1_BASE
)

	)

673 
	#TIM1
 ((
TIM_Ty≥Def
 *)
TIM1_BASE
)

	)

674 
	#SPI1
 ((
SPI_Ty≥Def
 *)
SPI1_BASE
)

	)

675 
	#USART1
 ((
USART_Ty≥Def
 *)
USART1_BASE
)

	)

676 
	#DMA1
 ((
DMA_Ty≥Def
 *)
DMA1_BASE
)

	)

677 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l1_BASE
)

	)

678 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l2_BASE
)

	)

679 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l3_BASE
)

	)

680 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l4_BASE
)

	)

681 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l5_BASE
)

	)

682 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l6_BASE
)

	)

683 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *)
DMA1_Ch™√l7_BASE
)

	)

684 
	#RCC
 ((
RCC_Ty≥Def
 *)
RCC_BASE
)

	)

685 
	#CRC
 ((
CRC_Ty≥Def
 *)
CRC_BASE
)

	)

686 
	#FLASH
 ((
FLASH_Ty≥Def
 *)
FLASH_R_BASE
)

	)

687 
	#OB
 ((
OB_Ty≥Def
 *)
OB_BASE
)

	)

688 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *)
DBGMCU_BASE
)

	)

714 
	#CRC_DR_DR_Pos
 (0U)

	)

715 
	#CRC_DR_DR_Msk
 (0xFFFFFFFFUL << 
CRC_DR_DR_Pos
Ë

	)

716 
	#CRC_DR_DR
 
CRC_DR_DR_Msk


	)

719 
	#CRC_IDR_IDR_Pos
 (0U)

	)

720 
	#CRC_IDR_IDR_Msk
 (0xFFUL << 
CRC_IDR_IDR_Pos
Ë

	)

721 
	#CRC_IDR_IDR
 
CRC_IDR_IDR_Msk


	)

724 
	#CRC_CR_RESET_Pos
 (0U)

	)

725 
	#CRC_CR_RESET_Msk
 (0x1UL << 
CRC_CR_RESET_Pos
Ë

	)

726 
	#CRC_CR_RESET
 
CRC_CR_RESET_Msk


	)

735 
	#PWR_CR_LPDS_Pos
 (0U)

	)

736 
	#PWR_CR_LPDS_Msk
 (0x1UL << 
PWR_CR_LPDS_Pos
Ë

	)

737 
	#PWR_CR_LPDS
 
PWR_CR_LPDS_Msk


	)

738 
	#PWR_CR_PDDS_Pos
 (1U)

	)

739 
	#PWR_CR_PDDS_Msk
 (0x1UL << 
PWR_CR_PDDS_Pos
Ë

	)

740 
	#PWR_CR_PDDS
 
PWR_CR_PDDS_Msk


	)

741 
	#PWR_CR_CWUF_Pos
 (2U)

	)

742 
	#PWR_CR_CWUF_Msk
 (0x1UL << 
PWR_CR_CWUF_Pos
Ë

	)

743 
	#PWR_CR_CWUF
 
PWR_CR_CWUF_Msk


	)

744 
	#PWR_CR_CSBF_Pos
 (3U)

	)

745 
	#PWR_CR_CSBF_Msk
 (0x1UL << 
PWR_CR_CSBF_Pos
Ë

	)

746 
	#PWR_CR_CSBF
 
PWR_CR_CSBF_Msk


	)

747 
	#PWR_CR_PVDE_Pos
 (4U)

	)

748 
	#PWR_CR_PVDE_Msk
 (0x1UL << 
PWR_CR_PVDE_Pos
Ë

	)

749 
	#PWR_CR_PVDE
 
PWR_CR_PVDE_Msk


	)

751 
	#PWR_CR_PLS_Pos
 (5U)

	)

752 
	#PWR_CR_PLS_Msk
 (0x7UL << 
PWR_CR_PLS_Pos
Ë

	)

753 
	#PWR_CR_PLS
 
PWR_CR_PLS_Msk


	)

754 
	#PWR_CR_PLS_0
 (0x1UL << 
PWR_CR_PLS_Pos
Ë

	)

755 
	#PWR_CR_PLS_1
 (0x2UL << 
PWR_CR_PLS_Pos
Ë

	)

756 
	#PWR_CR_PLS_2
 (0x4UL << 
PWR_CR_PLS_Pos
Ë

	)

759 
	#PWR_CR_PLS_LEV0
 0x00000000U

	)

760 
	#PWR_CR_PLS_LEV1
 0x00000020U

	)

761 
	#PWR_CR_PLS_LEV2
 0x00000040U

	)

762 
	#PWR_CR_PLS_LEV3
 0x00000060U

	)

763 
	#PWR_CR_PLS_LEV4
 0x00000080U

	)

764 
	#PWR_CR_PLS_LEV5
 0x000000A0U

	)

765 
	#PWR_CR_PLS_LEV6
 0x000000C0U

	)

766 
	#PWR_CR_PLS_LEV7
 0x000000E0U

	)

769 
	#PWR_CR_PLS_2V2
 
PWR_CR_PLS_LEV0


	)

770 
	#PWR_CR_PLS_2V3
 
PWR_CR_PLS_LEV1


	)

771 
	#PWR_CR_PLS_2V4
 
PWR_CR_PLS_LEV2


	)

772 
	#PWR_CR_PLS_2V5
 
PWR_CR_PLS_LEV3


	)

773 
	#PWR_CR_PLS_2V6
 
PWR_CR_PLS_LEV4


	)

774 
	#PWR_CR_PLS_2V7
 
PWR_CR_PLS_LEV5


	)

775 
	#PWR_CR_PLS_2V8
 
PWR_CR_PLS_LEV6


	)

776 
	#PWR_CR_PLS_2V9
 
PWR_CR_PLS_LEV7


	)

778 
	#PWR_CR_DBP_Pos
 (8U)

	)

779 
	#PWR_CR_DBP_Msk
 (0x1UL << 
PWR_CR_DBP_Pos
Ë

	)

780 
	#PWR_CR_DBP
 
PWR_CR_DBP_Msk


	)

784 
	#PWR_CSR_WUF_Pos
 (0U)

	)

785 
	#PWR_CSR_WUF_Msk
 (0x1UL << 
PWR_CSR_WUF_Pos
Ë

	)

786 
	#PWR_CSR_WUF
 
PWR_CSR_WUF_Msk


	)

787 
	#PWR_CSR_SBF_Pos
 (1U)

	)

788 
	#PWR_CSR_SBF_Msk
 (0x1UL << 
PWR_CSR_SBF_Pos
Ë

	)

789 
	#PWR_CSR_SBF
 
PWR_CSR_SBF_Msk


	)

790 
	#PWR_CSR_PVDO_Pos
 (2U)

	)

791 
	#PWR_CSR_PVDO_Msk
 (0x1UL << 
PWR_CSR_PVDO_Pos
Ë

	)

792 
	#PWR_CSR_PVDO
 
PWR_CSR_PVDO_Msk


	)

793 
	#PWR_CSR_EWUP_Pos
 (8U)

	)

794 
	#PWR_CSR_EWUP_Msk
 (0x1UL << 
PWR_CSR_EWUP_Pos
Ë

	)

795 
	#PWR_CSR_EWUP
 
PWR_CSR_EWUP_Msk


	)

804 
	#BKP_DR1_D_Pos
 (0U)

	)

805 
	#BKP_DR1_D_Msk
 (0xFFFFUL << 
BKP_DR1_D_Pos
Ë

	)

806 
	#BKP_DR1_D
 
BKP_DR1_D_Msk


	)

809 
	#BKP_DR2_D_Pos
 (0U)

	)

810 
	#BKP_DR2_D_Msk
 (0xFFFFUL << 
BKP_DR2_D_Pos
Ë

	)

811 
	#BKP_DR2_D
 
BKP_DR2_D_Msk


	)

814 
	#BKP_DR3_D_Pos
 (0U)

	)

815 
	#BKP_DR3_D_Msk
 (0xFFFFUL << 
BKP_DR3_D_Pos
Ë

	)

816 
	#BKP_DR3_D
 
BKP_DR3_D_Msk


	)

819 
	#BKP_DR4_D_Pos
 (0U)

	)

820 
	#BKP_DR4_D_Msk
 (0xFFFFUL << 
BKP_DR4_D_Pos
Ë

	)

821 
	#BKP_DR4_D
 
BKP_DR4_D_Msk


	)

824 
	#BKP_DR5_D_Pos
 (0U)

	)

825 
	#BKP_DR5_D_Msk
 (0xFFFFUL << 
BKP_DR5_D_Pos
Ë

	)

826 
	#BKP_DR5_D
 
BKP_DR5_D_Msk


	)

829 
	#BKP_DR6_D_Pos
 (0U)

	)

830 
	#BKP_DR6_D_Msk
 (0xFFFFUL << 
BKP_DR6_D_Pos
Ë

	)

831 
	#BKP_DR6_D
 
BKP_DR6_D_Msk


	)

834 
	#BKP_DR7_D_Pos
 (0U)

	)

835 
	#BKP_DR7_D_Msk
 (0xFFFFUL << 
BKP_DR7_D_Pos
Ë

	)

836 
	#BKP_DR7_D
 
BKP_DR7_D_Msk


	)

839 
	#BKP_DR8_D_Pos
 (0U)

	)

840 
	#BKP_DR8_D_Msk
 (0xFFFFUL << 
BKP_DR8_D_Pos
Ë

	)

841 
	#BKP_DR8_D
 
BKP_DR8_D_Msk


	)

844 
	#BKP_DR9_D_Pos
 (0U)

	)

845 
	#BKP_DR9_D_Msk
 (0xFFFFUL << 
BKP_DR9_D_Pos
Ë

	)

846 
	#BKP_DR9_D
 
BKP_DR9_D_Msk


	)

849 
	#BKP_DR10_D_Pos
 (0U)

	)

850 
	#BKP_DR10_D_Msk
 (0xFFFFUL << 
BKP_DR10_D_Pos
Ë

	)

851 
	#BKP_DR10_D
 
BKP_DR10_D_Msk


	)

853 
	#RTC_BKP_NUMBER
 10

	)

856 
	#BKP_RTCCR_CAL_Pos
 (0U)

	)

857 
	#BKP_RTCCR_CAL_Msk
 (0x7FUL << 
BKP_RTCCR_CAL_Pos
Ë

	)

858 
	#BKP_RTCCR_CAL
 
BKP_RTCCR_CAL_Msk


	)

859 
	#BKP_RTCCR_CCO_Pos
 (7U)

	)

860 
	#BKP_RTCCR_CCO_Msk
 (0x1UL << 
BKP_RTCCR_CCO_Pos
Ë

	)

861 
	#BKP_RTCCR_CCO
 
BKP_RTCCR_CCO_Msk


	)

862 
	#BKP_RTCCR_ASOE_Pos
 (8U)

	)

863 
	#BKP_RTCCR_ASOE_Msk
 (0x1UL << 
BKP_RTCCR_ASOE_Pos
Ë

	)

864 
	#BKP_RTCCR_ASOE
 
BKP_RTCCR_ASOE_Msk


	)

865 
	#BKP_RTCCR_ASOS_Pos
 (9U)

	)

866 
	#BKP_RTCCR_ASOS_Msk
 (0x1UL << 
BKP_RTCCR_ASOS_Pos
Ë

	)

867 
	#BKP_RTCCR_ASOS
 
BKP_RTCCR_ASOS_Msk


	)

870 
	#BKP_CR_TPE_Pos
 (0U)

	)

871 
	#BKP_CR_TPE_Msk
 (0x1UL << 
BKP_CR_TPE_Pos
Ë

	)

872 
	#BKP_CR_TPE
 
BKP_CR_TPE_Msk


	)

873 
	#BKP_CR_TPAL_Pos
 (1U)

	)

874 
	#BKP_CR_TPAL_Msk
 (0x1UL << 
BKP_CR_TPAL_Pos
Ë

	)

875 
	#BKP_CR_TPAL
 
BKP_CR_TPAL_Msk


	)

878 
	#BKP_CSR_CTE_Pos
 (0U)

	)

879 
	#BKP_CSR_CTE_Msk
 (0x1UL << 
BKP_CSR_CTE_Pos
Ë

	)

880 
	#BKP_CSR_CTE
 
BKP_CSR_CTE_Msk


	)

881 
	#BKP_CSR_CTI_Pos
 (1U)

	)

882 
	#BKP_CSR_CTI_Msk
 (0x1UL << 
BKP_CSR_CTI_Pos
Ë

	)

883 
	#BKP_CSR_CTI
 
BKP_CSR_CTI_Msk


	)

884 
	#BKP_CSR_TPIE_Pos
 (2U)

	)

885 
	#BKP_CSR_TPIE_Msk
 (0x1UL << 
BKP_CSR_TPIE_Pos
Ë

	)

886 
	#BKP_CSR_TPIE
 
BKP_CSR_TPIE_Msk


	)

887 
	#BKP_CSR_TEF_Pos
 (8U)

	)

888 
	#BKP_CSR_TEF_Msk
 (0x1UL << 
BKP_CSR_TEF_Pos
Ë

	)

889 
	#BKP_CSR_TEF
 
BKP_CSR_TEF_Msk


	)

890 
	#BKP_CSR_TIF_Pos
 (9U)

	)

891 
	#BKP_CSR_TIF_Msk
 (0x1UL << 
BKP_CSR_TIF_Pos
Ë

	)

892 
	#BKP_CSR_TIF
 
BKP_CSR_TIF_Msk


	)

901 
	#RCC_CR_HSION_Pos
 (0U)

	)

902 
	#RCC_CR_HSION_Msk
 (0x1UL << 
RCC_CR_HSION_Pos
Ë

	)

903 
	#RCC_CR_HSION
 
RCC_CR_HSION_Msk


	)

904 
	#RCC_CR_HSIRDY_Pos
 (1U)

	)

905 
	#RCC_CR_HSIRDY_Msk
 (0x1UL << 
RCC_CR_HSIRDY_Pos
Ë

	)

906 
	#RCC_CR_HSIRDY
 
RCC_CR_HSIRDY_Msk


	)

907 
	#RCC_CR_HSITRIM_Pos
 (3U)

	)

908 
	#RCC_CR_HSITRIM_Msk
 (0x1FUL << 
RCC_CR_HSITRIM_Pos
Ë

	)

909 
	#RCC_CR_HSITRIM
 
RCC_CR_HSITRIM_Msk


	)

910 
	#RCC_CR_HSICAL_Pos
 (8U)

	)

911 
	#RCC_CR_HSICAL_Msk
 (0xFFUL << 
RCC_CR_HSICAL_Pos
Ë

	)

912 
	#RCC_CR_HSICAL
 
RCC_CR_HSICAL_Msk


	)

913 
	#RCC_CR_HSEON_Pos
 (16U)

	)

914 
	#RCC_CR_HSEON_Msk
 (0x1UL << 
RCC_CR_HSEON_Pos
Ë

	)

915 
	#RCC_CR_HSEON
 
RCC_CR_HSEON_Msk


	)

916 
	#RCC_CR_HSERDY_Pos
 (17U)

	)

917 
	#RCC_CR_HSERDY_Msk
 (0x1UL << 
RCC_CR_HSERDY_Pos
Ë

	)

918 
	#RCC_CR_HSERDY
 
RCC_CR_HSERDY_Msk


	)

919 
	#RCC_CR_HSEBYP_Pos
 (18U)

	)

920 
	#RCC_CR_HSEBYP_Msk
 (0x1UL << 
RCC_CR_HSEBYP_Pos
Ë

	)

921 
	#RCC_CR_HSEBYP
 
RCC_CR_HSEBYP_Msk


	)

922 
	#RCC_CR_CSSON_Pos
 (19U)

	)

923 
	#RCC_CR_CSSON_Msk
 (0x1UL << 
RCC_CR_CSSON_Pos
Ë

	)

924 
	#RCC_CR_CSSON
 
RCC_CR_CSSON_Msk


	)

925 
	#RCC_CR_PLLON_Pos
 (24U)

	)

926 
	#RCC_CR_PLLON_Msk
 (0x1UL << 
RCC_CR_PLLON_Pos
Ë

	)

927 
	#RCC_CR_PLLON
 
RCC_CR_PLLON_Msk


	)

928 
	#RCC_CR_PLLRDY_Pos
 (25U)

	)

929 
	#RCC_CR_PLLRDY_Msk
 (0x1UL << 
RCC_CR_PLLRDY_Pos
Ë

	)

930 
	#RCC_CR_PLLRDY
 
RCC_CR_PLLRDY_Msk


	)

935 
	#RCC_CFGR_SW_Pos
 (0U)

	)

936 
	#RCC_CFGR_SW_Msk
 (0x3UL << 
RCC_CFGR_SW_Pos
Ë

	)

937 
	#RCC_CFGR_SW
 
RCC_CFGR_SW_Msk


	)

938 
	#RCC_CFGR_SW_0
 (0x1UL << 
RCC_CFGR_SW_Pos
Ë

	)

939 
	#RCC_CFGR_SW_1
 (0x2UL << 
RCC_CFGR_SW_Pos
Ë

	)

941 
	#RCC_CFGR_SW_HSI
 0x00000000U

	)

942 
	#RCC_CFGR_SW_HSE
 0x00000001U

	)

943 
	#RCC_CFGR_SW_PLL
 0x00000002U

	)

946 
	#RCC_CFGR_SWS_Pos
 (2U)

	)

947 
	#RCC_CFGR_SWS_Msk
 (0x3UL << 
RCC_CFGR_SWS_Pos
Ë

	)

948 
	#RCC_CFGR_SWS
 
RCC_CFGR_SWS_Msk


	)

949 
	#RCC_CFGR_SWS_0
 (0x1UL << 
RCC_CFGR_SWS_Pos
Ë

	)

950 
	#RCC_CFGR_SWS_1
 (0x2UL << 
RCC_CFGR_SWS_Pos
Ë

	)

952 
	#RCC_CFGR_SWS_HSI
 0x00000000U

	)

953 
	#RCC_CFGR_SWS_HSE
 0x00000004U

	)

954 
	#RCC_CFGR_SWS_PLL
 0x00000008U

	)

957 
	#RCC_CFGR_HPRE_Pos
 (4U)

	)

958 
	#RCC_CFGR_HPRE_Msk
 (0xFUL << 
RCC_CFGR_HPRE_Pos
Ë

	)

959 
	#RCC_CFGR_HPRE
 
RCC_CFGR_HPRE_Msk


	)

960 
	#RCC_CFGR_HPRE_0
 (0x1UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

961 
	#RCC_CFGR_HPRE_1
 (0x2UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

962 
	#RCC_CFGR_HPRE_2
 (0x4UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

963 
	#RCC_CFGR_HPRE_3
 (0x8UL << 
RCC_CFGR_HPRE_Pos
Ë

	)

965 
	#RCC_CFGR_HPRE_DIV1
 0x00000000U

	)

966 
	#RCC_CFGR_HPRE_DIV2
 0x00000080U

	)

967 
	#RCC_CFGR_HPRE_DIV4
 0x00000090U

	)

968 
	#RCC_CFGR_HPRE_DIV8
 0x000000A0U

	)

969 
	#RCC_CFGR_HPRE_DIV16
 0x000000B0U

	)

970 
	#RCC_CFGR_HPRE_DIV64
 0x000000C0U

	)

971 
	#RCC_CFGR_HPRE_DIV128
 0x000000D0U

	)

972 
	#RCC_CFGR_HPRE_DIV256
 0x000000E0U

	)

973 
	#RCC_CFGR_HPRE_DIV512
 0x000000F0U

	)

976 
	#RCC_CFGR_PPRE1_Pos
 (8U)

	)

977 
	#RCC_CFGR_PPRE1_Msk
 (0x7UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

978 
	#RCC_CFGR_PPRE1
 
RCC_CFGR_PPRE1_Msk


	)

979 
	#RCC_CFGR_PPRE1_0
 (0x1UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

980 
	#RCC_CFGR_PPRE1_1
 (0x2UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

981 
	#RCC_CFGR_PPRE1_2
 (0x4UL << 
RCC_CFGR_PPRE1_Pos
Ë

	)

983 
	#RCC_CFGR_PPRE1_DIV1
 0x00000000U

	)

984 
	#RCC_CFGR_PPRE1_DIV2
 0x00000400U

	)

985 
	#RCC_CFGR_PPRE1_DIV4
 0x00000500U

	)

986 
	#RCC_CFGR_PPRE1_DIV8
 0x00000600U

	)

987 
	#RCC_CFGR_PPRE1_DIV16
 0x00000700U

	)

990 
	#RCC_CFGR_PPRE2_Pos
 (11U)

	)

991 
	#RCC_CFGR_PPRE2_Msk
 (0x7UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

992 
	#RCC_CFGR_PPRE2
 
RCC_CFGR_PPRE2_Msk


	)

993 
	#RCC_CFGR_PPRE2_0
 (0x1UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

994 
	#RCC_CFGR_PPRE2_1
 (0x2UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

995 
	#RCC_CFGR_PPRE2_2
 (0x4UL << 
RCC_CFGR_PPRE2_Pos
Ë

	)

997 
	#RCC_CFGR_PPRE2_DIV1
 0x00000000U

	)

998 
	#RCC_CFGR_PPRE2_DIV2
 0x00002000U

	)

999 
	#RCC_CFGR_PPRE2_DIV4
 0x00002800U

	)

1000 
	#RCC_CFGR_PPRE2_DIV8
 0x00003000U

	)

1001 
	#RCC_CFGR_PPRE2_DIV16
 0x00003800U

	)

1004 
	#RCC_CFGR_ADCPRE_Pos
 (14U)

	)

1005 
	#RCC_CFGR_ADCPRE_Msk
 (0x3UL << 
RCC_CFGR_ADCPRE_Pos
Ë

	)

1006 
	#RCC_CFGR_ADCPRE
 
RCC_CFGR_ADCPRE_Msk


	)

1007 
	#RCC_CFGR_ADCPRE_0
 (0x1UL << 
RCC_CFGR_ADCPRE_Pos
Ë

	)

1008 
	#RCC_CFGR_ADCPRE_1
 (0x2UL << 
RCC_CFGR_ADCPRE_Pos
Ë

	)

1010 
	#RCC_CFGR_ADCPRE_DIV2
 0x00000000U

	)

1011 
	#RCC_CFGR_ADCPRE_DIV4
 0x00004000U

	)

1012 
	#RCC_CFGR_ADCPRE_DIV6
 0x00008000U

	)

1013 
	#RCC_CFGR_ADCPRE_DIV8
 0x0000C000U

	)

1015 
	#RCC_CFGR_PLLSRC_Pos
 (16U)

	)

1016 
	#RCC_CFGR_PLLSRC_Msk
 (0x1UL << 
RCC_CFGR_PLLSRC_Pos
Ë

	)

1017 
	#RCC_CFGR_PLLSRC
 
RCC_CFGR_PLLSRC_Msk


	)

1019 
	#RCC_CFGR_PLLXTPRE_Pos
 (17U)

	)

1020 
	#RCC_CFGR_PLLXTPRE_Msk
 (0x1UL << 
RCC_CFGR_PLLXTPRE_Pos
Ë

	)

1021 
	#RCC_CFGR_PLLXTPRE
 
RCC_CFGR_PLLXTPRE_Msk


	)

1024 
	#RCC_CFGR_PLLMULL_Pos
 (18U)

	)

1025 
	#RCC_CFGR_PLLMULL_Msk
 (0xFUL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1026 
	#RCC_CFGR_PLLMULL
 
RCC_CFGR_PLLMULL_Msk


	)

1027 
	#RCC_CFGR_PLLMULL_0
 (0x1UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1028 
	#RCC_CFGR_PLLMULL_1
 (0x2UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1029 
	#RCC_CFGR_PLLMULL_2
 (0x4UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1030 
	#RCC_CFGR_PLLMULL_3
 (0x8UL << 
RCC_CFGR_PLLMULL_Pos
Ë

	)

1032 
	#RCC_CFGR_PLLXTPRE_HSE
 0x00000000U

	)

1033 
	#RCC_CFGR_PLLXTPRE_HSE_DIV2
 0x00020000U

	)

1035 
	#RCC_CFGR_PLLMULL2
 0x00000000U

	)

1036 
	#RCC_CFGR_PLLMULL3_Pos
 (18U)

	)

1037 
	#RCC_CFGR_PLLMULL3_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL3_Pos
Ë

	)

1038 
	#RCC_CFGR_PLLMULL3
 
RCC_CFGR_PLLMULL3_Msk


	)

1039 
	#RCC_CFGR_PLLMULL4_Pos
 (19U)

	)

1040 
	#RCC_CFGR_PLLMULL4_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL4_Pos
Ë

	)

1041 
	#RCC_CFGR_PLLMULL4
 
RCC_CFGR_PLLMULL4_Msk


	)

1042 
	#RCC_CFGR_PLLMULL5_Pos
 (18U)

	)

1043 
	#RCC_CFGR_PLLMULL5_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL5_Pos
Ë

	)

1044 
	#RCC_CFGR_PLLMULL5
 
RCC_CFGR_PLLMULL5_Msk


	)

1045 
	#RCC_CFGR_PLLMULL6_Pos
 (20U)

	)

1046 
	#RCC_CFGR_PLLMULL6_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL6_Pos
Ë

	)

1047 
	#RCC_CFGR_PLLMULL6
 
RCC_CFGR_PLLMULL6_Msk


	)

1048 
	#RCC_CFGR_PLLMULL7_Pos
 (18U)

	)

1049 
	#RCC_CFGR_PLLMULL7_Msk
 (0x5UL << 
RCC_CFGR_PLLMULL7_Pos
Ë

	)

1050 
	#RCC_CFGR_PLLMULL7
 
RCC_CFGR_PLLMULL7_Msk


	)

1051 
	#RCC_CFGR_PLLMULL8_Pos
 (19U)

	)

1052 
	#RCC_CFGR_PLLMULL8_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL8_Pos
Ë

	)

1053 
	#RCC_CFGR_PLLMULL8
 
RCC_CFGR_PLLMULL8_Msk


	)

1054 
	#RCC_CFGR_PLLMULL9_Pos
 (18U)

	)

1055 
	#RCC_CFGR_PLLMULL9_Msk
 (0x7UL << 
RCC_CFGR_PLLMULL9_Pos
Ë

	)

1056 
	#RCC_CFGR_PLLMULL9
 
RCC_CFGR_PLLMULL9_Msk


	)

1057 
	#RCC_CFGR_PLLMULL10_Pos
 (21U)

	)

1058 
	#RCC_CFGR_PLLMULL10_Msk
 (0x1UL << 
RCC_CFGR_PLLMULL10_Pos
Ë

	)

1059 
	#RCC_CFGR_PLLMULL10
 
RCC_CFGR_PLLMULL10_Msk


	)

1060 
	#RCC_CFGR_PLLMULL11_Pos
 (18U)

	)

1061 
	#RCC_CFGR_PLLMULL11_Msk
 (0x9UL << 
RCC_CFGR_PLLMULL11_Pos
Ë

	)

1062 
	#RCC_CFGR_PLLMULL11
 
RCC_CFGR_PLLMULL11_Msk


	)

1063 
	#RCC_CFGR_PLLMULL12_Pos
 (19U)

	)

1064 
	#RCC_CFGR_PLLMULL12_Msk
 (0x5UL << 
RCC_CFGR_PLLMULL12_Pos
Ë

	)

1065 
	#RCC_CFGR_PLLMULL12
 
RCC_CFGR_PLLMULL12_Msk


	)

1066 
	#RCC_CFGR_PLLMULL13_Pos
 (18U)

	)

1067 
	#RCC_CFGR_PLLMULL13_Msk
 (0xBUL << 
RCC_CFGR_PLLMULL13_Pos
Ë

	)

1068 
	#RCC_CFGR_PLLMULL13
 
RCC_CFGR_PLLMULL13_Msk


	)

1069 
	#RCC_CFGR_PLLMULL14_Pos
 (20U)

	)

1070 
	#RCC_CFGR_PLLMULL14_Msk
 (0x3UL << 
RCC_CFGR_PLLMULL14_Pos
Ë

	)

1071 
	#RCC_CFGR_PLLMULL14
 
RCC_CFGR_PLLMULL14_Msk


	)

1072 
	#RCC_CFGR_PLLMULL15_Pos
 (18U)

	)

1073 
	#RCC_CFGR_PLLMULL15_Msk
 (0xDUL << 
RCC_CFGR_PLLMULL15_Pos
Ë

	)

1074 
	#RCC_CFGR_PLLMULL15
 
RCC_CFGR_PLLMULL15_Msk


	)

1075 
	#RCC_CFGR_PLLMULL16_Pos
 (19U)

	)

1076 
	#RCC_CFGR_PLLMULL16_Msk
 (0x7UL << 
RCC_CFGR_PLLMULL16_Pos
Ë

	)

1077 
	#RCC_CFGR_PLLMULL16
 
RCC_CFGR_PLLMULL16_Msk


	)

1078 
	#RCC_CFGR_USBPRE_Pos
 (22U)

	)

1079 
	#RCC_CFGR_USBPRE_Msk
 (0x1UL << 
RCC_CFGR_USBPRE_Pos
Ë

	)

1080 
	#RCC_CFGR_USBPRE
 
RCC_CFGR_USBPRE_Msk


	)

1083 
	#RCC_CFGR_MCO_Pos
 (24U)

	)

1084 
	#RCC_CFGR_MCO_Msk
 (0x7UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1085 
	#RCC_CFGR_MCO
 
RCC_CFGR_MCO_Msk


	)

1086 
	#RCC_CFGR_MCO_0
 (0x1UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1087 
	#RCC_CFGR_MCO_1
 (0x2UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1088 
	#RCC_CFGR_MCO_2
 (0x4UL << 
RCC_CFGR_MCO_Pos
Ë

	)

1090 
	#RCC_CFGR_MCO_NOCLOCK
 0x00000000U

	)

1091 
	#RCC_CFGR_MCO_SYSCLK
 0x04000000U

	)

1092 
	#RCC_CFGR_MCO_HSI
 0x05000000U

	)

1093 
	#RCC_CFGR_MCO_HSE
 0x06000000U

	)

1094 
	#RCC_CFGR_MCO_PLLCLK_DIV2
 0x07000000U

	)

1097 
	#RCC_CFGR_MCOSEL
 
RCC_CFGR_MCO


	)

1098 
	#RCC_CFGR_MCOSEL_0
 
RCC_CFGR_MCO_0


	)

1099 
	#RCC_CFGR_MCOSEL_1
 
RCC_CFGR_MCO_1


	)

1100 
	#RCC_CFGR_MCOSEL_2
 
RCC_CFGR_MCO_2


	)

1101 
	#RCC_CFGR_MCOSEL_NOCLOCK
 
RCC_CFGR_MCO_NOCLOCK


	)

1102 
	#RCC_CFGR_MCOSEL_SYSCLK
 
RCC_CFGR_MCO_SYSCLK


	)

1103 
	#RCC_CFGR_MCOSEL_HSI
 
RCC_CFGR_MCO_HSI


	)

1104 
	#RCC_CFGR_MCOSEL_HSE
 
RCC_CFGR_MCO_HSE


	)

1105 
	#RCC_CFGR_MCOSEL_PLL_DIV2
 
RCC_CFGR_MCO_PLLCLK_DIV2


	)

1108 
	#RCC_CIR_LSIRDYF_Pos
 (0U)

	)

1109 
	#RCC_CIR_LSIRDYF_Msk
 (0x1UL << 
RCC_CIR_LSIRDYF_Pos
Ë

	)

1110 
	#RCC_CIR_LSIRDYF
 
RCC_CIR_LSIRDYF_Msk


	)

1111 
	#RCC_CIR_LSERDYF_Pos
 (1U)

	)

1112 
	#RCC_CIR_LSERDYF_Msk
 (0x1UL << 
RCC_CIR_LSERDYF_Pos
Ë

	)

1113 
	#RCC_CIR_LSERDYF
 
RCC_CIR_LSERDYF_Msk


	)

1114 
	#RCC_CIR_HSIRDYF_Pos
 (2U)

	)

1115 
	#RCC_CIR_HSIRDYF_Msk
 (0x1UL << 
RCC_CIR_HSIRDYF_Pos
Ë

	)

1116 
	#RCC_CIR_HSIRDYF
 
RCC_CIR_HSIRDYF_Msk


	)

1117 
	#RCC_CIR_HSERDYF_Pos
 (3U)

	)

1118 
	#RCC_CIR_HSERDYF_Msk
 (0x1UL << 
RCC_CIR_HSERDYF_Pos
Ë

	)

1119 
	#RCC_CIR_HSERDYF
 
RCC_CIR_HSERDYF_Msk


	)

1120 
	#RCC_CIR_PLLRDYF_Pos
 (4U)

	)

1121 
	#RCC_CIR_PLLRDYF_Msk
 (0x1UL << 
RCC_CIR_PLLRDYF_Pos
Ë

	)

1122 
	#RCC_CIR_PLLRDYF
 
RCC_CIR_PLLRDYF_Msk


	)

1123 
	#RCC_CIR_CSSF_Pos
 (7U)

	)

1124 
	#RCC_CIR_CSSF_Msk
 (0x1UL << 
RCC_CIR_CSSF_Pos
Ë

	)

1125 
	#RCC_CIR_CSSF
 
RCC_CIR_CSSF_Msk


	)

1126 
	#RCC_CIR_LSIRDYIE_Pos
 (8U)

	)

1127 
	#RCC_CIR_LSIRDYIE_Msk
 (0x1UL << 
RCC_CIR_LSIRDYIE_Pos
Ë

	)

1128 
	#RCC_CIR_LSIRDYIE
 
RCC_CIR_LSIRDYIE_Msk


	)

1129 
	#RCC_CIR_LSERDYIE_Pos
 (9U)

	)

1130 
	#RCC_CIR_LSERDYIE_Msk
 (0x1UL << 
RCC_CIR_LSERDYIE_Pos
Ë

	)

1131 
	#RCC_CIR_LSERDYIE
 
RCC_CIR_LSERDYIE_Msk


	)

1132 
	#RCC_CIR_HSIRDYIE_Pos
 (10U)

	)

1133 
	#RCC_CIR_HSIRDYIE_Msk
 (0x1UL << 
RCC_CIR_HSIRDYIE_Pos
Ë

	)

1134 
	#RCC_CIR_HSIRDYIE
 
RCC_CIR_HSIRDYIE_Msk


	)

1135 
	#RCC_CIR_HSERDYIE_Pos
 (11U)

	)

1136 
	#RCC_CIR_HSERDYIE_Msk
 (0x1UL << 
RCC_CIR_HSERDYIE_Pos
Ë

	)

1137 
	#RCC_CIR_HSERDYIE
 
RCC_CIR_HSERDYIE_Msk


	)

1138 
	#RCC_CIR_PLLRDYIE_Pos
 (12U)

	)

1139 
	#RCC_CIR_PLLRDYIE_Msk
 (0x1UL << 
RCC_CIR_PLLRDYIE_Pos
Ë

	)

1140 
	#RCC_CIR_PLLRDYIE
 
RCC_CIR_PLLRDYIE_Msk


	)

1141 
	#RCC_CIR_LSIRDYC_Pos
 (16U)

	)

1142 
	#RCC_CIR_LSIRDYC_Msk
 (0x1UL << 
RCC_CIR_LSIRDYC_Pos
Ë

	)

1143 
	#RCC_CIR_LSIRDYC
 
RCC_CIR_LSIRDYC_Msk


	)

1144 
	#RCC_CIR_LSERDYC_Pos
 (17U)

	)

1145 
	#RCC_CIR_LSERDYC_Msk
 (0x1UL << 
RCC_CIR_LSERDYC_Pos
Ë

	)

1146 
	#RCC_CIR_LSERDYC
 
RCC_CIR_LSERDYC_Msk


	)

1147 
	#RCC_CIR_HSIRDYC_Pos
 (18U)

	)

1148 
	#RCC_CIR_HSIRDYC_Msk
 (0x1UL << 
RCC_CIR_HSIRDYC_Pos
Ë

	)

1149 
	#RCC_CIR_HSIRDYC
 
RCC_CIR_HSIRDYC_Msk


	)

1150 
	#RCC_CIR_HSERDYC_Pos
 (19U)

	)

1151 
	#RCC_CIR_HSERDYC_Msk
 (0x1UL << 
RCC_CIR_HSERDYC_Pos
Ë

	)

1152 
	#RCC_CIR_HSERDYC
 
RCC_CIR_HSERDYC_Msk


	)

1153 
	#RCC_CIR_PLLRDYC_Pos
 (20U)

	)

1154 
	#RCC_CIR_PLLRDYC_Msk
 (0x1UL << 
RCC_CIR_PLLRDYC_Pos
Ë

	)

1155 
	#RCC_CIR_PLLRDYC
 
RCC_CIR_PLLRDYC_Msk


	)

1156 
	#RCC_CIR_CSSC_Pos
 (23U)

	)

1157 
	#RCC_CIR_CSSC_Msk
 (0x1UL << 
RCC_CIR_CSSC_Pos
Ë

	)

1158 
	#RCC_CIR_CSSC
 
RCC_CIR_CSSC_Msk


	)

1162 
	#RCC_APB2RSTR_AFIORST_Pos
 (0U)

	)

1163 
	#RCC_APB2RSTR_AFIORST_Msk
 (0x1UL << 
RCC_APB2RSTR_AFIORST_Pos
Ë

	)

1164 
	#RCC_APB2RSTR_AFIORST
 
RCC_APB2RSTR_AFIORST_Msk


	)

1165 
	#RCC_APB2RSTR_IOPARST_Pos
 (2U)

	)

1166 
	#RCC_APB2RSTR_IOPARST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPARST_Pos
Ë

	)

1167 
	#RCC_APB2RSTR_IOPARST
 
RCC_APB2RSTR_IOPARST_Msk


	)

1168 
	#RCC_APB2RSTR_IOPBRST_Pos
 (3U)

	)

1169 
	#RCC_APB2RSTR_IOPBRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPBRST_Pos
Ë

	)

1170 
	#RCC_APB2RSTR_IOPBRST
 
RCC_APB2RSTR_IOPBRST_Msk


	)

1171 
	#RCC_APB2RSTR_IOPCRST_Pos
 (4U)

	)

1172 
	#RCC_APB2RSTR_IOPCRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPCRST_Pos
Ë

	)

1173 
	#RCC_APB2RSTR_IOPCRST
 
RCC_APB2RSTR_IOPCRST_Msk


	)

1174 
	#RCC_APB2RSTR_IOPDRST_Pos
 (5U)

	)

1175 
	#RCC_APB2RSTR_IOPDRST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPDRST_Pos
Ë

	)

1176 
	#RCC_APB2RSTR_IOPDRST
 
RCC_APB2RSTR_IOPDRST_Msk


	)

1177 
	#RCC_APB2RSTR_ADC1RST_Pos
 (9U)

	)

1178 
	#RCC_APB2RSTR_ADC1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_ADC1RST_Pos
Ë

	)

1179 
	#RCC_APB2RSTR_ADC1RST
 
RCC_APB2RSTR_ADC1RST_Msk


	)

1181 
	#RCC_APB2RSTR_ADC2RST_Pos
 (10U)

	)

1182 
	#RCC_APB2RSTR_ADC2RST_Msk
 (0x1UL << 
RCC_APB2RSTR_ADC2RST_Pos
Ë

	)

1183 
	#RCC_APB2RSTR_ADC2RST
 
RCC_APB2RSTR_ADC2RST_Msk


	)

1185 
	#RCC_APB2RSTR_TIM1RST_Pos
 (11U)

	)

1186 
	#RCC_APB2RSTR_TIM1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_TIM1RST_Pos
Ë

	)

1187 
	#RCC_APB2RSTR_TIM1RST
 
RCC_APB2RSTR_TIM1RST_Msk


	)

1188 
	#RCC_APB2RSTR_SPI1RST_Pos
 (12U)

	)

1189 
	#RCC_APB2RSTR_SPI1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_SPI1RST_Pos
Ë

	)

1190 
	#RCC_APB2RSTR_SPI1RST
 
RCC_APB2RSTR_SPI1RST_Msk


	)

1191 
	#RCC_APB2RSTR_USART1RST_Pos
 (14U)

	)

1192 
	#RCC_APB2RSTR_USART1RST_Msk
 (0x1UL << 
RCC_APB2RSTR_USART1RST_Pos
Ë

	)

1193 
	#RCC_APB2RSTR_USART1RST
 
RCC_APB2RSTR_USART1RST_Msk


	)

1196 
	#RCC_APB2RSTR_IOPERST_Pos
 (6U)

	)

1197 
	#RCC_APB2RSTR_IOPERST_Msk
 (0x1UL << 
RCC_APB2RSTR_IOPERST_Pos
Ë

	)

1198 
	#RCC_APB2RSTR_IOPERST
 
RCC_APB2RSTR_IOPERST_Msk


	)

1204 
	#RCC_APB1RSTR_TIM2RST_Pos
 (0U)

	)

1205 
	#RCC_APB1RSTR_TIM2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM2RST_Pos
Ë

	)

1206 
	#RCC_APB1RSTR_TIM2RST
 
RCC_APB1RSTR_TIM2RST_Msk


	)

1207 
	#RCC_APB1RSTR_TIM3RST_Pos
 (1U)

	)

1208 
	#RCC_APB1RSTR_TIM3RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM3RST_Pos
Ë

	)

1209 
	#RCC_APB1RSTR_TIM3RST
 
RCC_APB1RSTR_TIM3RST_Msk


	)

1210 
	#RCC_APB1RSTR_WWDGRST_Pos
 (11U)

	)

1211 
	#RCC_APB1RSTR_WWDGRST_Msk
 (0x1UL << 
RCC_APB1RSTR_WWDGRST_Pos
Ë

	)

1212 
	#RCC_APB1RSTR_WWDGRST
 
RCC_APB1RSTR_WWDGRST_Msk


	)

1213 
	#RCC_APB1RSTR_USART2RST_Pos
 (17U)

	)

1214 
	#RCC_APB1RSTR_USART2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_USART2RST_Pos
Ë

	)

1215 
	#RCC_APB1RSTR_USART2RST
 
RCC_APB1RSTR_USART2RST_Msk


	)

1216 
	#RCC_APB1RSTR_I2C1RST_Pos
 (21U)

	)

1217 
	#RCC_APB1RSTR_I2C1RST_Msk
 (0x1UL << 
RCC_APB1RSTR_I2C1RST_Pos
Ë

	)

1218 
	#RCC_APB1RSTR_I2C1RST
 
RCC_APB1RSTR_I2C1RST_Msk


	)

1220 
	#RCC_APB1RSTR_CAN1RST_Pos
 (25U)

	)

1221 
	#RCC_APB1RSTR_CAN1RST_Msk
 (0x1UL << 
RCC_APB1RSTR_CAN1RST_Pos
Ë

	)

1222 
	#RCC_APB1RSTR_CAN1RST
 
RCC_APB1RSTR_CAN1RST_Msk


	)

1224 
	#RCC_APB1RSTR_BKPRST_Pos
 (27U)

	)

1225 
	#RCC_APB1RSTR_BKPRST_Msk
 (0x1UL << 
RCC_APB1RSTR_BKPRST_Pos
Ë

	)

1226 
	#RCC_APB1RSTR_BKPRST
 
RCC_APB1RSTR_BKPRST_Msk


	)

1227 
	#RCC_APB1RSTR_PWRRST_Pos
 (28U)

	)

1228 
	#RCC_APB1RSTR_PWRRST_Msk
 (0x1UL << 
RCC_APB1RSTR_PWRRST_Pos
Ë

	)

1229 
	#RCC_APB1RSTR_PWRRST
 
RCC_APB1RSTR_PWRRST_Msk


	)

1231 
	#RCC_APB1RSTR_TIM4RST_Pos
 (2U)

	)

1232 
	#RCC_APB1RSTR_TIM4RST_Msk
 (0x1UL << 
RCC_APB1RSTR_TIM4RST_Pos
Ë

	)

1233 
	#RCC_APB1RSTR_TIM4RST
 
RCC_APB1RSTR_TIM4RST_Msk


	)

1234 
	#RCC_APB1RSTR_SPI2RST_Pos
 (14U)

	)

1235 
	#RCC_APB1RSTR_SPI2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_SPI2RST_Pos
Ë

	)

1236 
	#RCC_APB1RSTR_SPI2RST
 
RCC_APB1RSTR_SPI2RST_Msk


	)

1237 
	#RCC_APB1RSTR_USART3RST_Pos
 (18U)

	)

1238 
	#RCC_APB1RSTR_USART3RST_Msk
 (0x1UL << 
RCC_APB1RSTR_USART3RST_Pos
Ë

	)

1239 
	#RCC_APB1RSTR_USART3RST
 
RCC_APB1RSTR_USART3RST_Msk


	)

1240 
	#RCC_APB1RSTR_I2C2RST_Pos
 (22U)

	)

1241 
	#RCC_APB1RSTR_I2C2RST_Msk
 (0x1UL << 
RCC_APB1RSTR_I2C2RST_Pos
Ë

	)

1242 
	#RCC_APB1RSTR_I2C2RST
 
RCC_APB1RSTR_I2C2RST_Msk


	)

1244 
	#RCC_APB1RSTR_USBRST_Pos
 (23U)

	)

1245 
	#RCC_APB1RSTR_USBRST_Msk
 (0x1UL << 
RCC_APB1RSTR_USBRST_Pos
Ë

	)

1246 
	#RCC_APB1RSTR_USBRST
 
RCC_APB1RSTR_USBRST_Msk


	)

1254 
	#RCC_AHBENR_DMA1EN_Pos
 (0U)

	)

1255 
	#RCC_AHBENR_DMA1EN_Msk
 (0x1UL << 
RCC_AHBENR_DMA1EN_Pos
Ë

	)

1256 
	#RCC_AHBENR_DMA1EN
 
RCC_AHBENR_DMA1EN_Msk


	)

1257 
	#RCC_AHBENR_SRAMEN_Pos
 (2U)

	)

1258 
	#RCC_AHBENR_SRAMEN_Msk
 (0x1UL << 
RCC_AHBENR_SRAMEN_Pos
Ë

	)

1259 
	#RCC_AHBENR_SRAMEN
 
RCC_AHBENR_SRAMEN_Msk


	)

1260 
	#RCC_AHBENR_FLITFEN_Pos
 (4U)

	)

1261 
	#RCC_AHBENR_FLITFEN_Msk
 (0x1UL << 
RCC_AHBENR_FLITFEN_Pos
Ë

	)

1262 
	#RCC_AHBENR_FLITFEN
 
RCC_AHBENR_FLITFEN_Msk


	)

1263 
	#RCC_AHBENR_CRCEN_Pos
 (6U)

	)

1264 
	#RCC_AHBENR_CRCEN_Msk
 (0x1UL << 
RCC_AHBENR_CRCEN_Pos
Ë

	)

1265 
	#RCC_AHBENR_CRCEN
 
RCC_AHBENR_CRCEN_Msk


	)

1271 
	#RCC_APB2ENR_AFIOEN_Pos
 (0U)

	)

1272 
	#RCC_APB2ENR_AFIOEN_Msk
 (0x1UL << 
RCC_APB2ENR_AFIOEN_Pos
Ë

	)

1273 
	#RCC_APB2ENR_AFIOEN
 
RCC_APB2ENR_AFIOEN_Msk


	)

1274 
	#RCC_APB2ENR_IOPAEN_Pos
 (2U)

	)

1275 
	#RCC_APB2ENR_IOPAEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPAEN_Pos
Ë

	)

1276 
	#RCC_APB2ENR_IOPAEN
 
RCC_APB2ENR_IOPAEN_Msk


	)

1277 
	#RCC_APB2ENR_IOPBEN_Pos
 (3U)

	)

1278 
	#RCC_APB2ENR_IOPBEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPBEN_Pos
Ë

	)

1279 
	#RCC_APB2ENR_IOPBEN
 
RCC_APB2ENR_IOPBEN_Msk


	)

1280 
	#RCC_APB2ENR_IOPCEN_Pos
 (4U)

	)

1281 
	#RCC_APB2ENR_IOPCEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPCEN_Pos
Ë

	)

1282 
	#RCC_APB2ENR_IOPCEN
 
RCC_APB2ENR_IOPCEN_Msk


	)

1283 
	#RCC_APB2ENR_IOPDEN_Pos
 (5U)

	)

1284 
	#RCC_APB2ENR_IOPDEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPDEN_Pos
Ë

	)

1285 
	#RCC_APB2ENR_IOPDEN
 
RCC_APB2ENR_IOPDEN_Msk


	)

1286 
	#RCC_APB2ENR_ADC1EN_Pos
 (9U)

	)

1287 
	#RCC_APB2ENR_ADC1EN_Msk
 (0x1UL << 
RCC_APB2ENR_ADC1EN_Pos
Ë

	)

1288 
	#RCC_APB2ENR_ADC1EN
 
RCC_APB2ENR_ADC1EN_Msk


	)

1290 
	#RCC_APB2ENR_ADC2EN_Pos
 (10U)

	)

1291 
	#RCC_APB2ENR_ADC2EN_Msk
 (0x1UL << 
RCC_APB2ENR_ADC2EN_Pos
Ë

	)

1292 
	#RCC_APB2ENR_ADC2EN
 
RCC_APB2ENR_ADC2EN_Msk


	)

1294 
	#RCC_APB2ENR_TIM1EN_Pos
 (11U)

	)

1295 
	#RCC_APB2ENR_TIM1EN_Msk
 (0x1UL << 
RCC_APB2ENR_TIM1EN_Pos
Ë

	)

1296 
	#RCC_APB2ENR_TIM1EN
 
RCC_APB2ENR_TIM1EN_Msk


	)

1297 
	#RCC_APB2ENR_SPI1EN_Pos
 (12U)

	)

1298 
	#RCC_APB2ENR_SPI1EN_Msk
 (0x1UL << 
RCC_APB2ENR_SPI1EN_Pos
Ë

	)

1299 
	#RCC_APB2ENR_SPI1EN
 
RCC_APB2ENR_SPI1EN_Msk


	)

1300 
	#RCC_APB2ENR_USART1EN_Pos
 (14U)

	)

1301 
	#RCC_APB2ENR_USART1EN_Msk
 (0x1UL << 
RCC_APB2ENR_USART1EN_Pos
Ë

	)

1302 
	#RCC_APB2ENR_USART1EN
 
RCC_APB2ENR_USART1EN_Msk


	)

1305 
	#RCC_APB2ENR_IOPEEN_Pos
 (6U)

	)

1306 
	#RCC_APB2ENR_IOPEEN_Msk
 (0x1UL << 
RCC_APB2ENR_IOPEEN_Pos
Ë

	)

1307 
	#RCC_APB2ENR_IOPEEN
 
RCC_APB2ENR_IOPEEN_Msk


	)

1313 
	#RCC_APB1ENR_TIM2EN_Pos
 (0U)

	)

1314 
	#RCC_APB1ENR_TIM2EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM2EN_Pos
Ë

	)

1315 
	#RCC_APB1ENR_TIM2EN
 
RCC_APB1ENR_TIM2EN_Msk


	)

1316 
	#RCC_APB1ENR_TIM3EN_Pos
 (1U)

	)

1317 
	#RCC_APB1ENR_TIM3EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM3EN_Pos
Ë

	)

1318 
	#RCC_APB1ENR_TIM3EN
 
RCC_APB1ENR_TIM3EN_Msk


	)

1319 
	#RCC_APB1ENR_WWDGEN_Pos
 (11U)

	)

1320 
	#RCC_APB1ENR_WWDGEN_Msk
 (0x1UL << 
RCC_APB1ENR_WWDGEN_Pos
Ë

	)

1321 
	#RCC_APB1ENR_WWDGEN
 
RCC_APB1ENR_WWDGEN_Msk


	)

1322 
	#RCC_APB1ENR_USART2EN_Pos
 (17U)

	)

1323 
	#RCC_APB1ENR_USART2EN_Msk
 (0x1UL << 
RCC_APB1ENR_USART2EN_Pos
Ë

	)

1324 
	#RCC_APB1ENR_USART2EN
 
RCC_APB1ENR_USART2EN_Msk


	)

1325 
	#RCC_APB1ENR_I2C1EN_Pos
 (21U)

	)

1326 
	#RCC_APB1ENR_I2C1EN_Msk
 (0x1UL << 
RCC_APB1ENR_I2C1EN_Pos
Ë

	)

1327 
	#RCC_APB1ENR_I2C1EN
 
RCC_APB1ENR_I2C1EN_Msk


	)

1329 
	#RCC_APB1ENR_CAN1EN_Pos
 (25U)

	)

1330 
	#RCC_APB1ENR_CAN1EN_Msk
 (0x1UL << 
RCC_APB1ENR_CAN1EN_Pos
Ë

	)

1331 
	#RCC_APB1ENR_CAN1EN
 
RCC_APB1ENR_CAN1EN_Msk


	)

1333 
	#RCC_APB1ENR_BKPEN_Pos
 (27U)

	)

1334 
	#RCC_APB1ENR_BKPEN_Msk
 (0x1UL << 
RCC_APB1ENR_BKPEN_Pos
Ë

	)

1335 
	#RCC_APB1ENR_BKPEN
 
RCC_APB1ENR_BKPEN_Msk


	)

1336 
	#RCC_APB1ENR_PWREN_Pos
 (28U)

	)

1337 
	#RCC_APB1ENR_PWREN_Msk
 (0x1UL << 
RCC_APB1ENR_PWREN_Pos
Ë

	)

1338 
	#RCC_APB1ENR_PWREN
 
RCC_APB1ENR_PWREN_Msk


	)

1340 
	#RCC_APB1ENR_TIM4EN_Pos
 (2U)

	)

1341 
	#RCC_APB1ENR_TIM4EN_Msk
 (0x1UL << 
RCC_APB1ENR_TIM4EN_Pos
Ë

	)

1342 
	#RCC_APB1ENR_TIM4EN
 
RCC_APB1ENR_TIM4EN_Msk


	)

1343 
	#RCC_APB1ENR_SPI2EN_Pos
 (14U)

	)

1344 
	#RCC_APB1ENR_SPI2EN_Msk
 (0x1UL << 
RCC_APB1ENR_SPI2EN_Pos
Ë

	)

1345 
	#RCC_APB1ENR_SPI2EN
 
RCC_APB1ENR_SPI2EN_Msk


	)

1346 
	#RCC_APB1ENR_USART3EN_Pos
 (18U)

	)

1347 
	#RCC_APB1ENR_USART3EN_Msk
 (0x1UL << 
RCC_APB1ENR_USART3EN_Pos
Ë

	)

1348 
	#RCC_APB1ENR_USART3EN
 
RCC_APB1ENR_USART3EN_Msk


	)

1349 
	#RCC_APB1ENR_I2C2EN_Pos
 (22U)

	)

1350 
	#RCC_APB1ENR_I2C2EN_Msk
 (0x1UL << 
RCC_APB1ENR_I2C2EN_Pos
Ë

	)

1351 
	#RCC_APB1ENR_I2C2EN
 
RCC_APB1ENR_I2C2EN_Msk


	)

1353 
	#RCC_APB1ENR_USBEN_Pos
 (23U)

	)

1354 
	#RCC_APB1ENR_USBEN_Msk
 (0x1UL << 
RCC_APB1ENR_USBEN_Pos
Ë

	)

1355 
	#RCC_APB1ENR_USBEN
 
RCC_APB1ENR_USBEN_Msk


	)

1363 
	#RCC_BDCR_LSEON_Pos
 (0U)

	)

1364 
	#RCC_BDCR_LSEON_Msk
 (0x1UL << 
RCC_BDCR_LSEON_Pos
Ë

	)

1365 
	#RCC_BDCR_LSEON
 
RCC_BDCR_LSEON_Msk


	)

1366 
	#RCC_BDCR_LSERDY_Pos
 (1U)

	)

1367 
	#RCC_BDCR_LSERDY_Msk
 (0x1UL << 
RCC_BDCR_LSERDY_Pos
Ë

	)

1368 
	#RCC_BDCR_LSERDY
 
RCC_BDCR_LSERDY_Msk


	)

1369 
	#RCC_BDCR_LSEBYP_Pos
 (2U)

	)

1370 
	#RCC_BDCR_LSEBYP_Msk
 (0x1UL << 
RCC_BDCR_LSEBYP_Pos
Ë

	)

1371 
	#RCC_BDCR_LSEBYP
 
RCC_BDCR_LSEBYP_Msk


	)

1373 
	#RCC_BDCR_RTCSEL_Pos
 (8U)

	)

1374 
	#RCC_BDCR_RTCSEL_Msk
 (0x3UL << 
RCC_BDCR_RTCSEL_Pos
Ë

	)

1375 
	#RCC_BDCR_RTCSEL
 
RCC_BDCR_RTCSEL_Msk


	)

1376 
	#RCC_BDCR_RTCSEL_0
 (0x1UL << 
RCC_BDCR_RTCSEL_Pos
Ë

	)

1377 
	#RCC_BDCR_RTCSEL_1
 (0x2UL << 
RCC_BDCR_RTCSEL_Pos
Ë

	)

1380 
	#RCC_BDCR_RTCSEL_NOCLOCK
 0x00000000U

	)

1381 
	#RCC_BDCR_RTCSEL_LSE
 0x00000100U

	)

1382 
	#RCC_BDCR_RTCSEL_LSI
 0x00000200U

	)

1383 
	#RCC_BDCR_RTCSEL_HSE
 0x00000300U

	)

1385 
	#RCC_BDCR_RTCEN_Pos
 (15U)

	)

1386 
	#RCC_BDCR_RTCEN_Msk
 (0x1UL << 
RCC_BDCR_RTCEN_Pos
Ë

	)

1387 
	#RCC_BDCR_RTCEN
 
RCC_BDCR_RTCEN_Msk


	)

1388 
	#RCC_BDCR_BDRST_Pos
 (16U)

	)

1389 
	#RCC_BDCR_BDRST_Msk
 (0x1UL << 
RCC_BDCR_BDRST_Pos
Ë

	)

1390 
	#RCC_BDCR_BDRST
 
RCC_BDCR_BDRST_Msk


	)

1393 
	#RCC_CSR_LSION_Pos
 (0U)

	)

1394 
	#RCC_CSR_LSION_Msk
 (0x1UL << 
RCC_CSR_LSION_Pos
Ë

	)

1395 
	#RCC_CSR_LSION
 
RCC_CSR_LSION_Msk


	)

1396 
	#RCC_CSR_LSIRDY_Pos
 (1U)

	)

1397 
	#RCC_CSR_LSIRDY_Msk
 (0x1UL << 
RCC_CSR_LSIRDY_Pos
Ë

	)

1398 
	#RCC_CSR_LSIRDY
 
RCC_CSR_LSIRDY_Msk


	)

1399 
	#RCC_CSR_RMVF_Pos
 (24U)

	)

1400 
	#RCC_CSR_RMVF_Msk
 (0x1UL << 
RCC_CSR_RMVF_Pos
Ë

	)

1401 
	#RCC_CSR_RMVF
 
RCC_CSR_RMVF_Msk


	)

1402 
	#RCC_CSR_PINRSTF_Pos
 (26U)

	)

1403 
	#RCC_CSR_PINRSTF_Msk
 (0x1UL << 
RCC_CSR_PINRSTF_Pos
Ë

	)

1404 
	#RCC_CSR_PINRSTF
 
RCC_CSR_PINRSTF_Msk


	)

1405 
	#RCC_CSR_PORRSTF_Pos
 (27U)

	)

1406 
	#RCC_CSR_PORRSTF_Msk
 (0x1UL << 
RCC_CSR_PORRSTF_Pos
Ë

	)

1407 
	#RCC_CSR_PORRSTF
 
RCC_CSR_PORRSTF_Msk


	)

1408 
	#RCC_CSR_SFTRSTF_Pos
 (28U)

	)

1409 
	#RCC_CSR_SFTRSTF_Msk
 (0x1UL << 
RCC_CSR_SFTRSTF_Pos
Ë

	)

1410 
	#RCC_CSR_SFTRSTF
 
RCC_CSR_SFTRSTF_Msk


	)

1411 
	#RCC_CSR_IWDGRSTF_Pos
 (29U)

	)

1412 
	#RCC_CSR_IWDGRSTF_Msk
 (0x1UL << 
RCC_CSR_IWDGRSTF_Pos
Ë

	)

1413 
	#RCC_CSR_IWDGRSTF
 
RCC_CSR_IWDGRSTF_Msk


	)

1414 
	#RCC_CSR_WWDGRSTF_Pos
 (30U)

	)

1415 
	#RCC_CSR_WWDGRSTF_Msk
 (0x1UL << 
RCC_CSR_WWDGRSTF_Pos
Ë

	)

1416 
	#RCC_CSR_WWDGRSTF
 
RCC_CSR_WWDGRSTF_Msk


	)

1417 
	#RCC_CSR_LPWRRSTF_Pos
 (31U)

	)

1418 
	#RCC_CSR_LPWRRSTF_Msk
 (0x1UL << 
RCC_CSR_LPWRRSTF_Pos
Ë

	)

1419 
	#RCC_CSR_LPWRRSTF
 
RCC_CSR_LPWRRSTF_Msk


	)

1430 
	#GPIO_CRL_MODE_Pos
 (0U)

	)

1431 
	#GPIO_CRL_MODE_Msk
 (0x33333333UL << 
GPIO_CRL_MODE_Pos
Ë

	)

1432 
	#GPIO_CRL_MODE
 
GPIO_CRL_MODE_Msk


	)

1434 
	#GPIO_CRL_MODE0_Pos
 (0U)

	)

1435 
	#GPIO_CRL_MODE0_Msk
 (0x3UL << 
GPIO_CRL_MODE0_Pos
Ë

	)

1436 
	#GPIO_CRL_MODE0
 
GPIO_CRL_MODE0_Msk


	)

1437 
	#GPIO_CRL_MODE0_0
 (0x1UL << 
GPIO_CRL_MODE0_Pos
Ë

	)

1438 
	#GPIO_CRL_MODE0_1
 (0x2UL << 
GPIO_CRL_MODE0_Pos
Ë

	)

1440 
	#GPIO_CRL_MODE1_Pos
 (4U)

	)

1441 
	#GPIO_CRL_MODE1_Msk
 (0x3UL << 
GPIO_CRL_MODE1_Pos
Ë

	)

1442 
	#GPIO_CRL_MODE1
 
GPIO_CRL_MODE1_Msk


	)

1443 
	#GPIO_CRL_MODE1_0
 (0x1UL << 
GPIO_CRL_MODE1_Pos
Ë

	)

1444 
	#GPIO_CRL_MODE1_1
 (0x2UL << 
GPIO_CRL_MODE1_Pos
Ë

	)

1446 
	#GPIO_CRL_MODE2_Pos
 (8U)

	)

1447 
	#GPIO_CRL_MODE2_Msk
 (0x3UL << 
GPIO_CRL_MODE2_Pos
Ë

	)

1448 
	#GPIO_CRL_MODE2
 
GPIO_CRL_MODE2_Msk


	)

1449 
	#GPIO_CRL_MODE2_0
 (0x1UL << 
GPIO_CRL_MODE2_Pos
Ë

	)

1450 
	#GPIO_CRL_MODE2_1
 (0x2UL << 
GPIO_CRL_MODE2_Pos
Ë

	)

1452 
	#GPIO_CRL_MODE3_Pos
 (12U)

	)

1453 
	#GPIO_CRL_MODE3_Msk
 (0x3UL << 
GPIO_CRL_MODE3_Pos
Ë

	)

1454 
	#GPIO_CRL_MODE3
 
GPIO_CRL_MODE3_Msk


	)

1455 
	#GPIO_CRL_MODE3_0
 (0x1UL << 
GPIO_CRL_MODE3_Pos
Ë

	)

1456 
	#GPIO_CRL_MODE3_1
 (0x2UL << 
GPIO_CRL_MODE3_Pos
Ë

	)

1458 
	#GPIO_CRL_MODE4_Pos
 (16U)

	)

1459 
	#GPIO_CRL_MODE4_Msk
 (0x3UL << 
GPIO_CRL_MODE4_Pos
Ë

	)

1460 
	#GPIO_CRL_MODE4
 
GPIO_CRL_MODE4_Msk


	)

1461 
	#GPIO_CRL_MODE4_0
 (0x1UL << 
GPIO_CRL_MODE4_Pos
Ë

	)

1462 
	#GPIO_CRL_MODE4_1
 (0x2UL << 
GPIO_CRL_MODE4_Pos
Ë

	)

1464 
	#GPIO_CRL_MODE5_Pos
 (20U)

	)

1465 
	#GPIO_CRL_MODE5_Msk
 (0x3UL << 
GPIO_CRL_MODE5_Pos
Ë

	)

1466 
	#GPIO_CRL_MODE5
 
GPIO_CRL_MODE5_Msk


	)

1467 
	#GPIO_CRL_MODE5_0
 (0x1UL << 
GPIO_CRL_MODE5_Pos
Ë

	)

1468 
	#GPIO_CRL_MODE5_1
 (0x2UL << 
GPIO_CRL_MODE5_Pos
Ë

	)

1470 
	#GPIO_CRL_MODE6_Pos
 (24U)

	)

1471 
	#GPIO_CRL_MODE6_Msk
 (0x3UL << 
GPIO_CRL_MODE6_Pos
Ë

	)

1472 
	#GPIO_CRL_MODE6
 
GPIO_CRL_MODE6_Msk


	)

1473 
	#GPIO_CRL_MODE6_0
 (0x1UL << 
GPIO_CRL_MODE6_Pos
Ë

	)

1474 
	#GPIO_CRL_MODE6_1
 (0x2UL << 
GPIO_CRL_MODE6_Pos
Ë

	)

1476 
	#GPIO_CRL_MODE7_Pos
 (28U)

	)

1477 
	#GPIO_CRL_MODE7_Msk
 (0x3UL << 
GPIO_CRL_MODE7_Pos
Ë

	)

1478 
	#GPIO_CRL_MODE7
 
GPIO_CRL_MODE7_Msk


	)

1479 
	#GPIO_CRL_MODE7_0
 (0x1UL << 
GPIO_CRL_MODE7_Pos
Ë

	)

1480 
	#GPIO_CRL_MODE7_1
 (0x2UL << 
GPIO_CRL_MODE7_Pos
Ë

	)

1482 
	#GPIO_CRL_CNF_Pos
 (2U)

	)

1483 
	#GPIO_CRL_CNF_Msk
 (0x33333333UL << 
GPIO_CRL_CNF_Pos
Ë

	)

1484 
	#GPIO_CRL_CNF
 
GPIO_CRL_CNF_Msk


	)

1486 
	#GPIO_CRL_CNF0_Pos
 (2U)

	)

1487 
	#GPIO_CRL_CNF0_Msk
 (0x3UL << 
GPIO_CRL_CNF0_Pos
Ë

	)

1488 
	#GPIO_CRL_CNF0
 
GPIO_CRL_CNF0_Msk


	)

1489 
	#GPIO_CRL_CNF0_0
 (0x1UL << 
GPIO_CRL_CNF0_Pos
Ë

	)

1490 
	#GPIO_CRL_CNF0_1
 (0x2UL << 
GPIO_CRL_CNF0_Pos
Ë

	)

1492 
	#GPIO_CRL_CNF1_Pos
 (6U)

	)

1493 
	#GPIO_CRL_CNF1_Msk
 (0x3UL << 
GPIO_CRL_CNF1_Pos
Ë

	)

1494 
	#GPIO_CRL_CNF1
 
GPIO_CRL_CNF1_Msk


	)

1495 
	#GPIO_CRL_CNF1_0
 (0x1UL << 
GPIO_CRL_CNF1_Pos
Ë

	)

1496 
	#GPIO_CRL_CNF1_1
 (0x2UL << 
GPIO_CRL_CNF1_Pos
Ë

	)

1498 
	#GPIO_CRL_CNF2_Pos
 (10U)

	)

1499 
	#GPIO_CRL_CNF2_Msk
 (0x3UL << 
GPIO_CRL_CNF2_Pos
Ë

	)

1500 
	#GPIO_CRL_CNF2
 
GPIO_CRL_CNF2_Msk


	)

1501 
	#GPIO_CRL_CNF2_0
 (0x1UL << 
GPIO_CRL_CNF2_Pos
Ë

	)

1502 
	#GPIO_CRL_CNF2_1
 (0x2UL << 
GPIO_CRL_CNF2_Pos
Ë

	)

1504 
	#GPIO_CRL_CNF3_Pos
 (14U)

	)

1505 
	#GPIO_CRL_CNF3_Msk
 (0x3UL << 
GPIO_CRL_CNF3_Pos
Ë

	)

1506 
	#GPIO_CRL_CNF3
 
GPIO_CRL_CNF3_Msk


	)

1507 
	#GPIO_CRL_CNF3_0
 (0x1UL << 
GPIO_CRL_CNF3_Pos
Ë

	)

1508 
	#GPIO_CRL_CNF3_1
 (0x2UL << 
GPIO_CRL_CNF3_Pos
Ë

	)

1510 
	#GPIO_CRL_CNF4_Pos
 (18U)

	)

1511 
	#GPIO_CRL_CNF4_Msk
 (0x3UL << 
GPIO_CRL_CNF4_Pos
Ë

	)

1512 
	#GPIO_CRL_CNF4
 
GPIO_CRL_CNF4_Msk


	)

1513 
	#GPIO_CRL_CNF4_0
 (0x1UL << 
GPIO_CRL_CNF4_Pos
Ë

	)

1514 
	#GPIO_CRL_CNF4_1
 (0x2UL << 
GPIO_CRL_CNF4_Pos
Ë

	)

1516 
	#GPIO_CRL_CNF5_Pos
 (22U)

	)

1517 
	#GPIO_CRL_CNF5_Msk
 (0x3UL << 
GPIO_CRL_CNF5_Pos
Ë

	)

1518 
	#GPIO_CRL_CNF5
 
GPIO_CRL_CNF5_Msk


	)

1519 
	#GPIO_CRL_CNF5_0
 (0x1UL << 
GPIO_CRL_CNF5_Pos
Ë

	)

1520 
	#GPIO_CRL_CNF5_1
 (0x2UL << 
GPIO_CRL_CNF5_Pos
Ë

	)

1522 
	#GPIO_CRL_CNF6_Pos
 (26U)

	)

1523 
	#GPIO_CRL_CNF6_Msk
 (0x3UL << 
GPIO_CRL_CNF6_Pos
Ë

	)

1524 
	#GPIO_CRL_CNF6
 
GPIO_CRL_CNF6_Msk


	)

1525 
	#GPIO_CRL_CNF6_0
 (0x1UL << 
GPIO_CRL_CNF6_Pos
Ë

	)

1526 
	#GPIO_CRL_CNF6_1
 (0x2UL << 
GPIO_CRL_CNF6_Pos
Ë

	)

1528 
	#GPIO_CRL_CNF7_Pos
 (30U)

	)

1529 
	#GPIO_CRL_CNF7_Msk
 (0x3UL << 
GPIO_CRL_CNF7_Pos
Ë

	)

1530 
	#GPIO_CRL_CNF7
 
GPIO_CRL_CNF7_Msk


	)

1531 
	#GPIO_CRL_CNF7_0
 (0x1UL << 
GPIO_CRL_CNF7_Pos
Ë

	)

1532 
	#GPIO_CRL_CNF7_1
 (0x2UL << 
GPIO_CRL_CNF7_Pos
Ë

	)

1535 
	#GPIO_CRH_MODE_Pos
 (0U)

	)

1536 
	#GPIO_CRH_MODE_Msk
 (0x33333333UL << 
GPIO_CRH_MODE_Pos
Ë

	)

1537 
	#GPIO_CRH_MODE
 
GPIO_CRH_MODE_Msk


	)

1539 
	#GPIO_CRH_MODE8_Pos
 (0U)

	)

1540 
	#GPIO_CRH_MODE8_Msk
 (0x3UL << 
GPIO_CRH_MODE8_Pos
Ë

	)

1541 
	#GPIO_CRH_MODE8
 
GPIO_CRH_MODE8_Msk


	)

1542 
	#GPIO_CRH_MODE8_0
 (0x1UL << 
GPIO_CRH_MODE8_Pos
Ë

	)

1543 
	#GPIO_CRH_MODE8_1
 (0x2UL << 
GPIO_CRH_MODE8_Pos
Ë

	)

1545 
	#GPIO_CRH_MODE9_Pos
 (4U)

	)

1546 
	#GPIO_CRH_MODE9_Msk
 (0x3UL << 
GPIO_CRH_MODE9_Pos
Ë

	)

1547 
	#GPIO_CRH_MODE9
 
GPIO_CRH_MODE9_Msk


	)

1548 
	#GPIO_CRH_MODE9_0
 (0x1UL << 
GPIO_CRH_MODE9_Pos
Ë

	)

1549 
	#GPIO_CRH_MODE9_1
 (0x2UL << 
GPIO_CRH_MODE9_Pos
Ë

	)

1551 
	#GPIO_CRH_MODE10_Pos
 (8U)

	)

1552 
	#GPIO_CRH_MODE10_Msk
 (0x3UL << 
GPIO_CRH_MODE10_Pos
Ë

	)

1553 
	#GPIO_CRH_MODE10
 
GPIO_CRH_MODE10_Msk


	)

1554 
	#GPIO_CRH_MODE10_0
 (0x1UL << 
GPIO_CRH_MODE10_Pos
Ë

	)

1555 
	#GPIO_CRH_MODE10_1
 (0x2UL << 
GPIO_CRH_MODE10_Pos
Ë

	)

1557 
	#GPIO_CRH_MODE11_Pos
 (12U)

	)

1558 
	#GPIO_CRH_MODE11_Msk
 (0x3UL << 
GPIO_CRH_MODE11_Pos
Ë

	)

1559 
	#GPIO_CRH_MODE11
 
GPIO_CRH_MODE11_Msk


	)

1560 
	#GPIO_CRH_MODE11_0
 (0x1UL << 
GPIO_CRH_MODE11_Pos
Ë

	)

1561 
	#GPIO_CRH_MODE11_1
 (0x2UL << 
GPIO_CRH_MODE11_Pos
Ë

	)

1563 
	#GPIO_CRH_MODE12_Pos
 (16U)

	)

1564 
	#GPIO_CRH_MODE12_Msk
 (0x3UL << 
GPIO_CRH_MODE12_Pos
Ë

	)

1565 
	#GPIO_CRH_MODE12
 
GPIO_CRH_MODE12_Msk


	)

1566 
	#GPIO_CRH_MODE12_0
 (0x1UL << 
GPIO_CRH_MODE12_Pos
Ë

	)

1567 
	#GPIO_CRH_MODE12_1
 (0x2UL << 
GPIO_CRH_MODE12_Pos
Ë

	)

1569 
	#GPIO_CRH_MODE13_Pos
 (20U)

	)

1570 
	#GPIO_CRH_MODE13_Msk
 (0x3UL << 
GPIO_CRH_MODE13_Pos
Ë

	)

1571 
	#GPIO_CRH_MODE13
 
GPIO_CRH_MODE13_Msk


	)

1572 
	#GPIO_CRH_MODE13_0
 (0x1UL << 
GPIO_CRH_MODE13_Pos
Ë

	)

1573 
	#GPIO_CRH_MODE13_1
 (0x2UL << 
GPIO_CRH_MODE13_Pos
Ë

	)

1575 
	#GPIO_CRH_MODE14_Pos
 (24U)

	)

1576 
	#GPIO_CRH_MODE14_Msk
 (0x3UL << 
GPIO_CRH_MODE14_Pos
Ë

	)

1577 
	#GPIO_CRH_MODE14
 
GPIO_CRH_MODE14_Msk


	)

1578 
	#GPIO_CRH_MODE14_0
 (0x1UL << 
GPIO_CRH_MODE14_Pos
Ë

	)

1579 
	#GPIO_CRH_MODE14_1
 (0x2UL << 
GPIO_CRH_MODE14_Pos
Ë

	)

1581 
	#GPIO_CRH_MODE15_Pos
 (28U)

	)

1582 
	#GPIO_CRH_MODE15_Msk
 (0x3UL << 
GPIO_CRH_MODE15_Pos
Ë

	)

1583 
	#GPIO_CRH_MODE15
 
GPIO_CRH_MODE15_Msk


	)

1584 
	#GPIO_CRH_MODE15_0
 (0x1UL << 
GPIO_CRH_MODE15_Pos
Ë

	)

1585 
	#GPIO_CRH_MODE15_1
 (0x2UL << 
GPIO_CRH_MODE15_Pos
Ë

	)

1587 
	#GPIO_CRH_CNF_Pos
 (2U)

	)

1588 
	#GPIO_CRH_CNF_Msk
 (0x33333333UL << 
GPIO_CRH_CNF_Pos
Ë

	)

1589 
	#GPIO_CRH_CNF
 
GPIO_CRH_CNF_Msk


	)

1591 
	#GPIO_CRH_CNF8_Pos
 (2U)

	)

1592 
	#GPIO_CRH_CNF8_Msk
 (0x3UL << 
GPIO_CRH_CNF8_Pos
Ë

	)

1593 
	#GPIO_CRH_CNF8
 
GPIO_CRH_CNF8_Msk


	)

1594 
	#GPIO_CRH_CNF8_0
 (0x1UL << 
GPIO_CRH_CNF8_Pos
Ë

	)

1595 
	#GPIO_CRH_CNF8_1
 (0x2UL << 
GPIO_CRH_CNF8_Pos
Ë

	)

1597 
	#GPIO_CRH_CNF9_Pos
 (6U)

	)

1598 
	#GPIO_CRH_CNF9_Msk
 (0x3UL << 
GPIO_CRH_CNF9_Pos
Ë

	)

1599 
	#GPIO_CRH_CNF9
 
GPIO_CRH_CNF9_Msk


	)

1600 
	#GPIO_CRH_CNF9_0
 (0x1UL << 
GPIO_CRH_CNF9_Pos
Ë

	)

1601 
	#GPIO_CRH_CNF9_1
 (0x2UL << 
GPIO_CRH_CNF9_Pos
Ë

	)

1603 
	#GPIO_CRH_CNF10_Pos
 (10U)

	)

1604 
	#GPIO_CRH_CNF10_Msk
 (0x3UL << 
GPIO_CRH_CNF10_Pos
Ë

	)

1605 
	#GPIO_CRH_CNF10
 
GPIO_CRH_CNF10_Msk


	)

1606 
	#GPIO_CRH_CNF10_0
 (0x1UL << 
GPIO_CRH_CNF10_Pos
Ë

	)

1607 
	#GPIO_CRH_CNF10_1
 (0x2UL << 
GPIO_CRH_CNF10_Pos
Ë

	)

1609 
	#GPIO_CRH_CNF11_Pos
 (14U)

	)

1610 
	#GPIO_CRH_CNF11_Msk
 (0x3UL << 
GPIO_CRH_CNF11_Pos
Ë

	)

1611 
	#GPIO_CRH_CNF11
 
GPIO_CRH_CNF11_Msk


	)

1612 
	#GPIO_CRH_CNF11_0
 (0x1UL << 
GPIO_CRH_CNF11_Pos
Ë

	)

1613 
	#GPIO_CRH_CNF11_1
 (0x2UL << 
GPIO_CRH_CNF11_Pos
Ë

	)

1615 
	#GPIO_CRH_CNF12_Pos
 (18U)

	)

1616 
	#GPIO_CRH_CNF12_Msk
 (0x3UL << 
GPIO_CRH_CNF12_Pos
Ë

	)

1617 
	#GPIO_CRH_CNF12
 
GPIO_CRH_CNF12_Msk


	)

1618 
	#GPIO_CRH_CNF12_0
 (0x1UL << 
GPIO_CRH_CNF12_Pos
Ë

	)

1619 
	#GPIO_CRH_CNF12_1
 (0x2UL << 
GPIO_CRH_CNF12_Pos
Ë

	)

1621 
	#GPIO_CRH_CNF13_Pos
 (22U)

	)

1622 
	#GPIO_CRH_CNF13_Msk
 (0x3UL << 
GPIO_CRH_CNF13_Pos
Ë

	)

1623 
	#GPIO_CRH_CNF13
 
GPIO_CRH_CNF13_Msk


	)

1624 
	#GPIO_CRH_CNF13_0
 (0x1UL << 
GPIO_CRH_CNF13_Pos
Ë

	)

1625 
	#GPIO_CRH_CNF13_1
 (0x2UL << 
GPIO_CRH_CNF13_Pos
Ë

	)

1627 
	#GPIO_CRH_CNF14_Pos
 (26U)

	)

1628 
	#GPIO_CRH_CNF14_Msk
 (0x3UL << 
GPIO_CRH_CNF14_Pos
Ë

	)

1629 
	#GPIO_CRH_CNF14
 
GPIO_CRH_CNF14_Msk


	)

1630 
	#GPIO_CRH_CNF14_0
 (0x1UL << 
GPIO_CRH_CNF14_Pos
Ë

	)

1631 
	#GPIO_CRH_CNF14_1
 (0x2UL << 
GPIO_CRH_CNF14_Pos
Ë

	)

1633 
	#GPIO_CRH_CNF15_Pos
 (30U)

	)

1634 
	#GPIO_CRH_CNF15_Msk
 (0x3UL << 
GPIO_CRH_CNF15_Pos
Ë

	)

1635 
	#GPIO_CRH_CNF15
 
GPIO_CRH_CNF15_Msk


	)

1636 
	#GPIO_CRH_CNF15_0
 (0x1UL << 
GPIO_CRH_CNF15_Pos
Ë

	)

1637 
	#GPIO_CRH_CNF15_1
 (0x2UL << 
GPIO_CRH_CNF15_Pos
Ë

	)

1640 
	#GPIO_IDR_IDR0_Pos
 (0U)

	)

1641 
	#GPIO_IDR_IDR0_Msk
 (0x1UL << 
GPIO_IDR_IDR0_Pos
Ë

	)

1642 
	#GPIO_IDR_IDR0
 
GPIO_IDR_IDR0_Msk


	)

1643 
	#GPIO_IDR_IDR1_Pos
 (1U)

	)

1644 
	#GPIO_IDR_IDR1_Msk
 (0x1UL << 
GPIO_IDR_IDR1_Pos
Ë

	)

1645 
	#GPIO_IDR_IDR1
 
GPIO_IDR_IDR1_Msk


	)

1646 
	#GPIO_IDR_IDR2_Pos
 (2U)

	)

1647 
	#GPIO_IDR_IDR2_Msk
 (0x1UL << 
GPIO_IDR_IDR2_Pos
Ë

	)

1648 
	#GPIO_IDR_IDR2
 
GPIO_IDR_IDR2_Msk


	)

1649 
	#GPIO_IDR_IDR3_Pos
 (3U)

	)

1650 
	#GPIO_IDR_IDR3_Msk
 (0x1UL << 
GPIO_IDR_IDR3_Pos
Ë

	)

1651 
	#GPIO_IDR_IDR3
 
GPIO_IDR_IDR3_Msk


	)

1652 
	#GPIO_IDR_IDR4_Pos
 (4U)

	)

1653 
	#GPIO_IDR_IDR4_Msk
 (0x1UL << 
GPIO_IDR_IDR4_Pos
Ë

	)

1654 
	#GPIO_IDR_IDR4
 
GPIO_IDR_IDR4_Msk


	)

1655 
	#GPIO_IDR_IDR5_Pos
 (5U)

	)

1656 
	#GPIO_IDR_IDR5_Msk
 (0x1UL << 
GPIO_IDR_IDR5_Pos
Ë

	)

1657 
	#GPIO_IDR_IDR5
 
GPIO_IDR_IDR5_Msk


	)

1658 
	#GPIO_IDR_IDR6_Pos
 (6U)

	)

1659 
	#GPIO_IDR_IDR6_Msk
 (0x1UL << 
GPIO_IDR_IDR6_Pos
Ë

	)

1660 
	#GPIO_IDR_IDR6
 
GPIO_IDR_IDR6_Msk


	)

1661 
	#GPIO_IDR_IDR7_Pos
 (7U)

	)

1662 
	#GPIO_IDR_IDR7_Msk
 (0x1UL << 
GPIO_IDR_IDR7_Pos
Ë

	)

1663 
	#GPIO_IDR_IDR7
 
GPIO_IDR_IDR7_Msk


	)

1664 
	#GPIO_IDR_IDR8_Pos
 (8U)

	)

1665 
	#GPIO_IDR_IDR8_Msk
 (0x1UL << 
GPIO_IDR_IDR8_Pos
Ë

	)

1666 
	#GPIO_IDR_IDR8
 
GPIO_IDR_IDR8_Msk


	)

1667 
	#GPIO_IDR_IDR9_Pos
 (9U)

	)

1668 
	#GPIO_IDR_IDR9_Msk
 (0x1UL << 
GPIO_IDR_IDR9_Pos
Ë

	)

1669 
	#GPIO_IDR_IDR9
 
GPIO_IDR_IDR9_Msk


	)

1670 
	#GPIO_IDR_IDR10_Pos
 (10U)

	)

1671 
	#GPIO_IDR_IDR10_Msk
 (0x1UL << 
GPIO_IDR_IDR10_Pos
Ë

	)

1672 
	#GPIO_IDR_IDR10
 
GPIO_IDR_IDR10_Msk


	)

1673 
	#GPIO_IDR_IDR11_Pos
 (11U)

	)

1674 
	#GPIO_IDR_IDR11_Msk
 (0x1UL << 
GPIO_IDR_IDR11_Pos
Ë

	)

1675 
	#GPIO_IDR_IDR11
 
GPIO_IDR_IDR11_Msk


	)

1676 
	#GPIO_IDR_IDR12_Pos
 (12U)

	)

1677 
	#GPIO_IDR_IDR12_Msk
 (0x1UL << 
GPIO_IDR_IDR12_Pos
Ë

	)

1678 
	#GPIO_IDR_IDR12
 
GPIO_IDR_IDR12_Msk


	)

1679 
	#GPIO_IDR_IDR13_Pos
 (13U)

	)

1680 
	#GPIO_IDR_IDR13_Msk
 (0x1UL << 
GPIO_IDR_IDR13_Pos
Ë

	)

1681 
	#GPIO_IDR_IDR13
 
GPIO_IDR_IDR13_Msk


	)

1682 
	#GPIO_IDR_IDR14_Pos
 (14U)

	)

1683 
	#GPIO_IDR_IDR14_Msk
 (0x1UL << 
GPIO_IDR_IDR14_Pos
Ë

	)

1684 
	#GPIO_IDR_IDR14
 
GPIO_IDR_IDR14_Msk


	)

1685 
	#GPIO_IDR_IDR15_Pos
 (15U)

	)

1686 
	#GPIO_IDR_IDR15_Msk
 (0x1UL << 
GPIO_IDR_IDR15_Pos
Ë

	)

1687 
	#GPIO_IDR_IDR15
 
GPIO_IDR_IDR15_Msk


	)

1690 
	#GPIO_ODR_ODR0_Pos
 (0U)

	)

1691 
	#GPIO_ODR_ODR0_Msk
 (0x1UL << 
GPIO_ODR_ODR0_Pos
Ë

	)

1692 
	#GPIO_ODR_ODR0
 
GPIO_ODR_ODR0_Msk


	)

1693 
	#GPIO_ODR_ODR1_Pos
 (1U)

	)

1694 
	#GPIO_ODR_ODR1_Msk
 (0x1UL << 
GPIO_ODR_ODR1_Pos
Ë

	)

1695 
	#GPIO_ODR_ODR1
 
GPIO_ODR_ODR1_Msk


	)

1696 
	#GPIO_ODR_ODR2_Pos
 (2U)

	)

1697 
	#GPIO_ODR_ODR2_Msk
 (0x1UL << 
GPIO_ODR_ODR2_Pos
Ë

	)

1698 
	#GPIO_ODR_ODR2
 
GPIO_ODR_ODR2_Msk


	)

1699 
	#GPIO_ODR_ODR3_Pos
 (3U)

	)

1700 
	#GPIO_ODR_ODR3_Msk
 (0x1UL << 
GPIO_ODR_ODR3_Pos
Ë

	)

1701 
	#GPIO_ODR_ODR3
 
GPIO_ODR_ODR3_Msk


	)

1702 
	#GPIO_ODR_ODR4_Pos
 (4U)

	)

1703 
	#GPIO_ODR_ODR4_Msk
 (0x1UL << 
GPIO_ODR_ODR4_Pos
Ë

	)

1704 
	#GPIO_ODR_ODR4
 
GPIO_ODR_ODR4_Msk


	)

1705 
	#GPIO_ODR_ODR5_Pos
 (5U)

	)

1706 
	#GPIO_ODR_ODR5_Msk
 (0x1UL << 
GPIO_ODR_ODR5_Pos
Ë

	)

1707 
	#GPIO_ODR_ODR5
 
GPIO_ODR_ODR5_Msk


	)

1708 
	#GPIO_ODR_ODR6_Pos
 (6U)

	)

1709 
	#GPIO_ODR_ODR6_Msk
 (0x1UL << 
GPIO_ODR_ODR6_Pos
Ë

	)

1710 
	#GPIO_ODR_ODR6
 
GPIO_ODR_ODR6_Msk


	)

1711 
	#GPIO_ODR_ODR7_Pos
 (7U)

	)

1712 
	#GPIO_ODR_ODR7_Msk
 (0x1UL << 
GPIO_ODR_ODR7_Pos
Ë

	)

1713 
	#GPIO_ODR_ODR7
 
GPIO_ODR_ODR7_Msk


	)

1714 
	#GPIO_ODR_ODR8_Pos
 (8U)

	)

1715 
	#GPIO_ODR_ODR8_Msk
 (0x1UL << 
GPIO_ODR_ODR8_Pos
Ë

	)

1716 
	#GPIO_ODR_ODR8
 
GPIO_ODR_ODR8_Msk


	)

1717 
	#GPIO_ODR_ODR9_Pos
 (9U)

	)

1718 
	#GPIO_ODR_ODR9_Msk
 (0x1UL << 
GPIO_ODR_ODR9_Pos
Ë

	)

1719 
	#GPIO_ODR_ODR9
 
GPIO_ODR_ODR9_Msk


	)

1720 
	#GPIO_ODR_ODR10_Pos
 (10U)

	)

1721 
	#GPIO_ODR_ODR10_Msk
 (0x1UL << 
GPIO_ODR_ODR10_Pos
Ë

	)

1722 
	#GPIO_ODR_ODR10
 
GPIO_ODR_ODR10_Msk


	)

1723 
	#GPIO_ODR_ODR11_Pos
 (11U)

	)

1724 
	#GPIO_ODR_ODR11_Msk
 (0x1UL << 
GPIO_ODR_ODR11_Pos
Ë

	)

1725 
	#GPIO_ODR_ODR11
 
GPIO_ODR_ODR11_Msk


	)

1726 
	#GPIO_ODR_ODR12_Pos
 (12U)

	)

1727 
	#GPIO_ODR_ODR12_Msk
 (0x1UL << 
GPIO_ODR_ODR12_Pos
Ë

	)

1728 
	#GPIO_ODR_ODR12
 
GPIO_ODR_ODR12_Msk


	)

1729 
	#GPIO_ODR_ODR13_Pos
 (13U)

	)

1730 
	#GPIO_ODR_ODR13_Msk
 (0x1UL << 
GPIO_ODR_ODR13_Pos
Ë

	)

1731 
	#GPIO_ODR_ODR13
 
GPIO_ODR_ODR13_Msk


	)

1732 
	#GPIO_ODR_ODR14_Pos
 (14U)

	)

1733 
	#GPIO_ODR_ODR14_Msk
 (0x1UL << 
GPIO_ODR_ODR14_Pos
Ë

	)

1734 
	#GPIO_ODR_ODR14
 
GPIO_ODR_ODR14_Msk


	)

1735 
	#GPIO_ODR_ODR15_Pos
 (15U)

	)

1736 
	#GPIO_ODR_ODR15_Msk
 (0x1UL << 
GPIO_ODR_ODR15_Pos
Ë

	)

1737 
	#GPIO_ODR_ODR15
 
GPIO_ODR_ODR15_Msk


	)

1740 
	#GPIO_BSRR_BS0_Pos
 (0U)

	)

1741 
	#GPIO_BSRR_BS0_Msk
 (0x1UL << 
GPIO_BSRR_BS0_Pos
Ë

	)

1742 
	#GPIO_BSRR_BS0
 
GPIO_BSRR_BS0_Msk


	)

1743 
	#GPIO_BSRR_BS1_Pos
 (1U)

	)

1744 
	#GPIO_BSRR_BS1_Msk
 (0x1UL << 
GPIO_BSRR_BS1_Pos
Ë

	)

1745 
	#GPIO_BSRR_BS1
 
GPIO_BSRR_BS1_Msk


	)

1746 
	#GPIO_BSRR_BS2_Pos
 (2U)

	)

1747 
	#GPIO_BSRR_BS2_Msk
 (0x1UL << 
GPIO_BSRR_BS2_Pos
Ë

	)

1748 
	#GPIO_BSRR_BS2
 
GPIO_BSRR_BS2_Msk


	)

1749 
	#GPIO_BSRR_BS3_Pos
 (3U)

	)

1750 
	#GPIO_BSRR_BS3_Msk
 (0x1UL << 
GPIO_BSRR_BS3_Pos
Ë

	)

1751 
	#GPIO_BSRR_BS3
 
GPIO_BSRR_BS3_Msk


	)

1752 
	#GPIO_BSRR_BS4_Pos
 (4U)

	)

1753 
	#GPIO_BSRR_BS4_Msk
 (0x1UL << 
GPIO_BSRR_BS4_Pos
Ë

	)

1754 
	#GPIO_BSRR_BS4
 
GPIO_BSRR_BS4_Msk


	)

1755 
	#GPIO_BSRR_BS5_Pos
 (5U)

	)

1756 
	#GPIO_BSRR_BS5_Msk
 (0x1UL << 
GPIO_BSRR_BS5_Pos
Ë

	)

1757 
	#GPIO_BSRR_BS5
 
GPIO_BSRR_BS5_Msk


	)

1758 
	#GPIO_BSRR_BS6_Pos
 (6U)

	)

1759 
	#GPIO_BSRR_BS6_Msk
 (0x1UL << 
GPIO_BSRR_BS6_Pos
Ë

	)

1760 
	#GPIO_BSRR_BS6
 
GPIO_BSRR_BS6_Msk


	)

1761 
	#GPIO_BSRR_BS7_Pos
 (7U)

	)

1762 
	#GPIO_BSRR_BS7_Msk
 (0x1UL << 
GPIO_BSRR_BS7_Pos
Ë

	)

1763 
	#GPIO_BSRR_BS7
 
GPIO_BSRR_BS7_Msk


	)

1764 
	#GPIO_BSRR_BS8_Pos
 (8U)

	)

1765 
	#GPIO_BSRR_BS8_Msk
 (0x1UL << 
GPIO_BSRR_BS8_Pos
Ë

	)

1766 
	#GPIO_BSRR_BS8
 
GPIO_BSRR_BS8_Msk


	)

1767 
	#GPIO_BSRR_BS9_Pos
 (9U)

	)

1768 
	#GPIO_BSRR_BS9_Msk
 (0x1UL << 
GPIO_BSRR_BS9_Pos
Ë

	)

1769 
	#GPIO_BSRR_BS9
 
GPIO_BSRR_BS9_Msk


	)

1770 
	#GPIO_BSRR_BS10_Pos
 (10U)

	)

1771 
	#GPIO_BSRR_BS10_Msk
 (0x1UL << 
GPIO_BSRR_BS10_Pos
Ë

	)

1772 
	#GPIO_BSRR_BS10
 
GPIO_BSRR_BS10_Msk


	)

1773 
	#GPIO_BSRR_BS11_Pos
 (11U)

	)

1774 
	#GPIO_BSRR_BS11_Msk
 (0x1UL << 
GPIO_BSRR_BS11_Pos
Ë

	)

1775 
	#GPIO_BSRR_BS11
 
GPIO_BSRR_BS11_Msk


	)

1776 
	#GPIO_BSRR_BS12_Pos
 (12U)

	)

1777 
	#GPIO_BSRR_BS12_Msk
 (0x1UL << 
GPIO_BSRR_BS12_Pos
Ë

	)

1778 
	#GPIO_BSRR_BS12
 
GPIO_BSRR_BS12_Msk


	)

1779 
	#GPIO_BSRR_BS13_Pos
 (13U)

	)

1780 
	#GPIO_BSRR_BS13_Msk
 (0x1UL << 
GPIO_BSRR_BS13_Pos
Ë

	)

1781 
	#GPIO_BSRR_BS13
 
GPIO_BSRR_BS13_Msk


	)

1782 
	#GPIO_BSRR_BS14_Pos
 (14U)

	)

1783 
	#GPIO_BSRR_BS14_Msk
 (0x1UL << 
GPIO_BSRR_BS14_Pos
Ë

	)

1784 
	#GPIO_BSRR_BS14
 
GPIO_BSRR_BS14_Msk


	)

1785 
	#GPIO_BSRR_BS15_Pos
 (15U)

	)

1786 
	#GPIO_BSRR_BS15_Msk
 (0x1UL << 
GPIO_BSRR_BS15_Pos
Ë

	)

1787 
	#GPIO_BSRR_BS15
 
GPIO_BSRR_BS15_Msk


	)

1789 
	#GPIO_BSRR_BR0_Pos
 (16U)

	)

1790 
	#GPIO_BSRR_BR0_Msk
 (0x1UL << 
GPIO_BSRR_BR0_Pos
Ë

	)

1791 
	#GPIO_BSRR_BR0
 
GPIO_BSRR_BR0_Msk


	)

1792 
	#GPIO_BSRR_BR1_Pos
 (17U)

	)

1793 
	#GPIO_BSRR_BR1_Msk
 (0x1UL << 
GPIO_BSRR_BR1_Pos
Ë

	)

1794 
	#GPIO_BSRR_BR1
 
GPIO_BSRR_BR1_Msk


	)

1795 
	#GPIO_BSRR_BR2_Pos
 (18U)

	)

1796 
	#GPIO_BSRR_BR2_Msk
 (0x1UL << 
GPIO_BSRR_BR2_Pos
Ë

	)

1797 
	#GPIO_BSRR_BR2
 
GPIO_BSRR_BR2_Msk


	)

1798 
	#GPIO_BSRR_BR3_Pos
 (19U)

	)

1799 
	#GPIO_BSRR_BR3_Msk
 (0x1UL << 
GPIO_BSRR_BR3_Pos
Ë

	)

1800 
	#GPIO_BSRR_BR3
 
GPIO_BSRR_BR3_Msk


	)

1801 
	#GPIO_BSRR_BR4_Pos
 (20U)

	)

1802 
	#GPIO_BSRR_BR4_Msk
 (0x1UL << 
GPIO_BSRR_BR4_Pos
Ë

	)

1803 
	#GPIO_BSRR_BR4
 
GPIO_BSRR_BR4_Msk


	)

1804 
	#GPIO_BSRR_BR5_Pos
 (21U)

	)

1805 
	#GPIO_BSRR_BR5_Msk
 (0x1UL << 
GPIO_BSRR_BR5_Pos
Ë

	)

1806 
	#GPIO_BSRR_BR5
 
GPIO_BSRR_BR5_Msk


	)

1807 
	#GPIO_BSRR_BR6_Pos
 (22U)

	)

1808 
	#GPIO_BSRR_BR6_Msk
 (0x1UL << 
GPIO_BSRR_BR6_Pos
Ë

	)

1809 
	#GPIO_BSRR_BR6
 
GPIO_BSRR_BR6_Msk


	)

1810 
	#GPIO_BSRR_BR7_Pos
 (23U)

	)

1811 
	#GPIO_BSRR_BR7_Msk
 (0x1UL << 
GPIO_BSRR_BR7_Pos
Ë

	)

1812 
	#GPIO_BSRR_BR7
 
GPIO_BSRR_BR7_Msk


	)

1813 
	#GPIO_BSRR_BR8_Pos
 (24U)

	)

1814 
	#GPIO_BSRR_BR8_Msk
 (0x1UL << 
GPIO_BSRR_BR8_Pos
Ë

	)

1815 
	#GPIO_BSRR_BR8
 
GPIO_BSRR_BR8_Msk


	)

1816 
	#GPIO_BSRR_BR9_Pos
 (25U)

	)

1817 
	#GPIO_BSRR_BR9_Msk
 (0x1UL << 
GPIO_BSRR_BR9_Pos
Ë

	)

1818 
	#GPIO_BSRR_BR9
 
GPIO_BSRR_BR9_Msk


	)

1819 
	#GPIO_BSRR_BR10_Pos
 (26U)

	)

1820 
	#GPIO_BSRR_BR10_Msk
 (0x1UL << 
GPIO_BSRR_BR10_Pos
Ë

	)

1821 
	#GPIO_BSRR_BR10
 
GPIO_BSRR_BR10_Msk


	)

1822 
	#GPIO_BSRR_BR11_Pos
 (27U)

	)

1823 
	#GPIO_BSRR_BR11_Msk
 (0x1UL << 
GPIO_BSRR_BR11_Pos
Ë

	)

1824 
	#GPIO_BSRR_BR11
 
GPIO_BSRR_BR11_Msk


	)

1825 
	#GPIO_BSRR_BR12_Pos
 (28U)

	)

1826 
	#GPIO_BSRR_BR12_Msk
 (0x1UL << 
GPIO_BSRR_BR12_Pos
Ë

	)

1827 
	#GPIO_BSRR_BR12
 
GPIO_BSRR_BR12_Msk


	)

1828 
	#GPIO_BSRR_BR13_Pos
 (29U)

	)

1829 
	#GPIO_BSRR_BR13_Msk
 (0x1UL << 
GPIO_BSRR_BR13_Pos
Ë

	)

1830 
	#GPIO_BSRR_BR13
 
GPIO_BSRR_BR13_Msk


	)

1831 
	#GPIO_BSRR_BR14_Pos
 (30U)

	)

1832 
	#GPIO_BSRR_BR14_Msk
 (0x1UL << 
GPIO_BSRR_BR14_Pos
Ë

	)

1833 
	#GPIO_BSRR_BR14
 
GPIO_BSRR_BR14_Msk


	)

1834 
	#GPIO_BSRR_BR15_Pos
 (31U)

	)

1835 
	#GPIO_BSRR_BR15_Msk
 (0x1UL << 
GPIO_BSRR_BR15_Pos
Ë

	)

1836 
	#GPIO_BSRR_BR15
 
GPIO_BSRR_BR15_Msk


	)

1839 
	#GPIO_BRR_BR0_Pos
 (0U)

	)

1840 
	#GPIO_BRR_BR0_Msk
 (0x1UL << 
GPIO_BRR_BR0_Pos
Ë

	)

1841 
	#GPIO_BRR_BR0
 
GPIO_BRR_BR0_Msk


	)

1842 
	#GPIO_BRR_BR1_Pos
 (1U)

	)

1843 
	#GPIO_BRR_BR1_Msk
 (0x1UL << 
GPIO_BRR_BR1_Pos
Ë

	)

1844 
	#GPIO_BRR_BR1
 
GPIO_BRR_BR1_Msk


	)

1845 
	#GPIO_BRR_BR2_Pos
 (2U)

	)

1846 
	#GPIO_BRR_BR2_Msk
 (0x1UL << 
GPIO_BRR_BR2_Pos
Ë

	)

1847 
	#GPIO_BRR_BR2
 
GPIO_BRR_BR2_Msk


	)

1848 
	#GPIO_BRR_BR3_Pos
 (3U)

	)

1849 
	#GPIO_BRR_BR3_Msk
 (0x1UL << 
GPIO_BRR_BR3_Pos
Ë

	)

1850 
	#GPIO_BRR_BR3
 
GPIO_BRR_BR3_Msk


	)

1851 
	#GPIO_BRR_BR4_Pos
 (4U)

	)

1852 
	#GPIO_BRR_BR4_Msk
 (0x1UL << 
GPIO_BRR_BR4_Pos
Ë

	)

1853 
	#GPIO_BRR_BR4
 
GPIO_BRR_BR4_Msk


	)

1854 
	#GPIO_BRR_BR5_Pos
 (5U)

	)

1855 
	#GPIO_BRR_BR5_Msk
 (0x1UL << 
GPIO_BRR_BR5_Pos
Ë

	)

1856 
	#GPIO_BRR_BR5
 
GPIO_BRR_BR5_Msk


	)

1857 
	#GPIO_BRR_BR6_Pos
 (6U)

	)

1858 
	#GPIO_BRR_BR6_Msk
 (0x1UL << 
GPIO_BRR_BR6_Pos
Ë

	)

1859 
	#GPIO_BRR_BR6
 
GPIO_BRR_BR6_Msk


	)

1860 
	#GPIO_BRR_BR7_Pos
 (7U)

	)

1861 
	#GPIO_BRR_BR7_Msk
 (0x1UL << 
GPIO_BRR_BR7_Pos
Ë

	)

1862 
	#GPIO_BRR_BR7
 
GPIO_BRR_BR7_Msk


	)

1863 
	#GPIO_BRR_BR8_Pos
 (8U)

	)

1864 
	#GPIO_BRR_BR8_Msk
 (0x1UL << 
GPIO_BRR_BR8_Pos
Ë

	)

1865 
	#GPIO_BRR_BR8
 
GPIO_BRR_BR8_Msk


	)

1866 
	#GPIO_BRR_BR9_Pos
 (9U)

	)

1867 
	#GPIO_BRR_BR9_Msk
 (0x1UL << 
GPIO_BRR_BR9_Pos
Ë

	)

1868 
	#GPIO_BRR_BR9
 
GPIO_BRR_BR9_Msk


	)

1869 
	#GPIO_BRR_BR10_Pos
 (10U)

	)

1870 
	#GPIO_BRR_BR10_Msk
 (0x1UL << 
GPIO_BRR_BR10_Pos
Ë

	)

1871 
	#GPIO_BRR_BR10
 
GPIO_BRR_BR10_Msk


	)

1872 
	#GPIO_BRR_BR11_Pos
 (11U)

	)

1873 
	#GPIO_BRR_BR11_Msk
 (0x1UL << 
GPIO_BRR_BR11_Pos
Ë

	)

1874 
	#GPIO_BRR_BR11
 
GPIO_BRR_BR11_Msk


	)

1875 
	#GPIO_BRR_BR12_Pos
 (12U)

	)

1876 
	#GPIO_BRR_BR12_Msk
 (0x1UL << 
GPIO_BRR_BR12_Pos
Ë

	)

1877 
	#GPIO_BRR_BR12
 
GPIO_BRR_BR12_Msk


	)

1878 
	#GPIO_BRR_BR13_Pos
 (13U)

	)

1879 
	#GPIO_BRR_BR13_Msk
 (0x1UL << 
GPIO_BRR_BR13_Pos
Ë

	)

1880 
	#GPIO_BRR_BR13
 
GPIO_BRR_BR13_Msk


	)

1881 
	#GPIO_BRR_BR14_Pos
 (14U)

	)

1882 
	#GPIO_BRR_BR14_Msk
 (0x1UL << 
GPIO_BRR_BR14_Pos
Ë

	)

1883 
	#GPIO_BRR_BR14
 
GPIO_BRR_BR14_Msk


	)

1884 
	#GPIO_BRR_BR15_Pos
 (15U)

	)

1885 
	#GPIO_BRR_BR15_Msk
 (0x1UL << 
GPIO_BRR_BR15_Pos
Ë

	)

1886 
	#GPIO_BRR_BR15
 
GPIO_BRR_BR15_Msk


	)

1889 
	#GPIO_LCKR_LCK0_Pos
 (0U)

	)

1890 
	#GPIO_LCKR_LCK0_Msk
 (0x1UL << 
GPIO_LCKR_LCK0_Pos
Ë

	)

1891 
	#GPIO_LCKR_LCK0
 
GPIO_LCKR_LCK0_Msk


	)

1892 
	#GPIO_LCKR_LCK1_Pos
 (1U)

	)

1893 
	#GPIO_LCKR_LCK1_Msk
 (0x1UL << 
GPIO_LCKR_LCK1_Pos
Ë

	)

1894 
	#GPIO_LCKR_LCK1
 
GPIO_LCKR_LCK1_Msk


	)

1895 
	#GPIO_LCKR_LCK2_Pos
 (2U)

	)

1896 
	#GPIO_LCKR_LCK2_Msk
 (0x1UL << 
GPIO_LCKR_LCK2_Pos
Ë

	)

1897 
	#GPIO_LCKR_LCK2
 
GPIO_LCKR_LCK2_Msk


	)

1898 
	#GPIO_LCKR_LCK3_Pos
 (3U)

	)

1899 
	#GPIO_LCKR_LCK3_Msk
 (0x1UL << 
GPIO_LCKR_LCK3_Pos
Ë

	)

1900 
	#GPIO_LCKR_LCK3
 
GPIO_LCKR_LCK3_Msk


	)

1901 
	#GPIO_LCKR_LCK4_Pos
 (4U)

	)

1902 
	#GPIO_LCKR_LCK4_Msk
 (0x1UL << 
GPIO_LCKR_LCK4_Pos
Ë

	)

1903 
	#GPIO_LCKR_LCK4
 
GPIO_LCKR_LCK4_Msk


	)

1904 
	#GPIO_LCKR_LCK5_Pos
 (5U)

	)

1905 
	#GPIO_LCKR_LCK5_Msk
 (0x1UL << 
GPIO_LCKR_LCK5_Pos
Ë

	)

1906 
	#GPIO_LCKR_LCK5
 
GPIO_LCKR_LCK5_Msk


	)

1907 
	#GPIO_LCKR_LCK6_Pos
 (6U)

	)

1908 
	#GPIO_LCKR_LCK6_Msk
 (0x1UL << 
GPIO_LCKR_LCK6_Pos
Ë

	)

1909 
	#GPIO_LCKR_LCK6
 
GPIO_LCKR_LCK6_Msk


	)

1910 
	#GPIO_LCKR_LCK7_Pos
 (7U)

	)

1911 
	#GPIO_LCKR_LCK7_Msk
 (0x1UL << 
GPIO_LCKR_LCK7_Pos
Ë

	)

1912 
	#GPIO_LCKR_LCK7
 
GPIO_LCKR_LCK7_Msk


	)

1913 
	#GPIO_LCKR_LCK8_Pos
 (8U)

	)

1914 
	#GPIO_LCKR_LCK8_Msk
 (0x1UL << 
GPIO_LCKR_LCK8_Pos
Ë

	)

1915 
	#GPIO_LCKR_LCK8
 
GPIO_LCKR_LCK8_Msk


	)

1916 
	#GPIO_LCKR_LCK9_Pos
 (9U)

	)

1917 
	#GPIO_LCKR_LCK9_Msk
 (0x1UL << 
GPIO_LCKR_LCK9_Pos
Ë

	)

1918 
	#GPIO_LCKR_LCK9
 
GPIO_LCKR_LCK9_Msk


	)

1919 
	#GPIO_LCKR_LCK10_Pos
 (10U)

	)

1920 
	#GPIO_LCKR_LCK10_Msk
 (0x1UL << 
GPIO_LCKR_LCK10_Pos
Ë

	)

1921 
	#GPIO_LCKR_LCK10
 
GPIO_LCKR_LCK10_Msk


	)

1922 
	#GPIO_LCKR_LCK11_Pos
 (11U)

	)

1923 
	#GPIO_LCKR_LCK11_Msk
 (0x1UL << 
GPIO_LCKR_LCK11_Pos
Ë

	)

1924 
	#GPIO_LCKR_LCK11
 
GPIO_LCKR_LCK11_Msk


	)

1925 
	#GPIO_LCKR_LCK12_Pos
 (12U)

	)

1926 
	#GPIO_LCKR_LCK12_Msk
 (0x1UL << 
GPIO_LCKR_LCK12_Pos
Ë

	)

1927 
	#GPIO_LCKR_LCK12
 
GPIO_LCKR_LCK12_Msk


	)

1928 
	#GPIO_LCKR_LCK13_Pos
 (13U)

	)

1929 
	#GPIO_LCKR_LCK13_Msk
 (0x1UL << 
GPIO_LCKR_LCK13_Pos
Ë

	)

1930 
	#GPIO_LCKR_LCK13
 
GPIO_LCKR_LCK13_Msk


	)

1931 
	#GPIO_LCKR_LCK14_Pos
 (14U)

	)

1932 
	#GPIO_LCKR_LCK14_Msk
 (0x1UL << 
GPIO_LCKR_LCK14_Pos
Ë

	)

1933 
	#GPIO_LCKR_LCK14
 
GPIO_LCKR_LCK14_Msk


	)

1934 
	#GPIO_LCKR_LCK15_Pos
 (15U)

	)

1935 
	#GPIO_LCKR_LCK15_Msk
 (0x1UL << 
GPIO_LCKR_LCK15_Pos
Ë

	)

1936 
	#GPIO_LCKR_LCK15
 
GPIO_LCKR_LCK15_Msk


	)

1937 
	#GPIO_LCKR_LCKK_Pos
 (16U)

	)

1938 
	#GPIO_LCKR_LCKK_Msk
 (0x1UL << 
GPIO_LCKR_LCKK_Pos
Ë

	)

1939 
	#GPIO_LCKR_LCKK
 
GPIO_LCKR_LCKK_Msk


	)

1944 
	#AFIO_EVCR_PIN_Pos
 (0U)

	)

1945 
	#AFIO_EVCR_PIN_Msk
 (0xFUL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1946 
	#AFIO_EVCR_PIN
 
AFIO_EVCR_PIN_Msk


	)

1947 
	#AFIO_EVCR_PIN_0
 (0x1UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1948 
	#AFIO_EVCR_PIN_1
 (0x2UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1949 
	#AFIO_EVCR_PIN_2
 (0x4UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1950 
	#AFIO_EVCR_PIN_3
 (0x8UL << 
AFIO_EVCR_PIN_Pos
Ë

	)

1953 
	#AFIO_EVCR_PIN_PX0
 0x00000000U

	)

1954 
	#AFIO_EVCR_PIN_PX1_Pos
 (0U)

	)

1955 
	#AFIO_EVCR_PIN_PX1_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX1_Pos
Ë

	)

1956 
	#AFIO_EVCR_PIN_PX1
 
AFIO_EVCR_PIN_PX1_Msk


	)

1957 
	#AFIO_EVCR_PIN_PX2_Pos
 (1U)

	)

1958 
	#AFIO_EVCR_PIN_PX2_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX2_Pos
Ë

	)

1959 
	#AFIO_EVCR_PIN_PX2
 
AFIO_EVCR_PIN_PX2_Msk


	)

1960 
	#AFIO_EVCR_PIN_PX3_Pos
 (0U)

	)

1961 
	#AFIO_EVCR_PIN_PX3_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX3_Pos
Ë

	)

1962 
	#AFIO_EVCR_PIN_PX3
 
AFIO_EVCR_PIN_PX3_Msk


	)

1963 
	#AFIO_EVCR_PIN_PX4_Pos
 (2U)

	)

1964 
	#AFIO_EVCR_PIN_PX4_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX4_Pos
Ë

	)

1965 
	#AFIO_EVCR_PIN_PX4
 
AFIO_EVCR_PIN_PX4_Msk


	)

1966 
	#AFIO_EVCR_PIN_PX5_Pos
 (0U)

	)

1967 
	#AFIO_EVCR_PIN_PX5_Msk
 (0x5UL << 
AFIO_EVCR_PIN_PX5_Pos
Ë

	)

1968 
	#AFIO_EVCR_PIN_PX5
 
AFIO_EVCR_PIN_PX5_Msk


	)

1969 
	#AFIO_EVCR_PIN_PX6_Pos
 (1U)

	)

1970 
	#AFIO_EVCR_PIN_PX6_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX6_Pos
Ë

	)

1971 
	#AFIO_EVCR_PIN_PX6
 
AFIO_EVCR_PIN_PX6_Msk


	)

1972 
	#AFIO_EVCR_PIN_PX7_Pos
 (0U)

	)

1973 
	#AFIO_EVCR_PIN_PX7_Msk
 (0x7UL << 
AFIO_EVCR_PIN_PX7_Pos
Ë

	)

1974 
	#AFIO_EVCR_PIN_PX7
 
AFIO_EVCR_PIN_PX7_Msk


	)

1975 
	#AFIO_EVCR_PIN_PX8_Pos
 (3U)

	)

1976 
	#AFIO_EVCR_PIN_PX8_Msk
 (0x1UL << 
AFIO_EVCR_PIN_PX8_Pos
Ë

	)

1977 
	#AFIO_EVCR_PIN_PX8
 
AFIO_EVCR_PIN_PX8_Msk


	)

1978 
	#AFIO_EVCR_PIN_PX9_Pos
 (0U)

	)

1979 
	#AFIO_EVCR_PIN_PX9_Msk
 (0x9UL << 
AFIO_EVCR_PIN_PX9_Pos
Ë

	)

1980 
	#AFIO_EVCR_PIN_PX9
 
AFIO_EVCR_PIN_PX9_Msk


	)

1981 
	#AFIO_EVCR_PIN_PX10_Pos
 (1U)

	)

1982 
	#AFIO_EVCR_PIN_PX10_Msk
 (0x5UL << 
AFIO_EVCR_PIN_PX10_Pos
Ë

	)

1983 
	#AFIO_EVCR_PIN_PX10
 
AFIO_EVCR_PIN_PX10_Msk


	)

1984 
	#AFIO_EVCR_PIN_PX11_Pos
 (0U)

	)

1985 
	#AFIO_EVCR_PIN_PX11_Msk
 (0xBUL << 
AFIO_EVCR_PIN_PX11_Pos
Ë

	)

1986 
	#AFIO_EVCR_PIN_PX11
 
AFIO_EVCR_PIN_PX11_Msk


	)

1987 
	#AFIO_EVCR_PIN_PX12_Pos
 (2U)

	)

1988 
	#AFIO_EVCR_PIN_PX12_Msk
 (0x3UL << 
AFIO_EVCR_PIN_PX12_Pos
Ë

	)

1989 
	#AFIO_EVCR_PIN_PX12
 
AFIO_EVCR_PIN_PX12_Msk


	)

1990 
	#AFIO_EVCR_PIN_PX13_Pos
 (0U)

	)

1991 
	#AFIO_EVCR_PIN_PX13_Msk
 (0xDUL << 
AFIO_EVCR_PIN_PX13_Pos
Ë

	)

1992 
	#AFIO_EVCR_PIN_PX13
 
AFIO_EVCR_PIN_PX13_Msk


	)

1993 
	#AFIO_EVCR_PIN_PX14_Pos
 (1U)

	)

1994 
	#AFIO_EVCR_PIN_PX14_Msk
 (0x7UL << 
AFIO_EVCR_PIN_PX14_Pos
Ë

	)

1995 
	#AFIO_EVCR_PIN_PX14
 
AFIO_EVCR_PIN_PX14_Msk


	)

1996 
	#AFIO_EVCR_PIN_PX15_Pos
 (0U)

	)

1997 
	#AFIO_EVCR_PIN_PX15_Msk
 (0xFUL << 
AFIO_EVCR_PIN_PX15_Pos
Ë

	)

1998 
	#AFIO_EVCR_PIN_PX15
 
AFIO_EVCR_PIN_PX15_Msk


	)

2000 
	#AFIO_EVCR_PORT_Pos
 (4U)

	)

2001 
	#AFIO_EVCR_PORT_Msk
 (0x7UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2002 
	#AFIO_EVCR_PORT
 
AFIO_EVCR_PORT_Msk


	)

2003 
	#AFIO_EVCR_PORT_0
 (0x1UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2004 
	#AFIO_EVCR_PORT_1
 (0x2UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2005 
	#AFIO_EVCR_PORT_2
 (0x4UL << 
AFIO_EVCR_PORT_Pos
Ë

	)

2008 
	#AFIO_EVCR_PORT_PA
 0x00000000

	)

2009 
	#AFIO_EVCR_PORT_PB_Pos
 (4U)

	)

2010 
	#AFIO_EVCR_PORT_PB_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PB_Pos
Ë

	)

2011 
	#AFIO_EVCR_PORT_PB
 
AFIO_EVCR_PORT_PB_Msk


	)

2012 
	#AFIO_EVCR_PORT_PC_Pos
 (5U)

	)

2013 
	#AFIO_EVCR_PORT_PC_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PC_Pos
Ë

	)

2014 
	#AFIO_EVCR_PORT_PC
 
AFIO_EVCR_PORT_PC_Msk


	)

2015 
	#AFIO_EVCR_PORT_PD_Pos
 (4U)

	)

2016 
	#AFIO_EVCR_PORT_PD_Msk
 (0x3UL << 
AFIO_EVCR_PORT_PD_Pos
Ë

	)

2017 
	#AFIO_EVCR_PORT_PD
 
AFIO_EVCR_PORT_PD_Msk


	)

2018 
	#AFIO_EVCR_PORT_PE_Pos
 (6U)

	)

2019 
	#AFIO_EVCR_PORT_PE_Msk
 (0x1UL << 
AFIO_EVCR_PORT_PE_Pos
Ë

	)

2020 
	#AFIO_EVCR_PORT_PE
 
AFIO_EVCR_PORT_PE_Msk


	)

2022 
	#AFIO_EVCR_EVOE_Pos
 (7U)

	)

2023 
	#AFIO_EVCR_EVOE_Msk
 (0x1UL << 
AFIO_EVCR_EVOE_Pos
Ë

	)

2024 
	#AFIO_EVCR_EVOE
 
AFIO_EVCR_EVOE_Msk


	)

2027 
	#AFIO_MAPR_SPI1_REMAP_Pos
 (0U)

	)

2028 
	#AFIO_MAPR_SPI1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_SPI1_REMAP_Pos
Ë

	)

2029 
	#AFIO_MAPR_SPI1_REMAP
 
AFIO_MAPR_SPI1_REMAP_Msk


	)

2030 
	#AFIO_MAPR_I2C1_REMAP_Pos
 (1U)

	)

2031 
	#AFIO_MAPR_I2C1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_I2C1_REMAP_Pos
Ë

	)

2032 
	#AFIO_MAPR_I2C1_REMAP
 
AFIO_MAPR_I2C1_REMAP_Msk


	)

2033 
	#AFIO_MAPR_USART1_REMAP_Pos
 (2U)

	)

2034 
	#AFIO_MAPR_USART1_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART1_REMAP_Pos
Ë

	)

2035 
	#AFIO_MAPR_USART1_REMAP
 
AFIO_MAPR_USART1_REMAP_Msk


	)

2036 
	#AFIO_MAPR_USART2_REMAP_Pos
 (3U)

	)

2037 
	#AFIO_MAPR_USART2_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART2_REMAP_Pos
Ë

	)

2038 
	#AFIO_MAPR_USART2_REMAP
 
AFIO_MAPR_USART2_REMAP_Msk


	)

2040 
	#AFIO_MAPR_USART3_REMAP_Pos
 (4U)

	)

2041 
	#AFIO_MAPR_USART3_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_USART3_REMAP_Pos
Ë

	)

2042 
	#AFIO_MAPR_USART3_REMAP
 
AFIO_MAPR_USART3_REMAP_Msk


	)

2043 
	#AFIO_MAPR_USART3_REMAP_0
 (0x1UL << 
AFIO_MAPR_USART3_REMAP_Pos
Ë

	)

2044 
	#AFIO_MAPR_USART3_REMAP_1
 (0x2UL << 
AFIO_MAPR_USART3_REMAP_Pos
Ë

	)

2047 
	#AFIO_MAPR_USART3_REMAP_NOREMAP
 0x00000000U

	)

2048 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos
 (4U)

	)

2049 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Pos
Ë

	)

2050 
	#AFIO_MAPR_USART3_REMAP_PARTIALREMAP
 
AFIO_MAPR_USART3_REMAP_PARTIALREMAP_Msk


	)

2051 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos
 (4U)

	)

2052 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_USART3_REMAP_FULLREMAP_Pos
Ë

	)

2053 
	#AFIO_MAPR_USART3_REMAP_FULLREMAP
 
AFIO_MAPR_USART3_REMAP_FULLREMAP_Msk


	)

2055 
	#AFIO_MAPR_TIM1_REMAP_Pos
 (6U)

	)

2056 
	#AFIO_MAPR_TIM1_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM1_REMAP_Pos
Ë

	)

2057 
	#AFIO_MAPR_TIM1_REMAP
 
AFIO_MAPR_TIM1_REMAP_Msk


	)

2058 
	#AFIO_MAPR_TIM1_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM1_REMAP_Pos
Ë

	)

2059 
	#AFIO_MAPR_TIM1_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM1_REMAP_Pos
Ë

	)

2062 
	#AFIO_MAPR_TIM1_REMAP_NOREMAP
 0x00000000U

	)

2063 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos
 (6U)

	)

2064 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Pos
Ë

	)

2065 
	#AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
 
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP_Msk


	)

2066 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos
 (6U)

	)

2067 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM1_REMAP_FULLREMAP_Pos
Ë

	)

2068 
	#AFIO_MAPR_TIM1_REMAP_FULLREMAP
 
AFIO_MAPR_TIM1_REMAP_FULLREMAP_Msk


	)

2070 
	#AFIO_MAPR_TIM2_REMAP_Pos
 (8U)

	)

2071 
	#AFIO_MAPR_TIM2_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM2_REMAP_Pos
Ë

	)

2072 
	#AFIO_MAPR_TIM2_REMAP
 
AFIO_MAPR_TIM2_REMAP_Msk


	)

2073 
	#AFIO_MAPR_TIM2_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_Pos
Ë

	)

2074 
	#AFIO_MAPR_TIM2_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM2_REMAP_Pos
Ë

	)

2077 
	#AFIO_MAPR_TIM2_REMAP_NOREMAP
 0x00000000U

	)

2078 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos
 (8U)

	)

2079 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Pos
Ë

	)

2080 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1_Msk


	)

2081 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos
 (9U)

	)

2082 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk
 (0x1UL << 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Pos
Ë

	)

2083 
	#AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
 
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2_Msk


	)

2084 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos
 (8U)

	)

2085 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM2_REMAP_FULLREMAP_Pos
Ë

	)

2086 
	#AFIO_MAPR_TIM2_REMAP_FULLREMAP
 
AFIO_MAPR_TIM2_REMAP_FULLREMAP_Msk


	)

2088 
	#AFIO_MAPR_TIM3_REMAP_Pos
 (10U)

	)

2089 
	#AFIO_MAPR_TIM3_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM3_REMAP_Pos
Ë

	)

2090 
	#AFIO_MAPR_TIM3_REMAP
 
AFIO_MAPR_TIM3_REMAP_Msk


	)

2091 
	#AFIO_MAPR_TIM3_REMAP_0
 (0x1UL << 
AFIO_MAPR_TIM3_REMAP_Pos
Ë

	)

2092 
	#AFIO_MAPR_TIM3_REMAP_1
 (0x2UL << 
AFIO_MAPR_TIM3_REMAP_Pos
Ë

	)

2095 
	#AFIO_MAPR_TIM3_REMAP_NOREMAP
 0x00000000U

	)

2096 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos
 (11U)

	)

2097 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Pos
Ë

	)

2098 
	#AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
 
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP_Msk


	)

2099 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos
 (10U)

	)

2100 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk
 (0x3UL << 
AFIO_MAPR_TIM3_REMAP_FULLREMAP_Pos
Ë

	)

2101 
	#AFIO_MAPR_TIM3_REMAP_FULLREMAP
 
AFIO_MAPR_TIM3_REMAP_FULLREMAP_Msk


	)

2103 
	#AFIO_MAPR_TIM4_REMAP_Pos
 (12U)

	)

2104 
	#AFIO_MAPR_TIM4_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_TIM4_REMAP_Pos
Ë

	)

2105 
	#AFIO_MAPR_TIM4_REMAP
 
AFIO_MAPR_TIM4_REMAP_Msk


	)

2107 
	#AFIO_MAPR_CAN_REMAP_Pos
 (13U)

	)

2108 
	#AFIO_MAPR_CAN_REMAP_Msk
 (0x3UL << 
AFIO_MAPR_CAN_REMAP_Pos
Ë

	)

2109 
	#AFIO_MAPR_CAN_REMAP
 
AFIO_MAPR_CAN_REMAP_Msk


	)

2110 
	#AFIO_MAPR_CAN_REMAP_0
 (0x1UL << 
AFIO_MAPR_CAN_REMAP_Pos
Ë

	)

2111 
	#AFIO_MAPR_CAN_REMAP_1
 (0x2UL << 
AFIO_MAPR_CAN_REMAP_Pos
Ë

	)

2114 
	#AFIO_MAPR_CAN_REMAP_REMAP1
 0x00000000U

	)

2115 
	#AFIO_MAPR_CAN_REMAP_REMAP2_Pos
 (14U)

	)

2116 
	#AFIO_MAPR_CAN_REMAP_REMAP2_Msk
 (0x1UL << 
AFIO_MAPR_CAN_REMAP_REMAP2_Pos
Ë

	)

2117 
	#AFIO_MAPR_CAN_REMAP_REMAP2
 
AFIO_MAPR_CAN_REMAP_REMAP2_Msk


	)

2118 
	#AFIO_MAPR_CAN_REMAP_REMAP3_Pos
 (13U)

	)

2119 
	#AFIO_MAPR_CAN_REMAP_REMAP3_Msk
 (0x3UL << 
AFIO_MAPR_CAN_REMAP_REMAP3_Pos
Ë

	)

2120 
	#AFIO_MAPR_CAN_REMAP_REMAP3
 
AFIO_MAPR_CAN_REMAP_REMAP3_Msk


	)

2122 
	#AFIO_MAPR_PD01_REMAP_Pos
 (15U)

	)

2123 
	#AFIO_MAPR_PD01_REMAP_Msk
 (0x1UL << 
AFIO_MAPR_PD01_REMAP_Pos
Ë

	)

2124 
	#AFIO_MAPR_PD01_REMAP
 
AFIO_MAPR_PD01_REMAP_Msk


	)

2127 
	#AFIO_MAPR_SWJ_CFG_Pos
 (24U)

	)

2128 
	#AFIO_MAPR_SWJ_CFG_Msk
 (0x7UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2129 
	#AFIO_MAPR_SWJ_CFG
 
AFIO_MAPR_SWJ_CFG_Msk


	)

2130 
	#AFIO_MAPR_SWJ_CFG_0
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2131 
	#AFIO_MAPR_SWJ_CFG_1
 (0x2UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2132 
	#AFIO_MAPR_SWJ_CFG_2
 (0x4UL << 
AFIO_MAPR_SWJ_CFG_Pos
Ë

	)

2134 
	#AFIO_MAPR_SWJ_CFG_RESET
 0x00000000U

	)

2135 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos
 (24U)

	)

2136 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_NOJNTRST_Pos
Ë

	)

2137 
	#AFIO_MAPR_SWJ_CFG_NOJNTRST
 
AFIO_MAPR_SWJ_CFG_NOJNTRST_Msk


	)

2138 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos
 (25U)

	)

2139 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Pos
Ë

	)

2140 
	#AFIO_MAPR_SWJ_CFG_JTAGDISABLE
 
AFIO_MAPR_SWJ_CFG_JTAGDISABLE_Msk


	)

2141 
	#AFIO_MAPR_SWJ_CFG_DISABLE_Pos
 (26U)

	)

2142 
	#AFIO_MAPR_SWJ_CFG_DISABLE_Msk
 (0x1UL << 
AFIO_MAPR_SWJ_CFG_DISABLE_Pos
Ë

	)

2143 
	#AFIO_MAPR_SWJ_CFG_DISABLE
 
AFIO_MAPR_SWJ_CFG_DISABLE_Msk


	)

2147 
	#AFIO_EXTICR1_EXTI0_Pos
 (0U)

	)

2148 
	#AFIO_EXTICR1_EXTI0_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI0_Pos
Ë

	)

2149 
	#AFIO_EXTICR1_EXTI0
 
AFIO_EXTICR1_EXTI0_Msk


	)

2150 
	#AFIO_EXTICR1_EXTI1_Pos
 (4U)

	)

2151 
	#AFIO_EXTICR1_EXTI1_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI1_Pos
Ë

	)

2152 
	#AFIO_EXTICR1_EXTI1
 
AFIO_EXTICR1_EXTI1_Msk


	)

2153 
	#AFIO_EXTICR1_EXTI2_Pos
 (8U)

	)

2154 
	#AFIO_EXTICR1_EXTI2_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI2_Pos
Ë

	)

2155 
	#AFIO_EXTICR1_EXTI2
 
AFIO_EXTICR1_EXTI2_Msk


	)

2156 
	#AFIO_EXTICR1_EXTI3_Pos
 (12U)

	)

2157 
	#AFIO_EXTICR1_EXTI3_Msk
 (0xFUL << 
AFIO_EXTICR1_EXTI3_Pos
Ë

	)

2158 
	#AFIO_EXTICR1_EXTI3
 
AFIO_EXTICR1_EXTI3_Msk


	)

2161 
	#AFIO_EXTICR1_EXTI0_PA
 0x00000000U

	)

2162 
	#AFIO_EXTICR1_EXTI0_PB_Pos
 (0U)

	)

2163 
	#AFIO_EXTICR1_EXTI0_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PB_Pos
Ë

	)

2164 
	#AFIO_EXTICR1_EXTI0_PB
 
AFIO_EXTICR1_EXTI0_PB_Msk


	)

2165 
	#AFIO_EXTICR1_EXTI0_PC_Pos
 (1U)

	)

2166 
	#AFIO_EXTICR1_EXTI0_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PC_Pos
Ë

	)

2167 
	#AFIO_EXTICR1_EXTI0_PC
 
AFIO_EXTICR1_EXTI0_PC_Msk


	)

2168 
	#AFIO_EXTICR1_EXTI0_PD_Pos
 (0U)

	)

2169 
	#AFIO_EXTICR1_EXTI0_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI0_PD_Pos
Ë

	)

2170 
	#AFIO_EXTICR1_EXTI0_PD
 
AFIO_EXTICR1_EXTI0_PD_Msk


	)

2171 
	#AFIO_EXTICR1_EXTI0_PE_Pos
 (2U)

	)

2172 
	#AFIO_EXTICR1_EXTI0_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI0_PE_Pos
Ë

	)

2173 
	#AFIO_EXTICR1_EXTI0_PE
 
AFIO_EXTICR1_EXTI0_PE_Msk


	)

2174 
	#AFIO_EXTICR1_EXTI0_PF_Pos
 (0U)

	)

2175 
	#AFIO_EXTICR1_EXTI0_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI0_PF_Pos
Ë

	)

2176 
	#AFIO_EXTICR1_EXTI0_PF
 
AFIO_EXTICR1_EXTI0_PF_Msk


	)

2177 
	#AFIO_EXTICR1_EXTI0_PG_Pos
 (1U)

	)

2178 
	#AFIO_EXTICR1_EXTI0_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI0_PG_Pos
Ë

	)

2179 
	#AFIO_EXTICR1_EXTI0_PG
 
AFIO_EXTICR1_EXTI0_PG_Msk


	)

2182 
	#AFIO_EXTICR1_EXTI1_PA
 0x00000000U

	)

2183 
	#AFIO_EXTICR1_EXTI1_PB_Pos
 (4U)

	)

2184 
	#AFIO_EXTICR1_EXTI1_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PB_Pos
Ë

	)

2185 
	#AFIO_EXTICR1_EXTI1_PB
 
AFIO_EXTICR1_EXTI1_PB_Msk


	)

2186 
	#AFIO_EXTICR1_EXTI1_PC_Pos
 (5U)

	)

2187 
	#AFIO_EXTICR1_EXTI1_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PC_Pos
Ë

	)

2188 
	#AFIO_EXTICR1_EXTI1_PC
 
AFIO_EXTICR1_EXTI1_PC_Msk


	)

2189 
	#AFIO_EXTICR1_EXTI1_PD_Pos
 (4U)

	)

2190 
	#AFIO_EXTICR1_EXTI1_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI1_PD_Pos
Ë

	)

2191 
	#AFIO_EXTICR1_EXTI1_PD
 
AFIO_EXTICR1_EXTI1_PD_Msk


	)

2192 
	#AFIO_EXTICR1_EXTI1_PE_Pos
 (6U)

	)

2193 
	#AFIO_EXTICR1_EXTI1_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI1_PE_Pos
Ë

	)

2194 
	#AFIO_EXTICR1_EXTI1_PE
 
AFIO_EXTICR1_EXTI1_PE_Msk


	)

2195 
	#AFIO_EXTICR1_EXTI1_PF_Pos
 (4U)

	)

2196 
	#AFIO_EXTICR1_EXTI1_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI1_PF_Pos
Ë

	)

2197 
	#AFIO_EXTICR1_EXTI1_PF
 
AFIO_EXTICR1_EXTI1_PF_Msk


	)

2198 
	#AFIO_EXTICR1_EXTI1_PG_Pos
 (5U)

	)

2199 
	#AFIO_EXTICR1_EXTI1_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI1_PG_Pos
Ë

	)

2200 
	#AFIO_EXTICR1_EXTI1_PG
 
AFIO_EXTICR1_EXTI1_PG_Msk


	)

2203 
	#AFIO_EXTICR1_EXTI2_PA
 0x00000000U

	)

2204 
	#AFIO_EXTICR1_EXTI2_PB_Pos
 (8U)

	)

2205 
	#AFIO_EXTICR1_EXTI2_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PB_Pos
Ë

	)

2206 
	#AFIO_EXTICR1_EXTI2_PB
 
AFIO_EXTICR1_EXTI2_PB_Msk


	)

2207 
	#AFIO_EXTICR1_EXTI2_PC_Pos
 (9U)

	)

2208 
	#AFIO_EXTICR1_EXTI2_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PC_Pos
Ë

	)

2209 
	#AFIO_EXTICR1_EXTI2_PC
 
AFIO_EXTICR1_EXTI2_PC_Msk


	)

2210 
	#AFIO_EXTICR1_EXTI2_PD_Pos
 (8U)

	)

2211 
	#AFIO_EXTICR1_EXTI2_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI2_PD_Pos
Ë

	)

2212 
	#AFIO_EXTICR1_EXTI2_PD
 
AFIO_EXTICR1_EXTI2_PD_Msk


	)

2213 
	#AFIO_EXTICR1_EXTI2_PE_Pos
 (10U)

	)

2214 
	#AFIO_EXTICR1_EXTI2_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI2_PE_Pos
Ë

	)

2215 
	#AFIO_EXTICR1_EXTI2_PE
 
AFIO_EXTICR1_EXTI2_PE_Msk


	)

2216 
	#AFIO_EXTICR1_EXTI2_PF_Pos
 (8U)

	)

2217 
	#AFIO_EXTICR1_EXTI2_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI2_PF_Pos
Ë

	)

2218 
	#AFIO_EXTICR1_EXTI2_PF
 
AFIO_EXTICR1_EXTI2_PF_Msk


	)

2219 
	#AFIO_EXTICR1_EXTI2_PG_Pos
 (9U)

	)

2220 
	#AFIO_EXTICR1_EXTI2_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI2_PG_Pos
Ë

	)

2221 
	#AFIO_EXTICR1_EXTI2_PG
 
AFIO_EXTICR1_EXTI2_PG_Msk


	)

2224 
	#AFIO_EXTICR1_EXTI3_PA
 0x00000000U

	)

2225 
	#AFIO_EXTICR1_EXTI3_PB_Pos
 (12U)

	)

2226 
	#AFIO_EXTICR1_EXTI3_PB_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PB_Pos
Ë

	)

2227 
	#AFIO_EXTICR1_EXTI3_PB
 
AFIO_EXTICR1_EXTI3_PB_Msk


	)

2228 
	#AFIO_EXTICR1_EXTI3_PC_Pos
 (13U)

	)

2229 
	#AFIO_EXTICR1_EXTI3_PC_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PC_Pos
Ë

	)

2230 
	#AFIO_EXTICR1_EXTI3_PC
 
AFIO_EXTICR1_EXTI3_PC_Msk


	)

2231 
	#AFIO_EXTICR1_EXTI3_PD_Pos
 (12U)

	)

2232 
	#AFIO_EXTICR1_EXTI3_PD_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI3_PD_Pos
Ë

	)

2233 
	#AFIO_EXTICR1_EXTI3_PD
 
AFIO_EXTICR1_EXTI3_PD_Msk


	)

2234 
	#AFIO_EXTICR1_EXTI3_PE_Pos
 (14U)

	)

2235 
	#AFIO_EXTICR1_EXTI3_PE_Msk
 (0x1UL << 
AFIO_EXTICR1_EXTI3_PE_Pos
Ë

	)

2236 
	#AFIO_EXTICR1_EXTI3_PE
 
AFIO_EXTICR1_EXTI3_PE_Msk


	)

2237 
	#AFIO_EXTICR1_EXTI3_PF_Pos
 (12U)

	)

2238 
	#AFIO_EXTICR1_EXTI3_PF_Msk
 (0x5UL << 
AFIO_EXTICR1_EXTI3_PF_Pos
Ë

	)

2239 
	#AFIO_EXTICR1_EXTI3_PF
 
AFIO_EXTICR1_EXTI3_PF_Msk


	)

2240 
	#AFIO_EXTICR1_EXTI3_PG_Pos
 (13U)

	)

2241 
	#AFIO_EXTICR1_EXTI3_PG_Msk
 (0x3UL << 
AFIO_EXTICR1_EXTI3_PG_Pos
Ë

	)

2242 
	#AFIO_EXTICR1_EXTI3_PG
 
AFIO_EXTICR1_EXTI3_PG_Msk


	)

2245 
	#AFIO_EXTICR2_EXTI4_Pos
 (0U)

	)

2246 
	#AFIO_EXTICR2_EXTI4_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI4_Pos
Ë

	)

2247 
	#AFIO_EXTICR2_EXTI4
 
AFIO_EXTICR2_EXTI4_Msk


	)

2248 
	#AFIO_EXTICR2_EXTI5_Pos
 (4U)

	)

2249 
	#AFIO_EXTICR2_EXTI5_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI5_Pos
Ë

	)

2250 
	#AFIO_EXTICR2_EXTI5
 
AFIO_EXTICR2_EXTI5_Msk


	)

2251 
	#AFIO_EXTICR2_EXTI6_Pos
 (8U)

	)

2252 
	#AFIO_EXTICR2_EXTI6_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI6_Pos
Ë

	)

2253 
	#AFIO_EXTICR2_EXTI6
 
AFIO_EXTICR2_EXTI6_Msk


	)

2254 
	#AFIO_EXTICR2_EXTI7_Pos
 (12U)

	)

2255 
	#AFIO_EXTICR2_EXTI7_Msk
 (0xFUL << 
AFIO_EXTICR2_EXTI7_Pos
Ë

	)

2256 
	#AFIO_EXTICR2_EXTI7
 
AFIO_EXTICR2_EXTI7_Msk


	)

2259 
	#AFIO_EXTICR2_EXTI4_PA
 0x00000000U

	)

2260 
	#AFIO_EXTICR2_EXTI4_PB_Pos
 (0U)

	)

2261 
	#AFIO_EXTICR2_EXTI4_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PB_Pos
Ë

	)

2262 
	#AFIO_EXTICR2_EXTI4_PB
 
AFIO_EXTICR2_EXTI4_PB_Msk


	)

2263 
	#AFIO_EXTICR2_EXTI4_PC_Pos
 (1U)

	)

2264 
	#AFIO_EXTICR2_EXTI4_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PC_Pos
Ë

	)

2265 
	#AFIO_EXTICR2_EXTI4_PC
 
AFIO_EXTICR2_EXTI4_PC_Msk


	)

2266 
	#AFIO_EXTICR2_EXTI4_PD_Pos
 (0U)

	)

2267 
	#AFIO_EXTICR2_EXTI4_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI4_PD_Pos
Ë

	)

2268 
	#AFIO_EXTICR2_EXTI4_PD
 
AFIO_EXTICR2_EXTI4_PD_Msk


	)

2269 
	#AFIO_EXTICR2_EXTI4_PE_Pos
 (2U)

	)

2270 
	#AFIO_EXTICR2_EXTI4_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI4_PE_Pos
Ë

	)

2271 
	#AFIO_EXTICR2_EXTI4_PE
 
AFIO_EXTICR2_EXTI4_PE_Msk


	)

2272 
	#AFIO_EXTICR2_EXTI4_PF_Pos
 (0U)

	)

2273 
	#AFIO_EXTICR2_EXTI4_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI4_PF_Pos
Ë

	)

2274 
	#AFIO_EXTICR2_EXTI4_PF
 
AFIO_EXTICR2_EXTI4_PF_Msk


	)

2275 
	#AFIO_EXTICR2_EXTI4_PG_Pos
 (1U)

	)

2276 
	#AFIO_EXTICR2_EXTI4_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI4_PG_Pos
Ë

	)

2277 
	#AFIO_EXTICR2_EXTI4_PG
 
AFIO_EXTICR2_EXTI4_PG_Msk


	)

2280 
	#AFIO_EXTICR2_EXTI5_PA
 0x00000000U

	)

2281 
	#AFIO_EXTICR2_EXTI5_PB_Pos
 (4U)

	)

2282 
	#AFIO_EXTICR2_EXTI5_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PB_Pos
Ë

	)

2283 
	#AFIO_EXTICR2_EXTI5_PB
 
AFIO_EXTICR2_EXTI5_PB_Msk


	)

2284 
	#AFIO_EXTICR2_EXTI5_PC_Pos
 (5U)

	)

2285 
	#AFIO_EXTICR2_EXTI5_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PC_Pos
Ë

	)

2286 
	#AFIO_EXTICR2_EXTI5_PC
 
AFIO_EXTICR2_EXTI5_PC_Msk


	)

2287 
	#AFIO_EXTICR2_EXTI5_PD_Pos
 (4U)

	)

2288 
	#AFIO_EXTICR2_EXTI5_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI5_PD_Pos
Ë

	)

2289 
	#AFIO_EXTICR2_EXTI5_PD
 
AFIO_EXTICR2_EXTI5_PD_Msk


	)

2290 
	#AFIO_EXTICR2_EXTI5_PE_Pos
 (6U)

	)

2291 
	#AFIO_EXTICR2_EXTI5_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI5_PE_Pos
Ë

	)

2292 
	#AFIO_EXTICR2_EXTI5_PE
 
AFIO_EXTICR2_EXTI5_PE_Msk


	)

2293 
	#AFIO_EXTICR2_EXTI5_PF_Pos
 (4U)

	)

2294 
	#AFIO_EXTICR2_EXTI5_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI5_PF_Pos
Ë

	)

2295 
	#AFIO_EXTICR2_EXTI5_PF
 
AFIO_EXTICR2_EXTI5_PF_Msk


	)

2296 
	#AFIO_EXTICR2_EXTI5_PG_Pos
 (5U)

	)

2297 
	#AFIO_EXTICR2_EXTI5_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI5_PG_Pos
Ë

	)

2298 
	#AFIO_EXTICR2_EXTI5_PG
 
AFIO_EXTICR2_EXTI5_PG_Msk


	)

2301 
	#AFIO_EXTICR2_EXTI6_PA
 0x00000000U

	)

2302 
	#AFIO_EXTICR2_EXTI6_PB_Pos
 (8U)

	)

2303 
	#AFIO_EXTICR2_EXTI6_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PB_Pos
Ë

	)

2304 
	#AFIO_EXTICR2_EXTI6_PB
 
AFIO_EXTICR2_EXTI6_PB_Msk


	)

2305 
	#AFIO_EXTICR2_EXTI6_PC_Pos
 (9U)

	)

2306 
	#AFIO_EXTICR2_EXTI6_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PC_Pos
Ë

	)

2307 
	#AFIO_EXTICR2_EXTI6_PC
 
AFIO_EXTICR2_EXTI6_PC_Msk


	)

2308 
	#AFIO_EXTICR2_EXTI6_PD_Pos
 (8U)

	)

2309 
	#AFIO_EXTICR2_EXTI6_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI6_PD_Pos
Ë

	)

2310 
	#AFIO_EXTICR2_EXTI6_PD
 
AFIO_EXTICR2_EXTI6_PD_Msk


	)

2311 
	#AFIO_EXTICR2_EXTI6_PE_Pos
 (10U)

	)

2312 
	#AFIO_EXTICR2_EXTI6_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI6_PE_Pos
Ë

	)

2313 
	#AFIO_EXTICR2_EXTI6_PE
 
AFIO_EXTICR2_EXTI6_PE_Msk


	)

2314 
	#AFIO_EXTICR2_EXTI6_PF_Pos
 (8U)

	)

2315 
	#AFIO_EXTICR2_EXTI6_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI6_PF_Pos
Ë

	)

2316 
	#AFIO_EXTICR2_EXTI6_PF
 
AFIO_EXTICR2_EXTI6_PF_Msk


	)

2317 
	#AFIO_EXTICR2_EXTI6_PG_Pos
 (9U)

	)

2318 
	#AFIO_EXTICR2_EXTI6_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI6_PG_Pos
Ë

	)

2319 
	#AFIO_EXTICR2_EXTI6_PG
 
AFIO_EXTICR2_EXTI6_PG_Msk


	)

2322 
	#AFIO_EXTICR2_EXTI7_PA
 0x00000000U

	)

2323 
	#AFIO_EXTICR2_EXTI7_PB_Pos
 (12U)

	)

2324 
	#AFIO_EXTICR2_EXTI7_PB_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PB_Pos
Ë

	)

2325 
	#AFIO_EXTICR2_EXTI7_PB
 
AFIO_EXTICR2_EXTI7_PB_Msk


	)

2326 
	#AFIO_EXTICR2_EXTI7_PC_Pos
 (13U)

	)

2327 
	#AFIO_EXTICR2_EXTI7_PC_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PC_Pos
Ë

	)

2328 
	#AFIO_EXTICR2_EXTI7_PC
 
AFIO_EXTICR2_EXTI7_PC_Msk


	)

2329 
	#AFIO_EXTICR2_EXTI7_PD_Pos
 (12U)

	)

2330 
	#AFIO_EXTICR2_EXTI7_PD_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI7_PD_Pos
Ë

	)

2331 
	#AFIO_EXTICR2_EXTI7_PD
 
AFIO_EXTICR2_EXTI7_PD_Msk


	)

2332 
	#AFIO_EXTICR2_EXTI7_PE_Pos
 (14U)

	)

2333 
	#AFIO_EXTICR2_EXTI7_PE_Msk
 (0x1UL << 
AFIO_EXTICR2_EXTI7_PE_Pos
Ë

	)

2334 
	#AFIO_EXTICR2_EXTI7_PE
 
AFIO_EXTICR2_EXTI7_PE_Msk


	)

2335 
	#AFIO_EXTICR2_EXTI7_PF_Pos
 (12U)

	)

2336 
	#AFIO_EXTICR2_EXTI7_PF_Msk
 (0x5UL << 
AFIO_EXTICR2_EXTI7_PF_Pos
Ë

	)

2337 
	#AFIO_EXTICR2_EXTI7_PF
 
AFIO_EXTICR2_EXTI7_PF_Msk


	)

2338 
	#AFIO_EXTICR2_EXTI7_PG_Pos
 (13U)

	)

2339 
	#AFIO_EXTICR2_EXTI7_PG_Msk
 (0x3UL << 
AFIO_EXTICR2_EXTI7_PG_Pos
Ë

	)

2340 
	#AFIO_EXTICR2_EXTI7_PG
 
AFIO_EXTICR2_EXTI7_PG_Msk


	)

2343 
	#AFIO_EXTICR3_EXTI8_Pos
 (0U)

	)

2344 
	#AFIO_EXTICR3_EXTI8_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI8_Pos
Ë

	)

2345 
	#AFIO_EXTICR3_EXTI8
 
AFIO_EXTICR3_EXTI8_Msk


	)

2346 
	#AFIO_EXTICR3_EXTI9_Pos
 (4U)

	)

2347 
	#AFIO_EXTICR3_EXTI9_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI9_Pos
Ë

	)

2348 
	#AFIO_EXTICR3_EXTI9
 
AFIO_EXTICR3_EXTI9_Msk


	)

2349 
	#AFIO_EXTICR3_EXTI10_Pos
 (8U)

	)

2350 
	#AFIO_EXTICR3_EXTI10_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI10_Pos
Ë

	)

2351 
	#AFIO_EXTICR3_EXTI10
 
AFIO_EXTICR3_EXTI10_Msk


	)

2352 
	#AFIO_EXTICR3_EXTI11_Pos
 (12U)

	)

2353 
	#AFIO_EXTICR3_EXTI11_Msk
 (0xFUL << 
AFIO_EXTICR3_EXTI11_Pos
Ë

	)

2354 
	#AFIO_EXTICR3_EXTI11
 
AFIO_EXTICR3_EXTI11_Msk


	)

2357 
	#AFIO_EXTICR3_EXTI8_PA
 0x00000000U

	)

2358 
	#AFIO_EXTICR3_EXTI8_PB_Pos
 (0U)

	)

2359 
	#AFIO_EXTICR3_EXTI8_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PB_Pos
Ë

	)

2360 
	#AFIO_EXTICR3_EXTI8_PB
 
AFIO_EXTICR3_EXTI8_PB_Msk


	)

2361 
	#AFIO_EXTICR3_EXTI8_PC_Pos
 (1U)

	)

2362 
	#AFIO_EXTICR3_EXTI8_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PC_Pos
Ë

	)

2363 
	#AFIO_EXTICR3_EXTI8_PC
 
AFIO_EXTICR3_EXTI8_PC_Msk


	)

2364 
	#AFIO_EXTICR3_EXTI8_PD_Pos
 (0U)

	)

2365 
	#AFIO_EXTICR3_EXTI8_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI8_PD_Pos
Ë

	)

2366 
	#AFIO_EXTICR3_EXTI8_PD
 
AFIO_EXTICR3_EXTI8_PD_Msk


	)

2367 
	#AFIO_EXTICR3_EXTI8_PE_Pos
 (2U)

	)

2368 
	#AFIO_EXTICR3_EXTI8_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI8_PE_Pos
Ë

	)

2369 
	#AFIO_EXTICR3_EXTI8_PE
 
AFIO_EXTICR3_EXTI8_PE_Msk


	)

2370 
	#AFIO_EXTICR3_EXTI8_PF_Pos
 (0U)

	)

2371 
	#AFIO_EXTICR3_EXTI8_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI8_PF_Pos
Ë

	)

2372 
	#AFIO_EXTICR3_EXTI8_PF
 
AFIO_EXTICR3_EXTI8_PF_Msk


	)

2373 
	#AFIO_EXTICR3_EXTI8_PG_Pos
 (1U)

	)

2374 
	#AFIO_EXTICR3_EXTI8_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI8_PG_Pos
Ë

	)

2375 
	#AFIO_EXTICR3_EXTI8_PG
 
AFIO_EXTICR3_EXTI8_PG_Msk


	)

2378 
	#AFIO_EXTICR3_EXTI9_PA
 0x00000000U

	)

2379 
	#AFIO_EXTICR3_EXTI9_PB_Pos
 (4U)

	)

2380 
	#AFIO_EXTICR3_EXTI9_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PB_Pos
Ë

	)

2381 
	#AFIO_EXTICR3_EXTI9_PB
 
AFIO_EXTICR3_EXTI9_PB_Msk


	)

2382 
	#AFIO_EXTICR3_EXTI9_PC_Pos
 (5U)

	)

2383 
	#AFIO_EXTICR3_EXTI9_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PC_Pos
Ë

	)

2384 
	#AFIO_EXTICR3_EXTI9_PC
 
AFIO_EXTICR3_EXTI9_PC_Msk


	)

2385 
	#AFIO_EXTICR3_EXTI9_PD_Pos
 (4U)

	)

2386 
	#AFIO_EXTICR3_EXTI9_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI9_PD_Pos
Ë

	)

2387 
	#AFIO_EXTICR3_EXTI9_PD
 
AFIO_EXTICR3_EXTI9_PD_Msk


	)

2388 
	#AFIO_EXTICR3_EXTI9_PE_Pos
 (6U)

	)

2389 
	#AFIO_EXTICR3_EXTI9_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI9_PE_Pos
Ë

	)

2390 
	#AFIO_EXTICR3_EXTI9_PE
 
AFIO_EXTICR3_EXTI9_PE_Msk


	)

2391 
	#AFIO_EXTICR3_EXTI9_PF_Pos
 (4U)

	)

2392 
	#AFIO_EXTICR3_EXTI9_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI9_PF_Pos
Ë

	)

2393 
	#AFIO_EXTICR3_EXTI9_PF
 
AFIO_EXTICR3_EXTI9_PF_Msk


	)

2394 
	#AFIO_EXTICR3_EXTI9_PG_Pos
 (5U)

	)

2395 
	#AFIO_EXTICR3_EXTI9_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI9_PG_Pos
Ë

	)

2396 
	#AFIO_EXTICR3_EXTI9_PG
 
AFIO_EXTICR3_EXTI9_PG_Msk


	)

2399 
	#AFIO_EXTICR3_EXTI10_PA
 0x00000000U

	)

2400 
	#AFIO_EXTICR3_EXTI10_PB_Pos
 (8U)

	)

2401 
	#AFIO_EXTICR3_EXTI10_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PB_Pos
Ë

	)

2402 
	#AFIO_EXTICR3_EXTI10_PB
 
AFIO_EXTICR3_EXTI10_PB_Msk


	)

2403 
	#AFIO_EXTICR3_EXTI10_PC_Pos
 (9U)

	)

2404 
	#AFIO_EXTICR3_EXTI10_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PC_Pos
Ë

	)

2405 
	#AFIO_EXTICR3_EXTI10_PC
 
AFIO_EXTICR3_EXTI10_PC_Msk


	)

2406 
	#AFIO_EXTICR3_EXTI10_PD_Pos
 (8U)

	)

2407 
	#AFIO_EXTICR3_EXTI10_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI10_PD_Pos
Ë

	)

2408 
	#AFIO_EXTICR3_EXTI10_PD
 
AFIO_EXTICR3_EXTI10_PD_Msk


	)

2409 
	#AFIO_EXTICR3_EXTI10_PE_Pos
 (10U)

	)

2410 
	#AFIO_EXTICR3_EXTI10_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI10_PE_Pos
Ë

	)

2411 
	#AFIO_EXTICR3_EXTI10_PE
 
AFIO_EXTICR3_EXTI10_PE_Msk


	)

2412 
	#AFIO_EXTICR3_EXTI10_PF_Pos
 (8U)

	)

2413 
	#AFIO_EXTICR3_EXTI10_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI10_PF_Pos
Ë

	)

2414 
	#AFIO_EXTICR3_EXTI10_PF
 
AFIO_EXTICR3_EXTI10_PF_Msk


	)

2415 
	#AFIO_EXTICR3_EXTI10_PG_Pos
 (9U)

	)

2416 
	#AFIO_EXTICR3_EXTI10_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI10_PG_Pos
Ë

	)

2417 
	#AFIO_EXTICR3_EXTI10_PG
 
AFIO_EXTICR3_EXTI10_PG_Msk


	)

2420 
	#AFIO_EXTICR3_EXTI11_PA
 0x00000000U

	)

2421 
	#AFIO_EXTICR3_EXTI11_PB_Pos
 (12U)

	)

2422 
	#AFIO_EXTICR3_EXTI11_PB_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PB_Pos
Ë

	)

2423 
	#AFIO_EXTICR3_EXTI11_PB
 
AFIO_EXTICR3_EXTI11_PB_Msk


	)

2424 
	#AFIO_EXTICR3_EXTI11_PC_Pos
 (13U)

	)

2425 
	#AFIO_EXTICR3_EXTI11_PC_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PC_Pos
Ë

	)

2426 
	#AFIO_EXTICR3_EXTI11_PC
 
AFIO_EXTICR3_EXTI11_PC_Msk


	)

2427 
	#AFIO_EXTICR3_EXTI11_PD_Pos
 (12U)

	)

2428 
	#AFIO_EXTICR3_EXTI11_PD_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI11_PD_Pos
Ë

	)

2429 
	#AFIO_EXTICR3_EXTI11_PD
 
AFIO_EXTICR3_EXTI11_PD_Msk


	)

2430 
	#AFIO_EXTICR3_EXTI11_PE_Pos
 (14U)

	)

2431 
	#AFIO_EXTICR3_EXTI11_PE_Msk
 (0x1UL << 
AFIO_EXTICR3_EXTI11_PE_Pos
Ë

	)

2432 
	#AFIO_EXTICR3_EXTI11_PE
 
AFIO_EXTICR3_EXTI11_PE_Msk


	)

2433 
	#AFIO_EXTICR3_EXTI11_PF_Pos
 (12U)

	)

2434 
	#AFIO_EXTICR3_EXTI11_PF_Msk
 (0x5UL << 
AFIO_EXTICR3_EXTI11_PF_Pos
Ë

	)

2435 
	#AFIO_EXTICR3_EXTI11_PF
 
AFIO_EXTICR3_EXTI11_PF_Msk


	)

2436 
	#AFIO_EXTICR3_EXTI11_PG_Pos
 (13U)

	)

2437 
	#AFIO_EXTICR3_EXTI11_PG_Msk
 (0x3UL << 
AFIO_EXTICR3_EXTI11_PG_Pos
Ë

	)

2438 
	#AFIO_EXTICR3_EXTI11_PG
 
AFIO_EXTICR3_EXTI11_PG_Msk


	)

2441 
	#AFIO_EXTICR4_EXTI12_Pos
 (0U)

	)

2442 
	#AFIO_EXTICR4_EXTI12_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI12_Pos
Ë

	)

2443 
	#AFIO_EXTICR4_EXTI12
 
AFIO_EXTICR4_EXTI12_Msk


	)

2444 
	#AFIO_EXTICR4_EXTI13_Pos
 (4U)

	)

2445 
	#AFIO_EXTICR4_EXTI13_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI13_Pos
Ë

	)

2446 
	#AFIO_EXTICR4_EXTI13
 
AFIO_EXTICR4_EXTI13_Msk


	)

2447 
	#AFIO_EXTICR4_EXTI14_Pos
 (8U)

	)

2448 
	#AFIO_EXTICR4_EXTI14_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI14_Pos
Ë

	)

2449 
	#AFIO_EXTICR4_EXTI14
 
AFIO_EXTICR4_EXTI14_Msk


	)

2450 
	#AFIO_EXTICR4_EXTI15_Pos
 (12U)

	)

2451 
	#AFIO_EXTICR4_EXTI15_Msk
 (0xFUL << 
AFIO_EXTICR4_EXTI15_Pos
Ë

	)

2452 
	#AFIO_EXTICR4_EXTI15
 
AFIO_EXTICR4_EXTI15_Msk


	)

2455 
	#AFIO_EXTICR4_EXTI12_PA
 0x00000000U

	)

2456 
	#AFIO_EXTICR4_EXTI12_PB_Pos
 (0U)

	)

2457 
	#AFIO_EXTICR4_EXTI12_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PB_Pos
Ë

	)

2458 
	#AFIO_EXTICR4_EXTI12_PB
 
AFIO_EXTICR4_EXTI12_PB_Msk


	)

2459 
	#AFIO_EXTICR4_EXTI12_PC_Pos
 (1U)

	)

2460 
	#AFIO_EXTICR4_EXTI12_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PC_Pos
Ë

	)

2461 
	#AFIO_EXTICR4_EXTI12_PC
 
AFIO_EXTICR4_EXTI12_PC_Msk


	)

2462 
	#AFIO_EXTICR4_EXTI12_PD_Pos
 (0U)

	)

2463 
	#AFIO_EXTICR4_EXTI12_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI12_PD_Pos
Ë

	)

2464 
	#AFIO_EXTICR4_EXTI12_PD
 
AFIO_EXTICR4_EXTI12_PD_Msk


	)

2465 
	#AFIO_EXTICR4_EXTI12_PE_Pos
 (2U)

	)

2466 
	#AFIO_EXTICR4_EXTI12_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI12_PE_Pos
Ë

	)

2467 
	#AFIO_EXTICR4_EXTI12_PE
 
AFIO_EXTICR4_EXTI12_PE_Msk


	)

2468 
	#AFIO_EXTICR4_EXTI12_PF_Pos
 (0U)

	)

2469 
	#AFIO_EXTICR4_EXTI12_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI12_PF_Pos
Ë

	)

2470 
	#AFIO_EXTICR4_EXTI12_PF
 
AFIO_EXTICR4_EXTI12_PF_Msk


	)

2471 
	#AFIO_EXTICR4_EXTI12_PG_Pos
 (1U)

	)

2472 
	#AFIO_EXTICR4_EXTI12_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI12_PG_Pos
Ë

	)

2473 
	#AFIO_EXTICR4_EXTI12_PG
 
AFIO_EXTICR4_EXTI12_PG_Msk


	)

2476 
	#AFIO_EXTICR4_EXTI13_PA
 0x00000000U

	)

2477 
	#AFIO_EXTICR4_EXTI13_PB_Pos
 (4U)

	)

2478 
	#AFIO_EXTICR4_EXTI13_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PB_Pos
Ë

	)

2479 
	#AFIO_EXTICR4_EXTI13_PB
 
AFIO_EXTICR4_EXTI13_PB_Msk


	)

2480 
	#AFIO_EXTICR4_EXTI13_PC_Pos
 (5U)

	)

2481 
	#AFIO_EXTICR4_EXTI13_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PC_Pos
Ë

	)

2482 
	#AFIO_EXTICR4_EXTI13_PC
 
AFIO_EXTICR4_EXTI13_PC_Msk


	)

2483 
	#AFIO_EXTICR4_EXTI13_PD_Pos
 (4U)

	)

2484 
	#AFIO_EXTICR4_EXTI13_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI13_PD_Pos
Ë

	)

2485 
	#AFIO_EXTICR4_EXTI13_PD
 
AFIO_EXTICR4_EXTI13_PD_Msk


	)

2486 
	#AFIO_EXTICR4_EXTI13_PE_Pos
 (6U)

	)

2487 
	#AFIO_EXTICR4_EXTI13_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI13_PE_Pos
Ë

	)

2488 
	#AFIO_EXTICR4_EXTI13_PE
 
AFIO_EXTICR4_EXTI13_PE_Msk


	)

2489 
	#AFIO_EXTICR4_EXTI13_PF_Pos
 (4U)

	)

2490 
	#AFIO_EXTICR4_EXTI13_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI13_PF_Pos
Ë

	)

2491 
	#AFIO_EXTICR4_EXTI13_PF
 
AFIO_EXTICR4_EXTI13_PF_Msk


	)

2492 
	#AFIO_EXTICR4_EXTI13_PG_Pos
 (5U)

	)

2493 
	#AFIO_EXTICR4_EXTI13_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI13_PG_Pos
Ë

	)

2494 
	#AFIO_EXTICR4_EXTI13_PG
 
AFIO_EXTICR4_EXTI13_PG_Msk


	)

2497 
	#AFIO_EXTICR4_EXTI14_PA
 0x00000000U

	)

2498 
	#AFIO_EXTICR4_EXTI14_PB_Pos
 (8U)

	)

2499 
	#AFIO_EXTICR4_EXTI14_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PB_Pos
Ë

	)

2500 
	#AFIO_EXTICR4_EXTI14_PB
 
AFIO_EXTICR4_EXTI14_PB_Msk


	)

2501 
	#AFIO_EXTICR4_EXTI14_PC_Pos
 (9U)

	)

2502 
	#AFIO_EXTICR4_EXTI14_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PC_Pos
Ë

	)

2503 
	#AFIO_EXTICR4_EXTI14_PC
 
AFIO_EXTICR4_EXTI14_PC_Msk


	)

2504 
	#AFIO_EXTICR4_EXTI14_PD_Pos
 (8U)

	)

2505 
	#AFIO_EXTICR4_EXTI14_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI14_PD_Pos
Ë

	)

2506 
	#AFIO_EXTICR4_EXTI14_PD
 
AFIO_EXTICR4_EXTI14_PD_Msk


	)

2507 
	#AFIO_EXTICR4_EXTI14_PE_Pos
 (10U)

	)

2508 
	#AFIO_EXTICR4_EXTI14_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI14_PE_Pos
Ë

	)

2509 
	#AFIO_EXTICR4_EXTI14_PE
 
AFIO_EXTICR4_EXTI14_PE_Msk


	)

2510 
	#AFIO_EXTICR4_EXTI14_PF_Pos
 (8U)

	)

2511 
	#AFIO_EXTICR4_EXTI14_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI14_PF_Pos
Ë

	)

2512 
	#AFIO_EXTICR4_EXTI14_PF
 
AFIO_EXTICR4_EXTI14_PF_Msk


	)

2513 
	#AFIO_EXTICR4_EXTI14_PG_Pos
 (9U)

	)

2514 
	#AFIO_EXTICR4_EXTI14_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI14_PG_Pos
Ë

	)

2515 
	#AFIO_EXTICR4_EXTI14_PG
 
AFIO_EXTICR4_EXTI14_PG_Msk


	)

2518 
	#AFIO_EXTICR4_EXTI15_PA
 0x00000000U

	)

2519 
	#AFIO_EXTICR4_EXTI15_PB_Pos
 (12U)

	)

2520 
	#AFIO_EXTICR4_EXTI15_PB_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PB_Pos
Ë

	)

2521 
	#AFIO_EXTICR4_EXTI15_PB
 
AFIO_EXTICR4_EXTI15_PB_Msk


	)

2522 
	#AFIO_EXTICR4_EXTI15_PC_Pos
 (13U)

	)

2523 
	#AFIO_EXTICR4_EXTI15_PC_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PC_Pos
Ë

	)

2524 
	#AFIO_EXTICR4_EXTI15_PC
 
AFIO_EXTICR4_EXTI15_PC_Msk


	)

2525 
	#AFIO_EXTICR4_EXTI15_PD_Pos
 (12U)

	)

2526 
	#AFIO_EXTICR4_EXTI15_PD_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI15_PD_Pos
Ë

	)

2527 
	#AFIO_EXTICR4_EXTI15_PD
 
AFIO_EXTICR4_EXTI15_PD_Msk


	)

2528 
	#AFIO_EXTICR4_EXTI15_PE_Pos
 (14U)

	)

2529 
	#AFIO_EXTICR4_EXTI15_PE_Msk
 (0x1UL << 
AFIO_EXTICR4_EXTI15_PE_Pos
Ë

	)

2530 
	#AFIO_EXTICR4_EXTI15_PE
 
AFIO_EXTICR4_EXTI15_PE_Msk


	)

2531 
	#AFIO_EXTICR4_EXTI15_PF_Pos
 (12U)

	)

2532 
	#AFIO_EXTICR4_EXTI15_PF_Msk
 (0x5UL << 
AFIO_EXTICR4_EXTI15_PF_Pos
Ë

	)

2533 
	#AFIO_EXTICR4_EXTI15_PF
 
AFIO_EXTICR4_EXTI15_PF_Msk


	)

2534 
	#AFIO_EXTICR4_EXTI15_PG_Pos
 (13U)

	)

2535 
	#AFIO_EXTICR4_EXTI15_PG_Msk
 (0x3UL << 
AFIO_EXTICR4_EXTI15_PG_Pos
Ë

	)

2536 
	#AFIO_EXTICR4_EXTI15_PG
 
AFIO_EXTICR4_EXTI15_PG_Msk


	)

2549 
	#EXTI_IMR_MR0_Pos
 (0U)

	)

2550 
	#EXTI_IMR_MR0_Msk
 (0x1UL << 
EXTI_IMR_MR0_Pos
Ë

	)

2551 
	#EXTI_IMR_MR0
 
EXTI_IMR_MR0_Msk


	)

2552 
	#EXTI_IMR_MR1_Pos
 (1U)

	)

2553 
	#EXTI_IMR_MR1_Msk
 (0x1UL << 
EXTI_IMR_MR1_Pos
Ë

	)

2554 
	#EXTI_IMR_MR1
 
EXTI_IMR_MR1_Msk


	)

2555 
	#EXTI_IMR_MR2_Pos
 (2U)

	)

2556 
	#EXTI_IMR_MR2_Msk
 (0x1UL << 
EXTI_IMR_MR2_Pos
Ë

	)

2557 
	#EXTI_IMR_MR2
 
EXTI_IMR_MR2_Msk


	)

2558 
	#EXTI_IMR_MR3_Pos
 (3U)

	)

2559 
	#EXTI_IMR_MR3_Msk
 (0x1UL << 
EXTI_IMR_MR3_Pos
Ë

	)

2560 
	#EXTI_IMR_MR3
 
EXTI_IMR_MR3_Msk


	)

2561 
	#EXTI_IMR_MR4_Pos
 (4U)

	)

2562 
	#EXTI_IMR_MR4_Msk
 (0x1UL << 
EXTI_IMR_MR4_Pos
Ë

	)

2563 
	#EXTI_IMR_MR4
 
EXTI_IMR_MR4_Msk


	)

2564 
	#EXTI_IMR_MR5_Pos
 (5U)

	)

2565 
	#EXTI_IMR_MR5_Msk
 (0x1UL << 
EXTI_IMR_MR5_Pos
Ë

	)

2566 
	#EXTI_IMR_MR5
 
EXTI_IMR_MR5_Msk


	)

2567 
	#EXTI_IMR_MR6_Pos
 (6U)

	)

2568 
	#EXTI_IMR_MR6_Msk
 (0x1UL << 
EXTI_IMR_MR6_Pos
Ë

	)

2569 
	#EXTI_IMR_MR6
 
EXTI_IMR_MR6_Msk


	)

2570 
	#EXTI_IMR_MR7_Pos
 (7U)

	)

2571 
	#EXTI_IMR_MR7_Msk
 (0x1UL << 
EXTI_IMR_MR7_Pos
Ë

	)

2572 
	#EXTI_IMR_MR7
 
EXTI_IMR_MR7_Msk


	)

2573 
	#EXTI_IMR_MR8_Pos
 (8U)

	)

2574 
	#EXTI_IMR_MR8_Msk
 (0x1UL << 
EXTI_IMR_MR8_Pos
Ë

	)

2575 
	#EXTI_IMR_MR8
 
EXTI_IMR_MR8_Msk


	)

2576 
	#EXTI_IMR_MR9_Pos
 (9U)

	)

2577 
	#EXTI_IMR_MR9_Msk
 (0x1UL << 
EXTI_IMR_MR9_Pos
Ë

	)

2578 
	#EXTI_IMR_MR9
 
EXTI_IMR_MR9_Msk


	)

2579 
	#EXTI_IMR_MR10_Pos
 (10U)

	)

2580 
	#EXTI_IMR_MR10_Msk
 (0x1UL << 
EXTI_IMR_MR10_Pos
Ë

	)

2581 
	#EXTI_IMR_MR10
 
EXTI_IMR_MR10_Msk


	)

2582 
	#EXTI_IMR_MR11_Pos
 (11U)

	)

2583 
	#EXTI_IMR_MR11_Msk
 (0x1UL << 
EXTI_IMR_MR11_Pos
Ë

	)

2584 
	#EXTI_IMR_MR11
 
EXTI_IMR_MR11_Msk


	)

2585 
	#EXTI_IMR_MR12_Pos
 (12U)

	)

2586 
	#EXTI_IMR_MR12_Msk
 (0x1UL << 
EXTI_IMR_MR12_Pos
Ë

	)

2587 
	#EXTI_IMR_MR12
 
EXTI_IMR_MR12_Msk


	)

2588 
	#EXTI_IMR_MR13_Pos
 (13U)

	)

2589 
	#EXTI_IMR_MR13_Msk
 (0x1UL << 
EXTI_IMR_MR13_Pos
Ë

	)

2590 
	#EXTI_IMR_MR13
 
EXTI_IMR_MR13_Msk


	)

2591 
	#EXTI_IMR_MR14_Pos
 (14U)

	)

2592 
	#EXTI_IMR_MR14_Msk
 (0x1UL << 
EXTI_IMR_MR14_Pos
Ë

	)

2593 
	#EXTI_IMR_MR14
 
EXTI_IMR_MR14_Msk


	)

2594 
	#EXTI_IMR_MR15_Pos
 (15U)

	)

2595 
	#EXTI_IMR_MR15_Msk
 (0x1UL << 
EXTI_IMR_MR15_Pos
Ë

	)

2596 
	#EXTI_IMR_MR15
 
EXTI_IMR_MR15_Msk


	)

2597 
	#EXTI_IMR_MR16_Pos
 (16U)

	)

2598 
	#EXTI_IMR_MR16_Msk
 (0x1UL << 
EXTI_IMR_MR16_Pos
Ë

	)

2599 
	#EXTI_IMR_MR16
 
EXTI_IMR_MR16_Msk


	)

2600 
	#EXTI_IMR_MR17_Pos
 (17U)

	)

2601 
	#EXTI_IMR_MR17_Msk
 (0x1UL << 
EXTI_IMR_MR17_Pos
Ë

	)

2602 
	#EXTI_IMR_MR17
 
EXTI_IMR_MR17_Msk


	)

2603 
	#EXTI_IMR_MR18_Pos
 (18U)

	)

2604 
	#EXTI_IMR_MR18_Msk
 (0x1UL << 
EXTI_IMR_MR18_Pos
Ë

	)

2605 
	#EXTI_IMR_MR18
 
EXTI_IMR_MR18_Msk


	)

2608 
	#EXTI_IMR_IM0
 
EXTI_IMR_MR0


	)

2609 
	#EXTI_IMR_IM1
 
EXTI_IMR_MR1


	)

2610 
	#EXTI_IMR_IM2
 
EXTI_IMR_MR2


	)

2611 
	#EXTI_IMR_IM3
 
EXTI_IMR_MR3


	)

2612 
	#EXTI_IMR_IM4
 
EXTI_IMR_MR4


	)

2613 
	#EXTI_IMR_IM5
 
EXTI_IMR_MR5


	)

2614 
	#EXTI_IMR_IM6
 
EXTI_IMR_MR6


	)

2615 
	#EXTI_IMR_IM7
 
EXTI_IMR_MR7


	)

2616 
	#EXTI_IMR_IM8
 
EXTI_IMR_MR8


	)

2617 
	#EXTI_IMR_IM9
 
EXTI_IMR_MR9


	)

2618 
	#EXTI_IMR_IM10
 
EXTI_IMR_MR10


	)

2619 
	#EXTI_IMR_IM11
 
EXTI_IMR_MR11


	)

2620 
	#EXTI_IMR_IM12
 
EXTI_IMR_MR12


	)

2621 
	#EXTI_IMR_IM13
 
EXTI_IMR_MR13


	)

2622 
	#EXTI_IMR_IM14
 
EXTI_IMR_MR14


	)

2623 
	#EXTI_IMR_IM15
 
EXTI_IMR_MR15


	)

2624 
	#EXTI_IMR_IM16
 
EXTI_IMR_MR16


	)

2625 
	#EXTI_IMR_IM17
 
EXTI_IMR_MR17


	)

2626 
	#EXTI_IMR_IM18
 
EXTI_IMR_MR18


	)

2627 
	#EXTI_IMR_IM
 0x0007FFFFU

	)

2630 
	#EXTI_EMR_MR0_Pos
 (0U)

	)

2631 
	#EXTI_EMR_MR0_Msk
 (0x1UL << 
EXTI_EMR_MR0_Pos
Ë

	)

2632 
	#EXTI_EMR_MR0
 
EXTI_EMR_MR0_Msk


	)

2633 
	#EXTI_EMR_MR1_Pos
 (1U)

	)

2634 
	#EXTI_EMR_MR1_Msk
 (0x1UL << 
EXTI_EMR_MR1_Pos
Ë

	)

2635 
	#EXTI_EMR_MR1
 
EXTI_EMR_MR1_Msk


	)

2636 
	#EXTI_EMR_MR2_Pos
 (2U)

	)

2637 
	#EXTI_EMR_MR2_Msk
 (0x1UL << 
EXTI_EMR_MR2_Pos
Ë

	)

2638 
	#EXTI_EMR_MR2
 
EXTI_EMR_MR2_Msk


	)

2639 
	#EXTI_EMR_MR3_Pos
 (3U)

	)

2640 
	#EXTI_EMR_MR3_Msk
 (0x1UL << 
EXTI_EMR_MR3_Pos
Ë

	)

2641 
	#EXTI_EMR_MR3
 
EXTI_EMR_MR3_Msk


	)

2642 
	#EXTI_EMR_MR4_Pos
 (4U)

	)

2643 
	#EXTI_EMR_MR4_Msk
 (0x1UL << 
EXTI_EMR_MR4_Pos
Ë

	)

2644 
	#EXTI_EMR_MR4
 
EXTI_EMR_MR4_Msk


	)

2645 
	#EXTI_EMR_MR5_Pos
 (5U)

	)

2646 
	#EXTI_EMR_MR5_Msk
 (0x1UL << 
EXTI_EMR_MR5_Pos
Ë

	)

2647 
	#EXTI_EMR_MR5
 
EXTI_EMR_MR5_Msk


	)

2648 
	#EXTI_EMR_MR6_Pos
 (6U)

	)

2649 
	#EXTI_EMR_MR6_Msk
 (0x1UL << 
EXTI_EMR_MR6_Pos
Ë

	)

2650 
	#EXTI_EMR_MR6
 
EXTI_EMR_MR6_Msk


	)

2651 
	#EXTI_EMR_MR7_Pos
 (7U)

	)

2652 
	#EXTI_EMR_MR7_Msk
 (0x1UL << 
EXTI_EMR_MR7_Pos
Ë

	)

2653 
	#EXTI_EMR_MR7
 
EXTI_EMR_MR7_Msk


	)

2654 
	#EXTI_EMR_MR8_Pos
 (8U)

	)

2655 
	#EXTI_EMR_MR8_Msk
 (0x1UL << 
EXTI_EMR_MR8_Pos
Ë

	)

2656 
	#EXTI_EMR_MR8
 
EXTI_EMR_MR8_Msk


	)

2657 
	#EXTI_EMR_MR9_Pos
 (9U)

	)

2658 
	#EXTI_EMR_MR9_Msk
 (0x1UL << 
EXTI_EMR_MR9_Pos
Ë

	)

2659 
	#EXTI_EMR_MR9
 
EXTI_EMR_MR9_Msk


	)

2660 
	#EXTI_EMR_MR10_Pos
 (10U)

	)

2661 
	#EXTI_EMR_MR10_Msk
 (0x1UL << 
EXTI_EMR_MR10_Pos
Ë

	)

2662 
	#EXTI_EMR_MR10
 
EXTI_EMR_MR10_Msk


	)

2663 
	#EXTI_EMR_MR11_Pos
 (11U)

	)

2664 
	#EXTI_EMR_MR11_Msk
 (0x1UL << 
EXTI_EMR_MR11_Pos
Ë

	)

2665 
	#EXTI_EMR_MR11
 
EXTI_EMR_MR11_Msk


	)

2666 
	#EXTI_EMR_MR12_Pos
 (12U)

	)

2667 
	#EXTI_EMR_MR12_Msk
 (0x1UL << 
EXTI_EMR_MR12_Pos
Ë

	)

2668 
	#EXTI_EMR_MR12
 
EXTI_EMR_MR12_Msk


	)

2669 
	#EXTI_EMR_MR13_Pos
 (13U)

	)

2670 
	#EXTI_EMR_MR13_Msk
 (0x1UL << 
EXTI_EMR_MR13_Pos
Ë

	)

2671 
	#EXTI_EMR_MR13
 
EXTI_EMR_MR13_Msk


	)

2672 
	#EXTI_EMR_MR14_Pos
 (14U)

	)

2673 
	#EXTI_EMR_MR14_Msk
 (0x1UL << 
EXTI_EMR_MR14_Pos
Ë

	)

2674 
	#EXTI_EMR_MR14
 
EXTI_EMR_MR14_Msk


	)

2675 
	#EXTI_EMR_MR15_Pos
 (15U)

	)

2676 
	#EXTI_EMR_MR15_Msk
 (0x1UL << 
EXTI_EMR_MR15_Pos
Ë

	)

2677 
	#EXTI_EMR_MR15
 
EXTI_EMR_MR15_Msk


	)

2678 
	#EXTI_EMR_MR16_Pos
 (16U)

	)

2679 
	#EXTI_EMR_MR16_Msk
 (0x1UL << 
EXTI_EMR_MR16_Pos
Ë

	)

2680 
	#EXTI_EMR_MR16
 
EXTI_EMR_MR16_Msk


	)

2681 
	#EXTI_EMR_MR17_Pos
 (17U)

	)

2682 
	#EXTI_EMR_MR17_Msk
 (0x1UL << 
EXTI_EMR_MR17_Pos
Ë

	)

2683 
	#EXTI_EMR_MR17
 
EXTI_EMR_MR17_Msk


	)

2684 
	#EXTI_EMR_MR18_Pos
 (18U)

	)

2685 
	#EXTI_EMR_MR18_Msk
 (0x1UL << 
EXTI_EMR_MR18_Pos
Ë

	)

2686 
	#EXTI_EMR_MR18
 
EXTI_EMR_MR18_Msk


	)

2689 
	#EXTI_EMR_EM0
 
EXTI_EMR_MR0


	)

2690 
	#EXTI_EMR_EM1
 
EXTI_EMR_MR1


	)

2691 
	#EXTI_EMR_EM2
 
EXTI_EMR_MR2


	)

2692 
	#EXTI_EMR_EM3
 
EXTI_EMR_MR3


	)

2693 
	#EXTI_EMR_EM4
 
EXTI_EMR_MR4


	)

2694 
	#EXTI_EMR_EM5
 
EXTI_EMR_MR5


	)

2695 
	#EXTI_EMR_EM6
 
EXTI_EMR_MR6


	)

2696 
	#EXTI_EMR_EM7
 
EXTI_EMR_MR7


	)

2697 
	#EXTI_EMR_EM8
 
EXTI_EMR_MR8


	)

2698 
	#EXTI_EMR_EM9
 
EXTI_EMR_MR9


	)

2699 
	#EXTI_EMR_EM10
 
EXTI_EMR_MR10


	)

2700 
	#EXTI_EMR_EM11
 
EXTI_EMR_MR11


	)

2701 
	#EXTI_EMR_EM12
 
EXTI_EMR_MR12


	)

2702 
	#EXTI_EMR_EM13
 
EXTI_EMR_MR13


	)

2703 
	#EXTI_EMR_EM14
 
EXTI_EMR_MR14


	)

2704 
	#EXTI_EMR_EM15
 
EXTI_EMR_MR15


	)

2705 
	#EXTI_EMR_EM16
 
EXTI_EMR_MR16


	)

2706 
	#EXTI_EMR_EM17
 
EXTI_EMR_MR17


	)

2707 
	#EXTI_EMR_EM18
 
EXTI_EMR_MR18


	)

2710 
	#EXTI_RTSR_TR0_Pos
 (0U)

	)

2711 
	#EXTI_RTSR_TR0_Msk
 (0x1UL << 
EXTI_RTSR_TR0_Pos
Ë

	)

2712 
	#EXTI_RTSR_TR0
 
EXTI_RTSR_TR0_Msk


	)

2713 
	#EXTI_RTSR_TR1_Pos
 (1U)

	)

2714 
	#EXTI_RTSR_TR1_Msk
 (0x1UL << 
EXTI_RTSR_TR1_Pos
Ë

	)

2715 
	#EXTI_RTSR_TR1
 
EXTI_RTSR_TR1_Msk


	)

2716 
	#EXTI_RTSR_TR2_Pos
 (2U)

	)

2717 
	#EXTI_RTSR_TR2_Msk
 (0x1UL << 
EXTI_RTSR_TR2_Pos
Ë

	)

2718 
	#EXTI_RTSR_TR2
 
EXTI_RTSR_TR2_Msk


	)

2719 
	#EXTI_RTSR_TR3_Pos
 (3U)

	)

2720 
	#EXTI_RTSR_TR3_Msk
 (0x1UL << 
EXTI_RTSR_TR3_Pos
Ë

	)

2721 
	#EXTI_RTSR_TR3
 
EXTI_RTSR_TR3_Msk


	)

2722 
	#EXTI_RTSR_TR4_Pos
 (4U)

	)

2723 
	#EXTI_RTSR_TR4_Msk
 (0x1UL << 
EXTI_RTSR_TR4_Pos
Ë

	)

2724 
	#EXTI_RTSR_TR4
 
EXTI_RTSR_TR4_Msk


	)

2725 
	#EXTI_RTSR_TR5_Pos
 (5U)

	)

2726 
	#EXTI_RTSR_TR5_Msk
 (0x1UL << 
EXTI_RTSR_TR5_Pos
Ë

	)

2727 
	#EXTI_RTSR_TR5
 
EXTI_RTSR_TR5_Msk


	)

2728 
	#EXTI_RTSR_TR6_Pos
 (6U)

	)

2729 
	#EXTI_RTSR_TR6_Msk
 (0x1UL << 
EXTI_RTSR_TR6_Pos
Ë

	)

2730 
	#EXTI_RTSR_TR6
 
EXTI_RTSR_TR6_Msk


	)

2731 
	#EXTI_RTSR_TR7_Pos
 (7U)

	)

2732 
	#EXTI_RTSR_TR7_Msk
 (0x1UL << 
EXTI_RTSR_TR7_Pos
Ë

	)

2733 
	#EXTI_RTSR_TR7
 
EXTI_RTSR_TR7_Msk


	)

2734 
	#EXTI_RTSR_TR8_Pos
 (8U)

	)

2735 
	#EXTI_RTSR_TR8_Msk
 (0x1UL << 
EXTI_RTSR_TR8_Pos
Ë

	)

2736 
	#EXTI_RTSR_TR8
 
EXTI_RTSR_TR8_Msk


	)

2737 
	#EXTI_RTSR_TR9_Pos
 (9U)

	)

2738 
	#EXTI_RTSR_TR9_Msk
 (0x1UL << 
EXTI_RTSR_TR9_Pos
Ë

	)

2739 
	#EXTI_RTSR_TR9
 
EXTI_RTSR_TR9_Msk


	)

2740 
	#EXTI_RTSR_TR10_Pos
 (10U)

	)

2741 
	#EXTI_RTSR_TR10_Msk
 (0x1UL << 
EXTI_RTSR_TR10_Pos
Ë

	)

2742 
	#EXTI_RTSR_TR10
 
EXTI_RTSR_TR10_Msk


	)

2743 
	#EXTI_RTSR_TR11_Pos
 (11U)

	)

2744 
	#EXTI_RTSR_TR11_Msk
 (0x1UL << 
EXTI_RTSR_TR11_Pos
Ë

	)

2745 
	#EXTI_RTSR_TR11
 
EXTI_RTSR_TR11_Msk


	)

2746 
	#EXTI_RTSR_TR12_Pos
 (12U)

	)

2747 
	#EXTI_RTSR_TR12_Msk
 (0x1UL << 
EXTI_RTSR_TR12_Pos
Ë

	)

2748 
	#EXTI_RTSR_TR12
 
EXTI_RTSR_TR12_Msk


	)

2749 
	#EXTI_RTSR_TR13_Pos
 (13U)

	)

2750 
	#EXTI_RTSR_TR13_Msk
 (0x1UL << 
EXTI_RTSR_TR13_Pos
Ë

	)

2751 
	#EXTI_RTSR_TR13
 
EXTI_RTSR_TR13_Msk


	)

2752 
	#EXTI_RTSR_TR14_Pos
 (14U)

	)

2753 
	#EXTI_RTSR_TR14_Msk
 (0x1UL << 
EXTI_RTSR_TR14_Pos
Ë

	)

2754 
	#EXTI_RTSR_TR14
 
EXTI_RTSR_TR14_Msk


	)

2755 
	#EXTI_RTSR_TR15_Pos
 (15U)

	)

2756 
	#EXTI_RTSR_TR15_Msk
 (0x1UL << 
EXTI_RTSR_TR15_Pos
Ë

	)

2757 
	#EXTI_RTSR_TR15
 
EXTI_RTSR_TR15_Msk


	)

2758 
	#EXTI_RTSR_TR16_Pos
 (16U)

	)

2759 
	#EXTI_RTSR_TR16_Msk
 (0x1UL << 
EXTI_RTSR_TR16_Pos
Ë

	)

2760 
	#EXTI_RTSR_TR16
 
EXTI_RTSR_TR16_Msk


	)

2761 
	#EXTI_RTSR_TR17_Pos
 (17U)

	)

2762 
	#EXTI_RTSR_TR17_Msk
 (0x1UL << 
EXTI_RTSR_TR17_Pos
Ë

	)

2763 
	#EXTI_RTSR_TR17
 
EXTI_RTSR_TR17_Msk


	)

2764 
	#EXTI_RTSR_TR18_Pos
 (18U)

	)

2765 
	#EXTI_RTSR_TR18_Msk
 (0x1UL << 
EXTI_RTSR_TR18_Pos
Ë

	)

2766 
	#EXTI_RTSR_TR18
 
EXTI_RTSR_TR18_Msk


	)

2769 
	#EXTI_RTSR_RT0
 
EXTI_RTSR_TR0


	)

2770 
	#EXTI_RTSR_RT1
 
EXTI_RTSR_TR1


	)

2771 
	#EXTI_RTSR_RT2
 
EXTI_RTSR_TR2


	)

2772 
	#EXTI_RTSR_RT3
 
EXTI_RTSR_TR3


	)

2773 
	#EXTI_RTSR_RT4
 
EXTI_RTSR_TR4


	)

2774 
	#EXTI_RTSR_RT5
 
EXTI_RTSR_TR5


	)

2775 
	#EXTI_RTSR_RT6
 
EXTI_RTSR_TR6


	)

2776 
	#EXTI_RTSR_RT7
 
EXTI_RTSR_TR7


	)

2777 
	#EXTI_RTSR_RT8
 
EXTI_RTSR_TR8


	)

2778 
	#EXTI_RTSR_RT9
 
EXTI_RTSR_TR9


	)

2779 
	#EXTI_RTSR_RT10
 
EXTI_RTSR_TR10


	)

2780 
	#EXTI_RTSR_RT11
 
EXTI_RTSR_TR11


	)

2781 
	#EXTI_RTSR_RT12
 
EXTI_RTSR_TR12


	)

2782 
	#EXTI_RTSR_RT13
 
EXTI_RTSR_TR13


	)

2783 
	#EXTI_RTSR_RT14
 
EXTI_RTSR_TR14


	)

2784 
	#EXTI_RTSR_RT15
 
EXTI_RTSR_TR15


	)

2785 
	#EXTI_RTSR_RT16
 
EXTI_RTSR_TR16


	)

2786 
	#EXTI_RTSR_RT17
 
EXTI_RTSR_TR17


	)

2787 
	#EXTI_RTSR_RT18
 
EXTI_RTSR_TR18


	)

2790 
	#EXTI_FTSR_TR0_Pos
 (0U)

	)

2791 
	#EXTI_FTSR_TR0_Msk
 (0x1UL << 
EXTI_FTSR_TR0_Pos
Ë

	)

2792 
	#EXTI_FTSR_TR0
 
EXTI_FTSR_TR0_Msk


	)

2793 
	#EXTI_FTSR_TR1_Pos
 (1U)

	)

2794 
	#EXTI_FTSR_TR1_Msk
 (0x1UL << 
EXTI_FTSR_TR1_Pos
Ë

	)

2795 
	#EXTI_FTSR_TR1
 
EXTI_FTSR_TR1_Msk


	)

2796 
	#EXTI_FTSR_TR2_Pos
 (2U)

	)

2797 
	#EXTI_FTSR_TR2_Msk
 (0x1UL << 
EXTI_FTSR_TR2_Pos
Ë

	)

2798 
	#EXTI_FTSR_TR2
 
EXTI_FTSR_TR2_Msk


	)

2799 
	#EXTI_FTSR_TR3_Pos
 (3U)

	)

2800 
	#EXTI_FTSR_TR3_Msk
 (0x1UL << 
EXTI_FTSR_TR3_Pos
Ë

	)

2801 
	#EXTI_FTSR_TR3
 
EXTI_FTSR_TR3_Msk


	)

2802 
	#EXTI_FTSR_TR4_Pos
 (4U)

	)

2803 
	#EXTI_FTSR_TR4_Msk
 (0x1UL << 
EXTI_FTSR_TR4_Pos
Ë

	)

2804 
	#EXTI_FTSR_TR4
 
EXTI_FTSR_TR4_Msk


	)

2805 
	#EXTI_FTSR_TR5_Pos
 (5U)

	)

2806 
	#EXTI_FTSR_TR5_Msk
 (0x1UL << 
EXTI_FTSR_TR5_Pos
Ë

	)

2807 
	#EXTI_FTSR_TR5
 
EXTI_FTSR_TR5_Msk


	)

2808 
	#EXTI_FTSR_TR6_Pos
 (6U)

	)

2809 
	#EXTI_FTSR_TR6_Msk
 (0x1UL << 
EXTI_FTSR_TR6_Pos
Ë

	)

2810 
	#EXTI_FTSR_TR6
 
EXTI_FTSR_TR6_Msk


	)

2811 
	#EXTI_FTSR_TR7_Pos
 (7U)

	)

2812 
	#EXTI_FTSR_TR7_Msk
 (0x1UL << 
EXTI_FTSR_TR7_Pos
Ë

	)

2813 
	#EXTI_FTSR_TR7
 
EXTI_FTSR_TR7_Msk


	)

2814 
	#EXTI_FTSR_TR8_Pos
 (8U)

	)

2815 
	#EXTI_FTSR_TR8_Msk
 (0x1UL << 
EXTI_FTSR_TR8_Pos
Ë

	)

2816 
	#EXTI_FTSR_TR8
 
EXTI_FTSR_TR8_Msk


	)

2817 
	#EXTI_FTSR_TR9_Pos
 (9U)

	)

2818 
	#EXTI_FTSR_TR9_Msk
 (0x1UL << 
EXTI_FTSR_TR9_Pos
Ë

	)

2819 
	#EXTI_FTSR_TR9
 
EXTI_FTSR_TR9_Msk


	)

2820 
	#EXTI_FTSR_TR10_Pos
 (10U)

	)

2821 
	#EXTI_FTSR_TR10_Msk
 (0x1UL << 
EXTI_FTSR_TR10_Pos
Ë

	)

2822 
	#EXTI_FTSR_TR10
 
EXTI_FTSR_TR10_Msk


	)

2823 
	#EXTI_FTSR_TR11_Pos
 (11U)

	)

2824 
	#EXTI_FTSR_TR11_Msk
 (0x1UL << 
EXTI_FTSR_TR11_Pos
Ë

	)

2825 
	#EXTI_FTSR_TR11
 
EXTI_FTSR_TR11_Msk


	)

2826 
	#EXTI_FTSR_TR12_Pos
 (12U)

	)

2827 
	#EXTI_FTSR_TR12_Msk
 (0x1UL << 
EXTI_FTSR_TR12_Pos
Ë

	)

2828 
	#EXTI_FTSR_TR12
 
EXTI_FTSR_TR12_Msk


	)

2829 
	#EXTI_FTSR_TR13_Pos
 (13U)

	)

2830 
	#EXTI_FTSR_TR13_Msk
 (0x1UL << 
EXTI_FTSR_TR13_Pos
Ë

	)

2831 
	#EXTI_FTSR_TR13
 
EXTI_FTSR_TR13_Msk


	)

2832 
	#EXTI_FTSR_TR14_Pos
 (14U)

	)

2833 
	#EXTI_FTSR_TR14_Msk
 (0x1UL << 
EXTI_FTSR_TR14_Pos
Ë

	)

2834 
	#EXTI_FTSR_TR14
 
EXTI_FTSR_TR14_Msk


	)

2835 
	#EXTI_FTSR_TR15_Pos
 (15U)

	)

2836 
	#EXTI_FTSR_TR15_Msk
 (0x1UL << 
EXTI_FTSR_TR15_Pos
Ë

	)

2837 
	#EXTI_FTSR_TR15
 
EXTI_FTSR_TR15_Msk


	)

2838 
	#EXTI_FTSR_TR16_Pos
 (16U)

	)

2839 
	#EXTI_FTSR_TR16_Msk
 (0x1UL << 
EXTI_FTSR_TR16_Pos
Ë

	)

2840 
	#EXTI_FTSR_TR16
 
EXTI_FTSR_TR16_Msk


	)

2841 
	#EXTI_FTSR_TR17_Pos
 (17U)

	)

2842 
	#EXTI_FTSR_TR17_Msk
 (0x1UL << 
EXTI_FTSR_TR17_Pos
Ë

	)

2843 
	#EXTI_FTSR_TR17
 
EXTI_FTSR_TR17_Msk


	)

2844 
	#EXTI_FTSR_TR18_Pos
 (18U)

	)

2845 
	#EXTI_FTSR_TR18_Msk
 (0x1UL << 
EXTI_FTSR_TR18_Pos
Ë

	)

2846 
	#EXTI_FTSR_TR18
 
EXTI_FTSR_TR18_Msk


	)

2849 
	#EXTI_FTSR_FT0
 
EXTI_FTSR_TR0


	)

2850 
	#EXTI_FTSR_FT1
 
EXTI_FTSR_TR1


	)

2851 
	#EXTI_FTSR_FT2
 
EXTI_FTSR_TR2


	)

2852 
	#EXTI_FTSR_FT3
 
EXTI_FTSR_TR3


	)

2853 
	#EXTI_FTSR_FT4
 
EXTI_FTSR_TR4


	)

2854 
	#EXTI_FTSR_FT5
 
EXTI_FTSR_TR5


	)

2855 
	#EXTI_FTSR_FT6
 
EXTI_FTSR_TR6


	)

2856 
	#EXTI_FTSR_FT7
 
EXTI_FTSR_TR7


	)

2857 
	#EXTI_FTSR_FT8
 
EXTI_FTSR_TR8


	)

2858 
	#EXTI_FTSR_FT9
 
EXTI_FTSR_TR9


	)

2859 
	#EXTI_FTSR_FT10
 
EXTI_FTSR_TR10


	)

2860 
	#EXTI_FTSR_FT11
 
EXTI_FTSR_TR11


	)

2861 
	#EXTI_FTSR_FT12
 
EXTI_FTSR_TR12


	)

2862 
	#EXTI_FTSR_FT13
 
EXTI_FTSR_TR13


	)

2863 
	#EXTI_FTSR_FT14
 
EXTI_FTSR_TR14


	)

2864 
	#EXTI_FTSR_FT15
 
EXTI_FTSR_TR15


	)

2865 
	#EXTI_FTSR_FT16
 
EXTI_FTSR_TR16


	)

2866 
	#EXTI_FTSR_FT17
 
EXTI_FTSR_TR17


	)

2867 
	#EXTI_FTSR_FT18
 
EXTI_FTSR_TR18


	)

2870 
	#EXTI_SWIER_SWIER0_Pos
 (0U)

	)

2871 
	#EXTI_SWIER_SWIER0_Msk
 (0x1UL << 
EXTI_SWIER_SWIER0_Pos
Ë

	)

2872 
	#EXTI_SWIER_SWIER0
 
EXTI_SWIER_SWIER0_Msk


	)

2873 
	#EXTI_SWIER_SWIER1_Pos
 (1U)

	)

2874 
	#EXTI_SWIER_SWIER1_Msk
 (0x1UL << 
EXTI_SWIER_SWIER1_Pos
Ë

	)

2875 
	#EXTI_SWIER_SWIER1
 
EXTI_SWIER_SWIER1_Msk


	)

2876 
	#EXTI_SWIER_SWIER2_Pos
 (2U)

	)

2877 
	#EXTI_SWIER_SWIER2_Msk
 (0x1UL << 
EXTI_SWIER_SWIER2_Pos
Ë

	)

2878 
	#EXTI_SWIER_SWIER2
 
EXTI_SWIER_SWIER2_Msk


	)

2879 
	#EXTI_SWIER_SWIER3_Pos
 (3U)

	)

2880 
	#EXTI_SWIER_SWIER3_Msk
 (0x1UL << 
EXTI_SWIER_SWIER3_Pos
Ë

	)

2881 
	#EXTI_SWIER_SWIER3
 
EXTI_SWIER_SWIER3_Msk


	)

2882 
	#EXTI_SWIER_SWIER4_Pos
 (4U)

	)

2883 
	#EXTI_SWIER_SWIER4_Msk
 (0x1UL << 
EXTI_SWIER_SWIER4_Pos
Ë

	)

2884 
	#EXTI_SWIER_SWIER4
 
EXTI_SWIER_SWIER4_Msk


	)

2885 
	#EXTI_SWIER_SWIER5_Pos
 (5U)

	)

2886 
	#EXTI_SWIER_SWIER5_Msk
 (0x1UL << 
EXTI_SWIER_SWIER5_Pos
Ë

	)

2887 
	#EXTI_SWIER_SWIER5
 
EXTI_SWIER_SWIER5_Msk


	)

2888 
	#EXTI_SWIER_SWIER6_Pos
 (6U)

	)

2889 
	#EXTI_SWIER_SWIER6_Msk
 (0x1UL << 
EXTI_SWIER_SWIER6_Pos
Ë

	)

2890 
	#EXTI_SWIER_SWIER6
 
EXTI_SWIER_SWIER6_Msk


	)

2891 
	#EXTI_SWIER_SWIER7_Pos
 (7U)

	)

2892 
	#EXTI_SWIER_SWIER7_Msk
 (0x1UL << 
EXTI_SWIER_SWIER7_Pos
Ë

	)

2893 
	#EXTI_SWIER_SWIER7
 
EXTI_SWIER_SWIER7_Msk


	)

2894 
	#EXTI_SWIER_SWIER8_Pos
 (8U)

	)

2895 
	#EXTI_SWIER_SWIER8_Msk
 (0x1UL << 
EXTI_SWIER_SWIER8_Pos
Ë

	)

2896 
	#EXTI_SWIER_SWIER8
 
EXTI_SWIER_SWIER8_Msk


	)

2897 
	#EXTI_SWIER_SWIER9_Pos
 (9U)

	)

2898 
	#EXTI_SWIER_SWIER9_Msk
 (0x1UL << 
EXTI_SWIER_SWIER9_Pos
Ë

	)

2899 
	#EXTI_SWIER_SWIER9
 
EXTI_SWIER_SWIER9_Msk


	)

2900 
	#EXTI_SWIER_SWIER10_Pos
 (10U)

	)

2901 
	#EXTI_SWIER_SWIER10_Msk
 (0x1UL << 
EXTI_SWIER_SWIER10_Pos
Ë

	)

2902 
	#EXTI_SWIER_SWIER10
 
EXTI_SWIER_SWIER10_Msk


	)

2903 
	#EXTI_SWIER_SWIER11_Pos
 (11U)

	)

2904 
	#EXTI_SWIER_SWIER11_Msk
 (0x1UL << 
EXTI_SWIER_SWIER11_Pos
Ë

	)

2905 
	#EXTI_SWIER_SWIER11
 
EXTI_SWIER_SWIER11_Msk


	)

2906 
	#EXTI_SWIER_SWIER12_Pos
 (12U)

	)

2907 
	#EXTI_SWIER_SWIER12_Msk
 (0x1UL << 
EXTI_SWIER_SWIER12_Pos
Ë

	)

2908 
	#EXTI_SWIER_SWIER12
 
EXTI_SWIER_SWIER12_Msk


	)

2909 
	#EXTI_SWIER_SWIER13_Pos
 (13U)

	)

2910 
	#EXTI_SWIER_SWIER13_Msk
 (0x1UL << 
EXTI_SWIER_SWIER13_Pos
Ë

	)

2911 
	#EXTI_SWIER_SWIER13
 
EXTI_SWIER_SWIER13_Msk


	)

2912 
	#EXTI_SWIER_SWIER14_Pos
 (14U)

	)

2913 
	#EXTI_SWIER_SWIER14_Msk
 (0x1UL << 
EXTI_SWIER_SWIER14_Pos
Ë

	)

2914 
	#EXTI_SWIER_SWIER14
 
EXTI_SWIER_SWIER14_Msk


	)

2915 
	#EXTI_SWIER_SWIER15_Pos
 (15U)

	)

2916 
	#EXTI_SWIER_SWIER15_Msk
 (0x1UL << 
EXTI_SWIER_SWIER15_Pos
Ë

	)

2917 
	#EXTI_SWIER_SWIER15
 
EXTI_SWIER_SWIER15_Msk


	)

2918 
	#EXTI_SWIER_SWIER16_Pos
 (16U)

	)

2919 
	#EXTI_SWIER_SWIER16_Msk
 (0x1UL << 
EXTI_SWIER_SWIER16_Pos
Ë

	)

2920 
	#EXTI_SWIER_SWIER16
 
EXTI_SWIER_SWIER16_Msk


	)

2921 
	#EXTI_SWIER_SWIER17_Pos
 (17U)

	)

2922 
	#EXTI_SWIER_SWIER17_Msk
 (0x1UL << 
EXTI_SWIER_SWIER17_Pos
Ë

	)

2923 
	#EXTI_SWIER_SWIER17
 
EXTI_SWIER_SWIER17_Msk


	)

2924 
	#EXTI_SWIER_SWIER18_Pos
 (18U)

	)

2925 
	#EXTI_SWIER_SWIER18_Msk
 (0x1UL << 
EXTI_SWIER_SWIER18_Pos
Ë

	)

2926 
	#EXTI_SWIER_SWIER18
 
EXTI_SWIER_SWIER18_Msk


	)

2929 
	#EXTI_SWIER_SWI0
 
EXTI_SWIER_SWIER0


	)

2930 
	#EXTI_SWIER_SWI1
 
EXTI_SWIER_SWIER1


	)

2931 
	#EXTI_SWIER_SWI2
 
EXTI_SWIER_SWIER2


	)

2932 
	#EXTI_SWIER_SWI3
 
EXTI_SWIER_SWIER3


	)

2933 
	#EXTI_SWIER_SWI4
 
EXTI_SWIER_SWIER4


	)

2934 
	#EXTI_SWIER_SWI5
 
EXTI_SWIER_SWIER5


	)

2935 
	#EXTI_SWIER_SWI6
 
EXTI_SWIER_SWIER6


	)

2936 
	#EXTI_SWIER_SWI7
 
EXTI_SWIER_SWIER7


	)

2937 
	#EXTI_SWIER_SWI8
 
EXTI_SWIER_SWIER8


	)

2938 
	#EXTI_SWIER_SWI9
 
EXTI_SWIER_SWIER9


	)

2939 
	#EXTI_SWIER_SWI10
 
EXTI_SWIER_SWIER10


	)

2940 
	#EXTI_SWIER_SWI11
 
EXTI_SWIER_SWIER11


	)

2941 
	#EXTI_SWIER_SWI12
 
EXTI_SWIER_SWIER12


	)

2942 
	#EXTI_SWIER_SWI13
 
EXTI_SWIER_SWIER13


	)

2943 
	#EXTI_SWIER_SWI14
 
EXTI_SWIER_SWIER14


	)

2944 
	#EXTI_SWIER_SWI15
 
EXTI_SWIER_SWIER15


	)

2945 
	#EXTI_SWIER_SWI16
 
EXTI_SWIER_SWIER16


	)

2946 
	#EXTI_SWIER_SWI17
 
EXTI_SWIER_SWIER17


	)

2947 
	#EXTI_SWIER_SWI18
 
EXTI_SWIER_SWIER18


	)

2950 
	#EXTI_PR_PR0_Pos
 (0U)

	)

2951 
	#EXTI_PR_PR0_Msk
 (0x1UL << 
EXTI_PR_PR0_Pos
Ë

	)

2952 
	#EXTI_PR_PR0
 
EXTI_PR_PR0_Msk


	)

2953 
	#EXTI_PR_PR1_Pos
 (1U)

	)

2954 
	#EXTI_PR_PR1_Msk
 (0x1UL << 
EXTI_PR_PR1_Pos
Ë

	)

2955 
	#EXTI_PR_PR1
 
EXTI_PR_PR1_Msk


	)

2956 
	#EXTI_PR_PR2_Pos
 (2U)

	)

2957 
	#EXTI_PR_PR2_Msk
 (0x1UL << 
EXTI_PR_PR2_Pos
Ë

	)

2958 
	#EXTI_PR_PR2
 
EXTI_PR_PR2_Msk


	)

2959 
	#EXTI_PR_PR3_Pos
 (3U)

	)

2960 
	#EXTI_PR_PR3_Msk
 (0x1UL << 
EXTI_PR_PR3_Pos
Ë

	)

2961 
	#EXTI_PR_PR3
 
EXTI_PR_PR3_Msk


	)

2962 
	#EXTI_PR_PR4_Pos
 (4U)

	)

2963 
	#EXTI_PR_PR4_Msk
 (0x1UL << 
EXTI_PR_PR4_Pos
Ë

	)

2964 
	#EXTI_PR_PR4
 
EXTI_PR_PR4_Msk


	)

2965 
	#EXTI_PR_PR5_Pos
 (5U)

	)

2966 
	#EXTI_PR_PR5_Msk
 (0x1UL << 
EXTI_PR_PR5_Pos
Ë

	)

2967 
	#EXTI_PR_PR5
 
EXTI_PR_PR5_Msk


	)

2968 
	#EXTI_PR_PR6_Pos
 (6U)

	)

2969 
	#EXTI_PR_PR6_Msk
 (0x1UL << 
EXTI_PR_PR6_Pos
Ë

	)

2970 
	#EXTI_PR_PR6
 
EXTI_PR_PR6_Msk


	)

2971 
	#EXTI_PR_PR7_Pos
 (7U)

	)

2972 
	#EXTI_PR_PR7_Msk
 (0x1UL << 
EXTI_PR_PR7_Pos
Ë

	)

2973 
	#EXTI_PR_PR7
 
EXTI_PR_PR7_Msk


	)

2974 
	#EXTI_PR_PR8_Pos
 (8U)

	)

2975 
	#EXTI_PR_PR8_Msk
 (0x1UL << 
EXTI_PR_PR8_Pos
Ë

	)

2976 
	#EXTI_PR_PR8
 
EXTI_PR_PR8_Msk


	)

2977 
	#EXTI_PR_PR9_Pos
 (9U)

	)

2978 
	#EXTI_PR_PR9_Msk
 (0x1UL << 
EXTI_PR_PR9_Pos
Ë

	)

2979 
	#EXTI_PR_PR9
 
EXTI_PR_PR9_Msk


	)

2980 
	#EXTI_PR_PR10_Pos
 (10U)

	)

2981 
	#EXTI_PR_PR10_Msk
 (0x1UL << 
EXTI_PR_PR10_Pos
Ë

	)

2982 
	#EXTI_PR_PR10
 
EXTI_PR_PR10_Msk


	)

2983 
	#EXTI_PR_PR11_Pos
 (11U)

	)

2984 
	#EXTI_PR_PR11_Msk
 (0x1UL << 
EXTI_PR_PR11_Pos
Ë

	)

2985 
	#EXTI_PR_PR11
 
EXTI_PR_PR11_Msk


	)

2986 
	#EXTI_PR_PR12_Pos
 (12U)

	)

2987 
	#EXTI_PR_PR12_Msk
 (0x1UL << 
EXTI_PR_PR12_Pos
Ë

	)

2988 
	#EXTI_PR_PR12
 
EXTI_PR_PR12_Msk


	)

2989 
	#EXTI_PR_PR13_Pos
 (13U)

	)

2990 
	#EXTI_PR_PR13_Msk
 (0x1UL << 
EXTI_PR_PR13_Pos
Ë

	)

2991 
	#EXTI_PR_PR13
 
EXTI_PR_PR13_Msk


	)

2992 
	#EXTI_PR_PR14_Pos
 (14U)

	)

2993 
	#EXTI_PR_PR14_Msk
 (0x1UL << 
EXTI_PR_PR14_Pos
Ë

	)

2994 
	#EXTI_PR_PR14
 
EXTI_PR_PR14_Msk


	)

2995 
	#EXTI_PR_PR15_Pos
 (15U)

	)

2996 
	#EXTI_PR_PR15_Msk
 (0x1UL << 
EXTI_PR_PR15_Pos
Ë

	)

2997 
	#EXTI_PR_PR15
 
EXTI_PR_PR15_Msk


	)

2998 
	#EXTI_PR_PR16_Pos
 (16U)

	)

2999 
	#EXTI_PR_PR16_Msk
 (0x1UL << 
EXTI_PR_PR16_Pos
Ë

	)

3000 
	#EXTI_PR_PR16
 
EXTI_PR_PR16_Msk


	)

3001 
	#EXTI_PR_PR17_Pos
 (17U)

	)

3002 
	#EXTI_PR_PR17_Msk
 (0x1UL << 
EXTI_PR_PR17_Pos
Ë

	)

3003 
	#EXTI_PR_PR17
 
EXTI_PR_PR17_Msk


	)

3004 
	#EXTI_PR_PR18_Pos
 (18U)

	)

3005 
	#EXTI_PR_PR18_Msk
 (0x1UL << 
EXTI_PR_PR18_Pos
Ë

	)

3006 
	#EXTI_PR_PR18
 
EXTI_PR_PR18_Msk


	)

3009 
	#EXTI_PR_PIF0
 
EXTI_PR_PR0


	)

3010 
	#EXTI_PR_PIF1
 
EXTI_PR_PR1


	)

3011 
	#EXTI_PR_PIF2
 
EXTI_PR_PR2


	)

3012 
	#EXTI_PR_PIF3
 
EXTI_PR_PR3


	)

3013 
	#EXTI_PR_PIF4
 
EXTI_PR_PR4


	)

3014 
	#EXTI_PR_PIF5
 
EXTI_PR_PR5


	)

3015 
	#EXTI_PR_PIF6
 
EXTI_PR_PR6


	)

3016 
	#EXTI_PR_PIF7
 
EXTI_PR_PR7


	)

3017 
	#EXTI_PR_PIF8
 
EXTI_PR_PR8


	)

3018 
	#EXTI_PR_PIF9
 
EXTI_PR_PR9


	)

3019 
	#EXTI_PR_PIF10
 
EXTI_PR_PR10


	)

3020 
	#EXTI_PR_PIF11
 
EXTI_PR_PR11


	)

3021 
	#EXTI_PR_PIF12
 
EXTI_PR_PR12


	)

3022 
	#EXTI_PR_PIF13
 
EXTI_PR_PR13


	)

3023 
	#EXTI_PR_PIF14
 
EXTI_PR_PR14


	)

3024 
	#EXTI_PR_PIF15
 
EXTI_PR_PR15


	)

3025 
	#EXTI_PR_PIF16
 
EXTI_PR_PR16


	)

3026 
	#EXTI_PR_PIF17
 
EXTI_PR_PR17


	)

3027 
	#EXTI_PR_PIF18
 
EXTI_PR_PR18


	)

3036 
	#DMA_ISR_GIF1_Pos
 (0U)

	)

3037 
	#DMA_ISR_GIF1_Msk
 (0x1UL << 
DMA_ISR_GIF1_Pos
Ë

	)

3038 
	#DMA_ISR_GIF1
 
DMA_ISR_GIF1_Msk


	)

3039 
	#DMA_ISR_TCIF1_Pos
 (1U)

	)

3040 
	#DMA_ISR_TCIF1_Msk
 (0x1UL << 
DMA_ISR_TCIF1_Pos
Ë

	)

3041 
	#DMA_ISR_TCIF1
 
DMA_ISR_TCIF1_Msk


	)

3042 
	#DMA_ISR_HTIF1_Pos
 (2U)

	)

3043 
	#DMA_ISR_HTIF1_Msk
 (0x1UL << 
DMA_ISR_HTIF1_Pos
Ë

	)

3044 
	#DMA_ISR_HTIF1
 
DMA_ISR_HTIF1_Msk


	)

3045 
	#DMA_ISR_TEIF1_Pos
 (3U)

	)

3046 
	#DMA_ISR_TEIF1_Msk
 (0x1UL << 
DMA_ISR_TEIF1_Pos
Ë

	)

3047 
	#DMA_ISR_TEIF1
 
DMA_ISR_TEIF1_Msk


	)

3048 
	#DMA_ISR_GIF2_Pos
 (4U)

	)

3049 
	#DMA_ISR_GIF2_Msk
 (0x1UL << 
DMA_ISR_GIF2_Pos
Ë

	)

3050 
	#DMA_ISR_GIF2
 
DMA_ISR_GIF2_Msk


	)

3051 
	#DMA_ISR_TCIF2_Pos
 (5U)

	)

3052 
	#DMA_ISR_TCIF2_Msk
 (0x1UL << 
DMA_ISR_TCIF2_Pos
Ë

	)

3053 
	#DMA_ISR_TCIF2
 
DMA_ISR_TCIF2_Msk


	)

3054 
	#DMA_ISR_HTIF2_Pos
 (6U)

	)

3055 
	#DMA_ISR_HTIF2_Msk
 (0x1UL << 
DMA_ISR_HTIF2_Pos
Ë

	)

3056 
	#DMA_ISR_HTIF2
 
DMA_ISR_HTIF2_Msk


	)

3057 
	#DMA_ISR_TEIF2_Pos
 (7U)

	)

3058 
	#DMA_ISR_TEIF2_Msk
 (0x1UL << 
DMA_ISR_TEIF2_Pos
Ë

	)

3059 
	#DMA_ISR_TEIF2
 
DMA_ISR_TEIF2_Msk


	)

3060 
	#DMA_ISR_GIF3_Pos
 (8U)

	)

3061 
	#DMA_ISR_GIF3_Msk
 (0x1UL << 
DMA_ISR_GIF3_Pos
Ë

	)

3062 
	#DMA_ISR_GIF3
 
DMA_ISR_GIF3_Msk


	)

3063 
	#DMA_ISR_TCIF3_Pos
 (9U)

	)

3064 
	#DMA_ISR_TCIF3_Msk
 (0x1UL << 
DMA_ISR_TCIF3_Pos
Ë

	)

3065 
	#DMA_ISR_TCIF3
 
DMA_ISR_TCIF3_Msk


	)

3066 
	#DMA_ISR_HTIF3_Pos
 (10U)

	)

3067 
	#DMA_ISR_HTIF3_Msk
 (0x1UL << 
DMA_ISR_HTIF3_Pos
Ë

	)

3068 
	#DMA_ISR_HTIF3
 
DMA_ISR_HTIF3_Msk


	)

3069 
	#DMA_ISR_TEIF3_Pos
 (11U)

	)

3070 
	#DMA_ISR_TEIF3_Msk
 (0x1UL << 
DMA_ISR_TEIF3_Pos
Ë

	)

3071 
	#DMA_ISR_TEIF3
 
DMA_ISR_TEIF3_Msk


	)

3072 
	#DMA_ISR_GIF4_Pos
 (12U)

	)

3073 
	#DMA_ISR_GIF4_Msk
 (0x1UL << 
DMA_ISR_GIF4_Pos
Ë

	)

3074 
	#DMA_ISR_GIF4
 
DMA_ISR_GIF4_Msk


	)

3075 
	#DMA_ISR_TCIF4_Pos
 (13U)

	)

3076 
	#DMA_ISR_TCIF4_Msk
 (0x1UL << 
DMA_ISR_TCIF4_Pos
Ë

	)

3077 
	#DMA_ISR_TCIF4
 
DMA_ISR_TCIF4_Msk


	)

3078 
	#DMA_ISR_HTIF4_Pos
 (14U)

	)

3079 
	#DMA_ISR_HTIF4_Msk
 (0x1UL << 
DMA_ISR_HTIF4_Pos
Ë

	)

3080 
	#DMA_ISR_HTIF4
 
DMA_ISR_HTIF4_Msk


	)

3081 
	#DMA_ISR_TEIF4_Pos
 (15U)

	)

3082 
	#DMA_ISR_TEIF4_Msk
 (0x1UL << 
DMA_ISR_TEIF4_Pos
Ë

	)

3083 
	#DMA_ISR_TEIF4
 
DMA_ISR_TEIF4_Msk


	)

3084 
	#DMA_ISR_GIF5_Pos
 (16U)

	)

3085 
	#DMA_ISR_GIF5_Msk
 (0x1UL << 
DMA_ISR_GIF5_Pos
Ë

	)

3086 
	#DMA_ISR_GIF5
 
DMA_ISR_GIF5_Msk


	)

3087 
	#DMA_ISR_TCIF5_Pos
 (17U)

	)

3088 
	#DMA_ISR_TCIF5_Msk
 (0x1UL << 
DMA_ISR_TCIF5_Pos
Ë

	)

3089 
	#DMA_ISR_TCIF5
 
DMA_ISR_TCIF5_Msk


	)

3090 
	#DMA_ISR_HTIF5_Pos
 (18U)

	)

3091 
	#DMA_ISR_HTIF5_Msk
 (0x1UL << 
DMA_ISR_HTIF5_Pos
Ë

	)

3092 
	#DMA_ISR_HTIF5
 
DMA_ISR_HTIF5_Msk


	)

3093 
	#DMA_ISR_TEIF5_Pos
 (19U)

	)

3094 
	#DMA_ISR_TEIF5_Msk
 (0x1UL << 
DMA_ISR_TEIF5_Pos
Ë

	)

3095 
	#DMA_ISR_TEIF5
 
DMA_ISR_TEIF5_Msk


	)

3096 
	#DMA_ISR_GIF6_Pos
 (20U)

	)

3097 
	#DMA_ISR_GIF6_Msk
 (0x1UL << 
DMA_ISR_GIF6_Pos
Ë

	)

3098 
	#DMA_ISR_GIF6
 
DMA_ISR_GIF6_Msk


	)

3099 
	#DMA_ISR_TCIF6_Pos
 (21U)

	)

3100 
	#DMA_ISR_TCIF6_Msk
 (0x1UL << 
DMA_ISR_TCIF6_Pos
Ë

	)

3101 
	#DMA_ISR_TCIF6
 
DMA_ISR_TCIF6_Msk


	)

3102 
	#DMA_ISR_HTIF6_Pos
 (22U)

	)

3103 
	#DMA_ISR_HTIF6_Msk
 (0x1UL << 
DMA_ISR_HTIF6_Pos
Ë

	)

3104 
	#DMA_ISR_HTIF6
 
DMA_ISR_HTIF6_Msk


	)

3105 
	#DMA_ISR_TEIF6_Pos
 (23U)

	)

3106 
	#DMA_ISR_TEIF6_Msk
 (0x1UL << 
DMA_ISR_TEIF6_Pos
Ë

	)

3107 
	#DMA_ISR_TEIF6
 
DMA_ISR_TEIF6_Msk


	)

3108 
	#DMA_ISR_GIF7_Pos
 (24U)

	)

3109 
	#DMA_ISR_GIF7_Msk
 (0x1UL << 
DMA_ISR_GIF7_Pos
Ë

	)

3110 
	#DMA_ISR_GIF7
 
DMA_ISR_GIF7_Msk


	)

3111 
	#DMA_ISR_TCIF7_Pos
 (25U)

	)

3112 
	#DMA_ISR_TCIF7_Msk
 (0x1UL << 
DMA_ISR_TCIF7_Pos
Ë

	)

3113 
	#DMA_ISR_TCIF7
 
DMA_ISR_TCIF7_Msk


	)

3114 
	#DMA_ISR_HTIF7_Pos
 (26U)

	)

3115 
	#DMA_ISR_HTIF7_Msk
 (0x1UL << 
DMA_ISR_HTIF7_Pos
Ë

	)

3116 
	#DMA_ISR_HTIF7
 
DMA_ISR_HTIF7_Msk


	)

3117 
	#DMA_ISR_TEIF7_Pos
 (27U)

	)

3118 
	#DMA_ISR_TEIF7_Msk
 (0x1UL << 
DMA_ISR_TEIF7_Pos
Ë

	)

3119 
	#DMA_ISR_TEIF7
 
DMA_ISR_TEIF7_Msk


	)

3122 
	#DMA_IFCR_CGIF1_Pos
 (0U)

	)

3123 
	#DMA_IFCR_CGIF1_Msk
 (0x1UL << 
DMA_IFCR_CGIF1_Pos
Ë

	)

3124 
	#DMA_IFCR_CGIF1
 
DMA_IFCR_CGIF1_Msk


	)

3125 
	#DMA_IFCR_CTCIF1_Pos
 (1U)

	)

3126 
	#DMA_IFCR_CTCIF1_Msk
 (0x1UL << 
DMA_IFCR_CTCIF1_Pos
Ë

	)

3127 
	#DMA_IFCR_CTCIF1
 
DMA_IFCR_CTCIF1_Msk


	)

3128 
	#DMA_IFCR_CHTIF1_Pos
 (2U)

	)

3129 
	#DMA_IFCR_CHTIF1_Msk
 (0x1UL << 
DMA_IFCR_CHTIF1_Pos
Ë

	)

3130 
	#DMA_IFCR_CHTIF1
 
DMA_IFCR_CHTIF1_Msk


	)

3131 
	#DMA_IFCR_CTEIF1_Pos
 (3U)

	)

3132 
	#DMA_IFCR_CTEIF1_Msk
 (0x1UL << 
DMA_IFCR_CTEIF1_Pos
Ë

	)

3133 
	#DMA_IFCR_CTEIF1
 
DMA_IFCR_CTEIF1_Msk


	)

3134 
	#DMA_IFCR_CGIF2_Pos
 (4U)

	)

3135 
	#DMA_IFCR_CGIF2_Msk
 (0x1UL << 
DMA_IFCR_CGIF2_Pos
Ë

	)

3136 
	#DMA_IFCR_CGIF2
 
DMA_IFCR_CGIF2_Msk


	)

3137 
	#DMA_IFCR_CTCIF2_Pos
 (5U)

	)

3138 
	#DMA_IFCR_CTCIF2_Msk
 (0x1UL << 
DMA_IFCR_CTCIF2_Pos
Ë

	)

3139 
	#DMA_IFCR_CTCIF2
 
DMA_IFCR_CTCIF2_Msk


	)

3140 
	#DMA_IFCR_CHTIF2_Pos
 (6U)

	)

3141 
	#DMA_IFCR_CHTIF2_Msk
 (0x1UL << 
DMA_IFCR_CHTIF2_Pos
Ë

	)

3142 
	#DMA_IFCR_CHTIF2
 
DMA_IFCR_CHTIF2_Msk


	)

3143 
	#DMA_IFCR_CTEIF2_Pos
 (7U)

	)

3144 
	#DMA_IFCR_CTEIF2_Msk
 (0x1UL << 
DMA_IFCR_CTEIF2_Pos
Ë

	)

3145 
	#DMA_IFCR_CTEIF2
 
DMA_IFCR_CTEIF2_Msk


	)

3146 
	#DMA_IFCR_CGIF3_Pos
 (8U)

	)

3147 
	#DMA_IFCR_CGIF3_Msk
 (0x1UL << 
DMA_IFCR_CGIF3_Pos
Ë

	)

3148 
	#DMA_IFCR_CGIF3
 
DMA_IFCR_CGIF3_Msk


	)

3149 
	#DMA_IFCR_CTCIF3_Pos
 (9U)

	)

3150 
	#DMA_IFCR_CTCIF3_Msk
 (0x1UL << 
DMA_IFCR_CTCIF3_Pos
Ë

	)

3151 
	#DMA_IFCR_CTCIF3
 
DMA_IFCR_CTCIF3_Msk


	)

3152 
	#DMA_IFCR_CHTIF3_Pos
 (10U)

	)

3153 
	#DMA_IFCR_CHTIF3_Msk
 (0x1UL << 
DMA_IFCR_CHTIF3_Pos
Ë

	)

3154 
	#DMA_IFCR_CHTIF3
 
DMA_IFCR_CHTIF3_Msk


	)

3155 
	#DMA_IFCR_CTEIF3_Pos
 (11U)

	)

3156 
	#DMA_IFCR_CTEIF3_Msk
 (0x1UL << 
DMA_IFCR_CTEIF3_Pos
Ë

	)

3157 
	#DMA_IFCR_CTEIF3
 
DMA_IFCR_CTEIF3_Msk


	)

3158 
	#DMA_IFCR_CGIF4_Pos
 (12U)

	)

3159 
	#DMA_IFCR_CGIF4_Msk
 (0x1UL << 
DMA_IFCR_CGIF4_Pos
Ë

	)

3160 
	#DMA_IFCR_CGIF4
 
DMA_IFCR_CGIF4_Msk


	)

3161 
	#DMA_IFCR_CTCIF4_Pos
 (13U)

	)

3162 
	#DMA_IFCR_CTCIF4_Msk
 (0x1UL << 
DMA_IFCR_CTCIF4_Pos
Ë

	)

3163 
	#DMA_IFCR_CTCIF4
 
DMA_IFCR_CTCIF4_Msk


	)

3164 
	#DMA_IFCR_CHTIF4_Pos
 (14U)

	)

3165 
	#DMA_IFCR_CHTIF4_Msk
 (0x1UL << 
DMA_IFCR_CHTIF4_Pos
Ë

	)

3166 
	#DMA_IFCR_CHTIF4
 
DMA_IFCR_CHTIF4_Msk


	)

3167 
	#DMA_IFCR_CTEIF4_Pos
 (15U)

	)

3168 
	#DMA_IFCR_CTEIF4_Msk
 (0x1UL << 
DMA_IFCR_CTEIF4_Pos
Ë

	)

3169 
	#DMA_IFCR_CTEIF4
 
DMA_IFCR_CTEIF4_Msk


	)

3170 
	#DMA_IFCR_CGIF5_Pos
 (16U)

	)

3171 
	#DMA_IFCR_CGIF5_Msk
 (0x1UL << 
DMA_IFCR_CGIF5_Pos
Ë

	)

3172 
	#DMA_IFCR_CGIF5
 
DMA_IFCR_CGIF5_Msk


	)

3173 
	#DMA_IFCR_CTCIF5_Pos
 (17U)

	)

3174 
	#DMA_IFCR_CTCIF5_Msk
 (0x1UL << 
DMA_IFCR_CTCIF5_Pos
Ë

	)

3175 
	#DMA_IFCR_CTCIF5
 
DMA_IFCR_CTCIF5_Msk


	)

3176 
	#DMA_IFCR_CHTIF5_Pos
 (18U)

	)

3177 
	#DMA_IFCR_CHTIF5_Msk
 (0x1UL << 
DMA_IFCR_CHTIF5_Pos
Ë

	)

3178 
	#DMA_IFCR_CHTIF5
 
DMA_IFCR_CHTIF5_Msk


	)

3179 
	#DMA_IFCR_CTEIF5_Pos
 (19U)

	)

3180 
	#DMA_IFCR_CTEIF5_Msk
 (0x1UL << 
DMA_IFCR_CTEIF5_Pos
Ë

	)

3181 
	#DMA_IFCR_CTEIF5
 
DMA_IFCR_CTEIF5_Msk


	)

3182 
	#DMA_IFCR_CGIF6_Pos
 (20U)

	)

3183 
	#DMA_IFCR_CGIF6_Msk
 (0x1UL << 
DMA_IFCR_CGIF6_Pos
Ë

	)

3184 
	#DMA_IFCR_CGIF6
 
DMA_IFCR_CGIF6_Msk


	)

3185 
	#DMA_IFCR_CTCIF6_Pos
 (21U)

	)

3186 
	#DMA_IFCR_CTCIF6_Msk
 (0x1UL << 
DMA_IFCR_CTCIF6_Pos
Ë

	)

3187 
	#DMA_IFCR_CTCIF6
 
DMA_IFCR_CTCIF6_Msk


	)

3188 
	#DMA_IFCR_CHTIF6_Pos
 (22U)

	)

3189 
	#DMA_IFCR_CHTIF6_Msk
 (0x1UL << 
DMA_IFCR_CHTIF6_Pos
Ë

	)

3190 
	#DMA_IFCR_CHTIF6
 
DMA_IFCR_CHTIF6_Msk


	)

3191 
	#DMA_IFCR_CTEIF6_Pos
 (23U)

	)

3192 
	#DMA_IFCR_CTEIF6_Msk
 (0x1UL << 
DMA_IFCR_CTEIF6_Pos
Ë

	)

3193 
	#DMA_IFCR_CTEIF6
 
DMA_IFCR_CTEIF6_Msk


	)

3194 
	#DMA_IFCR_CGIF7_Pos
 (24U)

	)

3195 
	#DMA_IFCR_CGIF7_Msk
 (0x1UL << 
DMA_IFCR_CGIF7_Pos
Ë

	)

3196 
	#DMA_IFCR_CGIF7
 
DMA_IFCR_CGIF7_Msk


	)

3197 
	#DMA_IFCR_CTCIF7_Pos
 (25U)

	)

3198 
	#DMA_IFCR_CTCIF7_Msk
 (0x1UL << 
DMA_IFCR_CTCIF7_Pos
Ë

	)

3199 
	#DMA_IFCR_CTCIF7
 
DMA_IFCR_CTCIF7_Msk


	)

3200 
	#DMA_IFCR_CHTIF7_Pos
 (26U)

	)

3201 
	#DMA_IFCR_CHTIF7_Msk
 (0x1UL << 
DMA_IFCR_CHTIF7_Pos
Ë

	)

3202 
	#DMA_IFCR_CHTIF7
 
DMA_IFCR_CHTIF7_Msk


	)

3203 
	#DMA_IFCR_CTEIF7_Pos
 (27U)

	)

3204 
	#DMA_IFCR_CTEIF7_Msk
 (0x1UL << 
DMA_IFCR_CTEIF7_Pos
Ë

	)

3205 
	#DMA_IFCR_CTEIF7
 
DMA_IFCR_CTEIF7_Msk


	)

3208 
	#DMA_CCR_EN_Pos
 (0U)

	)

3209 
	#DMA_CCR_EN_Msk
 (0x1UL << 
DMA_CCR_EN_Pos
Ë

	)

3210 
	#DMA_CCR_EN
 
DMA_CCR_EN_Msk


	)

3211 
	#DMA_CCR_TCIE_Pos
 (1U)

	)

3212 
	#DMA_CCR_TCIE_Msk
 (0x1UL << 
DMA_CCR_TCIE_Pos
Ë

	)

3213 
	#DMA_CCR_TCIE
 
DMA_CCR_TCIE_Msk


	)

3214 
	#DMA_CCR_HTIE_Pos
 (2U)

	)

3215 
	#DMA_CCR_HTIE_Msk
 (0x1UL << 
DMA_CCR_HTIE_Pos
Ë

	)

3216 
	#DMA_CCR_HTIE
 
DMA_CCR_HTIE_Msk


	)

3217 
	#DMA_CCR_TEIE_Pos
 (3U)

	)

3218 
	#DMA_CCR_TEIE_Msk
 (0x1UL << 
DMA_CCR_TEIE_Pos
Ë

	)

3219 
	#DMA_CCR_TEIE
 
DMA_CCR_TEIE_Msk


	)

3220 
	#DMA_CCR_DIR_Pos
 (4U)

	)

3221 
	#DMA_CCR_DIR_Msk
 (0x1UL << 
DMA_CCR_DIR_Pos
Ë

	)

3222 
	#DMA_CCR_DIR
 
DMA_CCR_DIR_Msk


	)

3223 
	#DMA_CCR_CIRC_Pos
 (5U)

	)

3224 
	#DMA_CCR_CIRC_Msk
 (0x1UL << 
DMA_CCR_CIRC_Pos
Ë

	)

3225 
	#DMA_CCR_CIRC
 
DMA_CCR_CIRC_Msk


	)

3226 
	#DMA_CCR_PINC_Pos
 (6U)

	)

3227 
	#DMA_CCR_PINC_Msk
 (0x1UL << 
DMA_CCR_PINC_Pos
Ë

	)

3228 
	#DMA_CCR_PINC
 
DMA_CCR_PINC_Msk


	)

3229 
	#DMA_CCR_MINC_Pos
 (7U)

	)

3230 
	#DMA_CCR_MINC_Msk
 (0x1UL << 
DMA_CCR_MINC_Pos
Ë

	)

3231 
	#DMA_CCR_MINC
 
DMA_CCR_MINC_Msk


	)

3233 
	#DMA_CCR_PSIZE_Pos
 (8U)

	)

3234 
	#DMA_CCR_PSIZE_Msk
 (0x3UL << 
DMA_CCR_PSIZE_Pos
Ë

	)

3235 
	#DMA_CCR_PSIZE
 
DMA_CCR_PSIZE_Msk


	)

3236 
	#DMA_CCR_PSIZE_0
 (0x1UL << 
DMA_CCR_PSIZE_Pos
Ë

	)

3237 
	#DMA_CCR_PSIZE_1
 (0x2UL << 
DMA_CCR_PSIZE_Pos
Ë

	)

3239 
	#DMA_CCR_MSIZE_Pos
 (10U)

	)

3240 
	#DMA_CCR_MSIZE_Msk
 (0x3UL << 
DMA_CCR_MSIZE_Pos
Ë

	)

3241 
	#DMA_CCR_MSIZE
 
DMA_CCR_MSIZE_Msk


	)

3242 
	#DMA_CCR_MSIZE_0
 (0x1UL << 
DMA_CCR_MSIZE_Pos
Ë

	)

3243 
	#DMA_CCR_MSIZE_1
 (0x2UL << 
DMA_CCR_MSIZE_Pos
Ë

	)

3245 
	#DMA_CCR_PL_Pos
 (12U)

	)

3246 
	#DMA_CCR_PL_Msk
 (0x3UL << 
DMA_CCR_PL_Pos
Ë

	)

3247 
	#DMA_CCR_PL
 
DMA_CCR_PL_Msk


	)

3248 
	#DMA_CCR_PL_0
 (0x1UL << 
DMA_CCR_PL_Pos
Ë

	)

3249 
	#DMA_CCR_PL_1
 (0x2UL << 
DMA_CCR_PL_Pos
Ë

	)

3251 
	#DMA_CCR_MEM2MEM_Pos
 (14U)

	)

3252 
	#DMA_CCR_MEM2MEM_Msk
 (0x1UL << 
DMA_CCR_MEM2MEM_Pos
Ë

	)

3253 
	#DMA_CCR_MEM2MEM
 
DMA_CCR_MEM2MEM_Msk


	)

3256 
	#DMA_CNDTR_NDT_Pos
 (0U)

	)

3257 
	#DMA_CNDTR_NDT_Msk
 (0xFFFFUL << 
DMA_CNDTR_NDT_Pos
Ë

	)

3258 
	#DMA_CNDTR_NDT
 
DMA_CNDTR_NDT_Msk


	)

3261 
	#DMA_CPAR_PA_Pos
 (0U)

	)

3262 
	#DMA_CPAR_PA_Msk
 (0xFFFFFFFFUL << 
DMA_CPAR_PA_Pos
Ë

	)

3263 
	#DMA_CPAR_PA
 
DMA_CPAR_PA_Msk


	)

3266 
	#DMA_CMAR_MA_Pos
 (0U)

	)

3267 
	#DMA_CMAR_MA_Msk
 (0xFFFFFFFFUL << 
DMA_CMAR_MA_Pos
Ë

	)

3268 
	#DMA_CMAR_MA
 
DMA_CMAR_MA_Msk


	)

3279 
	#ADC_MULTIMODE_SUPPORT


	)

3282 
	#ADC_SR_AWD_Pos
 (0U)

	)

3283 
	#ADC_SR_AWD_Msk
 (0x1UL << 
ADC_SR_AWD_Pos
Ë

	)

3284 
	#ADC_SR_AWD
 
ADC_SR_AWD_Msk


	)

3285 
	#ADC_SR_EOS_Pos
 (1U)

	)

3286 
	#ADC_SR_EOS_Msk
 (0x1UL << 
ADC_SR_EOS_Pos
Ë

	)

3287 
	#ADC_SR_EOS
 
ADC_SR_EOS_Msk


	)

3288 
	#ADC_SR_JEOS_Pos
 (2U)

	)

3289 
	#ADC_SR_JEOS_Msk
 (0x1UL << 
ADC_SR_JEOS_Pos
Ë

	)

3290 
	#ADC_SR_JEOS
 
ADC_SR_JEOS_Msk


	)

3291 
	#ADC_SR_JSTRT_Pos
 (3U)

	)

3292 
	#ADC_SR_JSTRT_Msk
 (0x1UL << 
ADC_SR_JSTRT_Pos
Ë

	)

3293 
	#ADC_SR_JSTRT
 
ADC_SR_JSTRT_Msk


	)

3294 
	#ADC_SR_STRT_Pos
 (4U)

	)

3295 
	#ADC_SR_STRT_Msk
 (0x1UL << 
ADC_SR_STRT_Pos
Ë

	)

3296 
	#ADC_SR_STRT
 
ADC_SR_STRT_Msk


	)

3299 
	#ADC_SR_EOC
 (
ADC_SR_EOS
)

	)

3300 
	#ADC_SR_JEOC
 (
ADC_SR_JEOS
)

	)

3303 
	#ADC_CR1_AWDCH_Pos
 (0U)

	)

3304 
	#ADC_CR1_AWDCH_Msk
 (0x1FUL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3305 
	#ADC_CR1_AWDCH
 
ADC_CR1_AWDCH_Msk


	)

3306 
	#ADC_CR1_AWDCH_0
 (0x01UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3307 
	#ADC_CR1_AWDCH_1
 (0x02UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3308 
	#ADC_CR1_AWDCH_2
 (0x04UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3309 
	#ADC_CR1_AWDCH_3
 (0x08UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3310 
	#ADC_CR1_AWDCH_4
 (0x10UL << 
ADC_CR1_AWDCH_Pos
Ë

	)

3312 
	#ADC_CR1_EOSIE_Pos
 (5U)

	)

3313 
	#ADC_CR1_EOSIE_Msk
 (0x1UL << 
ADC_CR1_EOSIE_Pos
Ë

	)

3314 
	#ADC_CR1_EOSIE
 
ADC_CR1_EOSIE_Msk


	)

3315 
	#ADC_CR1_AWDIE_Pos
 (6U)

	)

3316 
	#ADC_CR1_AWDIE_Msk
 (0x1UL << 
ADC_CR1_AWDIE_Pos
Ë

	)

3317 
	#ADC_CR1_AWDIE
 
ADC_CR1_AWDIE_Msk


	)

3318 
	#ADC_CR1_JEOSIE_Pos
 (7U)

	)

3319 
	#ADC_CR1_JEOSIE_Msk
 (0x1UL << 
ADC_CR1_JEOSIE_Pos
Ë

	)

3320 
	#ADC_CR1_JEOSIE
 
ADC_CR1_JEOSIE_Msk


	)

3321 
	#ADC_CR1_SCAN_Pos
 (8U)

	)

3322 
	#ADC_CR1_SCAN_Msk
 (0x1UL << 
ADC_CR1_SCAN_Pos
Ë

	)

3323 
	#ADC_CR1_SCAN
 
ADC_CR1_SCAN_Msk


	)

3324 
	#ADC_CR1_AWDSGL_Pos
 (9U)

	)

3325 
	#ADC_CR1_AWDSGL_Msk
 (0x1UL << 
ADC_CR1_AWDSGL_Pos
Ë

	)

3326 
	#ADC_CR1_AWDSGL
 
ADC_CR1_AWDSGL_Msk


	)

3327 
	#ADC_CR1_JAUTO_Pos
 (10U)

	)

3328 
	#ADC_CR1_JAUTO_Msk
 (0x1UL << 
ADC_CR1_JAUTO_Pos
Ë

	)

3329 
	#ADC_CR1_JAUTO
 
ADC_CR1_JAUTO_Msk


	)

3330 
	#ADC_CR1_DISCEN_Pos
 (11U)

	)

3331 
	#ADC_CR1_DISCEN_Msk
 (0x1UL << 
ADC_CR1_DISCEN_Pos
Ë

	)

3332 
	#ADC_CR1_DISCEN
 
ADC_CR1_DISCEN_Msk


	)

3333 
	#ADC_CR1_JDISCEN_Pos
 (12U)

	)

3334 
	#ADC_CR1_JDISCEN_Msk
 (0x1UL << 
ADC_CR1_JDISCEN_Pos
Ë

	)

3335 
	#ADC_CR1_JDISCEN
 
ADC_CR1_JDISCEN_Msk


	)

3337 
	#ADC_CR1_DISCNUM_Pos
 (13U)

	)

3338 
	#ADC_CR1_DISCNUM_Msk
 (0x7UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3339 
	#ADC_CR1_DISCNUM
 
ADC_CR1_DISCNUM_Msk


	)

3340 
	#ADC_CR1_DISCNUM_0
 (0x1UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3341 
	#ADC_CR1_DISCNUM_1
 (0x2UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3342 
	#ADC_CR1_DISCNUM_2
 (0x4UL << 
ADC_CR1_DISCNUM_Pos
Ë

	)

3344 
	#ADC_CR1_DUALMOD_Pos
 (16U)

	)

3345 
	#ADC_CR1_DUALMOD_Msk
 (0xFUL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3346 
	#ADC_CR1_DUALMOD
 
ADC_CR1_DUALMOD_Msk


	)

3347 
	#ADC_CR1_DUALMOD_0
 (0x1UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3348 
	#ADC_CR1_DUALMOD_1
 (0x2UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3349 
	#ADC_CR1_DUALMOD_2
 (0x4UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3350 
	#ADC_CR1_DUALMOD_3
 (0x8UL << 
ADC_CR1_DUALMOD_Pos
Ë

	)

3352 
	#ADC_CR1_JAWDEN_Pos
 (22U)

	)

3353 
	#ADC_CR1_JAWDEN_Msk
 (0x1UL << 
ADC_CR1_JAWDEN_Pos
Ë

	)

3354 
	#ADC_CR1_JAWDEN
 
ADC_CR1_JAWDEN_Msk


	)

3355 
	#ADC_CR1_AWDEN_Pos
 (23U)

	)

3356 
	#ADC_CR1_AWDEN_Msk
 (0x1UL << 
ADC_CR1_AWDEN_Pos
Ë

	)

3357 
	#ADC_CR1_AWDEN
 
ADC_CR1_AWDEN_Msk


	)

3360 
	#ADC_CR1_EOCIE
 (
ADC_CR1_EOSIE
)

	)

3361 
	#ADC_CR1_JEOCIE
 (
ADC_CR1_JEOSIE
)

	)

3364 
	#ADC_CR2_ADON_Pos
 (0U)

	)

3365 
	#ADC_CR2_ADON_Msk
 (0x1UL << 
ADC_CR2_ADON_Pos
Ë

	)

3366 
	#ADC_CR2_ADON
 
ADC_CR2_ADON_Msk


	)

3367 
	#ADC_CR2_CONT_Pos
 (1U)

	)

3368 
	#ADC_CR2_CONT_Msk
 (0x1UL << 
ADC_CR2_CONT_Pos
Ë

	)

3369 
	#ADC_CR2_CONT
 
ADC_CR2_CONT_Msk


	)

3370 
	#ADC_CR2_CAL_Pos
 (2U)

	)

3371 
	#ADC_CR2_CAL_Msk
 (0x1UL << 
ADC_CR2_CAL_Pos
Ë

	)

3372 
	#ADC_CR2_CAL
 
ADC_CR2_CAL_Msk


	)

3373 
	#ADC_CR2_RSTCAL_Pos
 (3U)

	)

3374 
	#ADC_CR2_RSTCAL_Msk
 (0x1UL << 
ADC_CR2_RSTCAL_Pos
Ë

	)

3375 
	#ADC_CR2_RSTCAL
 
ADC_CR2_RSTCAL_Msk


	)

3376 
	#ADC_CR2_DMA_Pos
 (8U)

	)

3377 
	#ADC_CR2_DMA_Msk
 (0x1UL << 
ADC_CR2_DMA_Pos
Ë

	)

3378 
	#ADC_CR2_DMA
 
ADC_CR2_DMA_Msk


	)

3379 
	#ADC_CR2_ALIGN_Pos
 (11U)

	)

3380 
	#ADC_CR2_ALIGN_Msk
 (0x1UL << 
ADC_CR2_ALIGN_Pos
Ë

	)

3381 
	#ADC_CR2_ALIGN
 
ADC_CR2_ALIGN_Msk


	)

3383 
	#ADC_CR2_JEXTSEL_Pos
 (12U)

	)

3384 
	#ADC_CR2_JEXTSEL_Msk
 (0x7UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3385 
	#ADC_CR2_JEXTSEL
 
ADC_CR2_JEXTSEL_Msk


	)

3386 
	#ADC_CR2_JEXTSEL_0
 (0x1UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3387 
	#ADC_CR2_JEXTSEL_1
 (0x2UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3388 
	#ADC_CR2_JEXTSEL_2
 (0x4UL << 
ADC_CR2_JEXTSEL_Pos
Ë

	)

3390 
	#ADC_CR2_JEXTTRIG_Pos
 (15U)

	)

3391 
	#ADC_CR2_JEXTTRIG_Msk
 (0x1UL << 
ADC_CR2_JEXTTRIG_Pos
Ë

	)

3392 
	#ADC_CR2_JEXTTRIG
 
ADC_CR2_JEXTTRIG_Msk


	)

3394 
	#ADC_CR2_EXTSEL_Pos
 (17U)

	)

3395 
	#ADC_CR2_EXTSEL_Msk
 (0x7UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3396 
	#ADC_CR2_EXTSEL
 
ADC_CR2_EXTSEL_Msk


	)

3397 
	#ADC_CR2_EXTSEL_0
 (0x1UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3398 
	#ADC_CR2_EXTSEL_1
 (0x2UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3399 
	#ADC_CR2_EXTSEL_2
 (0x4UL << 
ADC_CR2_EXTSEL_Pos
Ë

	)

3401 
	#ADC_CR2_EXTTRIG_Pos
 (20U)

	)

3402 
	#ADC_CR2_EXTTRIG_Msk
 (0x1UL << 
ADC_CR2_EXTTRIG_Pos
Ë

	)

3403 
	#ADC_CR2_EXTTRIG
 
ADC_CR2_EXTTRIG_Msk


	)

3404 
	#ADC_CR2_JSWSTART_Pos
 (21U)

	)

3405 
	#ADC_CR2_JSWSTART_Msk
 (0x1UL << 
ADC_CR2_JSWSTART_Pos
Ë

	)

3406 
	#ADC_CR2_JSWSTART
 
ADC_CR2_JSWSTART_Msk


	)

3407 
	#ADC_CR2_SWSTART_Pos
 (22U)

	)

3408 
	#ADC_CR2_SWSTART_Msk
 (0x1UL << 
ADC_CR2_SWSTART_Pos
Ë

	)

3409 
	#ADC_CR2_SWSTART
 
ADC_CR2_SWSTART_Msk


	)

3410 
	#ADC_CR2_TSVREFE_Pos
 (23U)

	)

3411 
	#ADC_CR2_TSVREFE_Msk
 (0x1UL << 
ADC_CR2_TSVREFE_Pos
Ë

	)

3412 
	#ADC_CR2_TSVREFE
 
ADC_CR2_TSVREFE_Msk


	)

3415 
	#ADC_SMPR1_SMP10_Pos
 (0U)

	)

3416 
	#ADC_SMPR1_SMP10_Msk
 (0x7UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3417 
	#ADC_SMPR1_SMP10
 
ADC_SMPR1_SMP10_Msk


	)

3418 
	#ADC_SMPR1_SMP10_0
 (0x1UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3419 
	#ADC_SMPR1_SMP10_1
 (0x2UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3420 
	#ADC_SMPR1_SMP10_2
 (0x4UL << 
ADC_SMPR1_SMP10_Pos
Ë

	)

3422 
	#ADC_SMPR1_SMP11_Pos
 (3U)

	)

3423 
	#ADC_SMPR1_SMP11_Msk
 (0x7UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3424 
	#ADC_SMPR1_SMP11
 
ADC_SMPR1_SMP11_Msk


	)

3425 
	#ADC_SMPR1_SMP11_0
 (0x1UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3426 
	#ADC_SMPR1_SMP11_1
 (0x2UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3427 
	#ADC_SMPR1_SMP11_2
 (0x4UL << 
ADC_SMPR1_SMP11_Pos
Ë

	)

3429 
	#ADC_SMPR1_SMP12_Pos
 (6U)

	)

3430 
	#ADC_SMPR1_SMP12_Msk
 (0x7UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3431 
	#ADC_SMPR1_SMP12
 
ADC_SMPR1_SMP12_Msk


	)

3432 
	#ADC_SMPR1_SMP12_0
 (0x1UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3433 
	#ADC_SMPR1_SMP12_1
 (0x2UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3434 
	#ADC_SMPR1_SMP12_2
 (0x4UL << 
ADC_SMPR1_SMP12_Pos
Ë

	)

3436 
	#ADC_SMPR1_SMP13_Pos
 (9U)

	)

3437 
	#ADC_SMPR1_SMP13_Msk
 (0x7UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3438 
	#ADC_SMPR1_SMP13
 
ADC_SMPR1_SMP13_Msk


	)

3439 
	#ADC_SMPR1_SMP13_0
 (0x1UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3440 
	#ADC_SMPR1_SMP13_1
 (0x2UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3441 
	#ADC_SMPR1_SMP13_2
 (0x4UL << 
ADC_SMPR1_SMP13_Pos
Ë

	)

3443 
	#ADC_SMPR1_SMP14_Pos
 (12U)

	)

3444 
	#ADC_SMPR1_SMP14_Msk
 (0x7UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3445 
	#ADC_SMPR1_SMP14
 
ADC_SMPR1_SMP14_Msk


	)

3446 
	#ADC_SMPR1_SMP14_0
 (0x1UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3447 
	#ADC_SMPR1_SMP14_1
 (0x2UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3448 
	#ADC_SMPR1_SMP14_2
 (0x4UL << 
ADC_SMPR1_SMP14_Pos
Ë

	)

3450 
	#ADC_SMPR1_SMP15_Pos
 (15U)

	)

3451 
	#ADC_SMPR1_SMP15_Msk
 (0x7UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3452 
	#ADC_SMPR1_SMP15
 
ADC_SMPR1_SMP15_Msk


	)

3453 
	#ADC_SMPR1_SMP15_0
 (0x1UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3454 
	#ADC_SMPR1_SMP15_1
 (0x2UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3455 
	#ADC_SMPR1_SMP15_2
 (0x4UL << 
ADC_SMPR1_SMP15_Pos
Ë

	)

3457 
	#ADC_SMPR1_SMP16_Pos
 (18U)

	)

3458 
	#ADC_SMPR1_SMP16_Msk
 (0x7UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3459 
	#ADC_SMPR1_SMP16
 
ADC_SMPR1_SMP16_Msk


	)

3460 
	#ADC_SMPR1_SMP16_0
 (0x1UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3461 
	#ADC_SMPR1_SMP16_1
 (0x2UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3462 
	#ADC_SMPR1_SMP16_2
 (0x4UL << 
ADC_SMPR1_SMP16_Pos
Ë

	)

3464 
	#ADC_SMPR1_SMP17_Pos
 (21U)

	)

3465 
	#ADC_SMPR1_SMP17_Msk
 (0x7UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3466 
	#ADC_SMPR1_SMP17
 
ADC_SMPR1_SMP17_Msk


	)

3467 
	#ADC_SMPR1_SMP17_0
 (0x1UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3468 
	#ADC_SMPR1_SMP17_1
 (0x2UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3469 
	#ADC_SMPR1_SMP17_2
 (0x4UL << 
ADC_SMPR1_SMP17_Pos
Ë

	)

3472 
	#ADC_SMPR2_SMP0_Pos
 (0U)

	)

3473 
	#ADC_SMPR2_SMP0_Msk
 (0x7UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3474 
	#ADC_SMPR2_SMP0
 
ADC_SMPR2_SMP0_Msk


	)

3475 
	#ADC_SMPR2_SMP0_0
 (0x1UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3476 
	#ADC_SMPR2_SMP0_1
 (0x2UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3477 
	#ADC_SMPR2_SMP0_2
 (0x4UL << 
ADC_SMPR2_SMP0_Pos
Ë

	)

3479 
	#ADC_SMPR2_SMP1_Pos
 (3U)

	)

3480 
	#ADC_SMPR2_SMP1_Msk
 (0x7UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3481 
	#ADC_SMPR2_SMP1
 
ADC_SMPR2_SMP1_Msk


	)

3482 
	#ADC_SMPR2_SMP1_0
 (0x1UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3483 
	#ADC_SMPR2_SMP1_1
 (0x2UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3484 
	#ADC_SMPR2_SMP1_2
 (0x4UL << 
ADC_SMPR2_SMP1_Pos
Ë

	)

3486 
	#ADC_SMPR2_SMP2_Pos
 (6U)

	)

3487 
	#ADC_SMPR2_SMP2_Msk
 (0x7UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3488 
	#ADC_SMPR2_SMP2
 
ADC_SMPR2_SMP2_Msk


	)

3489 
	#ADC_SMPR2_SMP2_0
 (0x1UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3490 
	#ADC_SMPR2_SMP2_1
 (0x2UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3491 
	#ADC_SMPR2_SMP2_2
 (0x4UL << 
ADC_SMPR2_SMP2_Pos
Ë

	)

3493 
	#ADC_SMPR2_SMP3_Pos
 (9U)

	)

3494 
	#ADC_SMPR2_SMP3_Msk
 (0x7UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3495 
	#ADC_SMPR2_SMP3
 
ADC_SMPR2_SMP3_Msk


	)

3496 
	#ADC_SMPR2_SMP3_0
 (0x1UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3497 
	#ADC_SMPR2_SMP3_1
 (0x2UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3498 
	#ADC_SMPR2_SMP3_2
 (0x4UL << 
ADC_SMPR2_SMP3_Pos
Ë

	)

3500 
	#ADC_SMPR2_SMP4_Pos
 (12U)

	)

3501 
	#ADC_SMPR2_SMP4_Msk
 (0x7UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3502 
	#ADC_SMPR2_SMP4
 
ADC_SMPR2_SMP4_Msk


	)

3503 
	#ADC_SMPR2_SMP4_0
 (0x1UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3504 
	#ADC_SMPR2_SMP4_1
 (0x2UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3505 
	#ADC_SMPR2_SMP4_2
 (0x4UL << 
ADC_SMPR2_SMP4_Pos
Ë

	)

3507 
	#ADC_SMPR2_SMP5_Pos
 (15U)

	)

3508 
	#ADC_SMPR2_SMP5_Msk
 (0x7UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3509 
	#ADC_SMPR2_SMP5
 
ADC_SMPR2_SMP5_Msk


	)

3510 
	#ADC_SMPR2_SMP5_0
 (0x1UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3511 
	#ADC_SMPR2_SMP5_1
 (0x2UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3512 
	#ADC_SMPR2_SMP5_2
 (0x4UL << 
ADC_SMPR2_SMP5_Pos
Ë

	)

3514 
	#ADC_SMPR2_SMP6_Pos
 (18U)

	)

3515 
	#ADC_SMPR2_SMP6_Msk
 (0x7UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3516 
	#ADC_SMPR2_SMP6
 
ADC_SMPR2_SMP6_Msk


	)

3517 
	#ADC_SMPR2_SMP6_0
 (0x1UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3518 
	#ADC_SMPR2_SMP6_1
 (0x2UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3519 
	#ADC_SMPR2_SMP6_2
 (0x4UL << 
ADC_SMPR2_SMP6_Pos
Ë

	)

3521 
	#ADC_SMPR2_SMP7_Pos
 (21U)

	)

3522 
	#ADC_SMPR2_SMP7_Msk
 (0x7UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3523 
	#ADC_SMPR2_SMP7
 
ADC_SMPR2_SMP7_Msk


	)

3524 
	#ADC_SMPR2_SMP7_0
 (0x1UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3525 
	#ADC_SMPR2_SMP7_1
 (0x2UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3526 
	#ADC_SMPR2_SMP7_2
 (0x4UL << 
ADC_SMPR2_SMP7_Pos
Ë

	)

3528 
	#ADC_SMPR2_SMP8_Pos
 (24U)

	)

3529 
	#ADC_SMPR2_SMP8_Msk
 (0x7UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3530 
	#ADC_SMPR2_SMP8
 
ADC_SMPR2_SMP8_Msk


	)

3531 
	#ADC_SMPR2_SMP8_0
 (0x1UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3532 
	#ADC_SMPR2_SMP8_1
 (0x2UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3533 
	#ADC_SMPR2_SMP8_2
 (0x4UL << 
ADC_SMPR2_SMP8_Pos
Ë

	)

3535 
	#ADC_SMPR2_SMP9_Pos
 (27U)

	)

3536 
	#ADC_SMPR2_SMP9_Msk
 (0x7UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3537 
	#ADC_SMPR2_SMP9
 
ADC_SMPR2_SMP9_Msk


	)

3538 
	#ADC_SMPR2_SMP9_0
 (0x1UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3539 
	#ADC_SMPR2_SMP9_1
 (0x2UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3540 
	#ADC_SMPR2_SMP9_2
 (0x4UL << 
ADC_SMPR2_SMP9_Pos
Ë

	)

3543 
	#ADC_JOFR1_JOFFSET1_Pos
 (0U)

	)

3544 
	#ADC_JOFR1_JOFFSET1_Msk
 (0xFFFUL << 
ADC_JOFR1_JOFFSET1_Pos
Ë

	)

3545 
	#ADC_JOFR1_JOFFSET1
 
ADC_JOFR1_JOFFSET1_Msk


	)

3548 
	#ADC_JOFR2_JOFFSET2_Pos
 (0U)

	)

3549 
	#ADC_JOFR2_JOFFSET2_Msk
 (0xFFFUL << 
ADC_JOFR2_JOFFSET2_Pos
Ë

	)

3550 
	#ADC_JOFR2_JOFFSET2
 
ADC_JOFR2_JOFFSET2_Msk


	)

3553 
	#ADC_JOFR3_JOFFSET3_Pos
 (0U)

	)

3554 
	#ADC_JOFR3_JOFFSET3_Msk
 (0xFFFUL << 
ADC_JOFR3_JOFFSET3_Pos
Ë

	)

3555 
	#ADC_JOFR3_JOFFSET3
 
ADC_JOFR3_JOFFSET3_Msk


	)

3558 
	#ADC_JOFR4_JOFFSET4_Pos
 (0U)

	)

3559 
	#ADC_JOFR4_JOFFSET4_Msk
 (0xFFFUL << 
ADC_JOFR4_JOFFSET4_Pos
Ë

	)

3560 
	#ADC_JOFR4_JOFFSET4
 
ADC_JOFR4_JOFFSET4_Msk


	)

3563 
	#ADC_HTR_HT_Pos
 (0U)

	)

3564 
	#ADC_HTR_HT_Msk
 (0xFFFUL << 
ADC_HTR_HT_Pos
Ë

	)

3565 
	#ADC_HTR_HT
 
ADC_HTR_HT_Msk


	)

3568 
	#ADC_LTR_LT_Pos
 (0U)

	)

3569 
	#ADC_LTR_LT_Msk
 (0xFFFUL << 
ADC_LTR_LT_Pos
Ë

	)

3570 
	#ADC_LTR_LT
 
ADC_LTR_LT_Msk


	)

3573 
	#ADC_SQR1_SQ13_Pos
 (0U)

	)

3574 
	#ADC_SQR1_SQ13_Msk
 (0x1FUL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3575 
	#ADC_SQR1_SQ13
 
ADC_SQR1_SQ13_Msk


	)

3576 
	#ADC_SQR1_SQ13_0
 (0x01UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3577 
	#ADC_SQR1_SQ13_1
 (0x02UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3578 
	#ADC_SQR1_SQ13_2
 (0x04UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3579 
	#ADC_SQR1_SQ13_3
 (0x08UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3580 
	#ADC_SQR1_SQ13_4
 (0x10UL << 
ADC_SQR1_SQ13_Pos
Ë

	)

3582 
	#ADC_SQR1_SQ14_Pos
 (5U)

	)

3583 
	#ADC_SQR1_SQ14_Msk
 (0x1FUL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3584 
	#ADC_SQR1_SQ14
 
ADC_SQR1_SQ14_Msk


	)

3585 
	#ADC_SQR1_SQ14_0
 (0x01UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3586 
	#ADC_SQR1_SQ14_1
 (0x02UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3587 
	#ADC_SQR1_SQ14_2
 (0x04UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3588 
	#ADC_SQR1_SQ14_3
 (0x08UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3589 
	#ADC_SQR1_SQ14_4
 (0x10UL << 
ADC_SQR1_SQ14_Pos
Ë

	)

3591 
	#ADC_SQR1_SQ15_Pos
 (10U)

	)

3592 
	#ADC_SQR1_SQ15_Msk
 (0x1FUL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3593 
	#ADC_SQR1_SQ15
 
ADC_SQR1_SQ15_Msk


	)

3594 
	#ADC_SQR1_SQ15_0
 (0x01UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3595 
	#ADC_SQR1_SQ15_1
 (0x02UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3596 
	#ADC_SQR1_SQ15_2
 (0x04UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3597 
	#ADC_SQR1_SQ15_3
 (0x08UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3598 
	#ADC_SQR1_SQ15_4
 (0x10UL << 
ADC_SQR1_SQ15_Pos
Ë

	)

3600 
	#ADC_SQR1_SQ16_Pos
 (15U)

	)

3601 
	#ADC_SQR1_SQ16_Msk
 (0x1FUL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3602 
	#ADC_SQR1_SQ16
 
ADC_SQR1_SQ16_Msk


	)

3603 
	#ADC_SQR1_SQ16_0
 (0x01UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3604 
	#ADC_SQR1_SQ16_1
 (0x02UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3605 
	#ADC_SQR1_SQ16_2
 (0x04UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3606 
	#ADC_SQR1_SQ16_3
 (0x08UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3607 
	#ADC_SQR1_SQ16_4
 (0x10UL << 
ADC_SQR1_SQ16_Pos
Ë

	)

3609 
	#ADC_SQR1_L_Pos
 (20U)

	)

3610 
	#ADC_SQR1_L_Msk
 (0xFUL << 
ADC_SQR1_L_Pos
Ë

	)

3611 
	#ADC_SQR1_L
 
ADC_SQR1_L_Msk


	)

3612 
	#ADC_SQR1_L_0
 (0x1UL << 
ADC_SQR1_L_Pos
Ë

	)

3613 
	#ADC_SQR1_L_1
 (0x2UL << 
ADC_SQR1_L_Pos
Ë

	)

3614 
	#ADC_SQR1_L_2
 (0x4UL << 
ADC_SQR1_L_Pos
Ë

	)

3615 
	#ADC_SQR1_L_3
 (0x8UL << 
ADC_SQR1_L_Pos
Ë

	)

3618 
	#ADC_SQR2_SQ7_Pos
 (0U)

	)

3619 
	#ADC_SQR2_SQ7_Msk
 (0x1FUL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3620 
	#ADC_SQR2_SQ7
 
ADC_SQR2_SQ7_Msk


	)

3621 
	#ADC_SQR2_SQ7_0
 (0x01UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3622 
	#ADC_SQR2_SQ7_1
 (0x02UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3623 
	#ADC_SQR2_SQ7_2
 (0x04UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3624 
	#ADC_SQR2_SQ7_3
 (0x08UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3625 
	#ADC_SQR2_SQ7_4
 (0x10UL << 
ADC_SQR2_SQ7_Pos
Ë

	)

3627 
	#ADC_SQR2_SQ8_Pos
 (5U)

	)

3628 
	#ADC_SQR2_SQ8_Msk
 (0x1FUL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3629 
	#ADC_SQR2_SQ8
 
ADC_SQR2_SQ8_Msk


	)

3630 
	#ADC_SQR2_SQ8_0
 (0x01UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3631 
	#ADC_SQR2_SQ8_1
 (0x02UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3632 
	#ADC_SQR2_SQ8_2
 (0x04UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3633 
	#ADC_SQR2_SQ8_3
 (0x08UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3634 
	#ADC_SQR2_SQ8_4
 (0x10UL << 
ADC_SQR2_SQ8_Pos
Ë

	)

3636 
	#ADC_SQR2_SQ9_Pos
 (10U)

	)

3637 
	#ADC_SQR2_SQ9_Msk
 (0x1FUL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3638 
	#ADC_SQR2_SQ9
 
ADC_SQR2_SQ9_Msk


	)

3639 
	#ADC_SQR2_SQ9_0
 (0x01UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3640 
	#ADC_SQR2_SQ9_1
 (0x02UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3641 
	#ADC_SQR2_SQ9_2
 (0x04UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3642 
	#ADC_SQR2_SQ9_3
 (0x08UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3643 
	#ADC_SQR2_SQ9_4
 (0x10UL << 
ADC_SQR2_SQ9_Pos
Ë

	)

3645 
	#ADC_SQR2_SQ10_Pos
 (15U)

	)

3646 
	#ADC_SQR2_SQ10_Msk
 (0x1FUL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3647 
	#ADC_SQR2_SQ10
 
ADC_SQR2_SQ10_Msk


	)

3648 
	#ADC_SQR2_SQ10_0
 (0x01UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3649 
	#ADC_SQR2_SQ10_1
 (0x02UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3650 
	#ADC_SQR2_SQ10_2
 (0x04UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3651 
	#ADC_SQR2_SQ10_3
 (0x08UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3652 
	#ADC_SQR2_SQ10_4
 (0x10UL << 
ADC_SQR2_SQ10_Pos
Ë

	)

3654 
	#ADC_SQR2_SQ11_Pos
 (20U)

	)

3655 
	#ADC_SQR2_SQ11_Msk
 (0x1FUL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3656 
	#ADC_SQR2_SQ11
 
ADC_SQR2_SQ11_Msk


	)

3657 
	#ADC_SQR2_SQ11_0
 (0x01UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3658 
	#ADC_SQR2_SQ11_1
 (0x02UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3659 
	#ADC_SQR2_SQ11_2
 (0x04UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3660 
	#ADC_SQR2_SQ11_3
 (0x08UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3661 
	#ADC_SQR2_SQ11_4
 (0x10UL << 
ADC_SQR2_SQ11_Pos
Ë

	)

3663 
	#ADC_SQR2_SQ12_Pos
 (25U)

	)

3664 
	#ADC_SQR2_SQ12_Msk
 (0x1FUL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3665 
	#ADC_SQR2_SQ12
 
ADC_SQR2_SQ12_Msk


	)

3666 
	#ADC_SQR2_SQ12_0
 (0x01UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3667 
	#ADC_SQR2_SQ12_1
 (0x02UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3668 
	#ADC_SQR2_SQ12_2
 (0x04UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3669 
	#ADC_SQR2_SQ12_3
 (0x08UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3670 
	#ADC_SQR2_SQ12_4
 (0x10UL << 
ADC_SQR2_SQ12_Pos
Ë

	)

3673 
	#ADC_SQR3_SQ1_Pos
 (0U)

	)

3674 
	#ADC_SQR3_SQ1_Msk
 (0x1FUL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3675 
	#ADC_SQR3_SQ1
 
ADC_SQR3_SQ1_Msk


	)

3676 
	#ADC_SQR3_SQ1_0
 (0x01UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3677 
	#ADC_SQR3_SQ1_1
 (0x02UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3678 
	#ADC_SQR3_SQ1_2
 (0x04UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3679 
	#ADC_SQR3_SQ1_3
 (0x08UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3680 
	#ADC_SQR3_SQ1_4
 (0x10UL << 
ADC_SQR3_SQ1_Pos
Ë

	)

3682 
	#ADC_SQR3_SQ2_Pos
 (5U)

	)

3683 
	#ADC_SQR3_SQ2_Msk
 (0x1FUL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3684 
	#ADC_SQR3_SQ2
 
ADC_SQR3_SQ2_Msk


	)

3685 
	#ADC_SQR3_SQ2_0
 (0x01UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3686 
	#ADC_SQR3_SQ2_1
 (0x02UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3687 
	#ADC_SQR3_SQ2_2
 (0x04UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3688 
	#ADC_SQR3_SQ2_3
 (0x08UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3689 
	#ADC_SQR3_SQ2_4
 (0x10UL << 
ADC_SQR3_SQ2_Pos
Ë

	)

3691 
	#ADC_SQR3_SQ3_Pos
 (10U)

	)

3692 
	#ADC_SQR3_SQ3_Msk
 (0x1FUL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3693 
	#ADC_SQR3_SQ3
 
ADC_SQR3_SQ3_Msk


	)

3694 
	#ADC_SQR3_SQ3_0
 (0x01UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3695 
	#ADC_SQR3_SQ3_1
 (0x02UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3696 
	#ADC_SQR3_SQ3_2
 (0x04UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3697 
	#ADC_SQR3_SQ3_3
 (0x08UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3698 
	#ADC_SQR3_SQ3_4
 (0x10UL << 
ADC_SQR3_SQ3_Pos
Ë

	)

3700 
	#ADC_SQR3_SQ4_Pos
 (15U)

	)

3701 
	#ADC_SQR3_SQ4_Msk
 (0x1FUL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3702 
	#ADC_SQR3_SQ4
 
ADC_SQR3_SQ4_Msk


	)

3703 
	#ADC_SQR3_SQ4_0
 (0x01UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3704 
	#ADC_SQR3_SQ4_1
 (0x02UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3705 
	#ADC_SQR3_SQ4_2
 (0x04UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3706 
	#ADC_SQR3_SQ4_3
 (0x08UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3707 
	#ADC_SQR3_SQ4_4
 (0x10UL << 
ADC_SQR3_SQ4_Pos
Ë

	)

3709 
	#ADC_SQR3_SQ5_Pos
 (20U)

	)

3710 
	#ADC_SQR3_SQ5_Msk
 (0x1FUL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3711 
	#ADC_SQR3_SQ5
 
ADC_SQR3_SQ5_Msk


	)

3712 
	#ADC_SQR3_SQ5_0
 (0x01UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3713 
	#ADC_SQR3_SQ5_1
 (0x02UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3714 
	#ADC_SQR3_SQ5_2
 (0x04UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3715 
	#ADC_SQR3_SQ5_3
 (0x08UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3716 
	#ADC_SQR3_SQ5_4
 (0x10UL << 
ADC_SQR3_SQ5_Pos
Ë

	)

3718 
	#ADC_SQR3_SQ6_Pos
 (25U)

	)

3719 
	#ADC_SQR3_SQ6_Msk
 (0x1FUL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3720 
	#ADC_SQR3_SQ6
 
ADC_SQR3_SQ6_Msk


	)

3721 
	#ADC_SQR3_SQ6_0
 (0x01UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3722 
	#ADC_SQR3_SQ6_1
 (0x02UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3723 
	#ADC_SQR3_SQ6_2
 (0x04UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3724 
	#ADC_SQR3_SQ6_3
 (0x08UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3725 
	#ADC_SQR3_SQ6_4
 (0x10UL << 
ADC_SQR3_SQ6_Pos
Ë

	)

3728 
	#ADC_JSQR_JSQ1_Pos
 (0U)

	)

3729 
	#ADC_JSQR_JSQ1_Msk
 (0x1FUL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3730 
	#ADC_JSQR_JSQ1
 
ADC_JSQR_JSQ1_Msk


	)

3731 
	#ADC_JSQR_JSQ1_0
 (0x01UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3732 
	#ADC_JSQR_JSQ1_1
 (0x02UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3733 
	#ADC_JSQR_JSQ1_2
 (0x04UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3734 
	#ADC_JSQR_JSQ1_3
 (0x08UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3735 
	#ADC_JSQR_JSQ1_4
 (0x10UL << 
ADC_JSQR_JSQ1_Pos
Ë

	)

3737 
	#ADC_JSQR_JSQ2_Pos
 (5U)

	)

3738 
	#ADC_JSQR_JSQ2_Msk
 (0x1FUL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3739 
	#ADC_JSQR_JSQ2
 
ADC_JSQR_JSQ2_Msk


	)

3740 
	#ADC_JSQR_JSQ2_0
 (0x01UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3741 
	#ADC_JSQR_JSQ2_1
 (0x02UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3742 
	#ADC_JSQR_JSQ2_2
 (0x04UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3743 
	#ADC_JSQR_JSQ2_3
 (0x08UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3744 
	#ADC_JSQR_JSQ2_4
 (0x10UL << 
ADC_JSQR_JSQ2_Pos
Ë

	)

3746 
	#ADC_JSQR_JSQ3_Pos
 (10U)

	)

3747 
	#ADC_JSQR_JSQ3_Msk
 (0x1FUL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3748 
	#ADC_JSQR_JSQ3
 
ADC_JSQR_JSQ3_Msk


	)

3749 
	#ADC_JSQR_JSQ3_0
 (0x01UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3750 
	#ADC_JSQR_JSQ3_1
 (0x02UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3751 
	#ADC_JSQR_JSQ3_2
 (0x04UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3752 
	#ADC_JSQR_JSQ3_3
 (0x08UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3753 
	#ADC_JSQR_JSQ3_4
 (0x10UL << 
ADC_JSQR_JSQ3_Pos
Ë

	)

3755 
	#ADC_JSQR_JSQ4_Pos
 (15U)

	)

3756 
	#ADC_JSQR_JSQ4_Msk
 (0x1FUL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3757 
	#ADC_JSQR_JSQ4
 
ADC_JSQR_JSQ4_Msk


	)

3758 
	#ADC_JSQR_JSQ4_0
 (0x01UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3759 
	#ADC_JSQR_JSQ4_1
 (0x02UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3760 
	#ADC_JSQR_JSQ4_2
 (0x04UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3761 
	#ADC_JSQR_JSQ4_3
 (0x08UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3762 
	#ADC_JSQR_JSQ4_4
 (0x10UL << 
ADC_JSQR_JSQ4_Pos
Ë

	)

3764 
	#ADC_JSQR_JL_Pos
 (20U)

	)

3765 
	#ADC_JSQR_JL_Msk
 (0x3UL << 
ADC_JSQR_JL_Pos
Ë

	)

3766 
	#ADC_JSQR_JL
 
ADC_JSQR_JL_Msk


	)

3767 
	#ADC_JSQR_JL_0
 (0x1UL << 
ADC_JSQR_JL_Pos
Ë

	)

3768 
	#ADC_JSQR_JL_1
 (0x2UL << 
ADC_JSQR_JL_Pos
Ë

	)

3771 
	#ADC_JDR1_JDATA_Pos
 (0U)

	)

3772 
	#ADC_JDR1_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR1_JDATA_Pos
Ë

	)

3773 
	#ADC_JDR1_JDATA
 
ADC_JDR1_JDATA_Msk


	)

3776 
	#ADC_JDR2_JDATA_Pos
 (0U)

	)

3777 
	#ADC_JDR2_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR2_JDATA_Pos
Ë

	)

3778 
	#ADC_JDR2_JDATA
 
ADC_JDR2_JDATA_Msk


	)

3781 
	#ADC_JDR3_JDATA_Pos
 (0U)

	)

3782 
	#ADC_JDR3_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR3_JDATA_Pos
Ë

	)

3783 
	#ADC_JDR3_JDATA
 
ADC_JDR3_JDATA_Msk


	)

3786 
	#ADC_JDR4_JDATA_Pos
 (0U)

	)

3787 
	#ADC_JDR4_JDATA_Msk
 (0xFFFFUL << 
ADC_JDR4_JDATA_Pos
Ë

	)

3788 
	#ADC_JDR4_JDATA
 
ADC_JDR4_JDATA_Msk


	)

3791 
	#ADC_DR_DATA_Pos
 (0U)

	)

3792 
	#ADC_DR_DATA_Msk
 (0xFFFFUL << 
ADC_DR_DATA_Pos
Ë

	)

3793 
	#ADC_DR_DATA
 
ADC_DR_DATA_Msk


	)

3794 
	#ADC_DR_ADC2DATA_Pos
 (16U)

	)

3795 
	#ADC_DR_ADC2DATA_Msk
 (0xFFFFUL << 
ADC_DR_ADC2DATA_Pos
Ë

	)

3796 
	#ADC_DR_ADC2DATA
 
ADC_DR_ADC2DATA_Msk


	)

3805 
	#TIM_CR1_CEN_Pos
 (0U)

	)

3806 
	#TIM_CR1_CEN_Msk
 (0x1UL << 
TIM_CR1_CEN_Pos
Ë

	)

3807 
	#TIM_CR1_CEN
 
TIM_CR1_CEN_Msk


	)

3808 
	#TIM_CR1_UDIS_Pos
 (1U)

	)

3809 
	#TIM_CR1_UDIS_Msk
 (0x1UL << 
TIM_CR1_UDIS_Pos
Ë

	)

3810 
	#TIM_CR1_UDIS
 
TIM_CR1_UDIS_Msk


	)

3811 
	#TIM_CR1_URS_Pos
 (2U)

	)

3812 
	#TIM_CR1_URS_Msk
 (0x1UL << 
TIM_CR1_URS_Pos
Ë

	)

3813 
	#TIM_CR1_URS
 
TIM_CR1_URS_Msk


	)

3814 
	#TIM_CR1_OPM_Pos
 (3U)

	)

3815 
	#TIM_CR1_OPM_Msk
 (0x1UL << 
TIM_CR1_OPM_Pos
Ë

	)

3816 
	#TIM_CR1_OPM
 
TIM_CR1_OPM_Msk


	)

3817 
	#TIM_CR1_DIR_Pos
 (4U)

	)

3818 
	#TIM_CR1_DIR_Msk
 (0x1UL << 
TIM_CR1_DIR_Pos
Ë

	)

3819 
	#TIM_CR1_DIR
 
TIM_CR1_DIR_Msk


	)

3821 
	#TIM_CR1_CMS_Pos
 (5U)

	)

3822 
	#TIM_CR1_CMS_Msk
 (0x3UL << 
TIM_CR1_CMS_Pos
Ë

	)

3823 
	#TIM_CR1_CMS
 
TIM_CR1_CMS_Msk


	)

3824 
	#TIM_CR1_CMS_0
 (0x1UL << 
TIM_CR1_CMS_Pos
Ë

	)

3825 
	#TIM_CR1_CMS_1
 (0x2UL << 
TIM_CR1_CMS_Pos
Ë

	)

3827 
	#TIM_CR1_ARPE_Pos
 (7U)

	)

3828 
	#TIM_CR1_ARPE_Msk
 (0x1UL << 
TIM_CR1_ARPE_Pos
Ë

	)

3829 
	#TIM_CR1_ARPE
 
TIM_CR1_ARPE_Msk


	)

3831 
	#TIM_CR1_CKD_Pos
 (8U)

	)

3832 
	#TIM_CR1_CKD_Msk
 (0x3UL << 
TIM_CR1_CKD_Pos
Ë

	)

3833 
	#TIM_CR1_CKD
 
TIM_CR1_CKD_Msk


	)

3834 
	#TIM_CR1_CKD_0
 (0x1UL << 
TIM_CR1_CKD_Pos
Ë

	)

3835 
	#TIM_CR1_CKD_1
 (0x2UL << 
TIM_CR1_CKD_Pos
Ë

	)

3838 
	#TIM_CR2_CCPC_Pos
 (0U)

	)

3839 
	#TIM_CR2_CCPC_Msk
 (0x1UL << 
TIM_CR2_CCPC_Pos
Ë

	)

3840 
	#TIM_CR2_CCPC
 
TIM_CR2_CCPC_Msk


	)

3841 
	#TIM_CR2_CCUS_Pos
 (2U)

	)

3842 
	#TIM_CR2_CCUS_Msk
 (0x1UL << 
TIM_CR2_CCUS_Pos
Ë

	)

3843 
	#TIM_CR2_CCUS
 
TIM_CR2_CCUS_Msk


	)

3844 
	#TIM_CR2_CCDS_Pos
 (3U)

	)

3845 
	#TIM_CR2_CCDS_Msk
 (0x1UL << 
TIM_CR2_CCDS_Pos
Ë

	)

3846 
	#TIM_CR2_CCDS
 
TIM_CR2_CCDS_Msk


	)

3848 
	#TIM_CR2_MMS_Pos
 (4U)

	)

3849 
	#TIM_CR2_MMS_Msk
 (0x7UL << 
TIM_CR2_MMS_Pos
Ë

	)

3850 
	#TIM_CR2_MMS
 
TIM_CR2_MMS_Msk


	)

3851 
	#TIM_CR2_MMS_0
 (0x1UL << 
TIM_CR2_MMS_Pos
Ë

	)

3852 
	#TIM_CR2_MMS_1
 (0x2UL << 
TIM_CR2_MMS_Pos
Ë

	)

3853 
	#TIM_CR2_MMS_2
 (0x4UL << 
TIM_CR2_MMS_Pos
Ë

	)

3855 
	#TIM_CR2_TI1S_Pos
 (7U)

	)

3856 
	#TIM_CR2_TI1S_Msk
 (0x1UL << 
TIM_CR2_TI1S_Pos
Ë

	)

3857 
	#TIM_CR2_TI1S
 
TIM_CR2_TI1S_Msk


	)

3858 
	#TIM_CR2_OIS1_Pos
 (8U)

	)

3859 
	#TIM_CR2_OIS1_Msk
 (0x1UL << 
TIM_CR2_OIS1_Pos
Ë

	)

3860 
	#TIM_CR2_OIS1
 
TIM_CR2_OIS1_Msk


	)

3861 
	#TIM_CR2_OIS1N_Pos
 (9U)

	)

3862 
	#TIM_CR2_OIS1N_Msk
 (0x1UL << 
TIM_CR2_OIS1N_Pos
Ë

	)

3863 
	#TIM_CR2_OIS1N
 
TIM_CR2_OIS1N_Msk


	)

3864 
	#TIM_CR2_OIS2_Pos
 (10U)

	)

3865 
	#TIM_CR2_OIS2_Msk
 (0x1UL << 
TIM_CR2_OIS2_Pos
Ë

	)

3866 
	#TIM_CR2_OIS2
 
TIM_CR2_OIS2_Msk


	)

3867 
	#TIM_CR2_OIS2N_Pos
 (11U)

	)

3868 
	#TIM_CR2_OIS2N_Msk
 (0x1UL << 
TIM_CR2_OIS2N_Pos
Ë

	)

3869 
	#TIM_CR2_OIS2N
 
TIM_CR2_OIS2N_Msk


	)

3870 
	#TIM_CR2_OIS3_Pos
 (12U)

	)

3871 
	#TIM_CR2_OIS3_Msk
 (0x1UL << 
TIM_CR2_OIS3_Pos
Ë

	)

3872 
	#TIM_CR2_OIS3
 
TIM_CR2_OIS3_Msk


	)

3873 
	#TIM_CR2_OIS3N_Pos
 (13U)

	)

3874 
	#TIM_CR2_OIS3N_Msk
 (0x1UL << 
TIM_CR2_OIS3N_Pos
Ë

	)

3875 
	#TIM_CR2_OIS3N
 
TIM_CR2_OIS3N_Msk


	)

3876 
	#TIM_CR2_OIS4_Pos
 (14U)

	)

3877 
	#TIM_CR2_OIS4_Msk
 (0x1UL << 
TIM_CR2_OIS4_Pos
Ë

	)

3878 
	#TIM_CR2_OIS4
 
TIM_CR2_OIS4_Msk


	)

3881 
	#TIM_SMCR_SMS_Pos
 (0U)

	)

3882 
	#TIM_SMCR_SMS_Msk
 (0x7UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3883 
	#TIM_SMCR_SMS
 
TIM_SMCR_SMS_Msk


	)

3884 
	#TIM_SMCR_SMS_0
 (0x1UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3885 
	#TIM_SMCR_SMS_1
 (0x2UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3886 
	#TIM_SMCR_SMS_2
 (0x4UL << 
TIM_SMCR_SMS_Pos
Ë

	)

3888 
	#TIM_SMCR_TS_Pos
 (4U)

	)

3889 
	#TIM_SMCR_TS_Msk
 (0x7UL << 
TIM_SMCR_TS_Pos
Ë

	)

3890 
	#TIM_SMCR_TS
 
TIM_SMCR_TS_Msk


	)

3891 
	#TIM_SMCR_TS_0
 (0x1UL << 
TIM_SMCR_TS_Pos
Ë

	)

3892 
	#TIM_SMCR_TS_1
 (0x2UL << 
TIM_SMCR_TS_Pos
Ë

	)

3893 
	#TIM_SMCR_TS_2
 (0x4UL << 
TIM_SMCR_TS_Pos
Ë

	)

3895 
	#TIM_SMCR_MSM_Pos
 (7U)

	)

3896 
	#TIM_SMCR_MSM_Msk
 (0x1UL << 
TIM_SMCR_MSM_Pos
Ë

	)

3897 
	#TIM_SMCR_MSM
 
TIM_SMCR_MSM_Msk


	)

3899 
	#TIM_SMCR_ETF_Pos
 (8U)

	)

3900 
	#TIM_SMCR_ETF_Msk
 (0xFUL << 
TIM_SMCR_ETF_Pos
Ë

	)

3901 
	#TIM_SMCR_ETF
 
TIM_SMCR_ETF_Msk


	)

3902 
	#TIM_SMCR_ETF_0
 (0x1UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3903 
	#TIM_SMCR_ETF_1
 (0x2UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3904 
	#TIM_SMCR_ETF_2
 (0x4UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3905 
	#TIM_SMCR_ETF_3
 (0x8UL << 
TIM_SMCR_ETF_Pos
Ë

	)

3907 
	#TIM_SMCR_ETPS_Pos
 (12U)

	)

3908 
	#TIM_SMCR_ETPS_Msk
 (0x3UL << 
TIM_SMCR_ETPS_Pos
Ë

	)

3909 
	#TIM_SMCR_ETPS
 
TIM_SMCR_ETPS_Msk


	)

3910 
	#TIM_SMCR_ETPS_0
 (0x1UL << 
TIM_SMCR_ETPS_Pos
Ë

	)

3911 
	#TIM_SMCR_ETPS_1
 (0x2UL << 
TIM_SMCR_ETPS_Pos
Ë

	)

3913 
	#TIM_SMCR_ECE_Pos
 (14U)

	)

3914 
	#TIM_SMCR_ECE_Msk
 (0x1UL << 
TIM_SMCR_ECE_Pos
Ë

	)

3915 
	#TIM_SMCR_ECE
 
TIM_SMCR_ECE_Msk


	)

3916 
	#TIM_SMCR_ETP_Pos
 (15U)

	)

3917 
	#TIM_SMCR_ETP_Msk
 (0x1UL << 
TIM_SMCR_ETP_Pos
Ë

	)

3918 
	#TIM_SMCR_ETP
 
TIM_SMCR_ETP_Msk


	)

3921 
	#TIM_DIER_UIE_Pos
 (0U)

	)

3922 
	#TIM_DIER_UIE_Msk
 (0x1UL << 
TIM_DIER_UIE_Pos
Ë

	)

3923 
	#TIM_DIER_UIE
 
TIM_DIER_UIE_Msk


	)

3924 
	#TIM_DIER_CC1IE_Pos
 (1U)

	)

3925 
	#TIM_DIER_CC1IE_Msk
 (0x1UL << 
TIM_DIER_CC1IE_Pos
Ë

	)

3926 
	#TIM_DIER_CC1IE
 
TIM_DIER_CC1IE_Msk


	)

3927 
	#TIM_DIER_CC2IE_Pos
 (2U)

	)

3928 
	#TIM_DIER_CC2IE_Msk
 (0x1UL << 
TIM_DIER_CC2IE_Pos
Ë

	)

3929 
	#TIM_DIER_CC2IE
 
TIM_DIER_CC2IE_Msk


	)

3930 
	#TIM_DIER_CC3IE_Pos
 (3U)

	)

3931 
	#TIM_DIER_CC3IE_Msk
 (0x1UL << 
TIM_DIER_CC3IE_Pos
Ë

	)

3932 
	#TIM_DIER_CC3IE
 
TIM_DIER_CC3IE_Msk


	)

3933 
	#TIM_DIER_CC4IE_Pos
 (4U)

	)

3934 
	#TIM_DIER_CC4IE_Msk
 (0x1UL << 
TIM_DIER_CC4IE_Pos
Ë

	)

3935 
	#TIM_DIER_CC4IE
 
TIM_DIER_CC4IE_Msk


	)

3936 
	#TIM_DIER_COMIE_Pos
 (5U)

	)

3937 
	#TIM_DIER_COMIE_Msk
 (0x1UL << 
TIM_DIER_COMIE_Pos
Ë

	)

3938 
	#TIM_DIER_COMIE
 
TIM_DIER_COMIE_Msk


	)

3939 
	#TIM_DIER_TIE_Pos
 (6U)

	)

3940 
	#TIM_DIER_TIE_Msk
 (0x1UL << 
TIM_DIER_TIE_Pos
Ë

	)

3941 
	#TIM_DIER_TIE
 
TIM_DIER_TIE_Msk


	)

3942 
	#TIM_DIER_BIE_Pos
 (7U)

	)

3943 
	#TIM_DIER_BIE_Msk
 (0x1UL << 
TIM_DIER_BIE_Pos
Ë

	)

3944 
	#TIM_DIER_BIE
 
TIM_DIER_BIE_Msk


	)

3945 
	#TIM_DIER_UDE_Pos
 (8U)

	)

3946 
	#TIM_DIER_UDE_Msk
 (0x1UL << 
TIM_DIER_UDE_Pos
Ë

	)

3947 
	#TIM_DIER_UDE
 
TIM_DIER_UDE_Msk


	)

3948 
	#TIM_DIER_CC1DE_Pos
 (9U)

	)

3949 
	#TIM_DIER_CC1DE_Msk
 (0x1UL << 
TIM_DIER_CC1DE_Pos
Ë

	)

3950 
	#TIM_DIER_CC1DE
 
TIM_DIER_CC1DE_Msk


	)

3951 
	#TIM_DIER_CC2DE_Pos
 (10U)

	)

3952 
	#TIM_DIER_CC2DE_Msk
 (0x1UL << 
TIM_DIER_CC2DE_Pos
Ë

	)

3953 
	#TIM_DIER_CC2DE
 
TIM_DIER_CC2DE_Msk


	)

3954 
	#TIM_DIER_CC3DE_Pos
 (11U)

	)

3955 
	#TIM_DIER_CC3DE_Msk
 (0x1UL << 
TIM_DIER_CC3DE_Pos
Ë

	)

3956 
	#TIM_DIER_CC3DE
 
TIM_DIER_CC3DE_Msk


	)

3957 
	#TIM_DIER_CC4DE_Pos
 (12U)

	)

3958 
	#TIM_DIER_CC4DE_Msk
 (0x1UL << 
TIM_DIER_CC4DE_Pos
Ë

	)

3959 
	#TIM_DIER_CC4DE
 
TIM_DIER_CC4DE_Msk


	)

3960 
	#TIM_DIER_COMDE_Pos
 (13U)

	)

3961 
	#TIM_DIER_COMDE_Msk
 (0x1UL << 
TIM_DIER_COMDE_Pos
Ë

	)

3962 
	#TIM_DIER_COMDE
 
TIM_DIER_COMDE_Msk


	)

3963 
	#TIM_DIER_TDE_Pos
 (14U)

	)

3964 
	#TIM_DIER_TDE_Msk
 (0x1UL << 
TIM_DIER_TDE_Pos
Ë

	)

3965 
	#TIM_DIER_TDE
 
TIM_DIER_TDE_Msk


	)

3968 
	#TIM_SR_UIF_Pos
 (0U)

	)

3969 
	#TIM_SR_UIF_Msk
 (0x1UL << 
TIM_SR_UIF_Pos
Ë

	)

3970 
	#TIM_SR_UIF
 
TIM_SR_UIF_Msk


	)

3971 
	#TIM_SR_CC1IF_Pos
 (1U)

	)

3972 
	#TIM_SR_CC1IF_Msk
 (0x1UL << 
TIM_SR_CC1IF_Pos
Ë

	)

3973 
	#TIM_SR_CC1IF
 
TIM_SR_CC1IF_Msk


	)

3974 
	#TIM_SR_CC2IF_Pos
 (2U)

	)

3975 
	#TIM_SR_CC2IF_Msk
 (0x1UL << 
TIM_SR_CC2IF_Pos
Ë

	)

3976 
	#TIM_SR_CC2IF
 
TIM_SR_CC2IF_Msk


	)

3977 
	#TIM_SR_CC3IF_Pos
 (3U)

	)

3978 
	#TIM_SR_CC3IF_Msk
 (0x1UL << 
TIM_SR_CC3IF_Pos
Ë

	)

3979 
	#TIM_SR_CC3IF
 
TIM_SR_CC3IF_Msk


	)

3980 
	#TIM_SR_CC4IF_Pos
 (4U)

	)

3981 
	#TIM_SR_CC4IF_Msk
 (0x1UL << 
TIM_SR_CC4IF_Pos
Ë

	)

3982 
	#TIM_SR_CC4IF
 
TIM_SR_CC4IF_Msk


	)

3983 
	#TIM_SR_COMIF_Pos
 (5U)

	)

3984 
	#TIM_SR_COMIF_Msk
 (0x1UL << 
TIM_SR_COMIF_Pos
Ë

	)

3985 
	#TIM_SR_COMIF
 
TIM_SR_COMIF_Msk


	)

3986 
	#TIM_SR_TIF_Pos
 (6U)

	)

3987 
	#TIM_SR_TIF_Msk
 (0x1UL << 
TIM_SR_TIF_Pos
Ë

	)

3988 
	#TIM_SR_TIF
 
TIM_SR_TIF_Msk


	)

3989 
	#TIM_SR_BIF_Pos
 (7U)

	)

3990 
	#TIM_SR_BIF_Msk
 (0x1UL << 
TIM_SR_BIF_Pos
Ë

	)

3991 
	#TIM_SR_BIF
 
TIM_SR_BIF_Msk


	)

3992 
	#TIM_SR_CC1OF_Pos
 (9U)

	)

3993 
	#TIM_SR_CC1OF_Msk
 (0x1UL << 
TIM_SR_CC1OF_Pos
Ë

	)

3994 
	#TIM_SR_CC1OF
 
TIM_SR_CC1OF_Msk


	)

3995 
	#TIM_SR_CC2OF_Pos
 (10U)

	)

3996 
	#TIM_SR_CC2OF_Msk
 (0x1UL << 
TIM_SR_CC2OF_Pos
Ë

	)

3997 
	#TIM_SR_CC2OF
 
TIM_SR_CC2OF_Msk


	)

3998 
	#TIM_SR_CC3OF_Pos
 (11U)

	)

3999 
	#TIM_SR_CC3OF_Msk
 (0x1UL << 
TIM_SR_CC3OF_Pos
Ë

	)

4000 
	#TIM_SR_CC3OF
 
TIM_SR_CC3OF_Msk


	)

4001 
	#TIM_SR_CC4OF_Pos
 (12U)

	)

4002 
	#TIM_SR_CC4OF_Msk
 (0x1UL << 
TIM_SR_CC4OF_Pos
Ë

	)

4003 
	#TIM_SR_CC4OF
 
TIM_SR_CC4OF_Msk


	)

4006 
	#TIM_EGR_UG_Pos
 (0U)

	)

4007 
	#TIM_EGR_UG_Msk
 (0x1UL << 
TIM_EGR_UG_Pos
Ë

	)

4008 
	#TIM_EGR_UG
 
TIM_EGR_UG_Msk


	)

4009 
	#TIM_EGR_CC1G_Pos
 (1U)

	)

4010 
	#TIM_EGR_CC1G_Msk
 (0x1UL << 
TIM_EGR_CC1G_Pos
Ë

	)

4011 
	#TIM_EGR_CC1G
 
TIM_EGR_CC1G_Msk


	)

4012 
	#TIM_EGR_CC2G_Pos
 (2U)

	)

4013 
	#TIM_EGR_CC2G_Msk
 (0x1UL << 
TIM_EGR_CC2G_Pos
Ë

	)

4014 
	#TIM_EGR_CC2G
 
TIM_EGR_CC2G_Msk


	)

4015 
	#TIM_EGR_CC3G_Pos
 (3U)

	)

4016 
	#TIM_EGR_CC3G_Msk
 (0x1UL << 
TIM_EGR_CC3G_Pos
Ë

	)

4017 
	#TIM_EGR_CC3G
 
TIM_EGR_CC3G_Msk


	)

4018 
	#TIM_EGR_CC4G_Pos
 (4U)

	)

4019 
	#TIM_EGR_CC4G_Msk
 (0x1UL << 
TIM_EGR_CC4G_Pos
Ë

	)

4020 
	#TIM_EGR_CC4G
 
TIM_EGR_CC4G_Msk


	)

4021 
	#TIM_EGR_COMG_Pos
 (5U)

	)

4022 
	#TIM_EGR_COMG_Msk
 (0x1UL << 
TIM_EGR_COMG_Pos
Ë

	)

4023 
	#TIM_EGR_COMG
 
TIM_EGR_COMG_Msk


	)

4024 
	#TIM_EGR_TG_Pos
 (6U)

	)

4025 
	#TIM_EGR_TG_Msk
 (0x1UL << 
TIM_EGR_TG_Pos
Ë

	)

4026 
	#TIM_EGR_TG
 
TIM_EGR_TG_Msk


	)

4027 
	#TIM_EGR_BG_Pos
 (7U)

	)

4028 
	#TIM_EGR_BG_Msk
 (0x1UL << 
TIM_EGR_BG_Pos
Ë

	)

4029 
	#TIM_EGR_BG
 
TIM_EGR_BG_Msk


	)

4032 
	#TIM_CCMR1_CC1S_Pos
 (0U)

	)

4033 
	#TIM_CCMR1_CC1S_Msk
 (0x3UL << 
TIM_CCMR1_CC1S_Pos
Ë

	)

4034 
	#TIM_CCMR1_CC1S
 
TIM_CCMR1_CC1S_Msk


	)

4035 
	#TIM_CCMR1_CC1S_0
 (0x1UL << 
TIM_CCMR1_CC1S_Pos
Ë

	)

4036 
	#TIM_CCMR1_CC1S_1
 (0x2UL << 
TIM_CCMR1_CC1S_Pos
Ë

	)

4038 
	#TIM_CCMR1_OC1FE_Pos
 (2U)

	)

4039 
	#TIM_CCMR1_OC1FE_Msk
 (0x1UL << 
TIM_CCMR1_OC1FE_Pos
Ë

	)

4040 
	#TIM_CCMR1_OC1FE
 
TIM_CCMR1_OC1FE_Msk


	)

4041 
	#TIM_CCMR1_OC1PE_Pos
 (3U)

	)

4042 
	#TIM_CCMR1_OC1PE_Msk
 (0x1UL << 
TIM_CCMR1_OC1PE_Pos
Ë

	)

4043 
	#TIM_CCMR1_OC1PE
 
TIM_CCMR1_OC1PE_Msk


	)

4045 
	#TIM_CCMR1_OC1M_Pos
 (4U)

	)

4046 
	#TIM_CCMR1_OC1M_Msk
 (0x7UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4047 
	#TIM_CCMR1_OC1M
 
TIM_CCMR1_OC1M_Msk


	)

4048 
	#TIM_CCMR1_OC1M_0
 (0x1UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4049 
	#TIM_CCMR1_OC1M_1
 (0x2UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4050 
	#TIM_CCMR1_OC1M_2
 (0x4UL << 
TIM_CCMR1_OC1M_Pos
Ë

	)

4052 
	#TIM_CCMR1_OC1CE_Pos
 (7U)

	)

4053 
	#TIM_CCMR1_OC1CE_Msk
 (0x1UL << 
TIM_CCMR1_OC1CE_Pos
Ë

	)

4054 
	#TIM_CCMR1_OC1CE
 
TIM_CCMR1_OC1CE_Msk


	)

4056 
	#TIM_CCMR1_CC2S_Pos
 (8U)

	)

4057 
	#TIM_CCMR1_CC2S_Msk
 (0x3UL << 
TIM_CCMR1_CC2S_Pos
Ë

	)

4058 
	#TIM_CCMR1_CC2S
 
TIM_CCMR1_CC2S_Msk


	)

4059 
	#TIM_CCMR1_CC2S_0
 (0x1UL << 
TIM_CCMR1_CC2S_Pos
Ë

	)

4060 
	#TIM_CCMR1_CC2S_1
 (0x2UL << 
TIM_CCMR1_CC2S_Pos
Ë

	)

4062 
	#TIM_CCMR1_OC2FE_Pos
 (10U)

	)

4063 
	#TIM_CCMR1_OC2FE_Msk
 (0x1UL << 
TIM_CCMR1_OC2FE_Pos
Ë

	)

4064 
	#TIM_CCMR1_OC2FE
 
TIM_CCMR1_OC2FE_Msk


	)

4065 
	#TIM_CCMR1_OC2PE_Pos
 (11U)

	)

4066 
	#TIM_CCMR1_OC2PE_Msk
 (0x1UL << 
TIM_CCMR1_OC2PE_Pos
Ë

	)

4067 
	#TIM_CCMR1_OC2PE
 
TIM_CCMR1_OC2PE_Msk


	)

4069 
	#TIM_CCMR1_OC2M_Pos
 (12U)

	)

4070 
	#TIM_CCMR1_OC2M_Msk
 (0x7UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4071 
	#TIM_CCMR1_OC2M
 
TIM_CCMR1_OC2M_Msk


	)

4072 
	#TIM_CCMR1_OC2M_0
 (0x1UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4073 
	#TIM_CCMR1_OC2M_1
 (0x2UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4074 
	#TIM_CCMR1_OC2M_2
 (0x4UL << 
TIM_CCMR1_OC2M_Pos
Ë

	)

4076 
	#TIM_CCMR1_OC2CE_Pos
 (15U)

	)

4077 
	#TIM_CCMR1_OC2CE_Msk
 (0x1UL << 
TIM_CCMR1_OC2CE_Pos
Ë

	)

4078 
	#TIM_CCMR1_OC2CE
 
TIM_CCMR1_OC2CE_Msk


	)

4082 
	#TIM_CCMR1_IC1PSC_Pos
 (2U)

	)

4083 
	#TIM_CCMR1_IC1PSC_Msk
 (0x3UL << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

4084 
	#TIM_CCMR1_IC1PSC
 
TIM_CCMR1_IC1PSC_Msk


	)

4085 
	#TIM_CCMR1_IC1PSC_0
 (0x1UL << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

4086 
	#TIM_CCMR1_IC1PSC_1
 (0x2UL << 
TIM_CCMR1_IC1PSC_Pos
Ë

	)

4088 
	#TIM_CCMR1_IC1F_Pos
 (4U)

	)

4089 
	#TIM_CCMR1_IC1F_Msk
 (0xFUL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4090 
	#TIM_CCMR1_IC1F
 
TIM_CCMR1_IC1F_Msk


	)

4091 
	#TIM_CCMR1_IC1F_0
 (0x1UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4092 
	#TIM_CCMR1_IC1F_1
 (0x2UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4093 
	#TIM_CCMR1_IC1F_2
 (0x4UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4094 
	#TIM_CCMR1_IC1F_3
 (0x8UL << 
TIM_CCMR1_IC1F_Pos
Ë

	)

4096 
	#TIM_CCMR1_IC2PSC_Pos
 (10U)

	)

4097 
	#TIM_CCMR1_IC2PSC_Msk
 (0x3UL << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

4098 
	#TIM_CCMR1_IC2PSC
 
TIM_CCMR1_IC2PSC_Msk


	)

4099 
	#TIM_CCMR1_IC2PSC_0
 (0x1UL << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

4100 
	#TIM_CCMR1_IC2PSC_1
 (0x2UL << 
TIM_CCMR1_IC2PSC_Pos
Ë

	)

4102 
	#TIM_CCMR1_IC2F_Pos
 (12U)

	)

4103 
	#TIM_CCMR1_IC2F_Msk
 (0xFUL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4104 
	#TIM_CCMR1_IC2F
 
TIM_CCMR1_IC2F_Msk


	)

4105 
	#TIM_CCMR1_IC2F_0
 (0x1UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4106 
	#TIM_CCMR1_IC2F_1
 (0x2UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4107 
	#TIM_CCMR1_IC2F_2
 (0x4UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4108 
	#TIM_CCMR1_IC2F_3
 (0x8UL << 
TIM_CCMR1_IC2F_Pos
Ë

	)

4111 
	#TIM_CCMR2_CC3S_Pos
 (0U)

	)

4112 
	#TIM_CCMR2_CC3S_Msk
 (0x3UL << 
TIM_CCMR2_CC3S_Pos
Ë

	)

4113 
	#TIM_CCMR2_CC3S
 
TIM_CCMR2_CC3S_Msk


	)

4114 
	#TIM_CCMR2_CC3S_0
 (0x1UL << 
TIM_CCMR2_CC3S_Pos
Ë

	)

4115 
	#TIM_CCMR2_CC3S_1
 (0x2UL << 
TIM_CCMR2_CC3S_Pos
Ë

	)

4117 
	#TIM_CCMR2_OC3FE_Pos
 (2U)

	)

4118 
	#TIM_CCMR2_OC3FE_Msk
 (0x1UL << 
TIM_CCMR2_OC3FE_Pos
Ë

	)

4119 
	#TIM_CCMR2_OC3FE
 
TIM_CCMR2_OC3FE_Msk


	)

4120 
	#TIM_CCMR2_OC3PE_Pos
 (3U)

	)

4121 
	#TIM_CCMR2_OC3PE_Msk
 (0x1UL << 
TIM_CCMR2_OC3PE_Pos
Ë

	)

4122 
	#TIM_CCMR2_OC3PE
 
TIM_CCMR2_OC3PE_Msk


	)

4124 
	#TIM_CCMR2_OC3M_Pos
 (4U)

	)

4125 
	#TIM_CCMR2_OC3M_Msk
 (0x7UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4126 
	#TIM_CCMR2_OC3M
 
TIM_CCMR2_OC3M_Msk


	)

4127 
	#TIM_CCMR2_OC3M_0
 (0x1UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4128 
	#TIM_CCMR2_OC3M_1
 (0x2UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4129 
	#TIM_CCMR2_OC3M_2
 (0x4UL << 
TIM_CCMR2_OC3M_Pos
Ë

	)

4131 
	#TIM_CCMR2_OC3CE_Pos
 (7U)

	)

4132 
	#TIM_CCMR2_OC3CE_Msk
 (0x1UL << 
TIM_CCMR2_OC3CE_Pos
Ë

	)

4133 
	#TIM_CCMR2_OC3CE
 
TIM_CCMR2_OC3CE_Msk


	)

4135 
	#TIM_CCMR2_CC4S_Pos
 (8U)

	)

4136 
	#TIM_CCMR2_CC4S_Msk
 (0x3UL << 
TIM_CCMR2_CC4S_Pos
Ë

	)

4137 
	#TIM_CCMR2_CC4S
 
TIM_CCMR2_CC4S_Msk


	)

4138 
	#TIM_CCMR2_CC4S_0
 (0x1UL << 
TIM_CCMR2_CC4S_Pos
Ë

	)

4139 
	#TIM_CCMR2_CC4S_1
 (0x2UL << 
TIM_CCMR2_CC4S_Pos
Ë

	)

4141 
	#TIM_CCMR2_OC4FE_Pos
 (10U)

	)

4142 
	#TIM_CCMR2_OC4FE_Msk
 (0x1UL << 
TIM_CCMR2_OC4FE_Pos
Ë

	)

4143 
	#TIM_CCMR2_OC4FE
 
TIM_CCMR2_OC4FE_Msk


	)

4144 
	#TIM_CCMR2_OC4PE_Pos
 (11U)

	)

4145 
	#TIM_CCMR2_OC4PE_Msk
 (0x1UL << 
TIM_CCMR2_OC4PE_Pos
Ë

	)

4146 
	#TIM_CCMR2_OC4PE
 
TIM_CCMR2_OC4PE_Msk


	)

4148 
	#TIM_CCMR2_OC4M_Pos
 (12U)

	)

4149 
	#TIM_CCMR2_OC4M_Msk
 (0x7UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4150 
	#TIM_CCMR2_OC4M
 
TIM_CCMR2_OC4M_Msk


	)

4151 
	#TIM_CCMR2_OC4M_0
 (0x1UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4152 
	#TIM_CCMR2_OC4M_1
 (0x2UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4153 
	#TIM_CCMR2_OC4M_2
 (0x4UL << 
TIM_CCMR2_OC4M_Pos
Ë

	)

4155 
	#TIM_CCMR2_OC4CE_Pos
 (15U)

	)

4156 
	#TIM_CCMR2_OC4CE_Msk
 (0x1UL << 
TIM_CCMR2_OC4CE_Pos
Ë

	)

4157 
	#TIM_CCMR2_OC4CE
 
TIM_CCMR2_OC4CE_Msk


	)

4161 
	#TIM_CCMR2_IC3PSC_Pos
 (2U)

	)

4162 
	#TIM_CCMR2_IC3PSC_Msk
 (0x3UL << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

4163 
	#TIM_CCMR2_IC3PSC
 
TIM_CCMR2_IC3PSC_Msk


	)

4164 
	#TIM_CCMR2_IC3PSC_0
 (0x1UL << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

4165 
	#TIM_CCMR2_IC3PSC_1
 (0x2UL << 
TIM_CCMR2_IC3PSC_Pos
Ë

	)

4167 
	#TIM_CCMR2_IC3F_Pos
 (4U)

	)

4168 
	#TIM_CCMR2_IC3F_Msk
 (0xFUL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4169 
	#TIM_CCMR2_IC3F
 
TIM_CCMR2_IC3F_Msk


	)

4170 
	#TIM_CCMR2_IC3F_0
 (0x1UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4171 
	#TIM_CCMR2_IC3F_1
 (0x2UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4172 
	#TIM_CCMR2_IC3F_2
 (0x4UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4173 
	#TIM_CCMR2_IC3F_3
 (0x8UL << 
TIM_CCMR2_IC3F_Pos
Ë

	)

4175 
	#TIM_CCMR2_IC4PSC_Pos
 (10U)

	)

4176 
	#TIM_CCMR2_IC4PSC_Msk
 (0x3UL << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

4177 
	#TIM_CCMR2_IC4PSC
 
TIM_CCMR2_IC4PSC_Msk


	)

4178 
	#TIM_CCMR2_IC4PSC_0
 (0x1UL << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

4179 
	#TIM_CCMR2_IC4PSC_1
 (0x2UL << 
TIM_CCMR2_IC4PSC_Pos
Ë

	)

4181 
	#TIM_CCMR2_IC4F_Pos
 (12U)

	)

4182 
	#TIM_CCMR2_IC4F_Msk
 (0xFUL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4183 
	#TIM_CCMR2_IC4F
 
TIM_CCMR2_IC4F_Msk


	)

4184 
	#TIM_CCMR2_IC4F_0
 (0x1UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4185 
	#TIM_CCMR2_IC4F_1
 (0x2UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4186 
	#TIM_CCMR2_IC4F_2
 (0x4UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4187 
	#TIM_CCMR2_IC4F_3
 (0x8UL << 
TIM_CCMR2_IC4F_Pos
Ë

	)

4190 
	#TIM_CCER_CC1E_Pos
 (0U)

	)

4191 
	#TIM_CCER_CC1E_Msk
 (0x1UL << 
TIM_CCER_CC1E_Pos
Ë

	)

4192 
	#TIM_CCER_CC1E
 
TIM_CCER_CC1E_Msk


	)

4193 
	#TIM_CCER_CC1P_Pos
 (1U)

	)

4194 
	#TIM_CCER_CC1P_Msk
 (0x1UL << 
TIM_CCER_CC1P_Pos
Ë

	)

4195 
	#TIM_CCER_CC1P
 
TIM_CCER_CC1P_Msk


	)

4196 
	#TIM_CCER_CC1NE_Pos
 (2U)

	)

4197 
	#TIM_CCER_CC1NE_Msk
 (0x1UL << 
TIM_CCER_CC1NE_Pos
Ë

	)

4198 
	#TIM_CCER_CC1NE
 
TIM_CCER_CC1NE_Msk


	)

4199 
	#TIM_CCER_CC1NP_Pos
 (3U)

	)

4200 
	#TIM_CCER_CC1NP_Msk
 (0x1UL << 
TIM_CCER_CC1NP_Pos
Ë

	)

4201 
	#TIM_CCER_CC1NP
 
TIM_CCER_CC1NP_Msk


	)

4202 
	#TIM_CCER_CC2E_Pos
 (4U)

	)

4203 
	#TIM_CCER_CC2E_Msk
 (0x1UL << 
TIM_CCER_CC2E_Pos
Ë

	)

4204 
	#TIM_CCER_CC2E
 
TIM_CCER_CC2E_Msk


	)

4205 
	#TIM_CCER_CC2P_Pos
 (5U)

	)

4206 
	#TIM_CCER_CC2P_Msk
 (0x1UL << 
TIM_CCER_CC2P_Pos
Ë

	)

4207 
	#TIM_CCER_CC2P
 
TIM_CCER_CC2P_Msk


	)

4208 
	#TIM_CCER_CC2NE_Pos
 (6U)

	)

4209 
	#TIM_CCER_CC2NE_Msk
 (0x1UL << 
TIM_CCER_CC2NE_Pos
Ë

	)

4210 
	#TIM_CCER_CC2NE
 
TIM_CCER_CC2NE_Msk


	)

4211 
	#TIM_CCER_CC2NP_Pos
 (7U)

	)

4212 
	#TIM_CCER_CC2NP_Msk
 (0x1UL << 
TIM_CCER_CC2NP_Pos
Ë

	)

4213 
	#TIM_CCER_CC2NP
 
TIM_CCER_CC2NP_Msk


	)

4214 
	#TIM_CCER_CC3E_Pos
 (8U)

	)

4215 
	#TIM_CCER_CC3E_Msk
 (0x1UL << 
TIM_CCER_CC3E_Pos
Ë

	)

4216 
	#TIM_CCER_CC3E
 
TIM_CCER_CC3E_Msk


	)

4217 
	#TIM_CCER_CC3P_Pos
 (9U)

	)

4218 
	#TIM_CCER_CC3P_Msk
 (0x1UL << 
TIM_CCER_CC3P_Pos
Ë

	)

4219 
	#TIM_CCER_CC3P
 
TIM_CCER_CC3P_Msk


	)

4220 
	#TIM_CCER_CC3NE_Pos
 (10U)

	)

4221 
	#TIM_CCER_CC3NE_Msk
 (0x1UL << 
TIM_CCER_CC3NE_Pos
Ë

	)

4222 
	#TIM_CCER_CC3NE
 
TIM_CCER_CC3NE_Msk


	)

4223 
	#TIM_CCER_CC3NP_Pos
 (11U)

	)

4224 
	#TIM_CCER_CC3NP_Msk
 (0x1UL << 
TIM_CCER_CC3NP_Pos
Ë

	)

4225 
	#TIM_CCER_CC3NP
 
TIM_CCER_CC3NP_Msk


	)

4226 
	#TIM_CCER_CC4E_Pos
 (12U)

	)

4227 
	#TIM_CCER_CC4E_Msk
 (0x1UL << 
TIM_CCER_CC4E_Pos
Ë

	)

4228 
	#TIM_CCER_CC4E
 
TIM_CCER_CC4E_Msk


	)

4229 
	#TIM_CCER_CC4P_Pos
 (13U)

	)

4230 
	#TIM_CCER_CC4P_Msk
 (0x1UL << 
TIM_CCER_CC4P_Pos
Ë

	)

4231 
	#TIM_CCER_CC4P
 
TIM_CCER_CC4P_Msk


	)

4234 
	#TIM_CNT_CNT_Pos
 (0U)

	)

4235 
	#TIM_CNT_CNT_Msk
 (0xFFFFFFFFUL << 
TIM_CNT_CNT_Pos
Ë

	)

4236 
	#TIM_CNT_CNT
 
TIM_CNT_CNT_Msk


	)

4239 
	#TIM_PSC_PSC_Pos
 (0U)

	)

4240 
	#TIM_PSC_PSC_Msk
 (0xFFFFUL << 
TIM_PSC_PSC_Pos
Ë

	)

4241 
	#TIM_PSC_PSC
 
TIM_PSC_PSC_Msk


	)

4244 
	#TIM_ARR_ARR_Pos
 (0U)

	)

4245 
	#TIM_ARR_ARR_Msk
 (0xFFFFFFFFUL << 
TIM_ARR_ARR_Pos
Ë

	)

4246 
	#TIM_ARR_ARR
 
TIM_ARR_ARR_Msk


	)

4249 
	#TIM_RCR_REP_Pos
 (0U)

	)

4250 
	#TIM_RCR_REP_Msk
 (0xFFUL << 
TIM_RCR_REP_Pos
Ë

	)

4251 
	#TIM_RCR_REP
 
TIM_RCR_REP_Msk


	)

4254 
	#TIM_CCR1_CCR1_Pos
 (0U)

	)

4255 
	#TIM_CCR1_CCR1_Msk
 (0xFFFFUL << 
TIM_CCR1_CCR1_Pos
Ë

	)

4256 
	#TIM_CCR1_CCR1
 
TIM_CCR1_CCR1_Msk


	)

4259 
	#TIM_CCR2_CCR2_Pos
 (0U)

	)

4260 
	#TIM_CCR2_CCR2_Msk
 (0xFFFFUL << 
TIM_CCR2_CCR2_Pos
Ë

	)

4261 
	#TIM_CCR2_CCR2
 
TIM_CCR2_CCR2_Msk


	)

4264 
	#TIM_CCR3_CCR3_Pos
 (0U)

	)

4265 
	#TIM_CCR3_CCR3_Msk
 (0xFFFFUL << 
TIM_CCR3_CCR3_Pos
Ë

	)

4266 
	#TIM_CCR3_CCR3
 
TIM_CCR3_CCR3_Msk


	)

4269 
	#TIM_CCR4_CCR4_Pos
 (0U)

	)

4270 
	#TIM_CCR4_CCR4_Msk
 (0xFFFFUL << 
TIM_CCR4_CCR4_Pos
Ë

	)

4271 
	#TIM_CCR4_CCR4
 
TIM_CCR4_CCR4_Msk


	)

4274 
	#TIM_BDTR_DTG_Pos
 (0U)

	)

4275 
	#TIM_BDTR_DTG_Msk
 (0xFFUL << 
TIM_BDTR_DTG_Pos
Ë

	)

4276 
	#TIM_BDTR_DTG
 
TIM_BDTR_DTG_Msk


	)

4277 
	#TIM_BDTR_DTG_0
 (0x01UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4278 
	#TIM_BDTR_DTG_1
 (0x02UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4279 
	#TIM_BDTR_DTG_2
 (0x04UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4280 
	#TIM_BDTR_DTG_3
 (0x08UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4281 
	#TIM_BDTR_DTG_4
 (0x10UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4282 
	#TIM_BDTR_DTG_5
 (0x20UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4283 
	#TIM_BDTR_DTG_6
 (0x40UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4284 
	#TIM_BDTR_DTG_7
 (0x80UL << 
TIM_BDTR_DTG_Pos
Ë

	)

4286 
	#TIM_BDTR_LOCK_Pos
 (8U)

	)

4287 
	#TIM_BDTR_LOCK_Msk
 (0x3UL << 
TIM_BDTR_LOCK_Pos
Ë

	)

4288 
	#TIM_BDTR_LOCK
 
TIM_BDTR_LOCK_Msk


	)

4289 
	#TIM_BDTR_LOCK_0
 (0x1UL << 
TIM_BDTR_LOCK_Pos
Ë

	)

4290 
	#TIM_BDTR_LOCK_1
 (0x2UL << 
TIM_BDTR_LOCK_Pos
Ë

	)

4292 
	#TIM_BDTR_OSSI_Pos
 (10U)

	)

4293 
	#TIM_BDTR_OSSI_Msk
 (0x1UL << 
TIM_BDTR_OSSI_Pos
Ë

	)

4294 
	#TIM_BDTR_OSSI
 
TIM_BDTR_OSSI_Msk


	)

4295 
	#TIM_BDTR_OSSR_Pos
 (11U)

	)

4296 
	#TIM_BDTR_OSSR_Msk
 (0x1UL << 
TIM_BDTR_OSSR_Pos
Ë

	)

4297 
	#TIM_BDTR_OSSR
 
TIM_BDTR_OSSR_Msk


	)

4298 
	#TIM_BDTR_BKE_Pos
 (12U)

	)

4299 
	#TIM_BDTR_BKE_Msk
 (0x1UL << 
TIM_BDTR_BKE_Pos
Ë

	)

4300 
	#TIM_BDTR_BKE
 
TIM_BDTR_BKE_Msk


	)

4301 
	#TIM_BDTR_BKP_Pos
 (13U)

	)

4302 
	#TIM_BDTR_BKP_Msk
 (0x1UL << 
TIM_BDTR_BKP_Pos
Ë

	)

4303 
	#TIM_BDTR_BKP
 
TIM_BDTR_BKP_Msk


	)

4304 
	#TIM_BDTR_AOE_Pos
 (14U)

	)

4305 
	#TIM_BDTR_AOE_Msk
 (0x1UL << 
TIM_BDTR_AOE_Pos
Ë

	)

4306 
	#TIM_BDTR_AOE
 
TIM_BDTR_AOE_Msk


	)

4307 
	#TIM_BDTR_MOE_Pos
 (15U)

	)

4308 
	#TIM_BDTR_MOE_Msk
 (0x1UL << 
TIM_BDTR_MOE_Pos
Ë

	)

4309 
	#TIM_BDTR_MOE
 
TIM_BDTR_MOE_Msk


	)

4312 
	#TIM_DCR_DBA_Pos
 (0U)

	)

4313 
	#TIM_DCR_DBA_Msk
 (0x1FUL << 
TIM_DCR_DBA_Pos
Ë

	)

4314 
	#TIM_DCR_DBA
 
TIM_DCR_DBA_Msk


	)

4315 
	#TIM_DCR_DBA_0
 (0x01UL << 
TIM_DCR_DBA_Pos
Ë

	)

4316 
	#TIM_DCR_DBA_1
 (0x02UL << 
TIM_DCR_DBA_Pos
Ë

	)

4317 
	#TIM_DCR_DBA_2
 (0x04UL << 
TIM_DCR_DBA_Pos
Ë

	)

4318 
	#TIM_DCR_DBA_3
 (0x08UL << 
TIM_DCR_DBA_Pos
Ë

	)

4319 
	#TIM_DCR_DBA_4
 (0x10UL << 
TIM_DCR_DBA_Pos
Ë

	)

4321 
	#TIM_DCR_DBL_Pos
 (8U)

	)

4322 
	#TIM_DCR_DBL_Msk
 (0x1FUL << 
TIM_DCR_DBL_Pos
Ë

	)

4323 
	#TIM_DCR_DBL
 
TIM_DCR_DBL_Msk


	)

4324 
	#TIM_DCR_DBL_0
 (0x01UL << 
TIM_DCR_DBL_Pos
Ë

	)

4325 
	#TIM_DCR_DBL_1
 (0x02UL << 
TIM_DCR_DBL_Pos
Ë

	)

4326 
	#TIM_DCR_DBL_2
 (0x04UL << 
TIM_DCR_DBL_Pos
Ë

	)

4327 
	#TIM_DCR_DBL_3
 (0x08UL << 
TIM_DCR_DBL_Pos
Ë

	)

4328 
	#TIM_DCR_DBL_4
 (0x10UL << 
TIM_DCR_DBL_Pos
Ë

	)

4331 
	#TIM_DMAR_DMAB_Pos
 (0U)

	)

4332 
	#TIM_DMAR_DMAB_Msk
 (0xFFFFUL << 
TIM_DMAR_DMAB_Pos
Ë

	)

4333 
	#TIM_DMAR_DMAB
 
TIM_DMAR_DMAB_Msk


	)

4342 
	#RTC_CRH_SECIE_Pos
 (0U)

	)

4343 
	#RTC_CRH_SECIE_Msk
 (0x1UL << 
RTC_CRH_SECIE_Pos
Ë

	)

4344 
	#RTC_CRH_SECIE
 
RTC_CRH_SECIE_Msk


	)

4345 
	#RTC_CRH_ALRIE_Pos
 (1U)

	)

4346 
	#RTC_CRH_ALRIE_Msk
 (0x1UL << 
RTC_CRH_ALRIE_Pos
Ë

	)

4347 
	#RTC_CRH_ALRIE
 
RTC_CRH_ALRIE_Msk


	)

4348 
	#RTC_CRH_OWIE_Pos
 (2U)

	)

4349 
	#RTC_CRH_OWIE_Msk
 (0x1UL << 
RTC_CRH_OWIE_Pos
Ë

	)

4350 
	#RTC_CRH_OWIE
 
RTC_CRH_OWIE_Msk


	)

4353 
	#RTC_CRL_SECF_Pos
 (0U)

	)

4354 
	#RTC_CRL_SECF_Msk
 (0x1UL << 
RTC_CRL_SECF_Pos
Ë

	)

4355 
	#RTC_CRL_SECF
 
RTC_CRL_SECF_Msk


	)

4356 
	#RTC_CRL_ALRF_Pos
 (1U)

	)

4357 
	#RTC_CRL_ALRF_Msk
 (0x1UL << 
RTC_CRL_ALRF_Pos
Ë

	)

4358 
	#RTC_CRL_ALRF
 
RTC_CRL_ALRF_Msk


	)

4359 
	#RTC_CRL_OWF_Pos
 (2U)

	)

4360 
	#RTC_CRL_OWF_Msk
 (0x1UL << 
RTC_CRL_OWF_Pos
Ë

	)

4361 
	#RTC_CRL_OWF
 
RTC_CRL_OWF_Msk


	)

4362 
	#RTC_CRL_RSF_Pos
 (3U)

	)

4363 
	#RTC_CRL_RSF_Msk
 (0x1UL << 
RTC_CRL_RSF_Pos
Ë

	)

4364 
	#RTC_CRL_RSF
 
RTC_CRL_RSF_Msk


	)

4365 
	#RTC_CRL_CNF_Pos
 (4U)

	)

4366 
	#RTC_CRL_CNF_Msk
 (0x1UL << 
RTC_CRL_CNF_Pos
Ë

	)

4367 
	#RTC_CRL_CNF
 
RTC_CRL_CNF_Msk


	)

4368 
	#RTC_CRL_RTOFF_Pos
 (5U)

	)

4369 
	#RTC_CRL_RTOFF_Msk
 (0x1UL << 
RTC_CRL_RTOFF_Pos
Ë

	)

4370 
	#RTC_CRL_RTOFF
 
RTC_CRL_RTOFF_Msk


	)

4373 
	#RTC_PRLH_PRL_Pos
 (0U)

	)

4374 
	#RTC_PRLH_PRL_Msk
 (0xFUL << 
RTC_PRLH_PRL_Pos
Ë

	)

4375 
	#RTC_PRLH_PRL
 
RTC_PRLH_PRL_Msk


	)

4378 
	#RTC_PRLL_PRL_Pos
 (0U)

	)

4379 
	#RTC_PRLL_PRL_Msk
 (0xFFFFUL << 
RTC_PRLL_PRL_Pos
Ë

	)

4380 
	#RTC_PRLL_PRL
 
RTC_PRLL_PRL_Msk


	)

4383 
	#RTC_DIVH_RTC_DIV_Pos
 (0U)

	)

4384 
	#RTC_DIVH_RTC_DIV_Msk
 (0xFUL << 
RTC_DIVH_RTC_DIV_Pos
Ë

	)

4385 
	#RTC_DIVH_RTC_DIV
 
RTC_DIVH_RTC_DIV_Msk


	)

4388 
	#RTC_DIVL_RTC_DIV_Pos
 (0U)

	)

4389 
	#RTC_DIVL_RTC_DIV_Msk
 (0xFFFFUL << 
RTC_DIVL_RTC_DIV_Pos
Ë

	)

4390 
	#RTC_DIVL_RTC_DIV
 
RTC_DIVL_RTC_DIV_Msk


	)

4393 
	#RTC_CNTH_RTC_CNT_Pos
 (0U)

	)

4394 
	#RTC_CNTH_RTC_CNT_Msk
 (0xFFFFUL << 
RTC_CNTH_RTC_CNT_Pos
Ë

	)

4395 
	#RTC_CNTH_RTC_CNT
 
RTC_CNTH_RTC_CNT_Msk


	)

4398 
	#RTC_CNTL_RTC_CNT_Pos
 (0U)

	)

4399 
	#RTC_CNTL_RTC_CNT_Msk
 (0xFFFFUL << 
RTC_CNTL_RTC_CNT_Pos
Ë

	)

4400 
	#RTC_CNTL_RTC_CNT
 
RTC_CNTL_RTC_CNT_Msk


	)

4403 
	#RTC_ALRH_RTC_ALR_Pos
 (0U)

	)

4404 
	#RTC_ALRH_RTC_ALR_Msk
 (0xFFFFUL << 
RTC_ALRH_RTC_ALR_Pos
Ë

	)

4405 
	#RTC_ALRH_RTC_ALR
 
RTC_ALRH_RTC_ALR_Msk


	)

4408 
	#RTC_ALRL_RTC_ALR_Pos
 (0U)

	)

4409 
	#RTC_ALRL_RTC_ALR_Msk
 (0xFFFFUL << 
RTC_ALRL_RTC_ALR_Pos
Ë

	)

4410 
	#RTC_ALRL_RTC_ALR
 
RTC_ALRL_RTC_ALR_Msk


	)

4419 
	#IWDG_KR_KEY_Pos
 (0U)

	)

4420 
	#IWDG_KR_KEY_Msk
 (0xFFFFUL << 
IWDG_KR_KEY_Pos
Ë

	)

4421 
	#IWDG_KR_KEY
 
IWDG_KR_KEY_Msk


	)

4424 
	#IWDG_PR_PR_Pos
 (0U)

	)

4425 
	#IWDG_PR_PR_Msk
 (0x7UL << 
IWDG_PR_PR_Pos
Ë

	)

4426 
	#IWDG_PR_PR
 
IWDG_PR_PR_Msk


	)

4427 
	#IWDG_PR_PR_0
 (0x1UL << 
IWDG_PR_PR_Pos
Ë

	)

4428 
	#IWDG_PR_PR_1
 (0x2UL << 
IWDG_PR_PR_Pos
Ë

	)

4429 
	#IWDG_PR_PR_2
 (0x4UL << 
IWDG_PR_PR_Pos
Ë

	)

4432 
	#IWDG_RLR_RL_Pos
 (0U)

	)

4433 
	#IWDG_RLR_RL_Msk
 (0xFFFUL << 
IWDG_RLR_RL_Pos
Ë

	)

4434 
	#IWDG_RLR_RL
 
IWDG_RLR_RL_Msk


	)

4437 
	#IWDG_SR_PVU_Pos
 (0U)

	)

4438 
	#IWDG_SR_PVU_Msk
 (0x1UL << 
IWDG_SR_PVU_Pos
Ë

	)

4439 
	#IWDG_SR_PVU
 
IWDG_SR_PVU_Msk


	)

4440 
	#IWDG_SR_RVU_Pos
 (1U)

	)

4441 
	#IWDG_SR_RVU_Msk
 (0x1UL << 
IWDG_SR_RVU_Pos
Ë

	)

4442 
	#IWDG_SR_RVU
 
IWDG_SR_RVU_Msk


	)

4451 
	#WWDG_CR_T_Pos
 (0U)

	)

4452 
	#WWDG_CR_T_Msk
 (0x7FUL << 
WWDG_CR_T_Pos
Ë

	)

4453 
	#WWDG_CR_T
 
WWDG_CR_T_Msk


	)

4454 
	#WWDG_CR_T_0
 (0x01UL << 
WWDG_CR_T_Pos
Ë

	)

4455 
	#WWDG_CR_T_1
 (0x02UL << 
WWDG_CR_T_Pos
Ë

	)

4456 
	#WWDG_CR_T_2
 (0x04UL << 
WWDG_CR_T_Pos
Ë

	)

4457 
	#WWDG_CR_T_3
 (0x08UL << 
WWDG_CR_T_Pos
Ë

	)

4458 
	#WWDG_CR_T_4
 (0x10UL << 
WWDG_CR_T_Pos
Ë

	)

4459 
	#WWDG_CR_T_5
 (0x20UL << 
WWDG_CR_T_Pos
Ë

	)

4460 
	#WWDG_CR_T_6
 (0x40UL << 
WWDG_CR_T_Pos
Ë

	)

4463 
	#WWDG_CR_T0
 
WWDG_CR_T_0


	)

4464 
	#WWDG_CR_T1
 
WWDG_CR_T_1


	)

4465 
	#WWDG_CR_T2
 
WWDG_CR_T_2


	)

4466 
	#WWDG_CR_T3
 
WWDG_CR_T_3


	)

4467 
	#WWDG_CR_T4
 
WWDG_CR_T_4


	)

4468 
	#WWDG_CR_T5
 
WWDG_CR_T_5


	)

4469 
	#WWDG_CR_T6
 
WWDG_CR_T_6


	)

4471 
	#WWDG_CR_WDGA_Pos
 (7U)

	)

4472 
	#WWDG_CR_WDGA_Msk
 (0x1UL << 
WWDG_CR_WDGA_Pos
Ë

	)

4473 
	#WWDG_CR_WDGA
 
WWDG_CR_WDGA_Msk


	)

4476 
	#WWDG_CFR_W_Pos
 (0U)

	)

4477 
	#WWDG_CFR_W_Msk
 (0x7FUL << 
WWDG_CFR_W_Pos
Ë

	)

4478 
	#WWDG_CFR_W
 
WWDG_CFR_W_Msk


	)

4479 
	#WWDG_CFR_W_0
 (0x01UL << 
WWDG_CFR_W_Pos
Ë

	)

4480 
	#WWDG_CFR_W_1
 (0x02UL << 
WWDG_CFR_W_Pos
Ë

	)

4481 
	#WWDG_CFR_W_2
 (0x04UL << 
WWDG_CFR_W_Pos
Ë

	)

4482 
	#WWDG_CFR_W_3
 (0x08UL << 
WWDG_CFR_W_Pos
Ë

	)

4483 
	#WWDG_CFR_W_4
 (0x10UL << 
WWDG_CFR_W_Pos
Ë

	)

4484 
	#WWDG_CFR_W_5
 (0x20UL << 
WWDG_CFR_W_Pos
Ë

	)

4485 
	#WWDG_CFR_W_6
 (0x40UL << 
WWDG_CFR_W_Pos
Ë

	)

4488 
	#WWDG_CFR_W0
 
WWDG_CFR_W_0


	)

4489 
	#WWDG_CFR_W1
 
WWDG_CFR_W_1


	)

4490 
	#WWDG_CFR_W2
 
WWDG_CFR_W_2


	)

4491 
	#WWDG_CFR_W3
 
WWDG_CFR_W_3


	)

4492 
	#WWDG_CFR_W4
 
WWDG_CFR_W_4


	)

4493 
	#WWDG_CFR_W5
 
WWDG_CFR_W_5


	)

4494 
	#WWDG_CFR_W6
 
WWDG_CFR_W_6


	)

4496 
	#WWDG_CFR_WDGTB_Pos
 (7U)

	)

4497 
	#WWDG_CFR_WDGTB_Msk
 (0x3UL << 
WWDG_CFR_WDGTB_Pos
Ë

	)

4498 
	#WWDG_CFR_WDGTB
 
WWDG_CFR_WDGTB_Msk


	)

4499 
	#WWDG_CFR_WDGTB_0
 (0x1UL << 
WWDG_CFR_WDGTB_Pos
Ë

	)

4500 
	#WWDG_CFR_WDGTB_1
 (0x2UL << 
WWDG_CFR_WDGTB_Pos
Ë

	)

4503 
	#WWDG_CFR_WDGTB0
 
WWDG_CFR_WDGTB_0


	)

4504 
	#WWDG_CFR_WDGTB1
 
WWDG_CFR_WDGTB_1


	)

4506 
	#WWDG_CFR_EWI_Pos
 (9U)

	)

4507 
	#WWDG_CFR_EWI_Msk
 (0x1UL << 
WWDG_CFR_EWI_Pos
Ë

	)

4508 
	#WWDG_CFR_EWI
 
WWDG_CFR_EWI_Msk


	)

4511 
	#WWDG_SR_EWIF_Pos
 (0U)

	)

4512 
	#WWDG_SR_EWIF_Msk
 (0x1UL << 
WWDG_SR_EWIF_Pos
Ë

	)

4513 
	#WWDG_SR_EWIF
 
WWDG_SR_EWIF_Msk


	)

4522 
	#USB_EP0R
 
USB_BASE


	)

4523 
	#USB_EP1R
 (
USB_BASE
 + 0x00000004Ë

	)

4524 
	#USB_EP2R
 (
USB_BASE
 + 0x00000008Ë

	)

4525 
	#USB_EP3R
 (
USB_BASE
 + 0x0000000CË

	)

4526 
	#USB_EP4R
 (
USB_BASE
 + 0x00000010Ë

	)

4527 
	#USB_EP5R
 (
USB_BASE
 + 0x00000014Ë

	)

4528 
	#USB_EP6R
 (
USB_BASE
 + 0x00000018Ë

	)

4529 
	#USB_EP7R
 (
USB_BASE
 + 0x0000001CË

	)

4532 
	#USB_EP_CTR_RX_Pos
 (15U)

	)

4533 
	#USB_EP_CTR_RX_Msk
 (0x1UL << 
USB_EP_CTR_RX_Pos
Ë

	)

4534 
	#USB_EP_CTR_RX
 
USB_EP_CTR_RX_Msk


	)

4535 
	#USB_EP_DTOG_RX_Pos
 (14U)

	)

4536 
	#USB_EP_DTOG_RX_Msk
 (0x1UL << 
USB_EP_DTOG_RX_Pos
Ë

	)

4537 
	#USB_EP_DTOG_RX
 
USB_EP_DTOG_RX_Msk


	)

4538 
	#USB_EPRX_STAT_Pos
 (12U)

	)

4539 
	#USB_EPRX_STAT_Msk
 (0x3UL << 
USB_EPRX_STAT_Pos
Ë

	)

4540 
	#USB_EPRX_STAT
 
USB_EPRX_STAT_Msk


	)

4541 
	#USB_EP_SETUP_Pos
 (11U)

	)

4542 
	#USB_EP_SETUP_Msk
 (0x1UL << 
USB_EP_SETUP_Pos
Ë

	)

4543 
	#USB_EP_SETUP
 
USB_EP_SETUP_Msk


	)

4544 
	#USB_EP_T_FIELD_Pos
 (9U)

	)

4545 
	#USB_EP_T_FIELD_Msk
 (0x3UL << 
USB_EP_T_FIELD_Pos
Ë

	)

4546 
	#USB_EP_T_FIELD
 
USB_EP_T_FIELD_Msk


	)

4547 
	#USB_EP_KIND_Pos
 (8U)

	)

4548 
	#USB_EP_KIND_Msk
 (0x1UL << 
USB_EP_KIND_Pos
Ë

	)

4549 
	#USB_EP_KIND
 
USB_EP_KIND_Msk


	)

4550 
	#USB_EP_CTR_TX_Pos
 (7U)

	)

4551 
	#USB_EP_CTR_TX_Msk
 (0x1UL << 
USB_EP_CTR_TX_Pos
Ë

	)

4552 
	#USB_EP_CTR_TX
 
USB_EP_CTR_TX_Msk


	)

4553 
	#USB_EP_DTOG_TX_Pos
 (6U)

	)

4554 
	#USB_EP_DTOG_TX_Msk
 (0x1UL << 
USB_EP_DTOG_TX_Pos
Ë

	)

4555 
	#USB_EP_DTOG_TX
 
USB_EP_DTOG_TX_Msk


	)

4556 
	#USB_EPTX_STAT_Pos
 (4U)

	)

4557 
	#USB_EPTX_STAT_Msk
 (0x3UL << 
USB_EPTX_STAT_Pos
Ë

	)

4558 
	#USB_EPTX_STAT
 
USB_EPTX_STAT_Msk


	)

4559 
	#USB_EPADDR_FIELD_Pos
 (0U)

	)

4560 
	#USB_EPADDR_FIELD_Msk
 (0xFUL << 
USB_EPADDR_FIELD_Pos
Ë

	)

4561 
	#USB_EPADDR_FIELD
 
USB_EPADDR_FIELD_Msk


	)

4564 
	#USB_EPREG_MASK
 (
USB_EP_CTR_RX
|
USB_EP_SETUP
|
USB_EP_T_FIELD
|
USB_EP_KIND
|
USB_EP_CTR_TX
|
USB_EPADDR_FIELD
)

	)

4566 
	#USB_EP_TYPE_MASK_Pos
 (9U)

	)

4567 
	#USB_EP_TYPE_MASK_Msk
 (0x3UL << 
USB_EP_TYPE_MASK_Pos
Ë

	)

4568 
	#USB_EP_TYPE_MASK
 
USB_EP_TYPE_MASK_Msk


	)

4569 
	#USB_EP_BULK
 0x00000000U

	)

4570 
	#USB_EP_CONTROL
 0x00000200U

	)

4571 
	#USB_EP_ISOCHRONOUS
 0x00000400U

	)

4572 
	#USB_EP_INTERRUPT
 0x00000600U

	)

4573 
	#USB_EP_T_MASK
 (~
USB_EP_T_FIELD
 & 
USB_EPREG_MASK
)

	)

4575 
	#USB_EPKIND_MASK
 (~
USB_EP_KIND
 & 
USB_EPREG_MASK
Ë

	)

4577 
	#USB_EP_TX_DIS
 0x00000000U

	)

4578 
	#USB_EP_TX_STALL
 0x00000010U

	)

4579 
	#USB_EP_TX_NAK
 0x00000020U

	)

4580 
	#USB_EP_TX_VALID
 0x00000030U

	)

4581 
	#USB_EPTX_DTOG1
 0x00000010U

	)

4582 
	#USB_EPTX_DTOG2
 0x00000020U

	)

4583 
	#USB_EPTX_DTOGMASK
 (
USB_EPTX_STAT
|
USB_EPREG_MASK
)

	)

4585 
	#USB_EP_RX_DIS
 0x00000000U

	)

4586 
	#USB_EP_RX_STALL
 0x00001000U

	)

4587 
	#USB_EP_RX_NAK
 0x00002000U

	)

4588 
	#USB_EP_RX_VALID
 0x00003000U

	)

4589 
	#USB_EPRX_DTOG1
 0x00001000U

	)

4590 
	#USB_EPRX_DTOG2
 0x00002000U

	)

4591 
	#USB_EPRX_DTOGMASK
 (
USB_EPRX_STAT
|
USB_EPREG_MASK
)

	)

4594 
	#USB_EP0R_EA_Pos
 (0U)

	)

4595 
	#USB_EP0R_EA_Msk
 (0xFUL << 
USB_EP0R_EA_Pos
Ë

	)

4596 
	#USB_EP0R_EA
 
USB_EP0R_EA_Msk


	)

4598 
	#USB_EP0R_STAT_TX_Pos
 (4U)

	)

4599 
	#USB_EP0R_STAT_TX_Msk
 (0x3UL << 
USB_EP0R_STAT_TX_Pos
Ë

	)

4600 
	#USB_EP0R_STAT_TX
 
USB_EP0R_STAT_TX_Msk


	)

4601 
	#USB_EP0R_STAT_TX_0
 (0x1UL << 
USB_EP0R_STAT_TX_Pos
Ë

	)

4602 
	#USB_EP0R_STAT_TX_1
 (0x2UL << 
USB_EP0R_STAT_TX_Pos
Ë

	)

4604 
	#USB_EP0R_DTOG_TX_Pos
 (6U)

	)

4605 
	#USB_EP0R_DTOG_TX_Msk
 (0x1UL << 
USB_EP0R_DTOG_TX_Pos
Ë

	)

4606 
	#USB_EP0R_DTOG_TX
 
USB_EP0R_DTOG_TX_Msk


	)

4607 
	#USB_EP0R_CTR_TX_Pos
 (7U)

	)

4608 
	#USB_EP0R_CTR_TX_Msk
 (0x1UL << 
USB_EP0R_CTR_TX_Pos
Ë

	)

4609 
	#USB_EP0R_CTR_TX
 
USB_EP0R_CTR_TX_Msk


	)

4610 
	#USB_EP0R_EP_KIND_Pos
 (8U)

	)

4611 
	#USB_EP0R_EP_KIND_Msk
 (0x1UL << 
USB_EP0R_EP_KIND_Pos
Ë

	)

4612 
	#USB_EP0R_EP_KIND
 
USB_EP0R_EP_KIND_Msk


	)

4614 
	#USB_EP0R_EP_TYPE_Pos
 (9U)

	)

4615 
	#USB_EP0R_EP_TYPE_Msk
 (0x3UL << 
USB_EP0R_EP_TYPE_Pos
Ë

	)

4616 
	#USB_EP0R_EP_TYPE
 
USB_EP0R_EP_TYPE_Msk


	)

4617 
	#USB_EP0R_EP_TYPE_0
 (0x1UL << 
USB_EP0R_EP_TYPE_Pos
Ë

	)

4618 
	#USB_EP0R_EP_TYPE_1
 (0x2UL << 
USB_EP0R_EP_TYPE_Pos
Ë

	)

4620 
	#USB_EP0R_SETUP_Pos
 (11U)

	)

4621 
	#USB_EP0R_SETUP_Msk
 (0x1UL << 
USB_EP0R_SETUP_Pos
Ë

	)

4622 
	#USB_EP0R_SETUP
 
USB_EP0R_SETUP_Msk


	)

4624 
	#USB_EP0R_STAT_RX_Pos
 (12U)

	)

4625 
	#USB_EP0R_STAT_RX_Msk
 (0x3UL << 
USB_EP0R_STAT_RX_Pos
Ë

	)

4626 
	#USB_EP0R_STAT_RX
 
USB_EP0R_STAT_RX_Msk


	)

4627 
	#USB_EP0R_STAT_RX_0
 (0x1UL << 
USB_EP0R_STAT_RX_Pos
Ë

	)

4628 
	#USB_EP0R_STAT_RX_1
 (0x2UL << 
USB_EP0R_STAT_RX_Pos
Ë

	)

4630 
	#USB_EP0R_DTOG_RX_Pos
 (14U)

	)

4631 
	#USB_EP0R_DTOG_RX_Msk
 (0x1UL << 
USB_EP0R_DTOG_RX_Pos
Ë

	)

4632 
	#USB_EP0R_DTOG_RX
 
USB_EP0R_DTOG_RX_Msk


	)

4633 
	#USB_EP0R_CTR_RX_Pos
 (15U)

	)

4634 
	#USB_EP0R_CTR_RX_Msk
 (0x1UL << 
USB_EP0R_CTR_RX_Pos
Ë

	)

4635 
	#USB_EP0R_CTR_RX
 
USB_EP0R_CTR_RX_Msk


	)

4638 
	#USB_EP1R_EA_Pos
 (0U)

	)

4639 
	#USB_EP1R_EA_Msk
 (0xFUL << 
USB_EP1R_EA_Pos
Ë

	)

4640 
	#USB_EP1R_EA
 
USB_EP1R_EA_Msk


	)

4642 
	#USB_EP1R_STAT_TX_Pos
 (4U)

	)

4643 
	#USB_EP1R_STAT_TX_Msk
 (0x3UL << 
USB_EP1R_STAT_TX_Pos
Ë

	)

4644 
	#USB_EP1R_STAT_TX
 
USB_EP1R_STAT_TX_Msk


	)

4645 
	#USB_EP1R_STAT_TX_0
 (0x1UL << 
USB_EP1R_STAT_TX_Pos
Ë

	)

4646 
	#USB_EP1R_STAT_TX_1
 (0x2UL << 
USB_EP1R_STAT_TX_Pos
Ë

	)

4648 
	#USB_EP1R_DTOG_TX_Pos
 (6U)

	)

4649 
	#USB_EP1R_DTOG_TX_Msk
 (0x1UL << 
USB_EP1R_DTOG_TX_Pos
Ë

	)

4650 
	#USB_EP1R_DTOG_TX
 
USB_EP1R_DTOG_TX_Msk


	)

4651 
	#USB_EP1R_CTR_TX_Pos
 (7U)

	)

4652 
	#USB_EP1R_CTR_TX_Msk
 (0x1UL << 
USB_EP1R_CTR_TX_Pos
Ë

	)

4653 
	#USB_EP1R_CTR_TX
 
USB_EP1R_CTR_TX_Msk


	)

4654 
	#USB_EP1R_EP_KIND_Pos
 (8U)

	)

4655 
	#USB_EP1R_EP_KIND_Msk
 (0x1UL << 
USB_EP1R_EP_KIND_Pos
Ë

	)

4656 
	#USB_EP1R_EP_KIND
 
USB_EP1R_EP_KIND_Msk


	)

4658 
	#USB_EP1R_EP_TYPE_Pos
 (9U)

	)

4659 
	#USB_EP1R_EP_TYPE_Msk
 (0x3UL << 
USB_EP1R_EP_TYPE_Pos
Ë

	)

4660 
	#USB_EP1R_EP_TYPE
 
USB_EP1R_EP_TYPE_Msk


	)

4661 
	#USB_EP1R_EP_TYPE_0
 (0x1UL << 
USB_EP1R_EP_TYPE_Pos
Ë

	)

4662 
	#USB_EP1R_EP_TYPE_1
 (0x2UL << 
USB_EP1R_EP_TYPE_Pos
Ë

	)

4664 
	#USB_EP1R_SETUP_Pos
 (11U)

	)

4665 
	#USB_EP1R_SETUP_Msk
 (0x1UL << 
USB_EP1R_SETUP_Pos
Ë

	)

4666 
	#USB_EP1R_SETUP
 
USB_EP1R_SETUP_Msk


	)

4668 
	#USB_EP1R_STAT_RX_Pos
 (12U)

	)

4669 
	#USB_EP1R_STAT_RX_Msk
 (0x3UL << 
USB_EP1R_STAT_RX_Pos
Ë

	)

4670 
	#USB_EP1R_STAT_RX
 
USB_EP1R_STAT_RX_Msk


	)

4671 
	#USB_EP1R_STAT_RX_0
 (0x1UL << 
USB_EP1R_STAT_RX_Pos
Ë

	)

4672 
	#USB_EP1R_STAT_RX_1
 (0x2UL << 
USB_EP1R_STAT_RX_Pos
Ë

	)

4674 
	#USB_EP1R_DTOG_RX_Pos
 (14U)

	)

4675 
	#USB_EP1R_DTOG_RX_Msk
 (0x1UL << 
USB_EP1R_DTOG_RX_Pos
Ë

	)

4676 
	#USB_EP1R_DTOG_RX
 
USB_EP1R_DTOG_RX_Msk


	)

4677 
	#USB_EP1R_CTR_RX_Pos
 (15U)

	)

4678 
	#USB_EP1R_CTR_RX_Msk
 (0x1UL << 
USB_EP1R_CTR_RX_Pos
Ë

	)

4679 
	#USB_EP1R_CTR_RX
 
USB_EP1R_CTR_RX_Msk


	)

4682 
	#USB_EP2R_EA_Pos
 (0U)

	)

4683 
	#USB_EP2R_EA_Msk
 (0xFUL << 
USB_EP2R_EA_Pos
Ë

	)

4684 
	#USB_EP2R_EA
 
USB_EP2R_EA_Msk


	)

4686 
	#USB_EP2R_STAT_TX_Pos
 (4U)

	)

4687 
	#USB_EP2R_STAT_TX_Msk
 (0x3UL << 
USB_EP2R_STAT_TX_Pos
Ë

	)

4688 
	#USB_EP2R_STAT_TX
 
USB_EP2R_STAT_TX_Msk


	)

4689 
	#USB_EP2R_STAT_TX_0
 (0x1UL << 
USB_EP2R_STAT_TX_Pos
Ë

	)

4690 
	#USB_EP2R_STAT_TX_1
 (0x2UL << 
USB_EP2R_STAT_TX_Pos
Ë

	)

4692 
	#USB_EP2R_DTOG_TX_Pos
 (6U)

	)

4693 
	#USB_EP2R_DTOG_TX_Msk
 (0x1UL << 
USB_EP2R_DTOG_TX_Pos
Ë

	)

4694 
	#USB_EP2R_DTOG_TX
 
USB_EP2R_DTOG_TX_Msk


	)

4695 
	#USB_EP2R_CTR_TX_Pos
 (7U)

	)

4696 
	#USB_EP2R_CTR_TX_Msk
 (0x1UL << 
USB_EP2R_CTR_TX_Pos
Ë

	)

4697 
	#USB_EP2R_CTR_TX
 
USB_EP2R_CTR_TX_Msk


	)

4698 
	#USB_EP2R_EP_KIND_Pos
 (8U)

	)

4699 
	#USB_EP2R_EP_KIND_Msk
 (0x1UL << 
USB_EP2R_EP_KIND_Pos
Ë

	)

4700 
	#USB_EP2R_EP_KIND
 
USB_EP2R_EP_KIND_Msk


	)

4702 
	#USB_EP2R_EP_TYPE_Pos
 (9U)

	)

4703 
	#USB_EP2R_EP_TYPE_Msk
 (0x3UL << 
USB_EP2R_EP_TYPE_Pos
Ë

	)

4704 
	#USB_EP2R_EP_TYPE
 
USB_EP2R_EP_TYPE_Msk


	)

4705 
	#USB_EP2R_EP_TYPE_0
 (0x1UL << 
USB_EP2R_EP_TYPE_Pos
Ë

	)

4706 
	#USB_EP2R_EP_TYPE_1
 (0x2UL << 
USB_EP2R_EP_TYPE_Pos
Ë

	)

4708 
	#USB_EP2R_SETUP_Pos
 (11U)

	)

4709 
	#USB_EP2R_SETUP_Msk
 (0x1UL << 
USB_EP2R_SETUP_Pos
Ë

	)

4710 
	#USB_EP2R_SETUP
 
USB_EP2R_SETUP_Msk


	)

4712 
	#USB_EP2R_STAT_RX_Pos
 (12U)

	)

4713 
	#USB_EP2R_STAT_RX_Msk
 (0x3UL << 
USB_EP2R_STAT_RX_Pos
Ë

	)

4714 
	#USB_EP2R_STAT_RX
 
USB_EP2R_STAT_RX_Msk


	)

4715 
	#USB_EP2R_STAT_RX_0
 (0x1UL << 
USB_EP2R_STAT_RX_Pos
Ë

	)

4716 
	#USB_EP2R_STAT_RX_1
 (0x2UL << 
USB_EP2R_STAT_RX_Pos
Ë

	)

4718 
	#USB_EP2R_DTOG_RX_Pos
 (14U)

	)

4719 
	#USB_EP2R_DTOG_RX_Msk
 (0x1UL << 
USB_EP2R_DTOG_RX_Pos
Ë

	)

4720 
	#USB_EP2R_DTOG_RX
 
USB_EP2R_DTOG_RX_Msk


	)

4721 
	#USB_EP2R_CTR_RX_Pos
 (15U)

	)

4722 
	#USB_EP2R_CTR_RX_Msk
 (0x1UL << 
USB_EP2R_CTR_RX_Pos
Ë

	)

4723 
	#USB_EP2R_CTR_RX
 
USB_EP2R_CTR_RX_Msk


	)

4726 
	#USB_EP3R_EA_Pos
 (0U)

	)

4727 
	#USB_EP3R_EA_Msk
 (0xFUL << 
USB_EP3R_EA_Pos
Ë

	)

4728 
	#USB_EP3R_EA
 
USB_EP3R_EA_Msk


	)

4730 
	#USB_EP3R_STAT_TX_Pos
 (4U)

	)

4731 
	#USB_EP3R_STAT_TX_Msk
 (0x3UL << 
USB_EP3R_STAT_TX_Pos
Ë

	)

4732 
	#USB_EP3R_STAT_TX
 
USB_EP3R_STAT_TX_Msk


	)

4733 
	#USB_EP3R_STAT_TX_0
 (0x1UL << 
USB_EP3R_STAT_TX_Pos
Ë

	)

4734 
	#USB_EP3R_STAT_TX_1
 (0x2UL << 
USB_EP3R_STAT_TX_Pos
Ë

	)

4736 
	#USB_EP3R_DTOG_TX_Pos
 (6U)

	)

4737 
	#USB_EP3R_DTOG_TX_Msk
 (0x1UL << 
USB_EP3R_DTOG_TX_Pos
Ë

	)

4738 
	#USB_EP3R_DTOG_TX
 
USB_EP3R_DTOG_TX_Msk


	)

4739 
	#USB_EP3R_CTR_TX_Pos
 (7U)

	)

4740 
	#USB_EP3R_CTR_TX_Msk
 (0x1UL << 
USB_EP3R_CTR_TX_Pos
Ë

	)

4741 
	#USB_EP3R_CTR_TX
 
USB_EP3R_CTR_TX_Msk


	)

4742 
	#USB_EP3R_EP_KIND_Pos
 (8U)

	)

4743 
	#USB_EP3R_EP_KIND_Msk
 (0x1UL << 
USB_EP3R_EP_KIND_Pos
Ë

	)

4744 
	#USB_EP3R_EP_KIND
 
USB_EP3R_EP_KIND_Msk


	)

4746 
	#USB_EP3R_EP_TYPE_Pos
 (9U)

	)

4747 
	#USB_EP3R_EP_TYPE_Msk
 (0x3UL << 
USB_EP3R_EP_TYPE_Pos
Ë

	)

4748 
	#USB_EP3R_EP_TYPE
 
USB_EP3R_EP_TYPE_Msk


	)

4749 
	#USB_EP3R_EP_TYPE_0
 (0x1UL << 
USB_EP3R_EP_TYPE_Pos
Ë

	)

4750 
	#USB_EP3R_EP_TYPE_1
 (0x2UL << 
USB_EP3R_EP_TYPE_Pos
Ë

	)

4752 
	#USB_EP3R_SETUP_Pos
 (11U)

	)

4753 
	#USB_EP3R_SETUP_Msk
 (0x1UL << 
USB_EP3R_SETUP_Pos
Ë

	)

4754 
	#USB_EP3R_SETUP
 
USB_EP3R_SETUP_Msk


	)

4756 
	#USB_EP3R_STAT_RX_Pos
 (12U)

	)

4757 
	#USB_EP3R_STAT_RX_Msk
 (0x3UL << 
USB_EP3R_STAT_RX_Pos
Ë

	)

4758 
	#USB_EP3R_STAT_RX
 
USB_EP3R_STAT_RX_Msk


	)

4759 
	#USB_EP3R_STAT_RX_0
 (0x1UL << 
USB_EP3R_STAT_RX_Pos
Ë

	)

4760 
	#USB_EP3R_STAT_RX_1
 (0x2UL << 
USB_EP3R_STAT_RX_Pos
Ë

	)

4762 
	#USB_EP3R_DTOG_RX_Pos
 (14U)

	)

4763 
	#USB_EP3R_DTOG_RX_Msk
 (0x1UL << 
USB_EP3R_DTOG_RX_Pos
Ë

	)

4764 
	#USB_EP3R_DTOG_RX
 
USB_EP3R_DTOG_RX_Msk


	)

4765 
	#USB_EP3R_CTR_RX_Pos
 (15U)

	)

4766 
	#USB_EP3R_CTR_RX_Msk
 (0x1UL << 
USB_EP3R_CTR_RX_Pos
Ë

	)

4767 
	#USB_EP3R_CTR_RX
 
USB_EP3R_CTR_RX_Msk


	)

4770 
	#USB_EP4R_EA_Pos
 (0U)

	)

4771 
	#USB_EP4R_EA_Msk
 (0xFUL << 
USB_EP4R_EA_Pos
Ë

	)

4772 
	#USB_EP4R_EA
 
USB_EP4R_EA_Msk


	)

4774 
	#USB_EP4R_STAT_TX_Pos
 (4U)

	)

4775 
	#USB_EP4R_STAT_TX_Msk
 (0x3UL << 
USB_EP4R_STAT_TX_Pos
Ë

	)

4776 
	#USB_EP4R_STAT_TX
 
USB_EP4R_STAT_TX_Msk


	)

4777 
	#USB_EP4R_STAT_TX_0
 (0x1UL << 
USB_EP4R_STAT_TX_Pos
Ë

	)

4778 
	#USB_EP4R_STAT_TX_1
 (0x2UL << 
USB_EP4R_STAT_TX_Pos
Ë

	)

4780 
	#USB_EP4R_DTOG_TX_Pos
 (6U)

	)

4781 
	#USB_EP4R_DTOG_TX_Msk
 (0x1UL << 
USB_EP4R_DTOG_TX_Pos
Ë

	)

4782 
	#USB_EP4R_DTOG_TX
 
USB_EP4R_DTOG_TX_Msk


	)

4783 
	#USB_EP4R_CTR_TX_Pos
 (7U)

	)

4784 
	#USB_EP4R_CTR_TX_Msk
 (0x1UL << 
USB_EP4R_CTR_TX_Pos
Ë

	)

4785 
	#USB_EP4R_CTR_TX
 
USB_EP4R_CTR_TX_Msk


	)

4786 
	#USB_EP4R_EP_KIND_Pos
 (8U)

	)

4787 
	#USB_EP4R_EP_KIND_Msk
 (0x1UL << 
USB_EP4R_EP_KIND_Pos
Ë

	)

4788 
	#USB_EP4R_EP_KIND
 
USB_EP4R_EP_KIND_Msk


	)

4790 
	#USB_EP4R_EP_TYPE_Pos
 (9U)

	)

4791 
	#USB_EP4R_EP_TYPE_Msk
 (0x3UL << 
USB_EP4R_EP_TYPE_Pos
Ë

	)

4792 
	#USB_EP4R_EP_TYPE
 
USB_EP4R_EP_TYPE_Msk


	)

4793 
	#USB_EP4R_EP_TYPE_0
 (0x1UL << 
USB_EP4R_EP_TYPE_Pos
Ë

	)

4794 
	#USB_EP4R_EP_TYPE_1
 (0x2UL << 
USB_EP4R_EP_TYPE_Pos
Ë

	)

4796 
	#USB_EP4R_SETUP_Pos
 (11U)

	)

4797 
	#USB_EP4R_SETUP_Msk
 (0x1UL << 
USB_EP4R_SETUP_Pos
Ë

	)

4798 
	#USB_EP4R_SETUP
 
USB_EP4R_SETUP_Msk


	)

4800 
	#USB_EP4R_STAT_RX_Pos
 (12U)

	)

4801 
	#USB_EP4R_STAT_RX_Msk
 (0x3UL << 
USB_EP4R_STAT_RX_Pos
Ë

	)

4802 
	#USB_EP4R_STAT_RX
 
USB_EP4R_STAT_RX_Msk


	)

4803 
	#USB_EP4R_STAT_RX_0
 (0x1UL << 
USB_EP4R_STAT_RX_Pos
Ë

	)

4804 
	#USB_EP4R_STAT_RX_1
 (0x2UL << 
USB_EP4R_STAT_RX_Pos
Ë

	)

4806 
	#USB_EP4R_DTOG_RX_Pos
 (14U)

	)

4807 
	#USB_EP4R_DTOG_RX_Msk
 (0x1UL << 
USB_EP4R_DTOG_RX_Pos
Ë

	)

4808 
	#USB_EP4R_DTOG_RX
 
USB_EP4R_DTOG_RX_Msk


	)

4809 
	#USB_EP4R_CTR_RX_Pos
 (15U)

	)

4810 
	#USB_EP4R_CTR_RX_Msk
 (0x1UL << 
USB_EP4R_CTR_RX_Pos
Ë

	)

4811 
	#USB_EP4R_CTR_RX
 
USB_EP4R_CTR_RX_Msk


	)

4814 
	#USB_EP5R_EA_Pos
 (0U)

	)

4815 
	#USB_EP5R_EA_Msk
 (0xFUL << 
USB_EP5R_EA_Pos
Ë

	)

4816 
	#USB_EP5R_EA
 
USB_EP5R_EA_Msk


	)

4818 
	#USB_EP5R_STAT_TX_Pos
 (4U)

	)

4819 
	#USB_EP5R_STAT_TX_Msk
 (0x3UL << 
USB_EP5R_STAT_TX_Pos
Ë

	)

4820 
	#USB_EP5R_STAT_TX
 
USB_EP5R_STAT_TX_Msk


	)

4821 
	#USB_EP5R_STAT_TX_0
 (0x1UL << 
USB_EP5R_STAT_TX_Pos
Ë

	)

4822 
	#USB_EP5R_STAT_TX_1
 (0x2UL << 
USB_EP5R_STAT_TX_Pos
Ë

	)

4824 
	#USB_EP5R_DTOG_TX_Pos
 (6U)

	)

4825 
	#USB_EP5R_DTOG_TX_Msk
 (0x1UL << 
USB_EP5R_DTOG_TX_Pos
Ë

	)

4826 
	#USB_EP5R_DTOG_TX
 
USB_EP5R_DTOG_TX_Msk


	)

4827 
	#USB_EP5R_CTR_TX_Pos
 (7U)

	)

4828 
	#USB_EP5R_CTR_TX_Msk
 (0x1UL << 
USB_EP5R_CTR_TX_Pos
Ë

	)

4829 
	#USB_EP5R_CTR_TX
 
USB_EP5R_CTR_TX_Msk


	)

4830 
	#USB_EP5R_EP_KIND_Pos
 (8U)

	)

4831 
	#USB_EP5R_EP_KIND_Msk
 (0x1UL << 
USB_EP5R_EP_KIND_Pos
Ë

	)

4832 
	#USB_EP5R_EP_KIND
 
USB_EP5R_EP_KIND_Msk


	)

4834 
	#USB_EP5R_EP_TYPE_Pos
 (9U)

	)

4835 
	#USB_EP5R_EP_TYPE_Msk
 (0x3UL << 
USB_EP5R_EP_TYPE_Pos
Ë

	)

4836 
	#USB_EP5R_EP_TYPE
 
USB_EP5R_EP_TYPE_Msk


	)

4837 
	#USB_EP5R_EP_TYPE_0
 (0x1UL << 
USB_EP5R_EP_TYPE_Pos
Ë

	)

4838 
	#USB_EP5R_EP_TYPE_1
 (0x2UL << 
USB_EP5R_EP_TYPE_Pos
Ë

	)

4840 
	#USB_EP5R_SETUP_Pos
 (11U)

	)

4841 
	#USB_EP5R_SETUP_Msk
 (0x1UL << 
USB_EP5R_SETUP_Pos
Ë

	)

4842 
	#USB_EP5R_SETUP
 
USB_EP5R_SETUP_Msk


	)

4844 
	#USB_EP5R_STAT_RX_Pos
 (12U)

	)

4845 
	#USB_EP5R_STAT_RX_Msk
 (0x3UL << 
USB_EP5R_STAT_RX_Pos
Ë

	)

4846 
	#USB_EP5R_STAT_RX
 
USB_EP5R_STAT_RX_Msk


	)

4847 
	#USB_EP5R_STAT_RX_0
 (0x1UL << 
USB_EP5R_STAT_RX_Pos
Ë

	)

4848 
	#USB_EP5R_STAT_RX_1
 (0x2UL << 
USB_EP5R_STAT_RX_Pos
Ë

	)

4850 
	#USB_EP5R_DTOG_RX_Pos
 (14U)

	)

4851 
	#USB_EP5R_DTOG_RX_Msk
 (0x1UL << 
USB_EP5R_DTOG_RX_Pos
Ë

	)

4852 
	#USB_EP5R_DTOG_RX
 
USB_EP5R_DTOG_RX_Msk


	)

4853 
	#USB_EP5R_CTR_RX_Pos
 (15U)

	)

4854 
	#USB_EP5R_CTR_RX_Msk
 (0x1UL << 
USB_EP5R_CTR_RX_Pos
Ë

	)

4855 
	#USB_EP5R_CTR_RX
 
USB_EP5R_CTR_RX_Msk


	)

4858 
	#USB_EP6R_EA_Pos
 (0U)

	)

4859 
	#USB_EP6R_EA_Msk
 (0xFUL << 
USB_EP6R_EA_Pos
Ë

	)

4860 
	#USB_EP6R_EA
 
USB_EP6R_EA_Msk


	)

4862 
	#USB_EP6R_STAT_TX_Pos
 (4U)

	)

4863 
	#USB_EP6R_STAT_TX_Msk
 (0x3UL << 
USB_EP6R_STAT_TX_Pos
Ë

	)

4864 
	#USB_EP6R_STAT_TX
 
USB_EP6R_STAT_TX_Msk


	)

4865 
	#USB_EP6R_STAT_TX_0
 (0x1UL << 
USB_EP6R_STAT_TX_Pos
Ë

	)

4866 
	#USB_EP6R_STAT_TX_1
 (0x2UL << 
USB_EP6R_STAT_TX_Pos
Ë

	)

4868 
	#USB_EP6R_DTOG_TX_Pos
 (6U)

	)

4869 
	#USB_EP6R_DTOG_TX_Msk
 (0x1UL << 
USB_EP6R_DTOG_TX_Pos
Ë

	)

4870 
	#USB_EP6R_DTOG_TX
 
USB_EP6R_DTOG_TX_Msk


	)

4871 
	#USB_EP6R_CTR_TX_Pos
 (7U)

	)

4872 
	#USB_EP6R_CTR_TX_Msk
 (0x1UL << 
USB_EP6R_CTR_TX_Pos
Ë

	)

4873 
	#USB_EP6R_CTR_TX
 
USB_EP6R_CTR_TX_Msk


	)

4874 
	#USB_EP6R_EP_KIND_Pos
 (8U)

	)

4875 
	#USB_EP6R_EP_KIND_Msk
 (0x1UL << 
USB_EP6R_EP_KIND_Pos
Ë

	)

4876 
	#USB_EP6R_EP_KIND
 
USB_EP6R_EP_KIND_Msk


	)

4878 
	#USB_EP6R_EP_TYPE_Pos
 (9U)

	)

4879 
	#USB_EP6R_EP_TYPE_Msk
 (0x3UL << 
USB_EP6R_EP_TYPE_Pos
Ë

	)

4880 
	#USB_EP6R_EP_TYPE
 
USB_EP6R_EP_TYPE_Msk


	)

4881 
	#USB_EP6R_EP_TYPE_0
 (0x1UL << 
USB_EP6R_EP_TYPE_Pos
Ë

	)

4882 
	#USB_EP6R_EP_TYPE_1
 (0x2UL << 
USB_EP6R_EP_TYPE_Pos
Ë

	)

4884 
	#USB_EP6R_SETUP_Pos
 (11U)

	)

4885 
	#USB_EP6R_SETUP_Msk
 (0x1UL << 
USB_EP6R_SETUP_Pos
Ë

	)

4886 
	#USB_EP6R_SETUP
 
USB_EP6R_SETUP_Msk


	)

4888 
	#USB_EP6R_STAT_RX_Pos
 (12U)

	)

4889 
	#USB_EP6R_STAT_RX_Msk
 (0x3UL << 
USB_EP6R_STAT_RX_Pos
Ë

	)

4890 
	#USB_EP6R_STAT_RX
 
USB_EP6R_STAT_RX_Msk


	)

4891 
	#USB_EP6R_STAT_RX_0
 (0x1UL << 
USB_EP6R_STAT_RX_Pos
Ë

	)

4892 
	#USB_EP6R_STAT_RX_1
 (0x2UL << 
USB_EP6R_STAT_RX_Pos
Ë

	)

4894 
	#USB_EP6R_DTOG_RX_Pos
 (14U)

	)

4895 
	#USB_EP6R_DTOG_RX_Msk
 (0x1UL << 
USB_EP6R_DTOG_RX_Pos
Ë

	)

4896 
	#USB_EP6R_DTOG_RX
 
USB_EP6R_DTOG_RX_Msk


	)

4897 
	#USB_EP6R_CTR_RX_Pos
 (15U)

	)

4898 
	#USB_EP6R_CTR_RX_Msk
 (0x1UL << 
USB_EP6R_CTR_RX_Pos
Ë

	)

4899 
	#USB_EP6R_CTR_RX
 
USB_EP6R_CTR_RX_Msk


	)

4902 
	#USB_EP7R_EA_Pos
 (0U)

	)

4903 
	#USB_EP7R_EA_Msk
 (0xFUL << 
USB_EP7R_EA_Pos
Ë

	)

4904 
	#USB_EP7R_EA
 
USB_EP7R_EA_Msk


	)

4906 
	#USB_EP7R_STAT_TX_Pos
 (4U)

	)

4907 
	#USB_EP7R_STAT_TX_Msk
 (0x3UL << 
USB_EP7R_STAT_TX_Pos
Ë

	)

4908 
	#USB_EP7R_STAT_TX
 
USB_EP7R_STAT_TX_Msk


	)

4909 
	#USB_EP7R_STAT_TX_0
 (0x1UL << 
USB_EP7R_STAT_TX_Pos
Ë

	)

4910 
	#USB_EP7R_STAT_TX_1
 (0x2UL << 
USB_EP7R_STAT_TX_Pos
Ë

	)

4912 
	#USB_EP7R_DTOG_TX_Pos
 (6U)

	)

4913 
	#USB_EP7R_DTOG_TX_Msk
 (0x1UL << 
USB_EP7R_DTOG_TX_Pos
Ë

	)

4914 
	#USB_EP7R_DTOG_TX
 
USB_EP7R_DTOG_TX_Msk


	)

4915 
	#USB_EP7R_CTR_TX_Pos
 (7U)

	)

4916 
	#USB_EP7R_CTR_TX_Msk
 (0x1UL << 
USB_EP7R_CTR_TX_Pos
Ë

	)

4917 
	#USB_EP7R_CTR_TX
 
USB_EP7R_CTR_TX_Msk


	)

4918 
	#USB_EP7R_EP_KIND_Pos
 (8U)

	)

4919 
	#USB_EP7R_EP_KIND_Msk
 (0x1UL << 
USB_EP7R_EP_KIND_Pos
Ë

	)

4920 
	#USB_EP7R_EP_KIND
 
USB_EP7R_EP_KIND_Msk


	)

4922 
	#USB_EP7R_EP_TYPE_Pos
 (9U)

	)

4923 
	#USB_EP7R_EP_TYPE_Msk
 (0x3UL << 
USB_EP7R_EP_TYPE_Pos
Ë

	)

4924 
	#USB_EP7R_EP_TYPE
 
USB_EP7R_EP_TYPE_Msk


	)

4925 
	#USB_EP7R_EP_TYPE_0
 (0x1UL << 
USB_EP7R_EP_TYPE_Pos
Ë

	)

4926 
	#USB_EP7R_EP_TYPE_1
 (0x2UL << 
USB_EP7R_EP_TYPE_Pos
Ë

	)

4928 
	#USB_EP7R_SETUP_Pos
 (11U)

	)

4929 
	#USB_EP7R_SETUP_Msk
 (0x1UL << 
USB_EP7R_SETUP_Pos
Ë

	)

4930 
	#USB_EP7R_SETUP
 
USB_EP7R_SETUP_Msk


	)

4932 
	#USB_EP7R_STAT_RX_Pos
 (12U)

	)

4933 
	#USB_EP7R_STAT_RX_Msk
 (0x3UL << 
USB_EP7R_STAT_RX_Pos
Ë

	)

4934 
	#USB_EP7R_STAT_RX
 
USB_EP7R_STAT_RX_Msk


	)

4935 
	#USB_EP7R_STAT_RX_0
 (0x1UL << 
USB_EP7R_STAT_RX_Pos
Ë

	)

4936 
	#USB_EP7R_STAT_RX_1
 (0x2UL << 
USB_EP7R_STAT_RX_Pos
Ë

	)

4938 
	#USB_EP7R_DTOG_RX_Pos
 (14U)

	)

4939 
	#USB_EP7R_DTOG_RX_Msk
 (0x1UL << 
USB_EP7R_DTOG_RX_Pos
Ë

	)

4940 
	#USB_EP7R_DTOG_RX
 
USB_EP7R_DTOG_RX_Msk


	)

4941 
	#USB_EP7R_CTR_RX_Pos
 (15U)

	)

4942 
	#USB_EP7R_CTR_RX_Msk
 (0x1UL << 
USB_EP7R_CTR_RX_Pos
Ë

	)

4943 
	#USB_EP7R_CTR_RX
 
USB_EP7R_CTR_RX_Msk


	)

4947 
	#USB_CNTR_FRES_Pos
 (0U)

	)

4948 
	#USB_CNTR_FRES_Msk
 (0x1UL << 
USB_CNTR_FRES_Pos
Ë

	)

4949 
	#USB_CNTR_FRES
 
USB_CNTR_FRES_Msk


	)

4950 
	#USB_CNTR_PDWN_Pos
 (1U)

	)

4951 
	#USB_CNTR_PDWN_Msk
 (0x1UL << 
USB_CNTR_PDWN_Pos
Ë

	)

4952 
	#USB_CNTR_PDWN
 
USB_CNTR_PDWN_Msk


	)

4953 
	#USB_CNTR_LP_MODE_Pos
 (2U)

	)

4954 
	#USB_CNTR_LP_MODE_Msk
 (0x1UL << 
USB_CNTR_LP_MODE_Pos
Ë

	)

4955 
	#USB_CNTR_LP_MODE
 
USB_CNTR_LP_MODE_Msk


	)

4956 
	#USB_CNTR_FSUSP_Pos
 (3U)

	)

4957 
	#USB_CNTR_FSUSP_Msk
 (0x1UL << 
USB_CNTR_FSUSP_Pos
Ë

	)

4958 
	#USB_CNTR_FSUSP
 
USB_CNTR_FSUSP_Msk


	)

4959 
	#USB_CNTR_RESUME_Pos
 (4U)

	)

4960 
	#USB_CNTR_RESUME_Msk
 (0x1UL << 
USB_CNTR_RESUME_Pos
Ë

	)

4961 
	#USB_CNTR_RESUME
 
USB_CNTR_RESUME_Msk


	)

4962 
	#USB_CNTR_ESOFM_Pos
 (8U)

	)

4963 
	#USB_CNTR_ESOFM_Msk
 (0x1UL << 
USB_CNTR_ESOFM_Pos
Ë

	)

4964 
	#USB_CNTR_ESOFM
 
USB_CNTR_ESOFM_Msk


	)

4965 
	#USB_CNTR_SOFM_Pos
 (9U)

	)

4966 
	#USB_CNTR_SOFM_Msk
 (0x1UL << 
USB_CNTR_SOFM_Pos
Ë

	)

4967 
	#USB_CNTR_SOFM
 
USB_CNTR_SOFM_Msk


	)

4968 
	#USB_CNTR_RESETM_Pos
 (10U)

	)

4969 
	#USB_CNTR_RESETM_Msk
 (0x1UL << 
USB_CNTR_RESETM_Pos
Ë

	)

4970 
	#USB_CNTR_RESETM
 
USB_CNTR_RESETM_Msk


	)

4971 
	#USB_CNTR_SUSPM_Pos
 (11U)

	)

4972 
	#USB_CNTR_SUSPM_Msk
 (0x1UL << 
USB_CNTR_SUSPM_Pos
Ë

	)

4973 
	#USB_CNTR_SUSPM
 
USB_CNTR_SUSPM_Msk


	)

4974 
	#USB_CNTR_WKUPM_Pos
 (12U)

	)

4975 
	#USB_CNTR_WKUPM_Msk
 (0x1UL << 
USB_CNTR_WKUPM_Pos
Ë

	)

4976 
	#USB_CNTR_WKUPM
 
USB_CNTR_WKUPM_Msk


	)

4977 
	#USB_CNTR_ERRM_Pos
 (13U)

	)

4978 
	#USB_CNTR_ERRM_Msk
 (0x1UL << 
USB_CNTR_ERRM_Pos
Ë

	)

4979 
	#USB_CNTR_ERRM
 
USB_CNTR_ERRM_Msk


	)

4980 
	#USB_CNTR_PMAOVRM_Pos
 (14U)

	)

4981 
	#USB_CNTR_PMAOVRM_Msk
 (0x1UL << 
USB_CNTR_PMAOVRM_Pos
Ë

	)

4982 
	#USB_CNTR_PMAOVRM
 
USB_CNTR_PMAOVRM_Msk


	)

4983 
	#USB_CNTR_CTRM_Pos
 (15U)

	)

4984 
	#USB_CNTR_CTRM_Msk
 (0x1UL << 
USB_CNTR_CTRM_Pos
Ë

	)

4985 
	#USB_CNTR_CTRM
 
USB_CNTR_CTRM_Msk


	)

4988 
	#USB_ISTR_EP_ID_Pos
 (0U)

	)

4989 
	#USB_ISTR_EP_ID_Msk
 (0xFUL << 
USB_ISTR_EP_ID_Pos
Ë

	)

4990 
	#USB_ISTR_EP_ID
 
USB_ISTR_EP_ID_Msk


	)

4991 
	#USB_ISTR_DIR_Pos
 (4U)

	)

4992 
	#USB_ISTR_DIR_Msk
 (0x1UL << 
USB_ISTR_DIR_Pos
Ë

	)

4993 
	#USB_ISTR_DIR
 
USB_ISTR_DIR_Msk


	)

4994 
	#USB_ISTR_ESOF_Pos
 (8U)

	)

4995 
	#USB_ISTR_ESOF_Msk
 (0x1UL << 
USB_ISTR_ESOF_Pos
Ë

	)

4996 
	#USB_ISTR_ESOF
 
USB_ISTR_ESOF_Msk


	)

4997 
	#USB_ISTR_SOF_Pos
 (9U)

	)

4998 
	#USB_ISTR_SOF_Msk
 (0x1UL << 
USB_ISTR_SOF_Pos
Ë

	)

4999 
	#USB_ISTR_SOF
 
USB_ISTR_SOF_Msk


	)

5000 
	#USB_ISTR_RESET_Pos
 (10U)

	)

5001 
	#USB_ISTR_RESET_Msk
 (0x1UL << 
USB_ISTR_RESET_Pos
Ë

	)

5002 
	#USB_ISTR_RESET
 
USB_ISTR_RESET_Msk


	)

5003 
	#USB_ISTR_SUSP_Pos
 (11U)

	)

5004 
	#USB_ISTR_SUSP_Msk
 (0x1UL << 
USB_ISTR_SUSP_Pos
Ë

	)

5005 
	#USB_ISTR_SUSP
 
USB_ISTR_SUSP_Msk


	)

5006 
	#USB_ISTR_WKUP_Pos
 (12U)

	)

5007 
	#USB_ISTR_WKUP_Msk
 (0x1UL << 
USB_ISTR_WKUP_Pos
Ë

	)

5008 
	#USB_ISTR_WKUP
 
USB_ISTR_WKUP_Msk


	)

5009 
	#USB_ISTR_ERR_Pos
 (13U)

	)

5010 
	#USB_ISTR_ERR_Msk
 (0x1UL << 
USB_ISTR_ERR_Pos
Ë

	)

5011 
	#USB_ISTR_ERR
 
USB_ISTR_ERR_Msk


	)

5012 
	#USB_ISTR_PMAOVR_Pos
 (14U)

	)

5013 
	#USB_ISTR_PMAOVR_Msk
 (0x1UL << 
USB_ISTR_PMAOVR_Pos
Ë

	)

5014 
	#USB_ISTR_PMAOVR
 
USB_ISTR_PMAOVR_Msk


	)

5015 
	#USB_ISTR_CTR_Pos
 (15U)

	)

5016 
	#USB_ISTR_CTR_Msk
 (0x1UL << 
USB_ISTR_CTR_Pos
Ë

	)

5017 
	#USB_ISTR_CTR
 
USB_ISTR_CTR_Msk


	)

5020 
	#USB_FNR_FN_Pos
 (0U)

	)

5021 
	#USB_FNR_FN_Msk
 (0x7FFUL << 
USB_FNR_FN_Pos
Ë

	)

5022 
	#USB_FNR_FN
 
USB_FNR_FN_Msk


	)

5023 
	#USB_FNR_LSOF_Pos
 (11U)

	)

5024 
	#USB_FNR_LSOF_Msk
 (0x3UL << 
USB_FNR_LSOF_Pos
Ë

	)

5025 
	#USB_FNR_LSOF
 
USB_FNR_LSOF_Msk


	)

5026 
	#USB_FNR_LCK_Pos
 (13U)

	)

5027 
	#USB_FNR_LCK_Msk
 (0x1UL << 
USB_FNR_LCK_Pos
Ë

	)

5028 
	#USB_FNR_LCK
 
USB_FNR_LCK_Msk


	)

5029 
	#USB_FNR_RXDM_Pos
 (14U)

	)

5030 
	#USB_FNR_RXDM_Msk
 (0x1UL << 
USB_FNR_RXDM_Pos
Ë

	)

5031 
	#USB_FNR_RXDM
 
USB_FNR_RXDM_Msk


	)

5032 
	#USB_FNR_RXDP_Pos
 (15U)

	)

5033 
	#USB_FNR_RXDP_Msk
 (0x1UL << 
USB_FNR_RXDP_Pos
Ë

	)

5034 
	#USB_FNR_RXDP
 
USB_FNR_RXDP_Msk


	)

5037 
	#USB_DADDR_ADD_Pos
 (0U)

	)

5038 
	#USB_DADDR_ADD_Msk
 (0x7FUL << 
USB_DADDR_ADD_Pos
Ë

	)

5039 
	#USB_DADDR_ADD
 
USB_DADDR_ADD_Msk


	)

5040 
	#USB_DADDR_ADD0_Pos
 (0U)

	)

5041 
	#USB_DADDR_ADD0_Msk
 (0x1UL << 
USB_DADDR_ADD0_Pos
Ë

	)

5042 
	#USB_DADDR_ADD0
 
USB_DADDR_ADD0_Msk


	)

5043 
	#USB_DADDR_ADD1_Pos
 (1U)

	)

5044 
	#USB_DADDR_ADD1_Msk
 (0x1UL << 
USB_DADDR_ADD1_Pos
Ë

	)

5045 
	#USB_DADDR_ADD1
 
USB_DADDR_ADD1_Msk


	)

5046 
	#USB_DADDR_ADD2_Pos
 (2U)

	)

5047 
	#USB_DADDR_ADD2_Msk
 (0x1UL << 
USB_DADDR_ADD2_Pos
Ë

	)

5048 
	#USB_DADDR_ADD2
 
USB_DADDR_ADD2_Msk


	)

5049 
	#USB_DADDR_ADD3_Pos
 (3U)

	)

5050 
	#USB_DADDR_ADD3_Msk
 (0x1UL << 
USB_DADDR_ADD3_Pos
Ë

	)

5051 
	#USB_DADDR_ADD3
 
USB_DADDR_ADD3_Msk


	)

5052 
	#USB_DADDR_ADD4_Pos
 (4U)

	)

5053 
	#USB_DADDR_ADD4_Msk
 (0x1UL << 
USB_DADDR_ADD4_Pos
Ë

	)

5054 
	#USB_DADDR_ADD4
 
USB_DADDR_ADD4_Msk


	)

5055 
	#USB_DADDR_ADD5_Pos
 (5U)

	)

5056 
	#USB_DADDR_ADD5_Msk
 (0x1UL << 
USB_DADDR_ADD5_Pos
Ë

	)

5057 
	#USB_DADDR_ADD5
 
USB_DADDR_ADD5_Msk


	)

5058 
	#USB_DADDR_ADD6_Pos
 (6U)

	)

5059 
	#USB_DADDR_ADD6_Msk
 (0x1UL << 
USB_DADDR_ADD6_Pos
Ë

	)

5060 
	#USB_DADDR_ADD6
 
USB_DADDR_ADD6_Msk


	)

5062 
	#USB_DADDR_EF_Pos
 (7U)

	)

5063 
	#USB_DADDR_EF_Msk
 (0x1UL << 
USB_DADDR_EF_Pos
Ë

	)

5064 
	#USB_DADDR_EF
 
USB_DADDR_EF_Msk


	)

5067 
	#USB_BTABLE_BTABLE_Pos
 (3U)

	)

5068 
	#USB_BTABLE_BTABLE_Msk
 (0x1FFFUL << 
USB_BTABLE_BTABLE_Pos
Ë

	)

5069 
	#USB_BTABLE_BTABLE
 
USB_BTABLE_BTABLE_Msk


	)

5073 
	#USB_ADDR0_TX_ADDR0_TX_Pos
 (1U)

	)

5074 
	#USB_ADDR0_TX_ADDR0_TX_Msk
 (0x7FFFUL << 
USB_ADDR0_TX_ADDR0_TX_Pos
Ë

	)

5075 
	#USB_ADDR0_TX_ADDR0_TX
 
USB_ADDR0_TX_ADDR0_TX_Msk


	)

5078 
	#USB_ADDR1_TX_ADDR1_TX_Pos
 (1U)

	)

5079 
	#USB_ADDR1_TX_ADDR1_TX_Msk
 (0x7FFFUL << 
USB_ADDR1_TX_ADDR1_TX_Pos
Ë

	)

5080 
	#USB_ADDR1_TX_ADDR1_TX
 
USB_ADDR1_TX_ADDR1_TX_Msk


	)

5083 
	#USB_ADDR2_TX_ADDR2_TX_Pos
 (1U)

	)

5084 
	#USB_ADDR2_TX_ADDR2_TX_Msk
 (0x7FFFUL << 
USB_ADDR2_TX_ADDR2_TX_Pos
Ë

	)

5085 
	#USB_ADDR2_TX_ADDR2_TX
 
USB_ADDR2_TX_ADDR2_TX_Msk


	)

5088 
	#USB_ADDR3_TX_ADDR3_TX_Pos
 (1U)

	)

5089 
	#USB_ADDR3_TX_ADDR3_TX_Msk
 (0x7FFFUL << 
USB_ADDR3_TX_ADDR3_TX_Pos
Ë

	)

5090 
	#USB_ADDR3_TX_ADDR3_TX
 
USB_ADDR3_TX_ADDR3_TX_Msk


	)

5093 
	#USB_ADDR4_TX_ADDR4_TX_Pos
 (1U)

	)

5094 
	#USB_ADDR4_TX_ADDR4_TX_Msk
 (0x7FFFUL << 
USB_ADDR4_TX_ADDR4_TX_Pos
Ë

	)

5095 
	#USB_ADDR4_TX_ADDR4_TX
 
USB_ADDR4_TX_ADDR4_TX_Msk


	)

5098 
	#USB_ADDR5_TX_ADDR5_TX_Pos
 (1U)

	)

5099 
	#USB_ADDR5_TX_ADDR5_TX_Msk
 (0x7FFFUL << 
USB_ADDR5_TX_ADDR5_TX_Pos
Ë

	)

5100 
	#USB_ADDR5_TX_ADDR5_TX
 
USB_ADDR5_TX_ADDR5_TX_Msk


	)

5103 
	#USB_ADDR6_TX_ADDR6_TX_Pos
 (1U)

	)

5104 
	#USB_ADDR6_TX_ADDR6_TX_Msk
 (0x7FFFUL << 
USB_ADDR6_TX_ADDR6_TX_Pos
Ë

	)

5105 
	#USB_ADDR6_TX_ADDR6_TX
 
USB_ADDR6_TX_ADDR6_TX_Msk


	)

5108 
	#USB_ADDR7_TX_ADDR7_TX_Pos
 (1U)

	)

5109 
	#USB_ADDR7_TX_ADDR7_TX_Msk
 (0x7FFFUL << 
USB_ADDR7_TX_ADDR7_TX_Pos
Ë

	)

5110 
	#USB_ADDR7_TX_ADDR7_TX
 
USB_ADDR7_TX_ADDR7_TX_Msk


	)

5115 
	#USB_COUNT0_TX_COUNT0_TX_Pos
 (0U)

	)

5116 
	#USB_COUNT0_TX_COUNT0_TX_Msk
 (0x3FFUL << 
USB_COUNT0_TX_COUNT0_TX_Pos
Ë

	)

5117 
	#USB_COUNT0_TX_COUNT0_TX
 
USB_COUNT0_TX_COUNT0_TX_Msk


	)

5120 
	#USB_COUNT1_TX_COUNT1_TX_Pos
 (0U)

	)

5121 
	#USB_COUNT1_TX_COUNT1_TX_Msk
 (0x3FFUL << 
USB_COUNT1_TX_COUNT1_TX_Pos
Ë

	)

5122 
	#USB_COUNT1_TX_COUNT1_TX
 
USB_COUNT1_TX_COUNT1_TX_Msk


	)

5125 
	#USB_COUNT2_TX_COUNT2_TX_Pos
 (0U)

	)

5126 
	#USB_COUNT2_TX_COUNT2_TX_Msk
 (0x3FFUL << 
USB_COUNT2_TX_COUNT2_TX_Pos
Ë

	)

5127 
	#USB_COUNT2_TX_COUNT2_TX
 
USB_COUNT2_TX_COUNT2_TX_Msk


	)

5130 
	#USB_COUNT3_TX_COUNT3_TX_Pos
 (0U)

	)

5131 
	#USB_COUNT3_TX_COUNT3_TX_Msk
 (0x3FFUL << 
USB_COUNT3_TX_COUNT3_TX_Pos
Ë

	)

5132 
	#USB_COUNT3_TX_COUNT3_TX
 
USB_COUNT3_TX_COUNT3_TX_Msk


	)

5135 
	#USB_COUNT4_TX_COUNT4_TX_Pos
 (0U)

	)

5136 
	#USB_COUNT4_TX_COUNT4_TX_Msk
 (0x3FFUL << 
USB_COUNT4_TX_COUNT4_TX_Pos
Ë

	)

5137 
	#USB_COUNT4_TX_COUNT4_TX
 
USB_COUNT4_TX_COUNT4_TX_Msk


	)

5140 
	#USB_COUNT5_TX_COUNT5_TX_Pos
 (0U)

	)

5141 
	#USB_COUNT5_TX_COUNT5_TX_Msk
 (0x3FFUL << 
USB_COUNT5_TX_COUNT5_TX_Pos
Ë

	)

5142 
	#USB_COUNT5_TX_COUNT5_TX
 
USB_COUNT5_TX_COUNT5_TX_Msk


	)

5145 
	#USB_COUNT6_TX_COUNT6_TX_Pos
 (0U)

	)

5146 
	#USB_COUNT6_TX_COUNT6_TX_Msk
 (0x3FFUL << 
USB_COUNT6_TX_COUNT6_TX_Pos
Ë

	)

5147 
	#USB_COUNT6_TX_COUNT6_TX
 
USB_COUNT6_TX_COUNT6_TX_Msk


	)

5150 
	#USB_COUNT7_TX_COUNT7_TX_Pos
 (0U)

	)

5151 
	#USB_COUNT7_TX_COUNT7_TX_Msk
 (0x3FFUL << 
USB_COUNT7_TX_COUNT7_TX_Pos
Ë

	)

5152 
	#USB_COUNT7_TX_COUNT7_TX
 
USB_COUNT7_TX_COUNT7_TX_Msk


	)

5157 
	#USB_COUNT0_TX_0_COUNT0_TX_0
 0x000003FFU

	)

5160 
	#USB_COUNT0_TX_1_COUNT0_TX_1
 0x03FF0000U

	)

5163 
	#USB_COUNT1_TX_0_COUNT1_TX_0
 0x000003FFU

	)

5166 
	#USB_COUNT1_TX_1_COUNT1_TX_1
 0x03FF0000U

	)

5169 
	#USB_COUNT2_TX_0_COUNT2_TX_0
 0x000003FFU

	)

5172 
	#USB_COUNT2_TX_1_COUNT2_TX_1
 0x03FF0000U

	)

5175 
	#USB_COUNT3_TX_0_COUNT3_TX_0
 0x000003FFU

	)

5178 
	#USB_COUNT3_TX_1_COUNT3_TX_1
 0x03FF0000U

	)

5181 
	#USB_COUNT4_TX_0_COUNT4_TX_0
 0x000003FFU

	)

5184 
	#USB_COUNT4_TX_1_COUNT4_TX_1
 0x03FF0000U

	)

5187 
	#USB_COUNT5_TX_0_COUNT5_TX_0
 0x000003FFU

	)

5190 
	#USB_COUNT5_TX_1_COUNT5_TX_1
 0x03FF0000U

	)

5193 
	#USB_COUNT6_TX_0_COUNT6_TX_0
 0x000003FFU

	)

5196 
	#USB_COUNT6_TX_1_COUNT6_TX_1
 0x03FF0000U

	)

5199 
	#USB_COUNT7_TX_0_COUNT7_TX_0
 0x000003FFU

	)

5202 
	#USB_COUNT7_TX_1_COUNT7_TX_1
 0x03FF0000U

	)

5207 
	#USB_ADDR0_RX_ADDR0_RX_Pos
 (1U)

	)

5208 
	#USB_ADDR0_RX_ADDR0_RX_Msk
 (0x7FFFUL << 
USB_ADDR0_RX_ADDR0_RX_Pos
Ë

	)

5209 
	#USB_ADDR0_RX_ADDR0_RX
 
USB_ADDR0_RX_ADDR0_RX_Msk


	)

5212 
	#USB_ADDR1_RX_ADDR1_RX_Pos
 (1U)

	)

5213 
	#USB_ADDR1_RX_ADDR1_RX_Msk
 (0x7FFFUL << 
USB_ADDR1_RX_ADDR1_RX_Pos
Ë

	)

5214 
	#USB_ADDR1_RX_ADDR1_RX
 
USB_ADDR1_RX_ADDR1_RX_Msk


	)

5217 
	#USB_ADDR2_RX_ADDR2_RX_Pos
 (1U)

	)

5218 
	#USB_ADDR2_RX_ADDR2_RX_Msk
 (0x7FFFUL << 
USB_ADDR2_RX_ADDR2_RX_Pos
Ë

	)

5219 
	#USB_ADDR2_RX_ADDR2_RX
 
USB_ADDR2_RX_ADDR2_RX_Msk


	)

5222 
	#USB_ADDR3_RX_ADDR3_RX_Pos
 (1U)

	)

5223 
	#USB_ADDR3_RX_ADDR3_RX_Msk
 (0x7FFFUL << 
USB_ADDR3_RX_ADDR3_RX_Pos
Ë

	)

5224 
	#USB_ADDR3_RX_ADDR3_RX
 
USB_ADDR3_RX_ADDR3_RX_Msk


	)

5227 
	#USB_ADDR4_RX_ADDR4_RX_Pos
 (1U)

	)

5228 
	#USB_ADDR4_RX_ADDR4_RX_Msk
 (0x7FFFUL << 
USB_ADDR4_RX_ADDR4_RX_Pos
Ë

	)

5229 
	#USB_ADDR4_RX_ADDR4_RX
 
USB_ADDR4_RX_ADDR4_RX_Msk


	)

5232 
	#USB_ADDR5_RX_ADDR5_RX_Pos
 (1U)

	)

5233 
	#USB_ADDR5_RX_ADDR5_RX_Msk
 (0x7FFFUL << 
USB_ADDR5_RX_ADDR5_RX_Pos
Ë

	)

5234 
	#USB_ADDR5_RX_ADDR5_RX
 
USB_ADDR5_RX_ADDR5_RX_Msk


	)

5237 
	#USB_ADDR6_RX_ADDR6_RX_Pos
 (1U)

	)

5238 
	#USB_ADDR6_RX_ADDR6_RX_Msk
 (0x7FFFUL << 
USB_ADDR6_RX_ADDR6_RX_Pos
Ë

	)

5239 
	#USB_ADDR6_RX_ADDR6_RX
 
USB_ADDR6_RX_ADDR6_RX_Msk


	)

5242 
	#USB_ADDR7_RX_ADDR7_RX_Pos
 (1U)

	)

5243 
	#USB_ADDR7_RX_ADDR7_RX_Msk
 (0x7FFFUL << 
USB_ADDR7_RX_ADDR7_RX_Pos
Ë

	)

5244 
	#USB_ADDR7_RX_ADDR7_RX
 
USB_ADDR7_RX_ADDR7_RX_Msk


	)

5249 
	#USB_COUNT0_RX_COUNT0_RX_Pos
 (0U)

	)

5250 
	#USB_COUNT0_RX_COUNT0_RX_Msk
 (0x3FFUL << 
USB_COUNT0_RX_COUNT0_RX_Pos
Ë

	)

5251 
	#USB_COUNT0_RX_COUNT0_RX
 
USB_COUNT0_RX_COUNT0_RX_Msk


	)

5253 
	#USB_COUNT0_RX_NUM_BLOCK_Pos
 (10U)

	)

5254 
	#USB_COUNT0_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5255 
	#USB_COUNT0_RX_NUM_BLOCK
 
USB_COUNT0_RX_NUM_BLOCK_Msk


	)

5256 
	#USB_COUNT0_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5257 
	#USB_COUNT0_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5258 
	#USB_COUNT0_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5259 
	#USB_COUNT0_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5260 
	#USB_COUNT0_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT0_RX_NUM_BLOCK_Pos
Ë

	)

5262 
	#USB_COUNT0_RX_BLSIZE_Pos
 (15U)

	)

5263 
	#USB_COUNT0_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT0_RX_BLSIZE_Pos
Ë

	)

5264 
	#USB_COUNT0_RX_BLSIZE
 
USB_COUNT0_RX_BLSIZE_Msk


	)

5267 
	#USB_COUNT1_RX_COUNT1_RX_Pos
 (0U)

	)

5268 
	#USB_COUNT1_RX_COUNT1_RX_Msk
 (0x3FFUL << 
USB_COUNT1_RX_COUNT1_RX_Pos
Ë

	)

5269 
	#USB_COUNT1_RX_COUNT1_RX
 
USB_COUNT1_RX_COUNT1_RX_Msk


	)

5271 
	#USB_COUNT1_RX_NUM_BLOCK_Pos
 (10U)

	)

5272 
	#USB_COUNT1_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5273 
	#USB_COUNT1_RX_NUM_BLOCK
 
USB_COUNT1_RX_NUM_BLOCK_Msk


	)

5274 
	#USB_COUNT1_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5275 
	#USB_COUNT1_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5276 
	#USB_COUNT1_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5277 
	#USB_COUNT1_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5278 
	#USB_COUNT1_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT1_RX_NUM_BLOCK_Pos
Ë

	)

5280 
	#USB_COUNT1_RX_BLSIZE_Pos
 (15U)

	)

5281 
	#USB_COUNT1_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT1_RX_BLSIZE_Pos
Ë

	)

5282 
	#USB_COUNT1_RX_BLSIZE
 
USB_COUNT1_RX_BLSIZE_Msk


	)

5285 
	#USB_COUNT2_RX_COUNT2_RX_Pos
 (0U)

	)

5286 
	#USB_COUNT2_RX_COUNT2_RX_Msk
 (0x3FFUL << 
USB_COUNT2_RX_COUNT2_RX_Pos
Ë

	)

5287 
	#USB_COUNT2_RX_COUNT2_RX
 
USB_COUNT2_RX_COUNT2_RX_Msk


	)

5289 
	#USB_COUNT2_RX_NUM_BLOCK_Pos
 (10U)

	)

5290 
	#USB_COUNT2_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5291 
	#USB_COUNT2_RX_NUM_BLOCK
 
USB_COUNT2_RX_NUM_BLOCK_Msk


	)

5292 
	#USB_COUNT2_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5293 
	#USB_COUNT2_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5294 
	#USB_COUNT2_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5295 
	#USB_COUNT2_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5296 
	#USB_COUNT2_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT2_RX_NUM_BLOCK_Pos
Ë

	)

5298 
	#USB_COUNT2_RX_BLSIZE_Pos
 (15U)

	)

5299 
	#USB_COUNT2_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT2_RX_BLSIZE_Pos
Ë

	)

5300 
	#USB_COUNT2_RX_BLSIZE
 
USB_COUNT2_RX_BLSIZE_Msk


	)

5303 
	#USB_COUNT3_RX_COUNT3_RX_Pos
 (0U)

	)

5304 
	#USB_COUNT3_RX_COUNT3_RX_Msk
 (0x3FFUL << 
USB_COUNT3_RX_COUNT3_RX_Pos
Ë

	)

5305 
	#USB_COUNT3_RX_COUNT3_RX
 
USB_COUNT3_RX_COUNT3_RX_Msk


	)

5307 
	#USB_COUNT3_RX_NUM_BLOCK_Pos
 (10U)

	)

5308 
	#USB_COUNT3_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5309 
	#USB_COUNT3_RX_NUM_BLOCK
 
USB_COUNT3_RX_NUM_BLOCK_Msk


	)

5310 
	#USB_COUNT3_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5311 
	#USB_COUNT3_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5312 
	#USB_COUNT3_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5313 
	#USB_COUNT3_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5314 
	#USB_COUNT3_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT3_RX_NUM_BLOCK_Pos
Ë

	)

5316 
	#USB_COUNT3_RX_BLSIZE_Pos
 (15U)

	)

5317 
	#USB_COUNT3_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT3_RX_BLSIZE_Pos
Ë

	)

5318 
	#USB_COUNT3_RX_BLSIZE
 
USB_COUNT3_RX_BLSIZE_Msk


	)

5321 
	#USB_COUNT4_RX_COUNT4_RX_Pos
 (0U)

	)

5322 
	#USB_COUNT4_RX_COUNT4_RX_Msk
 (0x3FFUL << 
USB_COUNT4_RX_COUNT4_RX_Pos
Ë

	)

5323 
	#USB_COUNT4_RX_COUNT4_RX
 
USB_COUNT4_RX_COUNT4_RX_Msk


	)

5325 
	#USB_COUNT4_RX_NUM_BLOCK_Pos
 (10U)

	)

5326 
	#USB_COUNT4_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5327 
	#USB_COUNT4_RX_NUM_BLOCK
 
USB_COUNT4_RX_NUM_BLOCK_Msk


	)

5328 
	#USB_COUNT4_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5329 
	#USB_COUNT4_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5330 
	#USB_COUNT4_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5331 
	#USB_COUNT4_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5332 
	#USB_COUNT4_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT4_RX_NUM_BLOCK_Pos
Ë

	)

5334 
	#USB_COUNT4_RX_BLSIZE_Pos
 (15U)

	)

5335 
	#USB_COUNT4_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT4_RX_BLSIZE_Pos
Ë

	)

5336 
	#USB_COUNT4_RX_BLSIZE
 
USB_COUNT4_RX_BLSIZE_Msk


	)

5339 
	#USB_COUNT5_RX_COUNT5_RX_Pos
 (0U)

	)

5340 
	#USB_COUNT5_RX_COUNT5_RX_Msk
 (0x3FFUL << 
USB_COUNT5_RX_COUNT5_RX_Pos
Ë

	)

5341 
	#USB_COUNT5_RX_COUNT5_RX
 
USB_COUNT5_RX_COUNT5_RX_Msk


	)

5343 
	#USB_COUNT5_RX_NUM_BLOCK_Pos
 (10U)

	)

5344 
	#USB_COUNT5_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5345 
	#USB_COUNT5_RX_NUM_BLOCK
 
USB_COUNT5_RX_NUM_BLOCK_Msk


	)

5346 
	#USB_COUNT5_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5347 
	#USB_COUNT5_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5348 
	#USB_COUNT5_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5349 
	#USB_COUNT5_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5350 
	#USB_COUNT5_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT5_RX_NUM_BLOCK_Pos
Ë

	)

5352 
	#USB_COUNT5_RX_BLSIZE_Pos
 (15U)

	)

5353 
	#USB_COUNT5_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT5_RX_BLSIZE_Pos
Ë

	)

5354 
	#USB_COUNT5_RX_BLSIZE
 
USB_COUNT5_RX_BLSIZE_Msk


	)

5357 
	#USB_COUNT6_RX_COUNT6_RX_Pos
 (0U)

	)

5358 
	#USB_COUNT6_RX_COUNT6_RX_Msk
 (0x3FFUL << 
USB_COUNT6_RX_COUNT6_RX_Pos
Ë

	)

5359 
	#USB_COUNT6_RX_COUNT6_RX
 
USB_COUNT6_RX_COUNT6_RX_Msk


	)

5361 
	#USB_COUNT6_RX_NUM_BLOCK_Pos
 (10U)

	)

5362 
	#USB_COUNT6_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5363 
	#USB_COUNT6_RX_NUM_BLOCK
 
USB_COUNT6_RX_NUM_BLOCK_Msk


	)

5364 
	#USB_COUNT6_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5365 
	#USB_COUNT6_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5366 
	#USB_COUNT6_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5367 
	#USB_COUNT6_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5368 
	#USB_COUNT6_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT6_RX_NUM_BLOCK_Pos
Ë

	)

5370 
	#USB_COUNT6_RX_BLSIZE_Pos
 (15U)

	)

5371 
	#USB_COUNT6_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT6_RX_BLSIZE_Pos
Ë

	)

5372 
	#USB_COUNT6_RX_BLSIZE
 
USB_COUNT6_RX_BLSIZE_Msk


	)

5375 
	#USB_COUNT7_RX_COUNT7_RX_Pos
 (0U)

	)

5376 
	#USB_COUNT7_RX_COUNT7_RX_Msk
 (0x3FFUL << 
USB_COUNT7_RX_COUNT7_RX_Pos
Ë

	)

5377 
	#USB_COUNT7_RX_COUNT7_RX
 
USB_COUNT7_RX_COUNT7_RX_Msk


	)

5379 
	#USB_COUNT7_RX_NUM_BLOCK_Pos
 (10U)

	)

5380 
	#USB_COUNT7_RX_NUM_BLOCK_Msk
 (0x1FUL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5381 
	#USB_COUNT7_RX_NUM_BLOCK
 
USB_COUNT7_RX_NUM_BLOCK_Msk


	)

5382 
	#USB_COUNT7_RX_NUM_BLOCK_0
 (0x01UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5383 
	#USB_COUNT7_RX_NUM_BLOCK_1
 (0x02UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5384 
	#USB_COUNT7_RX_NUM_BLOCK_2
 (0x04UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5385 
	#USB_COUNT7_RX_NUM_BLOCK_3
 (0x08UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5386 
	#USB_COUNT7_RX_NUM_BLOCK_4
 (0x10UL << 
USB_COUNT7_RX_NUM_BLOCK_Pos
Ë

	)

5388 
	#USB_COUNT7_RX_BLSIZE_Pos
 (15U)

	)

5389 
	#USB_COUNT7_RX_BLSIZE_Msk
 (0x1UL << 
USB_COUNT7_RX_BLSIZE_Pos
Ë

	)

5390 
	#USB_COUNT7_RX_BLSIZE
 
USB_COUNT7_RX_BLSIZE_Msk


	)

5395 
	#USB_COUNT0_RX_0_COUNT0_RX_0
 0x000003FFU

	)

5397 
	#USB_COUNT0_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5398 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5399 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5400 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5401 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5402 
	#USB_COUNT0_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5404 
	#USB_COUNT0_RX_0_BLSIZE_0
 0x00008000U

	)

5407 
	#USB_COUNT0_RX_1_COUNT0_RX_1
 0x03FF0000U

	)

5409 
	#USB_COUNT0_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5410 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5411 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5412 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5413 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5414 
	#USB_COUNT0_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5416 
	#USB_COUNT0_RX_1_BLSIZE_1
 0x80000000U

	)

5419 
	#USB_COUNT1_RX_0_COUNT1_RX_0
 0x000003FFU

	)

5421 
	#USB_COUNT1_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5422 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5423 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5424 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5425 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5426 
	#USB_COUNT1_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5428 
	#USB_COUNT1_RX_0_BLSIZE_0
 0x00008000U

	)

5431 
	#USB_COUNT1_RX_1_COUNT1_RX_1
 0x03FF0000U

	)

5433 
	#USB_COUNT1_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5434 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5435 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5436 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5437 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5438 
	#USB_COUNT1_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5440 
	#USB_COUNT1_RX_1_BLSIZE_1
 0x80000000U

	)

5443 
	#USB_COUNT2_RX_0_COUNT2_RX_0
 0x000003FFU

	)

5445 
	#USB_COUNT2_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5446 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5447 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5448 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5449 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5450 
	#USB_COUNT2_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5452 
	#USB_COUNT2_RX_0_BLSIZE_0
 0x00008000U

	)

5455 
	#USB_COUNT2_RX_1_COUNT2_RX_1
 0x03FF0000U

	)

5457 
	#USB_COUNT2_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5458 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5459 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5460 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5461 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5462 
	#USB_COUNT2_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5464 
	#USB_COUNT2_RX_1_BLSIZE_1
 0x80000000U

	)

5467 
	#USB_COUNT3_RX_0_COUNT3_RX_0
 0x000003FFU

	)

5469 
	#USB_COUNT3_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5470 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5471 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5472 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5473 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5474 
	#USB_COUNT3_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5476 
	#USB_COUNT3_RX_0_BLSIZE_0
 0x00008000U

	)

5479 
	#USB_COUNT3_RX_1_COUNT3_RX_1
 0x03FF0000U

	)

5481 
	#USB_COUNT3_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5482 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5483 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5484 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5485 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5486 
	#USB_COUNT3_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5488 
	#USB_COUNT3_RX_1_BLSIZE_1
 0x80000000U

	)

5491 
	#USB_COUNT4_RX_0_COUNT4_RX_0
 0x000003FFU

	)

5493 
	#USB_COUNT4_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5494 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5495 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5496 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5497 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5498 
	#USB_COUNT4_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5500 
	#USB_COUNT4_RX_0_BLSIZE_0
 0x00008000U

	)

5503 
	#USB_COUNT4_RX_1_COUNT4_RX_1
 0x03FF0000U

	)

5505 
	#USB_COUNT4_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5506 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5507 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5508 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5509 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5510 
	#USB_COUNT4_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5512 
	#USB_COUNT4_RX_1_BLSIZE_1
 0x80000000U

	)

5515 
	#USB_COUNT5_RX_0_COUNT5_RX_0
 0x000003FFU

	)

5517 
	#USB_COUNT5_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5518 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5519 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5520 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5521 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5522 
	#USB_COUNT5_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5524 
	#USB_COUNT5_RX_0_BLSIZE_0
 0x00008000U

	)

5527 
	#USB_COUNT5_RX_1_COUNT5_RX_1
 0x03FF0000U

	)

5529 
	#USB_COUNT5_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5530 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5531 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5532 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5533 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5534 
	#USB_COUNT5_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5536 
	#USB_COUNT5_RX_1_BLSIZE_1
 0x80000000U

	)

5539 
	#USB_COUNT6_RX_0_COUNT6_RX_0
 0x000003FFU

	)

5541 
	#USB_COUNT6_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5542 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5543 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5544 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5545 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5546 
	#USB_COUNT6_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5548 
	#USB_COUNT6_RX_0_BLSIZE_0
 0x00008000U

	)

5551 
	#USB_COUNT6_RX_1_COUNT6_RX_1
 0x03FF0000U

	)

5553 
	#USB_COUNT6_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5554 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5555 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5556 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5557 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5558 
	#USB_COUNT6_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5560 
	#USB_COUNT6_RX_1_BLSIZE_1
 0x80000000U

	)

5563 
	#USB_COUNT7_RX_0_COUNT7_RX_0
 0x000003FFU

	)

5565 
	#USB_COUNT7_RX_0_NUM_BLOCK_0
 0x00007C00U

	)

5566 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_0
 0x00000400U

	)

5567 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_1
 0x00000800U

	)

5568 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_2
 0x00001000U

	)

5569 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_3
 0x00002000U

	)

5570 
	#USB_COUNT7_RX_0_NUM_BLOCK_0_4
 0x00004000U

	)

5572 
	#USB_COUNT7_RX_0_BLSIZE_0
 0x00008000U

	)

5575 
	#USB_COUNT7_RX_1_COUNT7_RX_1
 0x03FF0000U

	)

5577 
	#USB_COUNT7_RX_1_NUM_BLOCK_1
 0x7C000000U

	)

5578 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_0
 0x04000000U

	)

5579 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_1
 0x08000000U

	)

5580 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_2
 0x10000000U

	)

5581 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_3
 0x20000000U

	)

5582 
	#USB_COUNT7_RX_1_NUM_BLOCK_1_4
 0x40000000U

	)

5584 
	#USB_COUNT7_RX_1_BLSIZE_1
 0x80000000U

	)

5594 
	#CAN_MCR_INRQ_Pos
 (0U)

	)

5595 
	#CAN_MCR_INRQ_Msk
 (0x1UL << 
CAN_MCR_INRQ_Pos
Ë

	)

5596 
	#CAN_MCR_INRQ
 
CAN_MCR_INRQ_Msk


	)

5597 
	#CAN_MCR_SLEEP_Pos
 (1U)

	)

5598 
	#CAN_MCR_SLEEP_Msk
 (0x1UL << 
CAN_MCR_SLEEP_Pos
Ë

	)

5599 
	#CAN_MCR_SLEEP
 
CAN_MCR_SLEEP_Msk


	)

5600 
	#CAN_MCR_TXFP_Pos
 (2U)

	)

5601 
	#CAN_MCR_TXFP_Msk
 (0x1UL << 
CAN_MCR_TXFP_Pos
Ë

	)

5602 
	#CAN_MCR_TXFP
 
CAN_MCR_TXFP_Msk


	)

5603 
	#CAN_MCR_RFLM_Pos
 (3U)

	)

5604 
	#CAN_MCR_RFLM_Msk
 (0x1UL << 
CAN_MCR_RFLM_Pos
Ë

	)

5605 
	#CAN_MCR_RFLM
 
CAN_MCR_RFLM_Msk


	)

5606 
	#CAN_MCR_NART_Pos
 (4U)

	)

5607 
	#CAN_MCR_NART_Msk
 (0x1UL << 
CAN_MCR_NART_Pos
Ë

	)

5608 
	#CAN_MCR_NART
 
CAN_MCR_NART_Msk


	)

5609 
	#CAN_MCR_AWUM_Pos
 (5U)

	)

5610 
	#CAN_MCR_AWUM_Msk
 (0x1UL << 
CAN_MCR_AWUM_Pos
Ë

	)

5611 
	#CAN_MCR_AWUM
 
CAN_MCR_AWUM_Msk


	)

5612 
	#CAN_MCR_ABOM_Pos
 (6U)

	)

5613 
	#CAN_MCR_ABOM_Msk
 (0x1UL << 
CAN_MCR_ABOM_Pos
Ë

	)

5614 
	#CAN_MCR_ABOM
 
CAN_MCR_ABOM_Msk


	)

5615 
	#CAN_MCR_TTCM_Pos
 (7U)

	)

5616 
	#CAN_MCR_TTCM_Msk
 (0x1UL << 
CAN_MCR_TTCM_Pos
Ë

	)

5617 
	#CAN_MCR_TTCM
 
CAN_MCR_TTCM_Msk


	)

5618 
	#CAN_MCR_RESET_Pos
 (15U)

	)

5619 
	#CAN_MCR_RESET_Msk
 (0x1UL << 
CAN_MCR_RESET_Pos
Ë

	)

5620 
	#CAN_MCR_RESET
 
CAN_MCR_RESET_Msk


	)

5621 
	#CAN_MCR_DBF_Pos
 (16U)

	)

5622 
	#CAN_MCR_DBF_Msk
 (0x1UL << 
CAN_MCR_DBF_Pos
Ë

	)

5623 
	#CAN_MCR_DBF
 
CAN_MCR_DBF_Msk


	)

5626 
	#CAN_MSR_INAK_Pos
 (0U)

	)

5627 
	#CAN_MSR_INAK_Msk
 (0x1UL << 
CAN_MSR_INAK_Pos
Ë

	)

5628 
	#CAN_MSR_INAK
 
CAN_MSR_INAK_Msk


	)

5629 
	#CAN_MSR_SLAK_Pos
 (1U)

	)

5630 
	#CAN_MSR_SLAK_Msk
 (0x1UL << 
CAN_MSR_SLAK_Pos
Ë

	)

5631 
	#CAN_MSR_SLAK
 
CAN_MSR_SLAK_Msk


	)

5632 
	#CAN_MSR_ERRI_Pos
 (2U)

	)

5633 
	#CAN_MSR_ERRI_Msk
 (0x1UL << 
CAN_MSR_ERRI_Pos
Ë

	)

5634 
	#CAN_MSR_ERRI
 
CAN_MSR_ERRI_Msk


	)

5635 
	#CAN_MSR_WKUI_Pos
 (3U)

	)

5636 
	#CAN_MSR_WKUI_Msk
 (0x1UL << 
CAN_MSR_WKUI_Pos
Ë

	)

5637 
	#CAN_MSR_WKUI
 
CAN_MSR_WKUI_Msk


	)

5638 
	#CAN_MSR_SLAKI_Pos
 (4U)

	)

5639 
	#CAN_MSR_SLAKI_Msk
 (0x1UL << 
CAN_MSR_SLAKI_Pos
Ë

	)

5640 
	#CAN_MSR_SLAKI
 
CAN_MSR_SLAKI_Msk


	)

5641 
	#CAN_MSR_TXM_Pos
 (8U)

	)

5642 
	#CAN_MSR_TXM_Msk
 (0x1UL << 
CAN_MSR_TXM_Pos
Ë

	)

5643 
	#CAN_MSR_TXM
 
CAN_MSR_TXM_Msk


	)

5644 
	#CAN_MSR_RXM_Pos
 (9U)

	)

5645 
	#CAN_MSR_RXM_Msk
 (0x1UL << 
CAN_MSR_RXM_Pos
Ë

	)

5646 
	#CAN_MSR_RXM
 
CAN_MSR_RXM_Msk


	)

5647 
	#CAN_MSR_SAMP_Pos
 (10U)

	)

5648 
	#CAN_MSR_SAMP_Msk
 (0x1UL << 
CAN_MSR_SAMP_Pos
Ë

	)

5649 
	#CAN_MSR_SAMP
 
CAN_MSR_SAMP_Msk


	)

5650 
	#CAN_MSR_RX_Pos
 (11U)

	)

5651 
	#CAN_MSR_RX_Msk
 (0x1UL << 
CAN_MSR_RX_Pos
Ë

	)

5652 
	#CAN_MSR_RX
 
CAN_MSR_RX_Msk


	)

5655 
	#CAN_TSR_RQCP0_Pos
 (0U)

	)

5656 
	#CAN_TSR_RQCP0_Msk
 (0x1UL << 
CAN_TSR_RQCP0_Pos
Ë

	)

5657 
	#CAN_TSR_RQCP0
 
CAN_TSR_RQCP0_Msk


	)

5658 
	#CAN_TSR_TXOK0_Pos
 (1U)

	)

5659 
	#CAN_TSR_TXOK0_Msk
 (0x1UL << 
CAN_TSR_TXOK0_Pos
Ë

	)

5660 
	#CAN_TSR_TXOK0
 
CAN_TSR_TXOK0_Msk


	)

5661 
	#CAN_TSR_ALST0_Pos
 (2U)

	)

5662 
	#CAN_TSR_ALST0_Msk
 (0x1UL << 
CAN_TSR_ALST0_Pos
Ë

	)

5663 
	#CAN_TSR_ALST0
 
CAN_TSR_ALST0_Msk


	)

5664 
	#CAN_TSR_TERR0_Pos
 (3U)

	)

5665 
	#CAN_TSR_TERR0_Msk
 (0x1UL << 
CAN_TSR_TERR0_Pos
Ë

	)

5666 
	#CAN_TSR_TERR0
 
CAN_TSR_TERR0_Msk


	)

5667 
	#CAN_TSR_ABRQ0_Pos
 (7U)

	)

5668 
	#CAN_TSR_ABRQ0_Msk
 (0x1UL << 
CAN_TSR_ABRQ0_Pos
Ë

	)

5669 
	#CAN_TSR_ABRQ0
 
CAN_TSR_ABRQ0_Msk


	)

5670 
	#CAN_TSR_RQCP1_Pos
 (8U)

	)

5671 
	#CAN_TSR_RQCP1_Msk
 (0x1UL << 
CAN_TSR_RQCP1_Pos
Ë

	)

5672 
	#CAN_TSR_RQCP1
 
CAN_TSR_RQCP1_Msk


	)

5673 
	#CAN_TSR_TXOK1_Pos
 (9U)

	)

5674 
	#CAN_TSR_TXOK1_Msk
 (0x1UL << 
CAN_TSR_TXOK1_Pos
Ë

	)

5675 
	#CAN_TSR_TXOK1
 
CAN_TSR_TXOK1_Msk


	)

5676 
	#CAN_TSR_ALST1_Pos
 (10U)

	)

5677 
	#CAN_TSR_ALST1_Msk
 (0x1UL << 
CAN_TSR_ALST1_Pos
Ë

	)

5678 
	#CAN_TSR_ALST1
 
CAN_TSR_ALST1_Msk


	)

5679 
	#CAN_TSR_TERR1_Pos
 (11U)

	)

5680 
	#CAN_TSR_TERR1_Msk
 (0x1UL << 
CAN_TSR_TERR1_Pos
Ë

	)

5681 
	#CAN_TSR_TERR1
 
CAN_TSR_TERR1_Msk


	)

5682 
	#CAN_TSR_ABRQ1_Pos
 (15U)

	)

5683 
	#CAN_TSR_ABRQ1_Msk
 (0x1UL << 
CAN_TSR_ABRQ1_Pos
Ë

	)

5684 
	#CAN_TSR_ABRQ1
 
CAN_TSR_ABRQ1_Msk


	)

5685 
	#CAN_TSR_RQCP2_Pos
 (16U)

	)

5686 
	#CAN_TSR_RQCP2_Msk
 (0x1UL << 
CAN_TSR_RQCP2_Pos
Ë

	)

5687 
	#CAN_TSR_RQCP2
 
CAN_TSR_RQCP2_Msk


	)

5688 
	#CAN_TSR_TXOK2_Pos
 (17U)

	)

5689 
	#CAN_TSR_TXOK2_Msk
 (0x1UL << 
CAN_TSR_TXOK2_Pos
Ë

	)

5690 
	#CAN_TSR_TXOK2
 
CAN_TSR_TXOK2_Msk


	)

5691 
	#CAN_TSR_ALST2_Pos
 (18U)

	)

5692 
	#CAN_TSR_ALST2_Msk
 (0x1UL << 
CAN_TSR_ALST2_Pos
Ë

	)

5693 
	#CAN_TSR_ALST2
 
CAN_TSR_ALST2_Msk


	)

5694 
	#CAN_TSR_TERR2_Pos
 (19U)

	)

5695 
	#CAN_TSR_TERR2_Msk
 (0x1UL << 
CAN_TSR_TERR2_Pos
Ë

	)

5696 
	#CAN_TSR_TERR2
 
CAN_TSR_TERR2_Msk


	)

5697 
	#CAN_TSR_ABRQ2_Pos
 (23U)

	)

5698 
	#CAN_TSR_ABRQ2_Msk
 (0x1UL << 
CAN_TSR_ABRQ2_Pos
Ë

	)

5699 
	#CAN_TSR_ABRQ2
 
CAN_TSR_ABRQ2_Msk


	)

5700 
	#CAN_TSR_CODE_Pos
 (24U)

	)

5701 
	#CAN_TSR_CODE_Msk
 (0x3UL << 
CAN_TSR_CODE_Pos
Ë

	)

5702 
	#CAN_TSR_CODE
 
CAN_TSR_CODE_Msk


	)

5704 
	#CAN_TSR_TME_Pos
 (26U)

	)

5705 
	#CAN_TSR_TME_Msk
 (0x7UL << 
CAN_TSR_TME_Pos
Ë

	)

5706 
	#CAN_TSR_TME
 
CAN_TSR_TME_Msk


	)

5707 
	#CAN_TSR_TME0_Pos
 (26U)

	)

5708 
	#CAN_TSR_TME0_Msk
 (0x1UL << 
CAN_TSR_TME0_Pos
Ë

	)

5709 
	#CAN_TSR_TME0
 
CAN_TSR_TME0_Msk


	)

5710 
	#CAN_TSR_TME1_Pos
 (27U)

	)

5711 
	#CAN_TSR_TME1_Msk
 (0x1UL << 
CAN_TSR_TME1_Pos
Ë

	)

5712 
	#CAN_TSR_TME1
 
CAN_TSR_TME1_Msk


	)

5713 
	#CAN_TSR_TME2_Pos
 (28U)

	)

5714 
	#CAN_TSR_TME2_Msk
 (0x1UL << 
CAN_TSR_TME2_Pos
Ë

	)

5715 
	#CAN_TSR_TME2
 
CAN_TSR_TME2_Msk


	)

5717 
	#CAN_TSR_LOW_Pos
 (29U)

	)

5718 
	#CAN_TSR_LOW_Msk
 (0x7UL << 
CAN_TSR_LOW_Pos
Ë

	)

5719 
	#CAN_TSR_LOW
 
CAN_TSR_LOW_Msk


	)

5720 
	#CAN_TSR_LOW0_Pos
 (29U)

	)

5721 
	#CAN_TSR_LOW0_Msk
 (0x1UL << 
CAN_TSR_LOW0_Pos
Ë

	)

5722 
	#CAN_TSR_LOW0
 
CAN_TSR_LOW0_Msk


	)

5723 
	#CAN_TSR_LOW1_Pos
 (30U)

	)

5724 
	#CAN_TSR_LOW1_Msk
 (0x1UL << 
CAN_TSR_LOW1_Pos
Ë

	)

5725 
	#CAN_TSR_LOW1
 
CAN_TSR_LOW1_Msk


	)

5726 
	#CAN_TSR_LOW2_Pos
 (31U)

	)

5727 
	#CAN_TSR_LOW2_Msk
 (0x1UL << 
CAN_TSR_LOW2_Pos
Ë

	)

5728 
	#CAN_TSR_LOW2
 
CAN_TSR_LOW2_Msk


	)

5731 
	#CAN_RF0R_FMP0_Pos
 (0U)

	)

5732 
	#CAN_RF0R_FMP0_Msk
 (0x3UL << 
CAN_RF0R_FMP0_Pos
Ë

	)

5733 
	#CAN_RF0R_FMP0
 
CAN_RF0R_FMP0_Msk


	)

5734 
	#CAN_RF0R_FULL0_Pos
 (3U)

	)

5735 
	#CAN_RF0R_FULL0_Msk
 (0x1UL << 
CAN_RF0R_FULL0_Pos
Ë

	)

5736 
	#CAN_RF0R_FULL0
 
CAN_RF0R_FULL0_Msk


	)

5737 
	#CAN_RF0R_FOVR0_Pos
 (4U)

	)

5738 
	#CAN_RF0R_FOVR0_Msk
 (0x1UL << 
CAN_RF0R_FOVR0_Pos
Ë

	)

5739 
	#CAN_RF0R_FOVR0
 
CAN_RF0R_FOVR0_Msk


	)

5740 
	#CAN_RF0R_RFOM0_Pos
 (5U)

	)

5741 
	#CAN_RF0R_RFOM0_Msk
 (0x1UL << 
CAN_RF0R_RFOM0_Pos
Ë

	)

5742 
	#CAN_RF0R_RFOM0
 
CAN_RF0R_RFOM0_Msk


	)

5745 
	#CAN_RF1R_FMP1_Pos
 (0U)

	)

5746 
	#CAN_RF1R_FMP1_Msk
 (0x3UL << 
CAN_RF1R_FMP1_Pos
Ë

	)

5747 
	#CAN_RF1R_FMP1
 
CAN_RF1R_FMP1_Msk


	)

5748 
	#CAN_RF1R_FULL1_Pos
 (3U)

	)

5749 
	#CAN_RF1R_FULL1_Msk
 (0x1UL << 
CAN_RF1R_FULL1_Pos
Ë

	)

5750 
	#CAN_RF1R_FULL1
 
CAN_RF1R_FULL1_Msk


	)

5751 
	#CAN_RF1R_FOVR1_Pos
 (4U)

	)

5752 
	#CAN_RF1R_FOVR1_Msk
 (0x1UL << 
CAN_RF1R_FOVR1_Pos
Ë

	)

5753 
	#CAN_RF1R_FOVR1
 
CAN_RF1R_FOVR1_Msk


	)

5754 
	#CAN_RF1R_RFOM1_Pos
 (5U)

	)

5755 
	#CAN_RF1R_RFOM1_Msk
 (0x1UL << 
CAN_RF1R_RFOM1_Pos
Ë

	)

5756 
	#CAN_RF1R_RFOM1
 
CAN_RF1R_RFOM1_Msk


	)

5759 
	#CAN_IER_TMEIE_Pos
 (0U)

	)

5760 
	#CAN_IER_TMEIE_Msk
 (0x1UL << 
CAN_IER_TMEIE_Pos
Ë

	)

5761 
	#CAN_IER_TMEIE
 
CAN_IER_TMEIE_Msk


	)

5762 
	#CAN_IER_FMPIE0_Pos
 (1U)

	)

5763 
	#CAN_IER_FMPIE0_Msk
 (0x1UL << 
CAN_IER_FMPIE0_Pos
Ë

	)

5764 
	#CAN_IER_FMPIE0
 
CAN_IER_FMPIE0_Msk


	)

5765 
	#CAN_IER_FFIE0_Pos
 (2U)

	)

5766 
	#CAN_IER_FFIE0_Msk
 (0x1UL << 
CAN_IER_FFIE0_Pos
Ë

	)

5767 
	#CAN_IER_FFIE0
 
CAN_IER_FFIE0_Msk


	)

5768 
	#CAN_IER_FOVIE0_Pos
 (3U)

	)

5769 
	#CAN_IER_FOVIE0_Msk
 (0x1UL << 
CAN_IER_FOVIE0_Pos
Ë

	)

5770 
	#CAN_IER_FOVIE0
 
CAN_IER_FOVIE0_Msk


	)

5771 
	#CAN_IER_FMPIE1_Pos
 (4U)

	)

5772 
	#CAN_IER_FMPIE1_Msk
 (0x1UL << 
CAN_IER_FMPIE1_Pos
Ë

	)

5773 
	#CAN_IER_FMPIE1
 
CAN_IER_FMPIE1_Msk


	)

5774 
	#CAN_IER_FFIE1_Pos
 (5U)

	)

5775 
	#CAN_IER_FFIE1_Msk
 (0x1UL << 
CAN_IER_FFIE1_Pos
Ë

	)

5776 
	#CAN_IER_FFIE1
 
CAN_IER_FFIE1_Msk


	)

5777 
	#CAN_IER_FOVIE1_Pos
 (6U)

	)

5778 
	#CAN_IER_FOVIE1_Msk
 (0x1UL << 
CAN_IER_FOVIE1_Pos
Ë

	)

5779 
	#CAN_IER_FOVIE1
 
CAN_IER_FOVIE1_Msk


	)

5780 
	#CAN_IER_EWGIE_Pos
 (8U)

	)

5781 
	#CAN_IER_EWGIE_Msk
 (0x1UL << 
CAN_IER_EWGIE_Pos
Ë

	)

5782 
	#CAN_IER_EWGIE
 
CAN_IER_EWGIE_Msk


	)

5783 
	#CAN_IER_EPVIE_Pos
 (9U)

	)

5784 
	#CAN_IER_EPVIE_Msk
 (0x1UL << 
CAN_IER_EPVIE_Pos
Ë

	)

5785 
	#CAN_IER_EPVIE
 
CAN_IER_EPVIE_Msk


	)

5786 
	#CAN_IER_BOFIE_Pos
 (10U)

	)

5787 
	#CAN_IER_BOFIE_Msk
 (0x1UL << 
CAN_IER_BOFIE_Pos
Ë

	)

5788 
	#CAN_IER_BOFIE
 
CAN_IER_BOFIE_Msk


	)

5789 
	#CAN_IER_LECIE_Pos
 (11U)

	)

5790 
	#CAN_IER_LECIE_Msk
 (0x1UL << 
CAN_IER_LECIE_Pos
Ë

	)

5791 
	#CAN_IER_LECIE
 
CAN_IER_LECIE_Msk


	)

5792 
	#CAN_IER_ERRIE_Pos
 (15U)

	)

5793 
	#CAN_IER_ERRIE_Msk
 (0x1UL << 
CAN_IER_ERRIE_Pos
Ë

	)

5794 
	#CAN_IER_ERRIE
 
CAN_IER_ERRIE_Msk


	)

5795 
	#CAN_IER_WKUIE_Pos
 (16U)

	)

5796 
	#CAN_IER_WKUIE_Msk
 (0x1UL << 
CAN_IER_WKUIE_Pos
Ë

	)

5797 
	#CAN_IER_WKUIE
 
CAN_IER_WKUIE_Msk


	)

5798 
	#CAN_IER_SLKIE_Pos
 (17U)

	)

5799 
	#CAN_IER_SLKIE_Msk
 (0x1UL << 
CAN_IER_SLKIE_Pos
Ë

	)

5800 
	#CAN_IER_SLKIE
 
CAN_IER_SLKIE_Msk


	)

5803 
	#CAN_ESR_EWGF_Pos
 (0U)

	)

5804 
	#CAN_ESR_EWGF_Msk
 (0x1UL << 
CAN_ESR_EWGF_Pos
Ë

	)

5805 
	#CAN_ESR_EWGF
 
CAN_ESR_EWGF_Msk


	)

5806 
	#CAN_ESR_EPVF_Pos
 (1U)

	)

5807 
	#CAN_ESR_EPVF_Msk
 (0x1UL << 
CAN_ESR_EPVF_Pos
Ë

	)

5808 
	#CAN_ESR_EPVF
 
CAN_ESR_EPVF_Msk


	)

5809 
	#CAN_ESR_BOFF_Pos
 (2U)

	)

5810 
	#CAN_ESR_BOFF_Msk
 (0x1UL << 
CAN_ESR_BOFF_Pos
Ë

	)

5811 
	#CAN_ESR_BOFF
 
CAN_ESR_BOFF_Msk


	)

5813 
	#CAN_ESR_LEC_Pos
 (4U)

	)

5814 
	#CAN_ESR_LEC_Msk
 (0x7UL << 
CAN_ESR_LEC_Pos
Ë

	)

5815 
	#CAN_ESR_LEC
 
CAN_ESR_LEC_Msk


	)

5816 
	#CAN_ESR_LEC_0
 (0x1UL << 
CAN_ESR_LEC_Pos
Ë

	)

5817 
	#CAN_ESR_LEC_1
 (0x2UL << 
CAN_ESR_LEC_Pos
Ë

	)

5818 
	#CAN_ESR_LEC_2
 (0x4UL << 
CAN_ESR_LEC_Pos
Ë

	)

5820 
	#CAN_ESR_TEC_Pos
 (16U)

	)

5821 
	#CAN_ESR_TEC_Msk
 (0xFFUL << 
CAN_ESR_TEC_Pos
Ë

	)

5822 
	#CAN_ESR_TEC
 
CAN_ESR_TEC_Msk


	)

5823 
	#CAN_ESR_REC_Pos
 (24U)

	)

5824 
	#CAN_ESR_REC_Msk
 (0xFFUL << 
CAN_ESR_REC_Pos
Ë

	)

5825 
	#CAN_ESR_REC
 
CAN_ESR_REC_Msk


	)

5828 
	#CAN_BTR_BRP_Pos
 (0U)

	)

5829 
	#CAN_BTR_BRP_Msk
 (0x3FFUL << 
CAN_BTR_BRP_Pos
Ë

	)

5830 
	#CAN_BTR_BRP
 
CAN_BTR_BRP_Msk


	)

5831 
	#CAN_BTR_TS1_Pos
 (16U)

	)

5832 
	#CAN_BTR_TS1_Msk
 (0xFUL << 
CAN_BTR_TS1_Pos
Ë

	)

5833 
	#CAN_BTR_TS1
 
CAN_BTR_TS1_Msk


	)

5834 
	#CAN_BTR_TS1_0
 (0x1UL << 
CAN_BTR_TS1_Pos
Ë

	)

5835 
	#CAN_BTR_TS1_1
 (0x2UL << 
CAN_BTR_TS1_Pos
Ë

	)

5836 
	#CAN_BTR_TS1_2
 (0x4UL << 
CAN_BTR_TS1_Pos
Ë

	)

5837 
	#CAN_BTR_TS1_3
 (0x8UL << 
CAN_BTR_TS1_Pos
Ë

	)

5838 
	#CAN_BTR_TS2_Pos
 (20U)

	)

5839 
	#CAN_BTR_TS2_Msk
 (0x7UL << 
CAN_BTR_TS2_Pos
Ë

	)

5840 
	#CAN_BTR_TS2
 
CAN_BTR_TS2_Msk


	)

5841 
	#CAN_BTR_TS2_0
 (0x1UL << 
CAN_BTR_TS2_Pos
Ë

	)

5842 
	#CAN_BTR_TS2_1
 (0x2UL << 
CAN_BTR_TS2_Pos
Ë

	)

5843 
	#CAN_BTR_TS2_2
 (0x4UL << 
CAN_BTR_TS2_Pos
Ë

	)

5844 
	#CAN_BTR_SJW_Pos
 (24U)

	)

5845 
	#CAN_BTR_SJW_Msk
 (0x3UL << 
CAN_BTR_SJW_Pos
Ë

	)

5846 
	#CAN_BTR_SJW
 
CAN_BTR_SJW_Msk


	)

5847 
	#CAN_BTR_SJW_0
 (0x1UL << 
CAN_BTR_SJW_Pos
Ë

	)

5848 
	#CAN_BTR_SJW_1
 (0x2UL << 
CAN_BTR_SJW_Pos
Ë

	)

5849 
	#CAN_BTR_LBKM_Pos
 (30U)

	)

5850 
	#CAN_BTR_LBKM_Msk
 (0x1UL << 
CAN_BTR_LBKM_Pos
Ë

	)

5851 
	#CAN_BTR_LBKM
 
CAN_BTR_LBKM_Msk


	)

5852 
	#CAN_BTR_SILM_Pos
 (31U)

	)

5853 
	#CAN_BTR_SILM_Msk
 (0x1UL << 
CAN_BTR_SILM_Pos
Ë

	)

5854 
	#CAN_BTR_SILM
 
CAN_BTR_SILM_Msk


	)

5858 
	#CAN_TI0R_TXRQ_Pos
 (0U)

	)

5859 
	#CAN_TI0R_TXRQ_Msk
 (0x1UL << 
CAN_TI0R_TXRQ_Pos
Ë

	)

5860 
	#CAN_TI0R_TXRQ
 
CAN_TI0R_TXRQ_Msk


	)

5861 
	#CAN_TI0R_RTR_Pos
 (1U)

	)

5862 
	#CAN_TI0R_RTR_Msk
 (0x1UL << 
CAN_TI0R_RTR_Pos
Ë

	)

5863 
	#CAN_TI0R_RTR
 
CAN_TI0R_RTR_Msk


	)

5864 
	#CAN_TI0R_IDE_Pos
 (2U)

	)

5865 
	#CAN_TI0R_IDE_Msk
 (0x1UL << 
CAN_TI0R_IDE_Pos
Ë

	)

5866 
	#CAN_TI0R_IDE
 
CAN_TI0R_IDE_Msk


	)

5867 
	#CAN_TI0R_EXID_Pos
 (3U)

	)

5868 
	#CAN_TI0R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI0R_EXID_Pos
Ë

	)

5869 
	#CAN_TI0R_EXID
 
CAN_TI0R_EXID_Msk


	)

5870 
	#CAN_TI0R_STID_Pos
 (21U)

	)

5871 
	#CAN_TI0R_STID_Msk
 (0x7FFUL << 
CAN_TI0R_STID_Pos
Ë

	)

5872 
	#CAN_TI0R_STID
 
CAN_TI0R_STID_Msk


	)

5875 
	#CAN_TDT0R_DLC_Pos
 (0U)

	)

5876 
	#CAN_TDT0R_DLC_Msk
 (0xFUL << 
CAN_TDT0R_DLC_Pos
Ë

	)

5877 
	#CAN_TDT0R_DLC
 
CAN_TDT0R_DLC_Msk


	)

5878 
	#CAN_TDT0R_TGT_Pos
 (8U)

	)

5879 
	#CAN_TDT0R_TGT_Msk
 (0x1UL << 
CAN_TDT0R_TGT_Pos
Ë

	)

5880 
	#CAN_TDT0R_TGT
 
CAN_TDT0R_TGT_Msk


	)

5881 
	#CAN_TDT0R_TIME_Pos
 (16U)

	)

5882 
	#CAN_TDT0R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT0R_TIME_Pos
Ë

	)

5883 
	#CAN_TDT0R_TIME
 
CAN_TDT0R_TIME_Msk


	)

5886 
	#CAN_TDL0R_DATA0_Pos
 (0U)

	)

5887 
	#CAN_TDL0R_DATA0_Msk
 (0xFFUL << 
CAN_TDL0R_DATA0_Pos
Ë

	)

5888 
	#CAN_TDL0R_DATA0
 
CAN_TDL0R_DATA0_Msk


	)

5889 
	#CAN_TDL0R_DATA1_Pos
 (8U)

	)

5890 
	#CAN_TDL0R_DATA1_Msk
 (0xFFUL << 
CAN_TDL0R_DATA1_Pos
Ë

	)

5891 
	#CAN_TDL0R_DATA1
 
CAN_TDL0R_DATA1_Msk


	)

5892 
	#CAN_TDL0R_DATA2_Pos
 (16U)

	)

5893 
	#CAN_TDL0R_DATA2_Msk
 (0xFFUL << 
CAN_TDL0R_DATA2_Pos
Ë

	)

5894 
	#CAN_TDL0R_DATA2
 
CAN_TDL0R_DATA2_Msk


	)

5895 
	#CAN_TDL0R_DATA3_Pos
 (24U)

	)

5896 
	#CAN_TDL0R_DATA3_Msk
 (0xFFUL << 
CAN_TDL0R_DATA3_Pos
Ë

	)

5897 
	#CAN_TDL0R_DATA3
 
CAN_TDL0R_DATA3_Msk


	)

5900 
	#CAN_TDH0R_DATA4_Pos
 (0U)

	)

5901 
	#CAN_TDH0R_DATA4_Msk
 (0xFFUL << 
CAN_TDH0R_DATA4_Pos
Ë

	)

5902 
	#CAN_TDH0R_DATA4
 
CAN_TDH0R_DATA4_Msk


	)

5903 
	#CAN_TDH0R_DATA5_Pos
 (8U)

	)

5904 
	#CAN_TDH0R_DATA5_Msk
 (0xFFUL << 
CAN_TDH0R_DATA5_Pos
Ë

	)

5905 
	#CAN_TDH0R_DATA5
 
CAN_TDH0R_DATA5_Msk


	)

5906 
	#CAN_TDH0R_DATA6_Pos
 (16U)

	)

5907 
	#CAN_TDH0R_DATA6_Msk
 (0xFFUL << 
CAN_TDH0R_DATA6_Pos
Ë

	)

5908 
	#CAN_TDH0R_DATA6
 
CAN_TDH0R_DATA6_Msk


	)

5909 
	#CAN_TDH0R_DATA7_Pos
 (24U)

	)

5910 
	#CAN_TDH0R_DATA7_Msk
 (0xFFUL << 
CAN_TDH0R_DATA7_Pos
Ë

	)

5911 
	#CAN_TDH0R_DATA7
 
CAN_TDH0R_DATA7_Msk


	)

5914 
	#CAN_TI1R_TXRQ_Pos
 (0U)

	)

5915 
	#CAN_TI1R_TXRQ_Msk
 (0x1UL << 
CAN_TI1R_TXRQ_Pos
Ë

	)

5916 
	#CAN_TI1R_TXRQ
 
CAN_TI1R_TXRQ_Msk


	)

5917 
	#CAN_TI1R_RTR_Pos
 (1U)

	)

5918 
	#CAN_TI1R_RTR_Msk
 (0x1UL << 
CAN_TI1R_RTR_Pos
Ë

	)

5919 
	#CAN_TI1R_RTR
 
CAN_TI1R_RTR_Msk


	)

5920 
	#CAN_TI1R_IDE_Pos
 (2U)

	)

5921 
	#CAN_TI1R_IDE_Msk
 (0x1UL << 
CAN_TI1R_IDE_Pos
Ë

	)

5922 
	#CAN_TI1R_IDE
 
CAN_TI1R_IDE_Msk


	)

5923 
	#CAN_TI1R_EXID_Pos
 (3U)

	)

5924 
	#CAN_TI1R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI1R_EXID_Pos
Ë

	)

5925 
	#CAN_TI1R_EXID
 
CAN_TI1R_EXID_Msk


	)

5926 
	#CAN_TI1R_STID_Pos
 (21U)

	)

5927 
	#CAN_TI1R_STID_Msk
 (0x7FFUL << 
CAN_TI1R_STID_Pos
Ë

	)

5928 
	#CAN_TI1R_STID
 
CAN_TI1R_STID_Msk


	)

5931 
	#CAN_TDT1R_DLC_Pos
 (0U)

	)

5932 
	#CAN_TDT1R_DLC_Msk
 (0xFUL << 
CAN_TDT1R_DLC_Pos
Ë

	)

5933 
	#CAN_TDT1R_DLC
 
CAN_TDT1R_DLC_Msk


	)

5934 
	#CAN_TDT1R_TGT_Pos
 (8U)

	)

5935 
	#CAN_TDT1R_TGT_Msk
 (0x1UL << 
CAN_TDT1R_TGT_Pos
Ë

	)

5936 
	#CAN_TDT1R_TGT
 
CAN_TDT1R_TGT_Msk


	)

5937 
	#CAN_TDT1R_TIME_Pos
 (16U)

	)

5938 
	#CAN_TDT1R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT1R_TIME_Pos
Ë

	)

5939 
	#CAN_TDT1R_TIME
 
CAN_TDT1R_TIME_Msk


	)

5942 
	#CAN_TDL1R_DATA0_Pos
 (0U)

	)

5943 
	#CAN_TDL1R_DATA0_Msk
 (0xFFUL << 
CAN_TDL1R_DATA0_Pos
Ë

	)

5944 
	#CAN_TDL1R_DATA0
 
CAN_TDL1R_DATA0_Msk


	)

5945 
	#CAN_TDL1R_DATA1_Pos
 (8U)

	)

5946 
	#CAN_TDL1R_DATA1_Msk
 (0xFFUL << 
CAN_TDL1R_DATA1_Pos
Ë

	)

5947 
	#CAN_TDL1R_DATA1
 
CAN_TDL1R_DATA1_Msk


	)

5948 
	#CAN_TDL1R_DATA2_Pos
 (16U)

	)

5949 
	#CAN_TDL1R_DATA2_Msk
 (0xFFUL << 
CAN_TDL1R_DATA2_Pos
Ë

	)

5950 
	#CAN_TDL1R_DATA2
 
CAN_TDL1R_DATA2_Msk


	)

5951 
	#CAN_TDL1R_DATA3_Pos
 (24U)

	)

5952 
	#CAN_TDL1R_DATA3_Msk
 (0xFFUL << 
CAN_TDL1R_DATA3_Pos
Ë

	)

5953 
	#CAN_TDL1R_DATA3
 
CAN_TDL1R_DATA3_Msk


	)

5956 
	#CAN_TDH1R_DATA4_Pos
 (0U)

	)

5957 
	#CAN_TDH1R_DATA4_Msk
 (0xFFUL << 
CAN_TDH1R_DATA4_Pos
Ë

	)

5958 
	#CAN_TDH1R_DATA4
 
CAN_TDH1R_DATA4_Msk


	)

5959 
	#CAN_TDH1R_DATA5_Pos
 (8U)

	)

5960 
	#CAN_TDH1R_DATA5_Msk
 (0xFFUL << 
CAN_TDH1R_DATA5_Pos
Ë

	)

5961 
	#CAN_TDH1R_DATA5
 
CAN_TDH1R_DATA5_Msk


	)

5962 
	#CAN_TDH1R_DATA6_Pos
 (16U)

	)

5963 
	#CAN_TDH1R_DATA6_Msk
 (0xFFUL << 
CAN_TDH1R_DATA6_Pos
Ë

	)

5964 
	#CAN_TDH1R_DATA6
 
CAN_TDH1R_DATA6_Msk


	)

5965 
	#CAN_TDH1R_DATA7_Pos
 (24U)

	)

5966 
	#CAN_TDH1R_DATA7_Msk
 (0xFFUL << 
CAN_TDH1R_DATA7_Pos
Ë

	)

5967 
	#CAN_TDH1R_DATA7
 
CAN_TDH1R_DATA7_Msk


	)

5970 
	#CAN_TI2R_TXRQ_Pos
 (0U)

	)

5971 
	#CAN_TI2R_TXRQ_Msk
 (0x1UL << 
CAN_TI2R_TXRQ_Pos
Ë

	)

5972 
	#CAN_TI2R_TXRQ
 
CAN_TI2R_TXRQ_Msk


	)

5973 
	#CAN_TI2R_RTR_Pos
 (1U)

	)

5974 
	#CAN_TI2R_RTR_Msk
 (0x1UL << 
CAN_TI2R_RTR_Pos
Ë

	)

5975 
	#CAN_TI2R_RTR
 
CAN_TI2R_RTR_Msk


	)

5976 
	#CAN_TI2R_IDE_Pos
 (2U)

	)

5977 
	#CAN_TI2R_IDE_Msk
 (0x1UL << 
CAN_TI2R_IDE_Pos
Ë

	)

5978 
	#CAN_TI2R_IDE
 
CAN_TI2R_IDE_Msk


	)

5979 
	#CAN_TI2R_EXID_Pos
 (3U)

	)

5980 
	#CAN_TI2R_EXID_Msk
 (0x3FFFFUL << 
CAN_TI2R_EXID_Pos
Ë

	)

5981 
	#CAN_TI2R_EXID
 
CAN_TI2R_EXID_Msk


	)

5982 
	#CAN_TI2R_STID_Pos
 (21U)

	)

5983 
	#CAN_TI2R_STID_Msk
 (0x7FFUL << 
CAN_TI2R_STID_Pos
Ë

	)

5984 
	#CAN_TI2R_STID
 
CAN_TI2R_STID_Msk


	)

5987 
	#CAN_TDT2R_DLC_Pos
 (0U)

	)

5988 
	#CAN_TDT2R_DLC_Msk
 (0xFUL << 
CAN_TDT2R_DLC_Pos
Ë

	)

5989 
	#CAN_TDT2R_DLC
 
CAN_TDT2R_DLC_Msk


	)

5990 
	#CAN_TDT2R_TGT_Pos
 (8U)

	)

5991 
	#CAN_TDT2R_TGT_Msk
 (0x1UL << 
CAN_TDT2R_TGT_Pos
Ë

	)

5992 
	#CAN_TDT2R_TGT
 
CAN_TDT2R_TGT_Msk


	)

5993 
	#CAN_TDT2R_TIME_Pos
 (16U)

	)

5994 
	#CAN_TDT2R_TIME_Msk
 (0xFFFFUL << 
CAN_TDT2R_TIME_Pos
Ë

	)

5995 
	#CAN_TDT2R_TIME
 
CAN_TDT2R_TIME_Msk


	)

5998 
	#CAN_TDL2R_DATA0_Pos
 (0U)

	)

5999 
	#CAN_TDL2R_DATA0_Msk
 (0xFFUL << 
CAN_TDL2R_DATA0_Pos
Ë

	)

6000 
	#CAN_TDL2R_DATA0
 
CAN_TDL2R_DATA0_Msk


	)

6001 
	#CAN_TDL2R_DATA1_Pos
 (8U)

	)

6002 
	#CAN_TDL2R_DATA1_Msk
 (0xFFUL << 
CAN_TDL2R_DATA1_Pos
Ë

	)

6003 
	#CAN_TDL2R_DATA1
 
CAN_TDL2R_DATA1_Msk


	)

6004 
	#CAN_TDL2R_DATA2_Pos
 (16U)

	)

6005 
	#CAN_TDL2R_DATA2_Msk
 (0xFFUL << 
CAN_TDL2R_DATA2_Pos
Ë

	)

6006 
	#CAN_TDL2R_DATA2
 
CAN_TDL2R_DATA2_Msk


	)

6007 
	#CAN_TDL2R_DATA3_Pos
 (24U)

	)

6008 
	#CAN_TDL2R_DATA3_Msk
 (0xFFUL << 
CAN_TDL2R_DATA3_Pos
Ë

	)

6009 
	#CAN_TDL2R_DATA3
 
CAN_TDL2R_DATA3_Msk


	)

6012 
	#CAN_TDH2R_DATA4_Pos
 (0U)

	)

6013 
	#CAN_TDH2R_DATA4_Msk
 (0xFFUL << 
CAN_TDH2R_DATA4_Pos
Ë

	)

6014 
	#CAN_TDH2R_DATA4
 
CAN_TDH2R_DATA4_Msk


	)

6015 
	#CAN_TDH2R_DATA5_Pos
 (8U)

	)

6016 
	#CAN_TDH2R_DATA5_Msk
 (0xFFUL << 
CAN_TDH2R_DATA5_Pos
Ë

	)

6017 
	#CAN_TDH2R_DATA5
 
CAN_TDH2R_DATA5_Msk


	)

6018 
	#CAN_TDH2R_DATA6_Pos
 (16U)

	)

6019 
	#CAN_TDH2R_DATA6_Msk
 (0xFFUL << 
CAN_TDH2R_DATA6_Pos
Ë

	)

6020 
	#CAN_TDH2R_DATA6
 
CAN_TDH2R_DATA6_Msk


	)

6021 
	#CAN_TDH2R_DATA7_Pos
 (24U)

	)

6022 
	#CAN_TDH2R_DATA7_Msk
 (0xFFUL << 
CAN_TDH2R_DATA7_Pos
Ë

	)

6023 
	#CAN_TDH2R_DATA7
 
CAN_TDH2R_DATA7_Msk


	)

6026 
	#CAN_RI0R_RTR_Pos
 (1U)

	)

6027 
	#CAN_RI0R_RTR_Msk
 (0x1UL << 
CAN_RI0R_RTR_Pos
Ë

	)

6028 
	#CAN_RI0R_RTR
 
CAN_RI0R_RTR_Msk


	)

6029 
	#CAN_RI0R_IDE_Pos
 (2U)

	)

6030 
	#CAN_RI0R_IDE_Msk
 (0x1UL << 
CAN_RI0R_IDE_Pos
Ë

	)

6031 
	#CAN_RI0R_IDE
 
CAN_RI0R_IDE_Msk


	)

6032 
	#CAN_RI0R_EXID_Pos
 (3U)

	)

6033 
	#CAN_RI0R_EXID_Msk
 (0x3FFFFUL << 
CAN_RI0R_EXID_Pos
Ë

	)

6034 
	#CAN_RI0R_EXID
 
CAN_RI0R_EXID_Msk


	)

6035 
	#CAN_RI0R_STID_Pos
 (21U)

	)

6036 
	#CAN_RI0R_STID_Msk
 (0x7FFUL << 
CAN_RI0R_STID_Pos
Ë

	)

6037 
	#CAN_RI0R_STID
 
CAN_RI0R_STID_Msk


	)

6040 
	#CAN_RDT0R_DLC_Pos
 (0U)

	)

6041 
	#CAN_RDT0R_DLC_Msk
 (0xFUL << 
CAN_RDT0R_DLC_Pos
Ë

	)

6042 
	#CAN_RDT0R_DLC
 
CAN_RDT0R_DLC_Msk


	)

6043 
	#CAN_RDT0R_FMI_Pos
 (8U)

	)

6044 
	#CAN_RDT0R_FMI_Msk
 (0xFFUL << 
CAN_RDT0R_FMI_Pos
Ë

	)

6045 
	#CAN_RDT0R_FMI
 
CAN_RDT0R_FMI_Msk


	)

6046 
	#CAN_RDT0R_TIME_Pos
 (16U)

	)

6047 
	#CAN_RDT0R_TIME_Msk
 (0xFFFFUL << 
CAN_RDT0R_TIME_Pos
Ë

	)

6048 
	#CAN_RDT0R_TIME
 
CAN_RDT0R_TIME_Msk


	)

6051 
	#CAN_RDL0R_DATA0_Pos
 (0U)

	)

6052 
	#CAN_RDL0R_DATA0_Msk
 (0xFFUL << 
CAN_RDL0R_DATA0_Pos
Ë

	)

6053 
	#CAN_RDL0R_DATA0
 
CAN_RDL0R_DATA0_Msk


	)

6054 
	#CAN_RDL0R_DATA1_Pos
 (8U)

	)

6055 
	#CAN_RDL0R_DATA1_Msk
 (0xFFUL << 
CAN_RDL0R_DATA1_Pos
Ë

	)

6056 
	#CAN_RDL0R_DATA1
 
CAN_RDL0R_DATA1_Msk


	)

6057 
	#CAN_RDL0R_DATA2_Pos
 (16U)

	)

6058 
	#CAN_RDL0R_DATA2_Msk
 (0xFFUL << 
CAN_RDL0R_DATA2_Pos
Ë

	)

6059 
	#CAN_RDL0R_DATA2
 
CAN_RDL0R_DATA2_Msk


	)

6060 
	#CAN_RDL0R_DATA3_Pos
 (24U)

	)

6061 
	#CAN_RDL0R_DATA3_Msk
 (0xFFUL << 
CAN_RDL0R_DATA3_Pos
Ë

	)

6062 
	#CAN_RDL0R_DATA3
 
CAN_RDL0R_DATA3_Msk


	)

6065 
	#CAN_RDH0R_DATA4_Pos
 (0U)

	)

6066 
	#CAN_RDH0R_DATA4_Msk
 (0xFFUL << 
CAN_RDH0R_DATA4_Pos
Ë

	)

6067 
	#CAN_RDH0R_DATA4
 
CAN_RDH0R_DATA4_Msk


	)

6068 
	#CAN_RDH0R_DATA5_Pos
 (8U)

	)

6069 
	#CAN_RDH0R_DATA5_Msk
 (0xFFUL << 
CAN_RDH0R_DATA5_Pos
Ë

	)

6070 
	#CAN_RDH0R_DATA5
 
CAN_RDH0R_DATA5_Msk


	)

6071 
	#CAN_RDH0R_DATA6_Pos
 (16U)

	)

6072 
	#CAN_RDH0R_DATA6_Msk
 (0xFFUL << 
CAN_RDH0R_DATA6_Pos
Ë

	)

6073 
	#CAN_RDH0R_DATA6
 
CAN_RDH0R_DATA6_Msk


	)

6074 
	#CAN_RDH0R_DATA7_Pos
 (24U)

	)

6075 
	#CAN_RDH0R_DATA7_Msk
 (0xFFUL << 
CAN_RDH0R_DATA7_Pos
Ë

	)

6076 
	#CAN_RDH0R_DATA7
 
CAN_RDH0R_DATA7_Msk


	)

6079 
	#CAN_RI1R_RTR_Pos
 (1U)

	)

6080 
	#CAN_RI1R_RTR_Msk
 (0x1UL << 
CAN_RI1R_RTR_Pos
Ë

	)

6081 
	#CAN_RI1R_RTR
 
CAN_RI1R_RTR_Msk


	)

6082 
	#CAN_RI1R_IDE_Pos
 (2U)

	)

6083 
	#CAN_RI1R_IDE_Msk
 (0x1UL << 
CAN_RI1R_IDE_Pos
Ë

	)

6084 
	#CAN_RI1R_IDE
 
CAN_RI1R_IDE_Msk


	)

6085 
	#CAN_RI1R_EXID_Pos
 (3U)

	)

6086 
	#CAN_RI1R_EXID_Msk
 (0x3FFFFUL << 
CAN_RI1R_EXID_Pos
Ë

	)

6087 
	#CAN_RI1R_EXID
 
CAN_RI1R_EXID_Msk


	)

6088 
	#CAN_RI1R_STID_Pos
 (21U)

	)

6089 
	#CAN_RI1R_STID_Msk
 (0x7FFUL << 
CAN_RI1R_STID_Pos
Ë

	)

6090 
	#CAN_RI1R_STID
 
CAN_RI1R_STID_Msk


	)

6093 
	#CAN_RDT1R_DLC_Pos
 (0U)

	)

6094 
	#CAN_RDT1R_DLC_Msk
 (0xFUL << 
CAN_RDT1R_DLC_Pos
Ë

	)

6095 
	#CAN_RDT1R_DLC
 
CAN_RDT1R_DLC_Msk


	)

6096 
	#CAN_RDT1R_FMI_Pos
 (8U)

	)

6097 
	#CAN_RDT1R_FMI_Msk
 (0xFFUL << 
CAN_RDT1R_FMI_Pos
Ë

	)

6098 
	#CAN_RDT1R_FMI
 
CAN_RDT1R_FMI_Msk


	)

6099 
	#CAN_RDT1R_TIME_Pos
 (16U)

	)

6100 
	#CAN_RDT1R_TIME_Msk
 (0xFFFFUL << 
CAN_RDT1R_TIME_Pos
Ë

	)

6101 
	#CAN_RDT1R_TIME
 
CAN_RDT1R_TIME_Msk


	)

6104 
	#CAN_RDL1R_DATA0_Pos
 (0U)

	)

6105 
	#CAN_RDL1R_DATA0_Msk
 (0xFFUL << 
CAN_RDL1R_DATA0_Pos
Ë

	)

6106 
	#CAN_RDL1R_DATA0
 
CAN_RDL1R_DATA0_Msk


	)

6107 
	#CAN_RDL1R_DATA1_Pos
 (8U)

	)

6108 
	#CAN_RDL1R_DATA1_Msk
 (0xFFUL << 
CAN_RDL1R_DATA1_Pos
Ë

	)

6109 
	#CAN_RDL1R_DATA1
 
CAN_RDL1R_DATA1_Msk


	)

6110 
	#CAN_RDL1R_DATA2_Pos
 (16U)

	)

6111 
	#CAN_RDL1R_DATA2_Msk
 (0xFFUL << 
CAN_RDL1R_DATA2_Pos
Ë

	)

6112 
	#CAN_RDL1R_DATA2
 
CAN_RDL1R_DATA2_Msk


	)

6113 
	#CAN_RDL1R_DATA3_Pos
 (24U)

	)

6114 
	#CAN_RDL1R_DATA3_Msk
 (0xFFUL << 
CAN_RDL1R_DATA3_Pos
Ë

	)

6115 
	#CAN_RDL1R_DATA3
 
CAN_RDL1R_DATA3_Msk


	)

6118 
	#CAN_RDH1R_DATA4_Pos
 (0U)

	)

6119 
	#CAN_RDH1R_DATA4_Msk
 (0xFFUL << 
CAN_RDH1R_DATA4_Pos
Ë

	)

6120 
	#CAN_RDH1R_DATA4
 
CAN_RDH1R_DATA4_Msk


	)

6121 
	#CAN_RDH1R_DATA5_Pos
 (8U)

	)

6122 
	#CAN_RDH1R_DATA5_Msk
 (0xFFUL << 
CAN_RDH1R_DATA5_Pos
Ë

	)

6123 
	#CAN_RDH1R_DATA5
 
CAN_RDH1R_DATA5_Msk


	)

6124 
	#CAN_RDH1R_DATA6_Pos
 (16U)

	)

6125 
	#CAN_RDH1R_DATA6_Msk
 (0xFFUL << 
CAN_RDH1R_DATA6_Pos
Ë

	)

6126 
	#CAN_RDH1R_DATA6
 
CAN_RDH1R_DATA6_Msk


	)

6127 
	#CAN_RDH1R_DATA7_Pos
 (24U)

	)

6128 
	#CAN_RDH1R_DATA7_Msk
 (0xFFUL << 
CAN_RDH1R_DATA7_Pos
Ë

	)

6129 
	#CAN_RDH1R_DATA7
 
CAN_RDH1R_DATA7_Msk


	)

6133 
	#CAN_FMR_FINIT_Pos
 (0U)

	)

6134 
	#CAN_FMR_FINIT_Msk
 (0x1UL << 
CAN_FMR_FINIT_Pos
Ë

	)

6135 
	#CAN_FMR_FINIT
 
CAN_FMR_FINIT_Msk


	)

6136 
	#CAN_FMR_CAN2SB_Pos
 (8U)

	)

6137 
	#CAN_FMR_CAN2SB_Msk
 (0x3FUL << 
CAN_FMR_CAN2SB_Pos
Ë

	)

6138 
	#CAN_FMR_CAN2SB
 
CAN_FMR_CAN2SB_Msk


	)

6141 
	#CAN_FM1R_FBM_Pos
 (0U)

	)

6142 
	#CAN_FM1R_FBM_Msk
 (0x3FFFUL << 
CAN_FM1R_FBM_Pos
Ë

	)

6143 
	#CAN_FM1R_FBM
 
CAN_FM1R_FBM_Msk


	)

6144 
	#CAN_FM1R_FBM0_Pos
 (0U)

	)

6145 
	#CAN_FM1R_FBM0_Msk
 (0x1UL << 
CAN_FM1R_FBM0_Pos
Ë

	)

6146 
	#CAN_FM1R_FBM0
 
CAN_FM1R_FBM0_Msk


	)

6147 
	#CAN_FM1R_FBM1_Pos
 (1U)

	)

6148 
	#CAN_FM1R_FBM1_Msk
 (0x1UL << 
CAN_FM1R_FBM1_Pos
Ë

	)

6149 
	#CAN_FM1R_FBM1
 
CAN_FM1R_FBM1_Msk


	)

6150 
	#CAN_FM1R_FBM2_Pos
 (2U)

	)

6151 
	#CAN_FM1R_FBM2_Msk
 (0x1UL << 
CAN_FM1R_FBM2_Pos
Ë

	)

6152 
	#CAN_FM1R_FBM2
 
CAN_FM1R_FBM2_Msk


	)

6153 
	#CAN_FM1R_FBM3_Pos
 (3U)

	)

6154 
	#CAN_FM1R_FBM3_Msk
 (0x1UL << 
CAN_FM1R_FBM3_Pos
Ë

	)

6155 
	#CAN_FM1R_FBM3
 
CAN_FM1R_FBM3_Msk


	)

6156 
	#CAN_FM1R_FBM4_Pos
 (4U)

	)

6157 
	#CAN_FM1R_FBM4_Msk
 (0x1UL << 
CAN_FM1R_FBM4_Pos
Ë

	)

6158 
	#CAN_FM1R_FBM4
 
CAN_FM1R_FBM4_Msk


	)

6159 
	#CAN_FM1R_FBM5_Pos
 (5U)

	)

6160 
	#CAN_FM1R_FBM5_Msk
 (0x1UL << 
CAN_FM1R_FBM5_Pos
Ë

	)

6161 
	#CAN_FM1R_FBM5
 
CAN_FM1R_FBM5_Msk


	)

6162 
	#CAN_FM1R_FBM6_Pos
 (6U)

	)

6163 
	#CAN_FM1R_FBM6_Msk
 (0x1UL << 
CAN_FM1R_FBM6_Pos
Ë

	)

6164 
	#CAN_FM1R_FBM6
 
CAN_FM1R_FBM6_Msk


	)

6165 
	#CAN_FM1R_FBM7_Pos
 (7U)

	)

6166 
	#CAN_FM1R_FBM7_Msk
 (0x1UL << 
CAN_FM1R_FBM7_Pos
Ë

	)

6167 
	#CAN_FM1R_FBM7
 
CAN_FM1R_FBM7_Msk


	)

6168 
	#CAN_FM1R_FBM8_Pos
 (8U)

	)

6169 
	#CAN_FM1R_FBM8_Msk
 (0x1UL << 
CAN_FM1R_FBM8_Pos
Ë

	)

6170 
	#CAN_FM1R_FBM8
 
CAN_FM1R_FBM8_Msk


	)

6171 
	#CAN_FM1R_FBM9_Pos
 (9U)

	)

6172 
	#CAN_FM1R_FBM9_Msk
 (0x1UL << 
CAN_FM1R_FBM9_Pos
Ë

	)

6173 
	#CAN_FM1R_FBM9
 
CAN_FM1R_FBM9_Msk


	)

6174 
	#CAN_FM1R_FBM10_Pos
 (10U)

	)

6175 
	#CAN_FM1R_FBM10_Msk
 (0x1UL << 
CAN_FM1R_FBM10_Pos
Ë

	)

6176 
	#CAN_FM1R_FBM10
 
CAN_FM1R_FBM10_Msk


	)

6177 
	#CAN_FM1R_FBM11_Pos
 (11U)

	)

6178 
	#CAN_FM1R_FBM11_Msk
 (0x1UL << 
CAN_FM1R_FBM11_Pos
Ë

	)

6179 
	#CAN_FM1R_FBM11
 
CAN_FM1R_FBM11_Msk


	)

6180 
	#CAN_FM1R_FBM12_Pos
 (12U)

	)

6181 
	#CAN_FM1R_FBM12_Msk
 (0x1UL << 
CAN_FM1R_FBM12_Pos
Ë

	)

6182 
	#CAN_FM1R_FBM12
 
CAN_FM1R_FBM12_Msk


	)

6183 
	#CAN_FM1R_FBM13_Pos
 (13U)

	)

6184 
	#CAN_FM1R_FBM13_Msk
 (0x1UL << 
CAN_FM1R_FBM13_Pos
Ë

	)

6185 
	#CAN_FM1R_FBM13
 
CAN_FM1R_FBM13_Msk


	)

6188 
	#CAN_FS1R_FSC_Pos
 (0U)

	)

6189 
	#CAN_FS1R_FSC_Msk
 (0x3FFFUL << 
CAN_FS1R_FSC_Pos
Ë

	)

6190 
	#CAN_FS1R_FSC
 
CAN_FS1R_FSC_Msk


	)

6191 
	#CAN_FS1R_FSC0_Pos
 (0U)

	)

6192 
	#CAN_FS1R_FSC0_Msk
 (0x1UL << 
CAN_FS1R_FSC0_Pos
Ë

	)

6193 
	#CAN_FS1R_FSC0
 
CAN_FS1R_FSC0_Msk


	)

6194 
	#CAN_FS1R_FSC1_Pos
 (1U)

	)

6195 
	#CAN_FS1R_FSC1_Msk
 (0x1UL << 
CAN_FS1R_FSC1_Pos
Ë

	)

6196 
	#CAN_FS1R_FSC1
 
CAN_FS1R_FSC1_Msk


	)

6197 
	#CAN_FS1R_FSC2_Pos
 (2U)

	)

6198 
	#CAN_FS1R_FSC2_Msk
 (0x1UL << 
CAN_FS1R_FSC2_Pos
Ë

	)

6199 
	#CAN_FS1R_FSC2
 
CAN_FS1R_FSC2_Msk


	)

6200 
	#CAN_FS1R_FSC3_Pos
 (3U)

	)

6201 
	#CAN_FS1R_FSC3_Msk
 (0x1UL << 
CAN_FS1R_FSC3_Pos
Ë

	)

6202 
	#CAN_FS1R_FSC3
 
CAN_FS1R_FSC3_Msk


	)

6203 
	#CAN_FS1R_FSC4_Pos
 (4U)

	)

6204 
	#CAN_FS1R_FSC4_Msk
 (0x1UL << 
CAN_FS1R_FSC4_Pos
Ë

	)

6205 
	#CAN_FS1R_FSC4
 
CAN_FS1R_FSC4_Msk


	)

6206 
	#CAN_FS1R_FSC5_Pos
 (5U)

	)

6207 
	#CAN_FS1R_FSC5_Msk
 (0x1UL << 
CAN_FS1R_FSC5_Pos
Ë

	)

6208 
	#CAN_FS1R_FSC5
 
CAN_FS1R_FSC5_Msk


	)

6209 
	#CAN_FS1R_FSC6_Pos
 (6U)

	)

6210 
	#CAN_FS1R_FSC6_Msk
 (0x1UL << 
CAN_FS1R_FSC6_Pos
Ë

	)

6211 
	#CAN_FS1R_FSC6
 
CAN_FS1R_FSC6_Msk


	)

6212 
	#CAN_FS1R_FSC7_Pos
 (7U)

	)

6213 
	#CAN_FS1R_FSC7_Msk
 (0x1UL << 
CAN_FS1R_FSC7_Pos
Ë

	)

6214 
	#CAN_FS1R_FSC7
 
CAN_FS1R_FSC7_Msk


	)

6215 
	#CAN_FS1R_FSC8_Pos
 (8U)

	)

6216 
	#CAN_FS1R_FSC8_Msk
 (0x1UL << 
CAN_FS1R_FSC8_Pos
Ë

	)

6217 
	#CAN_FS1R_FSC8
 
CAN_FS1R_FSC8_Msk


	)

6218 
	#CAN_FS1R_FSC9_Pos
 (9U)

	)

6219 
	#CAN_FS1R_FSC9_Msk
 (0x1UL << 
CAN_FS1R_FSC9_Pos
Ë

	)

6220 
	#CAN_FS1R_FSC9
 
CAN_FS1R_FSC9_Msk


	)

6221 
	#CAN_FS1R_FSC10_Pos
 (10U)

	)

6222 
	#CAN_FS1R_FSC10_Msk
 (0x1UL << 
CAN_FS1R_FSC10_Pos
Ë

	)

6223 
	#CAN_FS1R_FSC10
 
CAN_FS1R_FSC10_Msk


	)

6224 
	#CAN_FS1R_FSC11_Pos
 (11U)

	)

6225 
	#CAN_FS1R_FSC11_Msk
 (0x1UL << 
CAN_FS1R_FSC11_Pos
Ë

	)

6226 
	#CAN_FS1R_FSC11
 
CAN_FS1R_FSC11_Msk


	)

6227 
	#CAN_FS1R_FSC12_Pos
 (12U)

	)

6228 
	#CAN_FS1R_FSC12_Msk
 (0x1UL << 
CAN_FS1R_FSC12_Pos
Ë

	)

6229 
	#CAN_FS1R_FSC12
 
CAN_FS1R_FSC12_Msk


	)

6230 
	#CAN_FS1R_FSC13_Pos
 (13U)

	)

6231 
	#CAN_FS1R_FSC13_Msk
 (0x1UL << 
CAN_FS1R_FSC13_Pos
Ë

	)

6232 
	#CAN_FS1R_FSC13
 
CAN_FS1R_FSC13_Msk


	)

6235 
	#CAN_FFA1R_FFA_Pos
 (0U)

	)

6236 
	#CAN_FFA1R_FFA_Msk
 (0x3FFFUL << 
CAN_FFA1R_FFA_Pos
Ë

	)

6237 
	#CAN_FFA1R_FFA
 
CAN_FFA1R_FFA_Msk


	)

6238 
	#CAN_FFA1R_FFA0_Pos
 (0U)

	)

6239 
	#CAN_FFA1R_FFA0_Msk
 (0x1UL << 
CAN_FFA1R_FFA0_Pos
Ë

	)

6240 
	#CAN_FFA1R_FFA0
 
CAN_FFA1R_FFA0_Msk


	)

6241 
	#CAN_FFA1R_FFA1_Pos
 (1U)

	)

6242 
	#CAN_FFA1R_FFA1_Msk
 (0x1UL << 
CAN_FFA1R_FFA1_Pos
Ë

	)

6243 
	#CAN_FFA1R_FFA1
 
CAN_FFA1R_FFA1_Msk


	)

6244 
	#CAN_FFA1R_FFA2_Pos
 (2U)

	)

6245 
	#CAN_FFA1R_FFA2_Msk
 (0x1UL << 
CAN_FFA1R_FFA2_Pos
Ë

	)

6246 
	#CAN_FFA1R_FFA2
 
CAN_FFA1R_FFA2_Msk


	)

6247 
	#CAN_FFA1R_FFA3_Pos
 (3U)

	)

6248 
	#CAN_FFA1R_FFA3_Msk
 (0x1UL << 
CAN_FFA1R_FFA3_Pos
Ë

	)

6249 
	#CAN_FFA1R_FFA3
 
CAN_FFA1R_FFA3_Msk


	)

6250 
	#CAN_FFA1R_FFA4_Pos
 (4U)

	)

6251 
	#CAN_FFA1R_FFA4_Msk
 (0x1UL << 
CAN_FFA1R_FFA4_Pos
Ë

	)

6252 
	#CAN_FFA1R_FFA4
 
CAN_FFA1R_FFA4_Msk


	)

6253 
	#CAN_FFA1R_FFA5_Pos
 (5U)

	)

6254 
	#CAN_FFA1R_FFA5_Msk
 (0x1UL << 
CAN_FFA1R_FFA5_Pos
Ë

	)

6255 
	#CAN_FFA1R_FFA5
 
CAN_FFA1R_FFA5_Msk


	)

6256 
	#CAN_FFA1R_FFA6_Pos
 (6U)

	)

6257 
	#CAN_FFA1R_FFA6_Msk
 (0x1UL << 
CAN_FFA1R_FFA6_Pos
Ë

	)

6258 
	#CAN_FFA1R_FFA6
 
CAN_FFA1R_FFA6_Msk


	)

6259 
	#CAN_FFA1R_FFA7_Pos
 (7U)

	)

6260 
	#CAN_FFA1R_FFA7_Msk
 (0x1UL << 
CAN_FFA1R_FFA7_Pos
Ë

	)

6261 
	#CAN_FFA1R_FFA7
 
CAN_FFA1R_FFA7_Msk


	)

6262 
	#CAN_FFA1R_FFA8_Pos
 (8U)

	)

6263 
	#CAN_FFA1R_FFA8_Msk
 (0x1UL << 
CAN_FFA1R_FFA8_Pos
Ë

	)

6264 
	#CAN_FFA1R_FFA8
 
CAN_FFA1R_FFA8_Msk


	)

6265 
	#CAN_FFA1R_FFA9_Pos
 (9U)

	)

6266 
	#CAN_FFA1R_FFA9_Msk
 (0x1UL << 
CAN_FFA1R_FFA9_Pos
Ë

	)

6267 
	#CAN_FFA1R_FFA9
 
CAN_FFA1R_FFA9_Msk


	)

6268 
	#CAN_FFA1R_FFA10_Pos
 (10U)

	)

6269 
	#CAN_FFA1R_FFA10_Msk
 (0x1UL << 
CAN_FFA1R_FFA10_Pos
Ë

	)

6270 
	#CAN_FFA1R_FFA10
 
CAN_FFA1R_FFA10_Msk


	)

6271 
	#CAN_FFA1R_FFA11_Pos
 (11U)

	)

6272 
	#CAN_FFA1R_FFA11_Msk
 (0x1UL << 
CAN_FFA1R_FFA11_Pos
Ë

	)

6273 
	#CAN_FFA1R_FFA11
 
CAN_FFA1R_FFA11_Msk


	)

6274 
	#CAN_FFA1R_FFA12_Pos
 (12U)

	)

6275 
	#CAN_FFA1R_FFA12_Msk
 (0x1UL << 
CAN_FFA1R_FFA12_Pos
Ë

	)

6276 
	#CAN_FFA1R_FFA12
 
CAN_FFA1R_FFA12_Msk


	)

6277 
	#CAN_FFA1R_FFA13_Pos
 (13U)

	)

6278 
	#CAN_FFA1R_FFA13_Msk
 (0x1UL << 
CAN_FFA1R_FFA13_Pos
Ë

	)

6279 
	#CAN_FFA1R_FFA13
 
CAN_FFA1R_FFA13_Msk


	)

6282 
	#CAN_FA1R_FACT_Pos
 (0U)

	)

6283 
	#CAN_FA1R_FACT_Msk
 (0x3FFFUL << 
CAN_FA1R_FACT_Pos
Ë

	)

6284 
	#CAN_FA1R_FACT
 
CAN_FA1R_FACT_Msk


	)

6285 
	#CAN_FA1R_FACT0_Pos
 (0U)

	)

6286 
	#CAN_FA1R_FACT0_Msk
 (0x1UL << 
CAN_FA1R_FACT0_Pos
Ë

	)

6287 
	#CAN_FA1R_FACT0
 
CAN_FA1R_FACT0_Msk


	)

6288 
	#CAN_FA1R_FACT1_Pos
 (1U)

	)

6289 
	#CAN_FA1R_FACT1_Msk
 (0x1UL << 
CAN_FA1R_FACT1_Pos
Ë

	)

6290 
	#CAN_FA1R_FACT1
 
CAN_FA1R_FACT1_Msk


	)

6291 
	#CAN_FA1R_FACT2_Pos
 (2U)

	)

6292 
	#CAN_FA1R_FACT2_Msk
 (0x1UL << 
CAN_FA1R_FACT2_Pos
Ë

	)

6293 
	#CAN_FA1R_FACT2
 
CAN_FA1R_FACT2_Msk


	)

6294 
	#CAN_FA1R_FACT3_Pos
 (3U)

	)

6295 
	#CAN_FA1R_FACT3_Msk
 (0x1UL << 
CAN_FA1R_FACT3_Pos
Ë

	)

6296 
	#CAN_FA1R_FACT3
 
CAN_FA1R_FACT3_Msk


	)

6297 
	#CAN_FA1R_FACT4_Pos
 (4U)

	)

6298 
	#CAN_FA1R_FACT4_Msk
 (0x1UL << 
CAN_FA1R_FACT4_Pos
Ë

	)

6299 
	#CAN_FA1R_FACT4
 
CAN_FA1R_FACT4_Msk


	)

6300 
	#CAN_FA1R_FACT5_Pos
 (5U)

	)

6301 
	#CAN_FA1R_FACT5_Msk
 (0x1UL << 
CAN_FA1R_FACT5_Pos
Ë

	)

6302 
	#CAN_FA1R_FACT5
 
CAN_FA1R_FACT5_Msk


	)

6303 
	#CAN_FA1R_FACT6_Pos
 (6U)

	)

6304 
	#CAN_FA1R_FACT6_Msk
 (0x1UL << 
CAN_FA1R_FACT6_Pos
Ë

	)

6305 
	#CAN_FA1R_FACT6
 
CAN_FA1R_FACT6_Msk


	)

6306 
	#CAN_FA1R_FACT7_Pos
 (7U)

	)

6307 
	#CAN_FA1R_FACT7_Msk
 (0x1UL << 
CAN_FA1R_FACT7_Pos
Ë

	)

6308 
	#CAN_FA1R_FACT7
 
CAN_FA1R_FACT7_Msk


	)

6309 
	#CAN_FA1R_FACT8_Pos
 (8U)

	)

6310 
	#CAN_FA1R_FACT8_Msk
 (0x1UL << 
CAN_FA1R_FACT8_Pos
Ë

	)

6311 
	#CAN_FA1R_FACT8
 
CAN_FA1R_FACT8_Msk


	)

6312 
	#CAN_FA1R_FACT9_Pos
 (9U)

	)

6313 
	#CAN_FA1R_FACT9_Msk
 (0x1UL << 
CAN_FA1R_FACT9_Pos
Ë

	)

6314 
	#CAN_FA1R_FACT9
 
CAN_FA1R_FACT9_Msk


	)

6315 
	#CAN_FA1R_FACT10_Pos
 (10U)

	)

6316 
	#CAN_FA1R_FACT10_Msk
 (0x1UL << 
CAN_FA1R_FACT10_Pos
Ë

	)

6317 
	#CAN_FA1R_FACT10
 
CAN_FA1R_FACT10_Msk


	)

6318 
	#CAN_FA1R_FACT11_Pos
 (11U)

	)

6319 
	#CAN_FA1R_FACT11_Msk
 (0x1UL << 
CAN_FA1R_FACT11_Pos
Ë

	)

6320 
	#CAN_FA1R_FACT11
 
CAN_FA1R_FACT11_Msk


	)

6321 
	#CAN_FA1R_FACT12_Pos
 (12U)

	)

6322 
	#CAN_FA1R_FACT12_Msk
 (0x1UL << 
CAN_FA1R_FACT12_Pos
Ë

	)

6323 
	#CAN_FA1R_FACT12
 
CAN_FA1R_FACT12_Msk


	)

6324 
	#CAN_FA1R_FACT13_Pos
 (13U)

	)

6325 
	#CAN_FA1R_FACT13_Msk
 (0x1UL << 
CAN_FA1R_FACT13_Pos
Ë

	)

6326 
	#CAN_FA1R_FACT13
 
CAN_FA1R_FACT13_Msk


	)

6329 
	#CAN_F0R1_FB0_Pos
 (0U)

	)

6330 
	#CAN_F0R1_FB0_Msk
 (0x1UL << 
CAN_F0R1_FB0_Pos
Ë

	)

6331 
	#CAN_F0R1_FB0
 
CAN_F0R1_FB0_Msk


	)

6332 
	#CAN_F0R1_FB1_Pos
 (1U)

	)

6333 
	#CAN_F0R1_FB1_Msk
 (0x1UL << 
CAN_F0R1_FB1_Pos
Ë

	)

6334 
	#CAN_F0R1_FB1
 
CAN_F0R1_FB1_Msk


	)

6335 
	#CAN_F0R1_FB2_Pos
 (2U)

	)

6336 
	#CAN_F0R1_FB2_Msk
 (0x1UL << 
CAN_F0R1_FB2_Pos
Ë

	)

6337 
	#CAN_F0R1_FB2
 
CAN_F0R1_FB2_Msk


	)

6338 
	#CAN_F0R1_FB3_Pos
 (3U)

	)

6339 
	#CAN_F0R1_FB3_Msk
 (0x1UL << 
CAN_F0R1_FB3_Pos
Ë

	)

6340 
	#CAN_F0R1_FB3
 
CAN_F0R1_FB3_Msk


	)

6341 
	#CAN_F0R1_FB4_Pos
 (4U)

	)

6342 
	#CAN_F0R1_FB4_Msk
 (0x1UL << 
CAN_F0R1_FB4_Pos
Ë

	)

6343 
	#CAN_F0R1_FB4
 
CAN_F0R1_FB4_Msk


	)

6344 
	#CAN_F0R1_FB5_Pos
 (5U)

	)

6345 
	#CAN_F0R1_FB5_Msk
 (0x1UL << 
CAN_F0R1_FB5_Pos
Ë

	)

6346 
	#CAN_F0R1_FB5
 
CAN_F0R1_FB5_Msk


	)

6347 
	#CAN_F0R1_FB6_Pos
 (6U)

	)

6348 
	#CAN_F0R1_FB6_Msk
 (0x1UL << 
CAN_F0R1_FB6_Pos
Ë

	)

6349 
	#CAN_F0R1_FB6
 
CAN_F0R1_FB6_Msk


	)

6350 
	#CAN_F0R1_FB7_Pos
 (7U)

	)

6351 
	#CAN_F0R1_FB7_Msk
 (0x1UL << 
CAN_F0R1_FB7_Pos
Ë

	)

6352 
	#CAN_F0R1_FB7
 
CAN_F0R1_FB7_Msk


	)

6353 
	#CAN_F0R1_FB8_Pos
 (8U)

	)

6354 
	#CAN_F0R1_FB8_Msk
 (0x1UL << 
CAN_F0R1_FB8_Pos
Ë

	)

6355 
	#CAN_F0R1_FB8
 
CAN_F0R1_FB8_Msk


	)

6356 
	#CAN_F0R1_FB9_Pos
 (9U)

	)

6357 
	#CAN_F0R1_FB9_Msk
 (0x1UL << 
CAN_F0R1_FB9_Pos
Ë

	)

6358 
	#CAN_F0R1_FB9
 
CAN_F0R1_FB9_Msk


	)

6359 
	#CAN_F0R1_FB10_Pos
 (10U)

	)

6360 
	#CAN_F0R1_FB10_Msk
 (0x1UL << 
CAN_F0R1_FB10_Pos
Ë

	)

6361 
	#CAN_F0R1_FB10
 
CAN_F0R1_FB10_Msk


	)

6362 
	#CAN_F0R1_FB11_Pos
 (11U)

	)

6363 
	#CAN_F0R1_FB11_Msk
 (0x1UL << 
CAN_F0R1_FB11_Pos
Ë

	)

6364 
	#CAN_F0R1_FB11
 
CAN_F0R1_FB11_Msk


	)

6365 
	#CAN_F0R1_FB12_Pos
 (12U)

	)

6366 
	#CAN_F0R1_FB12_Msk
 (0x1UL << 
CAN_F0R1_FB12_Pos
Ë

	)

6367 
	#CAN_F0R1_FB12
 
CAN_F0R1_FB12_Msk


	)

6368 
	#CAN_F0R1_FB13_Pos
 (13U)

	)

6369 
	#CAN_F0R1_FB13_Msk
 (0x1UL << 
CAN_F0R1_FB13_Pos
Ë

	)

6370 
	#CAN_F0R1_FB13
 
CAN_F0R1_FB13_Msk


	)

6371 
	#CAN_F0R1_FB14_Pos
 (14U)

	)

6372 
	#CAN_F0R1_FB14_Msk
 (0x1UL << 
CAN_F0R1_FB14_Pos
Ë

	)

6373 
	#CAN_F0R1_FB14
 
CAN_F0R1_FB14_Msk


	)

6374 
	#CAN_F0R1_FB15_Pos
 (15U)

	)

6375 
	#CAN_F0R1_FB15_Msk
 (0x1UL << 
CAN_F0R1_FB15_Pos
Ë

	)

6376 
	#CAN_F0R1_FB15
 
CAN_F0R1_FB15_Msk


	)

6377 
	#CAN_F0R1_FB16_Pos
 (16U)

	)

6378 
	#CAN_F0R1_FB16_Msk
 (0x1UL << 
CAN_F0R1_FB16_Pos
Ë

	)

6379 
	#CAN_F0R1_FB16
 
CAN_F0R1_FB16_Msk


	)

6380 
	#CAN_F0R1_FB17_Pos
 (17U)

	)

6381 
	#CAN_F0R1_FB17_Msk
 (0x1UL << 
CAN_F0R1_FB17_Pos
Ë

	)

6382 
	#CAN_F0R1_FB17
 
CAN_F0R1_FB17_Msk


	)

6383 
	#CAN_F0R1_FB18_Pos
 (18U)

	)

6384 
	#CAN_F0R1_FB18_Msk
 (0x1UL << 
CAN_F0R1_FB18_Pos
Ë

	)

6385 
	#CAN_F0R1_FB18
 
CAN_F0R1_FB18_Msk


	)

6386 
	#CAN_F0R1_FB19_Pos
 (19U)

	)

6387 
	#CAN_F0R1_FB19_Msk
 (0x1UL << 
CAN_F0R1_FB19_Pos
Ë

	)

6388 
	#CAN_F0R1_FB19
 
CAN_F0R1_FB19_Msk


	)

6389 
	#CAN_F0R1_FB20_Pos
 (20U)

	)

6390 
	#CAN_F0R1_FB20_Msk
 (0x1UL << 
CAN_F0R1_FB20_Pos
Ë

	)

6391 
	#CAN_F0R1_FB20
 
CAN_F0R1_FB20_Msk


	)

6392 
	#CAN_F0R1_FB21_Pos
 (21U)

	)

6393 
	#CAN_F0R1_FB21_Msk
 (0x1UL << 
CAN_F0R1_FB21_Pos
Ë

	)

6394 
	#CAN_F0R1_FB21
 
CAN_F0R1_FB21_Msk


	)

6395 
	#CAN_F0R1_FB22_Pos
 (22U)

	)

6396 
	#CAN_F0R1_FB22_Msk
 (0x1UL << 
CAN_F0R1_FB22_Pos
Ë

	)

6397 
	#CAN_F0R1_FB22
 
CAN_F0R1_FB22_Msk


	)

6398 
	#CAN_F0R1_FB23_Pos
 (23U)

	)

6399 
	#CAN_F0R1_FB23_Msk
 (0x1UL << 
CAN_F0R1_FB23_Pos
Ë

	)

6400 
	#CAN_F0R1_FB23
 
CAN_F0R1_FB23_Msk


	)

6401 
	#CAN_F0R1_FB24_Pos
 (24U)

	)

6402 
	#CAN_F0R1_FB24_Msk
 (0x1UL << 
CAN_F0R1_FB24_Pos
Ë

	)

6403 
	#CAN_F0R1_FB24
 
CAN_F0R1_FB24_Msk


	)

6404 
	#CAN_F0R1_FB25_Pos
 (25U)

	)

6405 
	#CAN_F0R1_FB25_Msk
 (0x1UL << 
CAN_F0R1_FB25_Pos
Ë

	)

6406 
	#CAN_F0R1_FB25
 
CAN_F0R1_FB25_Msk


	)

6407 
	#CAN_F0R1_FB26_Pos
 (26U)

	)

6408 
	#CAN_F0R1_FB26_Msk
 (0x1UL << 
CAN_F0R1_FB26_Pos
Ë

	)

6409 
	#CAN_F0R1_FB26
 
CAN_F0R1_FB26_Msk


	)

6410 
	#CAN_F0R1_FB27_Pos
 (27U)

	)

6411 
	#CAN_F0R1_FB27_Msk
 (0x1UL << 
CAN_F0R1_FB27_Pos
Ë

	)

6412 
	#CAN_F0R1_FB27
 
CAN_F0R1_FB27_Msk


	)

6413 
	#CAN_F0R1_FB28_Pos
 (28U)

	)

6414 
	#CAN_F0R1_FB28_Msk
 (0x1UL << 
CAN_F0R1_FB28_Pos
Ë

	)

6415 
	#CAN_F0R1_FB28
 
CAN_F0R1_FB28_Msk


	)

6416 
	#CAN_F0R1_FB29_Pos
 (29U)

	)

6417 
	#CAN_F0R1_FB29_Msk
 (0x1UL << 
CAN_F0R1_FB29_Pos
Ë

	)

6418 
	#CAN_F0R1_FB29
 
CAN_F0R1_FB29_Msk


	)

6419 
	#CAN_F0R1_FB30_Pos
 (30U)

	)

6420 
	#CAN_F0R1_FB30_Msk
 (0x1UL << 
CAN_F0R1_FB30_Pos
Ë

	)

6421 
	#CAN_F0R1_FB30
 
CAN_F0R1_FB30_Msk


	)

6422 
	#CAN_F0R1_FB31_Pos
 (31U)

	)

6423 
	#CAN_F0R1_FB31_Msk
 (0x1UL << 
CAN_F0R1_FB31_Pos
Ë

	)

6424 
	#CAN_F0R1_FB31
 
CAN_F0R1_FB31_Msk


	)

6427 
	#CAN_F1R1_FB0_Pos
 (0U)

	)

6428 
	#CAN_F1R1_FB0_Msk
 (0x1UL << 
CAN_F1R1_FB0_Pos
Ë

	)

6429 
	#CAN_F1R1_FB0
 
CAN_F1R1_FB0_Msk


	)

6430 
	#CAN_F1R1_FB1_Pos
 (1U)

	)

6431 
	#CAN_F1R1_FB1_Msk
 (0x1UL << 
CAN_F1R1_FB1_Pos
Ë

	)

6432 
	#CAN_F1R1_FB1
 
CAN_F1R1_FB1_Msk


	)

6433 
	#CAN_F1R1_FB2_Pos
 (2U)

	)

6434 
	#CAN_F1R1_FB2_Msk
 (0x1UL << 
CAN_F1R1_FB2_Pos
Ë

	)

6435 
	#CAN_F1R1_FB2
 
CAN_F1R1_FB2_Msk


	)

6436 
	#CAN_F1R1_FB3_Pos
 (3U)

	)

6437 
	#CAN_F1R1_FB3_Msk
 (0x1UL << 
CAN_F1R1_FB3_Pos
Ë

	)

6438 
	#CAN_F1R1_FB3
 
CAN_F1R1_FB3_Msk


	)

6439 
	#CAN_F1R1_FB4_Pos
 (4U)

	)

6440 
	#CAN_F1R1_FB4_Msk
 (0x1UL << 
CAN_F1R1_FB4_Pos
Ë

	)

6441 
	#CAN_F1R1_FB4
 
CAN_F1R1_FB4_Msk


	)

6442 
	#CAN_F1R1_FB5_Pos
 (5U)

	)

6443 
	#CAN_F1R1_FB5_Msk
 (0x1UL << 
CAN_F1R1_FB5_Pos
Ë

	)

6444 
	#CAN_F1R1_FB5
 
CAN_F1R1_FB5_Msk


	)

6445 
	#CAN_F1R1_FB6_Pos
 (6U)

	)

6446 
	#CAN_F1R1_FB6_Msk
 (0x1UL << 
CAN_F1R1_FB6_Pos
Ë

	)

6447 
	#CAN_F1R1_FB6
 
CAN_F1R1_FB6_Msk


	)

6448 
	#CAN_F1R1_FB7_Pos
 (7U)

	)

6449 
	#CAN_F1R1_FB7_Msk
 (0x1UL << 
CAN_F1R1_FB7_Pos
Ë

	)

6450 
	#CAN_F1R1_FB7
 
CAN_F1R1_FB7_Msk


	)

6451 
	#CAN_F1R1_FB8_Pos
 (8U)

	)

6452 
	#CAN_F1R1_FB8_Msk
 (0x1UL << 
CAN_F1R1_FB8_Pos
Ë

	)

6453 
	#CAN_F1R1_FB8
 
CAN_F1R1_FB8_Msk


	)

6454 
	#CAN_F1R1_FB9_Pos
 (9U)

	)

6455 
	#CAN_F1R1_FB9_Msk
 (0x1UL << 
CAN_F1R1_FB9_Pos
Ë

	)

6456 
	#CAN_F1R1_FB9
 
CAN_F1R1_FB9_Msk


	)

6457 
	#CAN_F1R1_FB10_Pos
 (10U)

	)

6458 
	#CAN_F1R1_FB10_Msk
 (0x1UL << 
CAN_F1R1_FB10_Pos
Ë

	)

6459 
	#CAN_F1R1_FB10
 
CAN_F1R1_FB10_Msk


	)

6460 
	#CAN_F1R1_FB11_Pos
 (11U)

	)

6461 
	#CAN_F1R1_FB11_Msk
 (0x1UL << 
CAN_F1R1_FB11_Pos
Ë

	)

6462 
	#CAN_F1R1_FB11
 
CAN_F1R1_FB11_Msk


	)

6463 
	#CAN_F1R1_FB12_Pos
 (12U)

	)

6464 
	#CAN_F1R1_FB12_Msk
 (0x1UL << 
CAN_F1R1_FB12_Pos
Ë

	)

6465 
	#CAN_F1R1_FB12
 
CAN_F1R1_FB12_Msk


	)

6466 
	#CAN_F1R1_FB13_Pos
 (13U)

	)

6467 
	#CAN_F1R1_FB13_Msk
 (0x1UL << 
CAN_F1R1_FB13_Pos
Ë

	)

6468 
	#CAN_F1R1_FB13
 
CAN_F1R1_FB13_Msk


	)

6469 
	#CAN_F1R1_FB14_Pos
 (14U)

	)

6470 
	#CAN_F1R1_FB14_Msk
 (0x1UL << 
CAN_F1R1_FB14_Pos
Ë

	)

6471 
	#CAN_F1R1_FB14
 
CAN_F1R1_FB14_Msk


	)

6472 
	#CAN_F1R1_FB15_Pos
 (15U)

	)

6473 
	#CAN_F1R1_FB15_Msk
 (0x1UL << 
CAN_F1R1_FB15_Pos
Ë

	)

6474 
	#CAN_F1R1_FB15
 
CAN_F1R1_FB15_Msk


	)

6475 
	#CAN_F1R1_FB16_Pos
 (16U)

	)

6476 
	#CAN_F1R1_FB16_Msk
 (0x1UL << 
CAN_F1R1_FB16_Pos
Ë

	)

6477 
	#CAN_F1R1_FB16
 
CAN_F1R1_FB16_Msk


	)

6478 
	#CAN_F1R1_FB17_Pos
 (17U)

	)

6479 
	#CAN_F1R1_FB17_Msk
 (0x1UL << 
CAN_F1R1_FB17_Pos
Ë

	)

6480 
	#CAN_F1R1_FB17
 
CAN_F1R1_FB17_Msk


	)

6481 
	#CAN_F1R1_FB18_Pos
 (18U)

	)

6482 
	#CAN_F1R1_FB18_Msk
 (0x1UL << 
CAN_F1R1_FB18_Pos
Ë

	)

6483 
	#CAN_F1R1_FB18
 
CAN_F1R1_FB18_Msk


	)

6484 
	#CAN_F1R1_FB19_Pos
 (19U)

	)

6485 
	#CAN_F1R1_FB19_Msk
 (0x1UL << 
CAN_F1R1_FB19_Pos
Ë

	)

6486 
	#CAN_F1R1_FB19
 
CAN_F1R1_FB19_Msk


	)

6487 
	#CAN_F1R1_FB20_Pos
 (20U)

	)

6488 
	#CAN_F1R1_FB20_Msk
 (0x1UL << 
CAN_F1R1_FB20_Pos
Ë

	)

6489 
	#CAN_F1R1_FB20
 
CAN_F1R1_FB20_Msk


	)

6490 
	#CAN_F1R1_FB21_Pos
 (21U)

	)

6491 
	#CAN_F1R1_FB21_Msk
 (0x1UL << 
CAN_F1R1_FB21_Pos
Ë

	)

6492 
	#CAN_F1R1_FB21
 
CAN_F1R1_FB21_Msk


	)

6493 
	#CAN_F1R1_FB22_Pos
 (22U)

	)

6494 
	#CAN_F1R1_FB22_Msk
 (0x1UL << 
CAN_F1R1_FB22_Pos
Ë

	)

6495 
	#CAN_F1R1_FB22
 
CAN_F1R1_FB22_Msk


	)

6496 
	#CAN_F1R1_FB23_Pos
 (23U)

	)

6497 
	#CAN_F1R1_FB23_Msk
 (0x1UL << 
CAN_F1R1_FB23_Pos
Ë

	)

6498 
	#CAN_F1R1_FB23
 
CAN_F1R1_FB23_Msk


	)

6499 
	#CAN_F1R1_FB24_Pos
 (24U)

	)

6500 
	#CAN_F1R1_FB24_Msk
 (0x1UL << 
CAN_F1R1_FB24_Pos
Ë

	)

6501 
	#CAN_F1R1_FB24
 
CAN_F1R1_FB24_Msk


	)

6502 
	#CAN_F1R1_FB25_Pos
 (25U)

	)

6503 
	#CAN_F1R1_FB25_Msk
 (0x1UL << 
CAN_F1R1_FB25_Pos
Ë

	)

6504 
	#CAN_F1R1_FB25
 
CAN_F1R1_FB25_Msk


	)

6505 
	#CAN_F1R1_FB26_Pos
 (26U)

	)

6506 
	#CAN_F1R1_FB26_Msk
 (0x1UL << 
CAN_F1R1_FB26_Pos
Ë

	)

6507 
	#CAN_F1R1_FB26
 
CAN_F1R1_FB26_Msk


	)

6508 
	#CAN_F1R1_FB27_Pos
 (27U)

	)

6509 
	#CAN_F1R1_FB27_Msk
 (0x1UL << 
CAN_F1R1_FB27_Pos
Ë

	)

6510 
	#CAN_F1R1_FB27
 
CAN_F1R1_FB27_Msk


	)

6511 
	#CAN_F1R1_FB28_Pos
 (28U)

	)

6512 
	#CAN_F1R1_FB28_Msk
 (0x1UL << 
CAN_F1R1_FB28_Pos
Ë

	)

6513 
	#CAN_F1R1_FB28
 
CAN_F1R1_FB28_Msk


	)

6514 
	#CAN_F1R1_FB29_Pos
 (29U)

	)

6515 
	#CAN_F1R1_FB29_Msk
 (0x1UL << 
CAN_F1R1_FB29_Pos
Ë

	)

6516 
	#CAN_F1R1_FB29
 
CAN_F1R1_FB29_Msk


	)

6517 
	#CAN_F1R1_FB30_Pos
 (30U)

	)

6518 
	#CAN_F1R1_FB30_Msk
 (0x1UL << 
CAN_F1R1_FB30_Pos
Ë

	)

6519 
	#CAN_F1R1_FB30
 
CAN_F1R1_FB30_Msk


	)

6520 
	#CAN_F1R1_FB31_Pos
 (31U)

	)

6521 
	#CAN_F1R1_FB31_Msk
 (0x1UL << 
CAN_F1R1_FB31_Pos
Ë

	)

6522 
	#CAN_F1R1_FB31
 
CAN_F1R1_FB31_Msk


	)

6525 
	#CAN_F2R1_FB0_Pos
 (0U)

	)

6526 
	#CAN_F2R1_FB0_Msk
 (0x1UL << 
CAN_F2R1_FB0_Pos
Ë

	)

6527 
	#CAN_F2R1_FB0
 
CAN_F2R1_FB0_Msk


	)

6528 
	#CAN_F2R1_FB1_Pos
 (1U)

	)

6529 
	#CAN_F2R1_FB1_Msk
 (0x1UL << 
CAN_F2R1_FB1_Pos
Ë

	)

6530 
	#CAN_F2R1_FB1
 
CAN_F2R1_FB1_Msk


	)

6531 
	#CAN_F2R1_FB2_Pos
 (2U)

	)

6532 
	#CAN_F2R1_FB2_Msk
 (0x1UL << 
CAN_F2R1_FB2_Pos
Ë

	)

6533 
	#CAN_F2R1_FB2
 
CAN_F2R1_FB2_Msk


	)

6534 
	#CAN_F2R1_FB3_Pos
 (3U)

	)

6535 
	#CAN_F2R1_FB3_Msk
 (0x1UL << 
CAN_F2R1_FB3_Pos
Ë

	)

6536 
	#CAN_F2R1_FB3
 
CAN_F2R1_FB3_Msk


	)

6537 
	#CAN_F2R1_FB4_Pos
 (4U)

	)

6538 
	#CAN_F2R1_FB4_Msk
 (0x1UL << 
CAN_F2R1_FB4_Pos
Ë

	)

6539 
	#CAN_F2R1_FB4
 
CAN_F2R1_FB4_Msk


	)

6540 
	#CAN_F2R1_FB5_Pos
 (5U)

	)

6541 
	#CAN_F2R1_FB5_Msk
 (0x1UL << 
CAN_F2R1_FB5_Pos
Ë

	)

6542 
	#CAN_F2R1_FB5
 
CAN_F2R1_FB5_Msk


	)

6543 
	#CAN_F2R1_FB6_Pos
 (6U)

	)

6544 
	#CAN_F2R1_FB6_Msk
 (0x1UL << 
CAN_F2R1_FB6_Pos
Ë

	)

6545 
	#CAN_F2R1_FB6
 
CAN_F2R1_FB6_Msk


	)

6546 
	#CAN_F2R1_FB7_Pos
 (7U)

	)

6547 
	#CAN_F2R1_FB7_Msk
 (0x1UL << 
CAN_F2R1_FB7_Pos
Ë

	)

6548 
	#CAN_F2R1_FB7
 
CAN_F2R1_FB7_Msk


	)

6549 
	#CAN_F2R1_FB8_Pos
 (8U)

	)

6550 
	#CAN_F2R1_FB8_Msk
 (0x1UL << 
CAN_F2R1_FB8_Pos
Ë

	)

6551 
	#CAN_F2R1_FB8
 
CAN_F2R1_FB8_Msk


	)

6552 
	#CAN_F2R1_FB9_Pos
 (9U)

	)

6553 
	#CAN_F2R1_FB9_Msk
 (0x1UL << 
CAN_F2R1_FB9_Pos
Ë

	)

6554 
	#CAN_F2R1_FB9
 
CAN_F2R1_FB9_Msk


	)

6555 
	#CAN_F2R1_FB10_Pos
 (10U)

	)

6556 
	#CAN_F2R1_FB10_Msk
 (0x1UL << 
CAN_F2R1_FB10_Pos
Ë

	)

6557 
	#CAN_F2R1_FB10
 
CAN_F2R1_FB10_Msk


	)

6558 
	#CAN_F2R1_FB11_Pos
 (11U)

	)

6559 
	#CAN_F2R1_FB11_Msk
 (0x1UL << 
CAN_F2R1_FB11_Pos
Ë

	)

6560 
	#CAN_F2R1_FB11
 
CAN_F2R1_FB11_Msk


	)

6561 
	#CAN_F2R1_FB12_Pos
 (12U)

	)

6562 
	#CAN_F2R1_FB12_Msk
 (0x1UL << 
CAN_F2R1_FB12_Pos
Ë

	)

6563 
	#CAN_F2R1_FB12
 
CAN_F2R1_FB12_Msk


	)

6564 
	#CAN_F2R1_FB13_Pos
 (13U)

	)

6565 
	#CAN_F2R1_FB13_Msk
 (0x1UL << 
CAN_F2R1_FB13_Pos
Ë

	)

6566 
	#CAN_F2R1_FB13
 
CAN_F2R1_FB13_Msk


	)

6567 
	#CAN_F2R1_FB14_Pos
 (14U)

	)

6568 
	#CAN_F2R1_FB14_Msk
 (0x1UL << 
CAN_F2R1_FB14_Pos
Ë

	)

6569 
	#CAN_F2R1_FB14
 
CAN_F2R1_FB14_Msk


	)

6570 
	#CAN_F2R1_FB15_Pos
 (15U)

	)

6571 
	#CAN_F2R1_FB15_Msk
 (0x1UL << 
CAN_F2R1_FB15_Pos
Ë

	)

6572 
	#CAN_F2R1_FB15
 
CAN_F2R1_FB15_Msk


	)

6573 
	#CAN_F2R1_FB16_Pos
 (16U)

	)

6574 
	#CAN_F2R1_FB16_Msk
 (0x1UL << 
CAN_F2R1_FB16_Pos
Ë

	)

6575 
	#CAN_F2R1_FB16
 
CAN_F2R1_FB16_Msk


	)

6576 
	#CAN_F2R1_FB17_Pos
 (17U)

	)

6577 
	#CAN_F2R1_FB17_Msk
 (0x1UL << 
CAN_F2R1_FB17_Pos
Ë

	)

6578 
	#CAN_F2R1_FB17
 
CAN_F2R1_FB17_Msk


	)

6579 
	#CAN_F2R1_FB18_Pos
 (18U)

	)

6580 
	#CAN_F2R1_FB18_Msk
 (0x1UL << 
CAN_F2R1_FB18_Pos
Ë

	)

6581 
	#CAN_F2R1_FB18
 
CAN_F2R1_FB18_Msk


	)

6582 
	#CAN_F2R1_FB19_Pos
 (19U)

	)

6583 
	#CAN_F2R1_FB19_Msk
 (0x1UL << 
CAN_F2R1_FB19_Pos
Ë

	)

6584 
	#CAN_F2R1_FB19
 
CAN_F2R1_FB19_Msk


	)

6585 
	#CAN_F2R1_FB20_Pos
 (20U)

	)

6586 
	#CAN_F2R1_FB20_Msk
 (0x1UL << 
CAN_F2R1_FB20_Pos
Ë

	)

6587 
	#CAN_F2R1_FB20
 
CAN_F2R1_FB20_Msk


	)

6588 
	#CAN_F2R1_FB21_Pos
 (21U)

	)

6589 
	#CAN_F2R1_FB21_Msk
 (0x1UL << 
CAN_F2R1_FB21_Pos
Ë

	)

6590 
	#CAN_F2R1_FB21
 
CAN_F2R1_FB21_Msk


	)

6591 
	#CAN_F2R1_FB22_Pos
 (22U)

	)

6592 
	#CAN_F2R1_FB22_Msk
 (0x1UL << 
CAN_F2R1_FB22_Pos
Ë

	)

6593 
	#CAN_F2R1_FB22
 
CAN_F2R1_FB22_Msk


	)

6594 
	#CAN_F2R1_FB23_Pos
 (23U)

	)

6595 
	#CAN_F2R1_FB23_Msk
 (0x1UL << 
CAN_F2R1_FB23_Pos
Ë

	)

6596 
	#CAN_F2R1_FB23
 
CAN_F2R1_FB23_Msk


	)

6597 
	#CAN_F2R1_FB24_Pos
 (24U)

	)

6598 
	#CAN_F2R1_FB24_Msk
 (0x1UL << 
CAN_F2R1_FB24_Pos
Ë

	)

6599 
	#CAN_F2R1_FB24
 
CAN_F2R1_FB24_Msk


	)

6600 
	#CAN_F2R1_FB25_Pos
 (25U)

	)

6601 
	#CAN_F2R1_FB25_Msk
 (0x1UL << 
CAN_F2R1_FB25_Pos
Ë

	)

6602 
	#CAN_F2R1_FB25
 
CAN_F2R1_FB25_Msk


	)

6603 
	#CAN_F2R1_FB26_Pos
 (26U)

	)

6604 
	#CAN_F2R1_FB26_Msk
 (0x1UL << 
CAN_F2R1_FB26_Pos
Ë

	)

6605 
	#CAN_F2R1_FB26
 
CAN_F2R1_FB26_Msk


	)

6606 
	#CAN_F2R1_FB27_Pos
 (27U)

	)

6607 
	#CAN_F2R1_FB27_Msk
 (0x1UL << 
CAN_F2R1_FB27_Pos
Ë

	)

6608 
	#CAN_F2R1_FB27
 
CAN_F2R1_FB27_Msk


	)

6609 
	#CAN_F2R1_FB28_Pos
 (28U)

	)

6610 
	#CAN_F2R1_FB28_Msk
 (0x1UL << 
CAN_F2R1_FB28_Pos
Ë

	)

6611 
	#CAN_F2R1_FB28
 
CAN_F2R1_FB28_Msk


	)

6612 
	#CAN_F2R1_FB29_Pos
 (29U)

	)

6613 
	#CAN_F2R1_FB29_Msk
 (0x1UL << 
CAN_F2R1_FB29_Pos
Ë

	)

6614 
	#CAN_F2R1_FB29
 
CAN_F2R1_FB29_Msk


	)

6615 
	#CAN_F2R1_FB30_Pos
 (30U)

	)

6616 
	#CAN_F2R1_FB30_Msk
 (0x1UL << 
CAN_F2R1_FB30_Pos
Ë

	)

6617 
	#CAN_F2R1_FB30
 
CAN_F2R1_FB30_Msk


	)

6618 
	#CAN_F2R1_FB31_Pos
 (31U)

	)

6619 
	#CAN_F2R1_FB31_Msk
 (0x1UL << 
CAN_F2R1_FB31_Pos
Ë

	)

6620 
	#CAN_F2R1_FB31
 
CAN_F2R1_FB31_Msk


	)

6623 
	#CAN_F3R1_FB0_Pos
 (0U)

	)

6624 
	#CAN_F3R1_FB0_Msk
 (0x1UL << 
CAN_F3R1_FB0_Pos
Ë

	)

6625 
	#CAN_F3R1_FB0
 
CAN_F3R1_FB0_Msk


	)

6626 
	#CAN_F3R1_FB1_Pos
 (1U)

	)

6627 
	#CAN_F3R1_FB1_Msk
 (0x1UL << 
CAN_F3R1_FB1_Pos
Ë

	)

6628 
	#CAN_F3R1_FB1
 
CAN_F3R1_FB1_Msk


	)

6629 
	#CAN_F3R1_FB2_Pos
 (2U)

	)

6630 
	#CAN_F3R1_FB2_Msk
 (0x1UL << 
CAN_F3R1_FB2_Pos
Ë

	)

6631 
	#CAN_F3R1_FB2
 
CAN_F3R1_FB2_Msk


	)

6632 
	#CAN_F3R1_FB3_Pos
 (3U)

	)

6633 
	#CAN_F3R1_FB3_Msk
 (0x1UL << 
CAN_F3R1_FB3_Pos
Ë

	)

6634 
	#CAN_F3R1_FB3
 
CAN_F3R1_FB3_Msk


	)

6635 
	#CAN_F3R1_FB4_Pos
 (4U)

	)

6636 
	#CAN_F3R1_FB4_Msk
 (0x1UL << 
CAN_F3R1_FB4_Pos
Ë

	)

6637 
	#CAN_F3R1_FB4
 
CAN_F3R1_FB4_Msk


	)

6638 
	#CAN_F3R1_FB5_Pos
 (5U)

	)

6639 
	#CAN_F3R1_FB5_Msk
 (0x1UL << 
CAN_F3R1_FB5_Pos
Ë

	)

6640 
	#CAN_F3R1_FB5
 
CAN_F3R1_FB5_Msk


	)

6641 
	#CAN_F3R1_FB6_Pos
 (6U)

	)

6642 
	#CAN_F3R1_FB6_Msk
 (0x1UL << 
CAN_F3R1_FB6_Pos
Ë

	)

6643 
	#CAN_F3R1_FB6
 
CAN_F3R1_FB6_Msk


	)

6644 
	#CAN_F3R1_FB7_Pos
 (7U)

	)

6645 
	#CAN_F3R1_FB7_Msk
 (0x1UL << 
CAN_F3R1_FB7_Pos
Ë

	)

6646 
	#CAN_F3R1_FB7
 
CAN_F3R1_FB7_Msk


	)

6647 
	#CAN_F3R1_FB8_Pos
 (8U)

	)

6648 
	#CAN_F3R1_FB8_Msk
 (0x1UL << 
CAN_F3R1_FB8_Pos
Ë

	)

6649 
	#CAN_F3R1_FB8
 
CAN_F3R1_FB8_Msk


	)

6650 
	#CAN_F3R1_FB9_Pos
 (9U)

	)

6651 
	#CAN_F3R1_FB9_Msk
 (0x1UL << 
CAN_F3R1_FB9_Pos
Ë

	)

6652 
	#CAN_F3R1_FB9
 
CAN_F3R1_FB9_Msk


	)

6653 
	#CAN_F3R1_FB10_Pos
 (10U)

	)

6654 
	#CAN_F3R1_FB10_Msk
 (0x1UL << 
CAN_F3R1_FB10_Pos
Ë

	)

6655 
	#CAN_F3R1_FB10
 
CAN_F3R1_FB10_Msk


	)

6656 
	#CAN_F3R1_FB11_Pos
 (11U)

	)

6657 
	#CAN_F3R1_FB11_Msk
 (0x1UL << 
CAN_F3R1_FB11_Pos
Ë

	)

6658 
	#CAN_F3R1_FB11
 
CAN_F3R1_FB11_Msk


	)

6659 
	#CAN_F3R1_FB12_Pos
 (12U)

	)

6660 
	#CAN_F3R1_FB12_Msk
 (0x1UL << 
CAN_F3R1_FB12_Pos
Ë

	)

6661 
	#CAN_F3R1_FB12
 
CAN_F3R1_FB12_Msk


	)

6662 
	#CAN_F3R1_FB13_Pos
 (13U)

	)

6663 
	#CAN_F3R1_FB13_Msk
 (0x1UL << 
CAN_F3R1_FB13_Pos
Ë

	)

6664 
	#CAN_F3R1_FB13
 
CAN_F3R1_FB13_Msk


	)

6665 
	#CAN_F3R1_FB14_Pos
 (14U)

	)

6666 
	#CAN_F3R1_FB14_Msk
 (0x1UL << 
CAN_F3R1_FB14_Pos
Ë

	)

6667 
	#CAN_F3R1_FB14
 
CAN_F3R1_FB14_Msk


	)

6668 
	#CAN_F3R1_FB15_Pos
 (15U)

	)

6669 
	#CAN_F3R1_FB15_Msk
 (0x1UL << 
CAN_F3R1_FB15_Pos
Ë

	)

6670 
	#CAN_F3R1_FB15
 
CAN_F3R1_FB15_Msk


	)

6671 
	#CAN_F3R1_FB16_Pos
 (16U)

	)

6672 
	#CAN_F3R1_FB16_Msk
 (0x1UL << 
CAN_F3R1_FB16_Pos
Ë

	)

6673 
	#CAN_F3R1_FB16
 
CAN_F3R1_FB16_Msk


	)

6674 
	#CAN_F3R1_FB17_Pos
 (17U)

	)

6675 
	#CAN_F3R1_FB17_Msk
 (0x1UL << 
CAN_F3R1_FB17_Pos
Ë

	)

6676 
	#CAN_F3R1_FB17
 
CAN_F3R1_FB17_Msk


	)

6677 
	#CAN_F3R1_FB18_Pos
 (18U)

	)

6678 
	#CAN_F3R1_FB18_Msk
 (0x1UL << 
CAN_F3R1_FB18_Pos
Ë

	)

6679 
	#CAN_F3R1_FB18
 
CAN_F3R1_FB18_Msk


	)

6680 
	#CAN_F3R1_FB19_Pos
 (19U)

	)

6681 
	#CAN_F3R1_FB19_Msk
 (0x1UL << 
CAN_F3R1_FB19_Pos
Ë

	)

6682 
	#CAN_F3R1_FB19
 
CAN_F3R1_FB19_Msk


	)

6683 
	#CAN_F3R1_FB20_Pos
 (20U)

	)

6684 
	#CAN_F3R1_FB20_Msk
 (0x1UL << 
CAN_F3R1_FB20_Pos
Ë

	)

6685 
	#CAN_F3R1_FB20
 
CAN_F3R1_FB20_Msk


	)

6686 
	#CAN_F3R1_FB21_Pos
 (21U)

	)

6687 
	#CAN_F3R1_FB21_Msk
 (0x1UL << 
CAN_F3R1_FB21_Pos
Ë

	)

6688 
	#CAN_F3R1_FB21
 
CAN_F3R1_FB21_Msk


	)

6689 
	#CAN_F3R1_FB22_Pos
 (22U)

	)

6690 
	#CAN_F3R1_FB22_Msk
 (0x1UL << 
CAN_F3R1_FB22_Pos
Ë

	)

6691 
	#CAN_F3R1_FB22
 
CAN_F3R1_FB22_Msk


	)

6692 
	#CAN_F3R1_FB23_Pos
 (23U)

	)

6693 
	#CAN_F3R1_FB23_Msk
 (0x1UL << 
CAN_F3R1_FB23_Pos
Ë

	)

6694 
	#CAN_F3R1_FB23
 
CAN_F3R1_FB23_Msk


	)

6695 
	#CAN_F3R1_FB24_Pos
 (24U)

	)

6696 
	#CAN_F3R1_FB24_Msk
 (0x1UL << 
CAN_F3R1_FB24_Pos
Ë

	)

6697 
	#CAN_F3R1_FB24
 
CAN_F3R1_FB24_Msk


	)

6698 
	#CAN_F3R1_FB25_Pos
 (25U)

	)

6699 
	#CAN_F3R1_FB25_Msk
 (0x1UL << 
CAN_F3R1_FB25_Pos
Ë

	)

6700 
	#CAN_F3R1_FB25
 
CAN_F3R1_FB25_Msk


	)

6701 
	#CAN_F3R1_FB26_Pos
 (26U)

	)

6702 
	#CAN_F3R1_FB26_Msk
 (0x1UL << 
CAN_F3R1_FB26_Pos
Ë

	)

6703 
	#CAN_F3R1_FB26
 
CAN_F3R1_FB26_Msk


	)

6704 
	#CAN_F3R1_FB27_Pos
 (27U)

	)

6705 
	#CAN_F3R1_FB27_Msk
 (0x1UL << 
CAN_F3R1_FB27_Pos
Ë

	)

6706 
	#CAN_F3R1_FB27
 
CAN_F3R1_FB27_Msk


	)

6707 
	#CAN_F3R1_FB28_Pos
 (28U)

	)

6708 
	#CAN_F3R1_FB28_Msk
 (0x1UL << 
CAN_F3R1_FB28_Pos
Ë

	)

6709 
	#CAN_F3R1_FB28
 
CAN_F3R1_FB28_Msk


	)

6710 
	#CAN_F3R1_FB29_Pos
 (29U)

	)

6711 
	#CAN_F3R1_FB29_Msk
 (0x1UL << 
CAN_F3R1_FB29_Pos
Ë

	)

6712 
	#CAN_F3R1_FB29
 
CAN_F3R1_FB29_Msk


	)

6713 
	#CAN_F3R1_FB30_Pos
 (30U)

	)

6714 
	#CAN_F3R1_FB30_Msk
 (0x1UL << 
CAN_F3R1_FB30_Pos
Ë

	)

6715 
	#CAN_F3R1_FB30
 
CAN_F3R1_FB30_Msk


	)

6716 
	#CAN_F3R1_FB31_Pos
 (31U)

	)

6717 
	#CAN_F3R1_FB31_Msk
 (0x1UL << 
CAN_F3R1_FB31_Pos
Ë

	)

6718 
	#CAN_F3R1_FB31
 
CAN_F3R1_FB31_Msk


	)

6721 
	#CAN_F4R1_FB0_Pos
 (0U)

	)

6722 
	#CAN_F4R1_FB0_Msk
 (0x1UL << 
CAN_F4R1_FB0_Pos
Ë

	)

6723 
	#CAN_F4R1_FB0
 
CAN_F4R1_FB0_Msk


	)

6724 
	#CAN_F4R1_FB1_Pos
 (1U)

	)

6725 
	#CAN_F4R1_FB1_Msk
 (0x1UL << 
CAN_F4R1_FB1_Pos
Ë

	)

6726 
	#CAN_F4R1_FB1
 
CAN_F4R1_FB1_Msk


	)

6727 
	#CAN_F4R1_FB2_Pos
 (2U)

	)

6728 
	#CAN_F4R1_FB2_Msk
 (0x1UL << 
CAN_F4R1_FB2_Pos
Ë

	)

6729 
	#CAN_F4R1_FB2
 
CAN_F4R1_FB2_Msk


	)

6730 
	#CAN_F4R1_FB3_Pos
 (3U)

	)

6731 
	#CAN_F4R1_FB3_Msk
 (0x1UL << 
CAN_F4R1_FB3_Pos
Ë

	)

6732 
	#CAN_F4R1_FB3
 
CAN_F4R1_FB3_Msk


	)

6733 
	#CAN_F4R1_FB4_Pos
 (4U)

	)

6734 
	#CAN_F4R1_FB4_Msk
 (0x1UL << 
CAN_F4R1_FB4_Pos
Ë

	)

6735 
	#CAN_F4R1_FB4
 
CAN_F4R1_FB4_Msk


	)

6736 
	#CAN_F4R1_FB5_Pos
 (5U)

	)

6737 
	#CAN_F4R1_FB5_Msk
 (0x1UL << 
CAN_F4R1_FB5_Pos
Ë

	)

6738 
	#CAN_F4R1_FB5
 
CAN_F4R1_FB5_Msk


	)

6739 
	#CAN_F4R1_FB6_Pos
 (6U)

	)

6740 
	#CAN_F4R1_FB6_Msk
 (0x1UL << 
CAN_F4R1_FB6_Pos
Ë

	)

6741 
	#CAN_F4R1_FB6
 
CAN_F4R1_FB6_Msk


	)

6742 
	#CAN_F4R1_FB7_Pos
 (7U)

	)

6743 
	#CAN_F4R1_FB7_Msk
 (0x1UL << 
CAN_F4R1_FB7_Pos
Ë

	)

6744 
	#CAN_F4R1_FB7
 
CAN_F4R1_FB7_Msk


	)

6745 
	#CAN_F4R1_FB8_Pos
 (8U)

	)

6746 
	#CAN_F4R1_FB8_Msk
 (0x1UL << 
CAN_F4R1_FB8_Pos
Ë

	)

6747 
	#CAN_F4R1_FB8
 
CAN_F4R1_FB8_Msk


	)

6748 
	#CAN_F4R1_FB9_Pos
 (9U)

	)

6749 
	#CAN_F4R1_FB9_Msk
 (0x1UL << 
CAN_F4R1_FB9_Pos
Ë

	)

6750 
	#CAN_F4R1_FB9
 
CAN_F4R1_FB9_Msk


	)

6751 
	#CAN_F4R1_FB10_Pos
 (10U)

	)

6752 
	#CAN_F4R1_FB10_Msk
 (0x1UL << 
CAN_F4R1_FB10_Pos
Ë

	)

6753 
	#CAN_F4R1_FB10
 
CAN_F4R1_FB10_Msk


	)

6754 
	#CAN_F4R1_FB11_Pos
 (11U)

	)

6755 
	#CAN_F4R1_FB11_Msk
 (0x1UL << 
CAN_F4R1_FB11_Pos
Ë

	)

6756 
	#CAN_F4R1_FB11
 
CAN_F4R1_FB11_Msk


	)

6757 
	#CAN_F4R1_FB12_Pos
 (12U)

	)

6758 
	#CAN_F4R1_FB12_Msk
 (0x1UL << 
CAN_F4R1_FB12_Pos
Ë

	)

6759 
	#CAN_F4R1_FB12
 
CAN_F4R1_FB12_Msk


	)

6760 
	#CAN_F4R1_FB13_Pos
 (13U)

	)

6761 
	#CAN_F4R1_FB13_Msk
 (0x1UL << 
CAN_F4R1_FB13_Pos
Ë

	)

6762 
	#CAN_F4R1_FB13
 
CAN_F4R1_FB13_Msk


	)

6763 
	#CAN_F4R1_FB14_Pos
 (14U)

	)

6764 
	#CAN_F4R1_FB14_Msk
 (0x1UL << 
CAN_F4R1_FB14_Pos
Ë

	)

6765 
	#CAN_F4R1_FB14
 
CAN_F4R1_FB14_Msk


	)

6766 
	#CAN_F4R1_FB15_Pos
 (15U)

	)

6767 
	#CAN_F4R1_FB15_Msk
 (0x1UL << 
CAN_F4R1_FB15_Pos
Ë

	)

6768 
	#CAN_F4R1_FB15
 
CAN_F4R1_FB15_Msk


	)

6769 
	#CAN_F4R1_FB16_Pos
 (16U)

	)

6770 
	#CAN_F4R1_FB16_Msk
 (0x1UL << 
CAN_F4R1_FB16_Pos
Ë

	)

6771 
	#CAN_F4R1_FB16
 
CAN_F4R1_FB16_Msk


	)

6772 
	#CAN_F4R1_FB17_Pos
 (17U)

	)

6773 
	#CAN_F4R1_FB17_Msk
 (0x1UL << 
CAN_F4R1_FB17_Pos
Ë

	)

6774 
	#CAN_F4R1_FB17
 
CAN_F4R1_FB17_Msk


	)

6775 
	#CAN_F4R1_FB18_Pos
 (18U)

	)

6776 
	#CAN_F4R1_FB18_Msk
 (0x1UL << 
CAN_F4R1_FB18_Pos
Ë

	)

6777 
	#CAN_F4R1_FB18
 
CAN_F4R1_FB18_Msk


	)

6778 
	#CAN_F4R1_FB19_Pos
 (19U)

	)

6779 
	#CAN_F4R1_FB19_Msk
 (0x1UL << 
CAN_F4R1_FB19_Pos
Ë

	)

6780 
	#CAN_F4R1_FB19
 
CAN_F4R1_FB19_Msk


	)

6781 
	#CAN_F4R1_FB20_Pos
 (20U)

	)

6782 
	#CAN_F4R1_FB20_Msk
 (0x1UL << 
CAN_F4R1_FB20_Pos
Ë

	)

6783 
	#CAN_F4R1_FB20
 
CAN_F4R1_FB20_Msk


	)

6784 
	#CAN_F4R1_FB21_Pos
 (21U)

	)

6785 
	#CAN_F4R1_FB21_Msk
 (0x1UL << 
CAN_F4R1_FB21_Pos
Ë

	)

6786 
	#CAN_F4R1_FB21
 
CAN_F4R1_FB21_Msk


	)

6787 
	#CAN_F4R1_FB22_Pos
 (22U)

	)

6788 
	#CAN_F4R1_FB22_Msk
 (0x1UL << 
CAN_F4R1_FB22_Pos
Ë

	)

6789 
	#CAN_F4R1_FB22
 
CAN_F4R1_FB22_Msk


	)

6790 
	#CAN_F4R1_FB23_Pos
 (23U)

	)

6791 
	#CAN_F4R1_FB23_Msk
 (0x1UL << 
CAN_F4R1_FB23_Pos
Ë

	)

6792 
	#CAN_F4R1_FB23
 
CAN_F4R1_FB23_Msk


	)

6793 
	#CAN_F4R1_FB24_Pos
 (24U)

	)

6794 
	#CAN_F4R1_FB24_Msk
 (0x1UL << 
CAN_F4R1_FB24_Pos
Ë

	)

6795 
	#CAN_F4R1_FB24
 
CAN_F4R1_FB24_Msk


	)

6796 
	#CAN_F4R1_FB25_Pos
 (25U)

	)

6797 
	#CAN_F4R1_FB25_Msk
 (0x1UL << 
CAN_F4R1_FB25_Pos
Ë

	)

6798 
	#CAN_F4R1_FB25
 
CAN_F4R1_FB25_Msk


	)

6799 
	#CAN_F4R1_FB26_Pos
 (26U)

	)

6800 
	#CAN_F4R1_FB26_Msk
 (0x1UL << 
CAN_F4R1_FB26_Pos
Ë

	)

6801 
	#CAN_F4R1_FB26
 
CAN_F4R1_FB26_Msk


	)

6802 
	#CAN_F4R1_FB27_Pos
 (27U)

	)

6803 
	#CAN_F4R1_FB27_Msk
 (0x1UL << 
CAN_F4R1_FB27_Pos
Ë

	)

6804 
	#CAN_F4R1_FB27
 
CAN_F4R1_FB27_Msk


	)

6805 
	#CAN_F4R1_FB28_Pos
 (28U)

	)

6806 
	#CAN_F4R1_FB28_Msk
 (0x1UL << 
CAN_F4R1_FB28_Pos
Ë

	)

6807 
	#CAN_F4R1_FB28
 
CAN_F4R1_FB28_Msk


	)

6808 
	#CAN_F4R1_FB29_Pos
 (29U)

	)

6809 
	#CAN_F4R1_FB29_Msk
 (0x1UL << 
CAN_F4R1_FB29_Pos
Ë

	)

6810 
	#CAN_F4R1_FB29
 
CAN_F4R1_FB29_Msk


	)

6811 
	#CAN_F4R1_FB30_Pos
 (30U)

	)

6812 
	#CAN_F4R1_FB30_Msk
 (0x1UL << 
CAN_F4R1_FB30_Pos
Ë

	)

6813 
	#CAN_F4R1_FB30
 
CAN_F4R1_FB30_Msk


	)

6814 
	#CAN_F4R1_FB31_Pos
 (31U)

	)

6815 
	#CAN_F4R1_FB31_Msk
 (0x1UL << 
CAN_F4R1_FB31_Pos
Ë

	)

6816 
	#CAN_F4R1_FB31
 
CAN_F4R1_FB31_Msk


	)

6819 
	#CAN_F5R1_FB0_Pos
 (0U)

	)

6820 
	#CAN_F5R1_FB0_Msk
 (0x1UL << 
CAN_F5R1_FB0_Pos
Ë

	)

6821 
	#CAN_F5R1_FB0
 
CAN_F5R1_FB0_Msk


	)

6822 
	#CAN_F5R1_FB1_Pos
 (1U)

	)

6823 
	#CAN_F5R1_FB1_Msk
 (0x1UL << 
CAN_F5R1_FB1_Pos
Ë

	)

6824 
	#CAN_F5R1_FB1
 
CAN_F5R1_FB1_Msk


	)

6825 
	#CAN_F5R1_FB2_Pos
 (2U)

	)

6826 
	#CAN_F5R1_FB2_Msk
 (0x1UL << 
CAN_F5R1_FB2_Pos
Ë

	)

6827 
	#CAN_F5R1_FB2
 
CAN_F5R1_FB2_Msk


	)

6828 
	#CAN_F5R1_FB3_Pos
 (3U)

	)

6829 
	#CAN_F5R1_FB3_Msk
 (0x1UL << 
CAN_F5R1_FB3_Pos
Ë

	)

6830 
	#CAN_F5R1_FB3
 
CAN_F5R1_FB3_Msk


	)

6831 
	#CAN_F5R1_FB4_Pos
 (4U)

	)

6832 
	#CAN_F5R1_FB4_Msk
 (0x1UL << 
CAN_F5R1_FB4_Pos
Ë

	)

6833 
	#CAN_F5R1_FB4
 
CAN_F5R1_FB4_Msk


	)

6834 
	#CAN_F5R1_FB5_Pos
 (5U)

	)

6835 
	#CAN_F5R1_FB5_Msk
 (0x1UL << 
CAN_F5R1_FB5_Pos
Ë

	)

6836 
	#CAN_F5R1_FB5
 
CAN_F5R1_FB5_Msk


	)

6837 
	#CAN_F5R1_FB6_Pos
 (6U)

	)

6838 
	#CAN_F5R1_FB6_Msk
 (0x1UL << 
CAN_F5R1_FB6_Pos
Ë

	)

6839 
	#CAN_F5R1_FB6
 
CAN_F5R1_FB6_Msk


	)

6840 
	#CAN_F5R1_FB7_Pos
 (7U)

	)

6841 
	#CAN_F5R1_FB7_Msk
 (0x1UL << 
CAN_F5R1_FB7_Pos
Ë

	)

6842 
	#CAN_F5R1_FB7
 
CAN_F5R1_FB7_Msk


	)

6843 
	#CAN_F5R1_FB8_Pos
 (8U)

	)

6844 
	#CAN_F5R1_FB8_Msk
 (0x1UL << 
CAN_F5R1_FB8_Pos
Ë

	)

6845 
	#CAN_F5R1_FB8
 
CAN_F5R1_FB8_Msk


	)

6846 
	#CAN_F5R1_FB9_Pos
 (9U)

	)

6847 
	#CAN_F5R1_FB9_Msk
 (0x1UL << 
CAN_F5R1_FB9_Pos
Ë

	)

6848 
	#CAN_F5R1_FB9
 
CAN_F5R1_FB9_Msk


	)

6849 
	#CAN_F5R1_FB10_Pos
 (10U)

	)

6850 
	#CAN_F5R1_FB10_Msk
 (0x1UL << 
CAN_F5R1_FB10_Pos
Ë

	)

6851 
	#CAN_F5R1_FB10
 
CAN_F5R1_FB10_Msk


	)

6852 
	#CAN_F5R1_FB11_Pos
 (11U)

	)

6853 
	#CAN_F5R1_FB11_Msk
 (0x1UL << 
CAN_F5R1_FB11_Pos
Ë

	)

6854 
	#CAN_F5R1_FB11
 
CAN_F5R1_FB11_Msk


	)

6855 
	#CAN_F5R1_FB12_Pos
 (12U)

	)

6856 
	#CAN_F5R1_FB12_Msk
 (0x1UL << 
CAN_F5R1_FB12_Pos
Ë

	)

6857 
	#CAN_F5R1_FB12
 
CAN_F5R1_FB12_Msk


	)

6858 
	#CAN_F5R1_FB13_Pos
 (13U)

	)

6859 
	#CAN_F5R1_FB13_Msk
 (0x1UL << 
CAN_F5R1_FB13_Pos
Ë

	)

6860 
	#CAN_F5R1_FB13
 
CAN_F5R1_FB13_Msk


	)

6861 
	#CAN_F5R1_FB14_Pos
 (14U)

	)

6862 
	#CAN_F5R1_FB14_Msk
 (0x1UL << 
CAN_F5R1_FB14_Pos
Ë

	)

6863 
	#CAN_F5R1_FB14
 
CAN_F5R1_FB14_Msk


	)

6864 
	#CAN_F5R1_FB15_Pos
 (15U)

	)

6865 
	#CAN_F5R1_FB15_Msk
 (0x1UL << 
CAN_F5R1_FB15_Pos
Ë

	)

6866 
	#CAN_F5R1_FB15
 
CAN_F5R1_FB15_Msk


	)

6867 
	#CAN_F5R1_FB16_Pos
 (16U)

	)

6868 
	#CAN_F5R1_FB16_Msk
 (0x1UL << 
CAN_F5R1_FB16_Pos
Ë

	)

6869 
	#CAN_F5R1_FB16
 
CAN_F5R1_FB16_Msk


	)

6870 
	#CAN_F5R1_FB17_Pos
 (17U)

	)

6871 
	#CAN_F5R1_FB17_Msk
 (0x1UL << 
CAN_F5R1_FB17_Pos
Ë

	)

6872 
	#CAN_F5R1_FB17
 
CAN_F5R1_FB17_Msk


	)

6873 
	#CAN_F5R1_FB18_Pos
 (18U)

	)

6874 
	#CAN_F5R1_FB18_Msk
 (0x1UL << 
CAN_F5R1_FB18_Pos
Ë

	)

6875 
	#CAN_F5R1_FB18
 
CAN_F5R1_FB18_Msk


	)

6876 
	#CAN_F5R1_FB19_Pos
 (19U)

	)

6877 
	#CAN_F5R1_FB19_Msk
 (0x1UL << 
CAN_F5R1_FB19_Pos
Ë

	)

6878 
	#CAN_F5R1_FB19
 
CAN_F5R1_FB19_Msk


	)

6879 
	#CAN_F5R1_FB20_Pos
 (20U)

	)

6880 
	#CAN_F5R1_FB20_Msk
 (0x1UL << 
CAN_F5R1_FB20_Pos
Ë

	)

6881 
	#CAN_F5R1_FB20
 
CAN_F5R1_FB20_Msk


	)

6882 
	#CAN_F5R1_FB21_Pos
 (21U)

	)

6883 
	#CAN_F5R1_FB21_Msk
 (0x1UL << 
CAN_F5R1_FB21_Pos
Ë

	)

6884 
	#CAN_F5R1_FB21
 
CAN_F5R1_FB21_Msk


	)

6885 
	#CAN_F5R1_FB22_Pos
 (22U)

	)

6886 
	#CAN_F5R1_FB22_Msk
 (0x1UL << 
CAN_F5R1_FB22_Pos
Ë

	)

6887 
	#CAN_F5R1_FB22
 
CAN_F5R1_FB22_Msk


	)

6888 
	#CAN_F5R1_FB23_Pos
 (23U)

	)

6889 
	#CAN_F5R1_FB23_Msk
 (0x1UL << 
CAN_F5R1_FB23_Pos
Ë

	)

6890 
	#CAN_F5R1_FB23
 
CAN_F5R1_FB23_Msk


	)

6891 
	#CAN_F5R1_FB24_Pos
 (24U)

	)

6892 
	#CAN_F5R1_FB24_Msk
 (0x1UL << 
CAN_F5R1_FB24_Pos
Ë

	)

6893 
	#CAN_F5R1_FB24
 
CAN_F5R1_FB24_Msk


	)

6894 
	#CAN_F5R1_FB25_Pos
 (25U)

	)

6895 
	#CAN_F5R1_FB25_Msk
 (0x1UL << 
CAN_F5R1_FB25_Pos
Ë

	)

6896 
	#CAN_F5R1_FB25
 
CAN_F5R1_FB25_Msk


	)

6897 
	#CAN_F5R1_FB26_Pos
 (26U)

	)

6898 
	#CAN_F5R1_FB26_Msk
 (0x1UL << 
CAN_F5R1_FB26_Pos
Ë

	)

6899 
	#CAN_F5R1_FB26
 
CAN_F5R1_FB26_Msk


	)

6900 
	#CAN_F5R1_FB27_Pos
 (27U)

	)

6901 
	#CAN_F5R1_FB27_Msk
 (0x1UL << 
CAN_F5R1_FB27_Pos
Ë

	)

6902 
	#CAN_F5R1_FB27
 
CAN_F5R1_FB27_Msk


	)

6903 
	#CAN_F5R1_FB28_Pos
 (28U)

	)

6904 
	#CAN_F5R1_FB28_Msk
 (0x1UL << 
CAN_F5R1_FB28_Pos
Ë

	)

6905 
	#CAN_F5R1_FB28
 
CAN_F5R1_FB28_Msk


	)

6906 
	#CAN_F5R1_FB29_Pos
 (29U)

	)

6907 
	#CAN_F5R1_FB29_Msk
 (0x1UL << 
CAN_F5R1_FB29_Pos
Ë

	)

6908 
	#CAN_F5R1_FB29
 
CAN_F5R1_FB29_Msk


	)

6909 
	#CAN_F5R1_FB30_Pos
 (30U)

	)

6910 
	#CAN_F5R1_FB30_Msk
 (0x1UL << 
CAN_F5R1_FB30_Pos
Ë

	)

6911 
	#CAN_F5R1_FB30
 
CAN_F5R1_FB30_Msk


	)

6912 
	#CAN_F5R1_FB31_Pos
 (31U)

	)

6913 
	#CAN_F5R1_FB31_Msk
 (0x1UL << 
CAN_F5R1_FB31_Pos
Ë

	)

6914 
	#CAN_F5R1_FB31
 
CAN_F5R1_FB31_Msk


	)

6917 
	#CAN_F6R1_FB0_Pos
 (0U)

	)

6918 
	#CAN_F6R1_FB0_Msk
 (0x1UL << 
CAN_F6R1_FB0_Pos
Ë

	)

6919 
	#CAN_F6R1_FB0
 
CAN_F6R1_FB0_Msk


	)

6920 
	#CAN_F6R1_FB1_Pos
 (1U)

	)

6921 
	#CAN_F6R1_FB1_Msk
 (0x1UL << 
CAN_F6R1_FB1_Pos
Ë

	)

6922 
	#CAN_F6R1_FB1
 
CAN_F6R1_FB1_Msk


	)

6923 
	#CAN_F6R1_FB2_Pos
 (2U)

	)

6924 
	#CAN_F6R1_FB2_Msk
 (0x1UL << 
CAN_F6R1_FB2_Pos
Ë

	)

6925 
	#CAN_F6R1_FB2
 
CAN_F6R1_FB2_Msk


	)

6926 
	#CAN_F6R1_FB3_Pos
 (3U)

	)

6927 
	#CAN_F6R1_FB3_Msk
 (0x1UL << 
CAN_F6R1_FB3_Pos
Ë

	)

6928 
	#CAN_F6R1_FB3
 
CAN_F6R1_FB3_Msk


	)

6929 
	#CAN_F6R1_FB4_Pos
 (4U)

	)

6930 
	#CAN_F6R1_FB4_Msk
 (0x1UL << 
CAN_F6R1_FB4_Pos
Ë

	)

6931 
	#CAN_F6R1_FB4
 
CAN_F6R1_FB4_Msk


	)

6932 
	#CAN_F6R1_FB5_Pos
 (5U)

	)

6933 
	#CAN_F6R1_FB5_Msk
 (0x1UL << 
CAN_F6R1_FB5_Pos
Ë

	)

6934 
	#CAN_F6R1_FB5
 
CAN_F6R1_FB5_Msk


	)

6935 
	#CAN_F6R1_FB6_Pos
 (6U)

	)

6936 
	#CAN_F6R1_FB6_Msk
 (0x1UL << 
CAN_F6R1_FB6_Pos
Ë

	)

6937 
	#CAN_F6R1_FB6
 
CAN_F6R1_FB6_Msk


	)

6938 
	#CAN_F6R1_FB7_Pos
 (7U)

	)

6939 
	#CAN_F6R1_FB7_Msk
 (0x1UL << 
CAN_F6R1_FB7_Pos
Ë

	)

6940 
	#CAN_F6R1_FB7
 
CAN_F6R1_FB7_Msk


	)

6941 
	#CAN_F6R1_FB8_Pos
 (8U)

	)

6942 
	#CAN_F6R1_FB8_Msk
 (0x1UL << 
CAN_F6R1_FB8_Pos
Ë

	)

6943 
	#CAN_F6R1_FB8
 
CAN_F6R1_FB8_Msk


	)

6944 
	#CAN_F6R1_FB9_Pos
 (9U)

	)

6945 
	#CAN_F6R1_FB9_Msk
 (0x1UL << 
CAN_F6R1_FB9_Pos
Ë

	)

6946 
	#CAN_F6R1_FB9
 
CAN_F6R1_FB9_Msk


	)

6947 
	#CAN_F6R1_FB10_Pos
 (10U)

	)

6948 
	#CAN_F6R1_FB10_Msk
 (0x1UL << 
CAN_F6R1_FB10_Pos
Ë

	)

6949 
	#CAN_F6R1_FB10
 
CAN_F6R1_FB10_Msk


	)

6950 
	#CAN_F6R1_FB11_Pos
 (11U)

	)

6951 
	#CAN_F6R1_FB11_Msk
 (0x1UL << 
CAN_F6R1_FB11_Pos
Ë

	)

6952 
	#CAN_F6R1_FB11
 
CAN_F6R1_FB11_Msk


	)

6953 
	#CAN_F6R1_FB12_Pos
 (12U)

	)

6954 
	#CAN_F6R1_FB12_Msk
 (0x1UL << 
CAN_F6R1_FB12_Pos
Ë

	)

6955 
	#CAN_F6R1_FB12
 
CAN_F6R1_FB12_Msk


	)

6956 
	#CAN_F6R1_FB13_Pos
 (13U)

	)

6957 
	#CAN_F6R1_FB13_Msk
 (0x1UL << 
CAN_F6R1_FB13_Pos
Ë

	)

6958 
	#CAN_F6R1_FB13
 
CAN_F6R1_FB13_Msk


	)

6959 
	#CAN_F6R1_FB14_Pos
 (14U)

	)

6960 
	#CAN_F6R1_FB14_Msk
 (0x1UL << 
CAN_F6R1_FB14_Pos
Ë

	)

6961 
	#CAN_F6R1_FB14
 
CAN_F6R1_FB14_Msk


	)

6962 
	#CAN_F6R1_FB15_Pos
 (15U)

	)

6963 
	#CAN_F6R1_FB15_Msk
 (0x1UL << 
CAN_F6R1_FB15_Pos
Ë

	)

6964 
	#CAN_F6R1_FB15
 
CAN_F6R1_FB15_Msk


	)

6965 
	#CAN_F6R1_FB16_Pos
 (16U)

	)

6966 
	#CAN_F6R1_FB16_Msk
 (0x1UL << 
CAN_F6R1_FB16_Pos
Ë

	)

6967 
	#CAN_F6R1_FB16
 
CAN_F6R1_FB16_Msk


	)

6968 
	#CAN_F6R1_FB17_Pos
 (17U)

	)

6969 
	#CAN_F6R1_FB17_Msk
 (0x1UL << 
CAN_F6R1_FB17_Pos
Ë

	)

6970 
	#CAN_F6R1_FB17
 
CAN_F6R1_FB17_Msk


	)

6971 
	#CAN_F6R1_FB18_Pos
 (18U)

	)

6972 
	#CAN_F6R1_FB18_Msk
 (0x1UL << 
CAN_F6R1_FB18_Pos
Ë

	)

6973 
	#CAN_F6R1_FB18
 
CAN_F6R1_FB18_Msk


	)

6974 
	#CAN_F6R1_FB19_Pos
 (19U)

	)

6975 
	#CAN_F6R1_FB19_Msk
 (0x1UL << 
CAN_F6R1_FB19_Pos
Ë

	)

6976 
	#CAN_F6R1_FB19
 
CAN_F6R1_FB19_Msk


	)

6977 
	#CAN_F6R1_FB20_Pos
 (20U)

	)

6978 
	#CAN_F6R1_FB20_Msk
 (0x1UL << 
CAN_F6R1_FB20_Pos
Ë

	)

6979 
	#CAN_F6R1_FB20
 
CAN_F6R1_FB20_Msk


	)

6980 
	#CAN_F6R1_FB21_Pos
 (21U)

	)

6981 
	#CAN_F6R1_FB21_Msk
 (0x1UL << 
CAN_F6R1_FB21_Pos
Ë

	)

6982 
	#CAN_F6R1_FB21
 
CAN_F6R1_FB21_Msk


	)

6983 
	#CAN_F6R1_FB22_Pos
 (22U)

	)

6984 
	#CAN_F6R1_FB22_Msk
 (0x1UL << 
CAN_F6R1_FB22_Pos
Ë

	)

6985 
	#CAN_F6R1_FB22
 
CAN_F6R1_FB22_Msk


	)

6986 
	#CAN_F6R1_FB23_Pos
 (23U)

	)

6987 
	#CAN_F6R1_FB23_Msk
 (0x1UL << 
CAN_F6R1_FB23_Pos
Ë

	)

6988 
	#CAN_F6R1_FB23
 
CAN_F6R1_FB23_Msk


	)

6989 
	#CAN_F6R1_FB24_Pos
 (24U)

	)

6990 
	#CAN_F6R1_FB24_Msk
 (0x1UL << 
CAN_F6R1_FB24_Pos
Ë

	)

6991 
	#CAN_F6R1_FB24
 
CAN_F6R1_FB24_Msk


	)

6992 
	#CAN_F6R1_FB25_Pos
 (25U)

	)

6993 
	#CAN_F6R1_FB25_Msk
 (0x1UL << 
CAN_F6R1_FB25_Pos
Ë

	)

6994 
	#CAN_F6R1_FB25
 
CAN_F6R1_FB25_Msk


	)

6995 
	#CAN_F6R1_FB26_Pos
 (26U)

	)

6996 
	#CAN_F6R1_FB26_Msk
 (0x1UL << 
CAN_F6R1_FB26_Pos
Ë

	)

6997 
	#CAN_F6R1_FB26
 
CAN_F6R1_FB26_Msk


	)

6998 
	#CAN_F6R1_FB27_Pos
 (27U)

	)

6999 
	#CAN_F6R1_FB27_Msk
 (0x1UL << 
CAN_F6R1_FB27_Pos
Ë

	)

7000 
	#CAN_F6R1_FB27
 
CAN_F6R1_FB27_Msk


	)

7001 
	#CAN_F6R1_FB28_Pos
 (28U)

	)

7002 
	#CAN_F6R1_FB28_Msk
 (0x1UL << 
CAN_F6R1_FB28_Pos
Ë

	)

7003 
	#CAN_F6R1_FB28
 
CAN_F6R1_FB28_Msk


	)

7004 
	#CAN_F6R1_FB29_Pos
 (29U)

	)

7005 
	#CAN_F6R1_FB29_Msk
 (0x1UL << 
CAN_F6R1_FB29_Pos
Ë

	)

7006 
	#CAN_F6R1_FB29
 
CAN_F6R1_FB29_Msk


	)

7007 
	#CAN_F6R1_FB30_Pos
 (30U)

	)

7008 
	#CAN_F6R1_FB30_Msk
 (0x1UL << 
CAN_F6R1_FB30_Pos
Ë

	)

7009 
	#CAN_F6R1_FB30
 
CAN_F6R1_FB30_Msk


	)

7010 
	#CAN_F6R1_FB31_Pos
 (31U)

	)

7011 
	#CAN_F6R1_FB31_Msk
 (0x1UL << 
CAN_F6R1_FB31_Pos
Ë

	)

7012 
	#CAN_F6R1_FB31
 
CAN_F6R1_FB31_Msk


	)

7015 
	#CAN_F7R1_FB0_Pos
 (0U)

	)

7016 
	#CAN_F7R1_FB0_Msk
 (0x1UL << 
CAN_F7R1_FB0_Pos
Ë

	)

7017 
	#CAN_F7R1_FB0
 
CAN_F7R1_FB0_Msk


	)

7018 
	#CAN_F7R1_FB1_Pos
 (1U)

	)

7019 
	#CAN_F7R1_FB1_Msk
 (0x1UL << 
CAN_F7R1_FB1_Pos
Ë

	)

7020 
	#CAN_F7R1_FB1
 
CAN_F7R1_FB1_Msk


	)

7021 
	#CAN_F7R1_FB2_Pos
 (2U)

	)

7022 
	#CAN_F7R1_FB2_Msk
 (0x1UL << 
CAN_F7R1_FB2_Pos
Ë

	)

7023 
	#CAN_F7R1_FB2
 
CAN_F7R1_FB2_Msk


	)

7024 
	#CAN_F7R1_FB3_Pos
 (3U)

	)

7025 
	#CAN_F7R1_FB3_Msk
 (0x1UL << 
CAN_F7R1_FB3_Pos
Ë

	)

7026 
	#CAN_F7R1_FB3
 
CAN_F7R1_FB3_Msk


	)

7027 
	#CAN_F7R1_FB4_Pos
 (4U)

	)

7028 
	#CAN_F7R1_FB4_Msk
 (0x1UL << 
CAN_F7R1_FB4_Pos
Ë

	)

7029 
	#CAN_F7R1_FB4
 
CAN_F7R1_FB4_Msk


	)

7030 
	#CAN_F7R1_FB5_Pos
 (5U)

	)

7031 
	#CAN_F7R1_FB5_Msk
 (0x1UL << 
CAN_F7R1_FB5_Pos
Ë

	)

7032 
	#CAN_F7R1_FB5
 
CAN_F7R1_FB5_Msk


	)

7033 
	#CAN_F7R1_FB6_Pos
 (6U)

	)

7034 
	#CAN_F7R1_FB6_Msk
 (0x1UL << 
CAN_F7R1_FB6_Pos
Ë

	)

7035 
	#CAN_F7R1_FB6
 
CAN_F7R1_FB6_Msk


	)

7036 
	#CAN_F7R1_FB7_Pos
 (7U)

	)

7037 
	#CAN_F7R1_FB7_Msk
 (0x1UL << 
CAN_F7R1_FB7_Pos
Ë

	)

7038 
	#CAN_F7R1_FB7
 
CAN_F7R1_FB7_Msk


	)

7039 
	#CAN_F7R1_FB8_Pos
 (8U)

	)

7040 
	#CAN_F7R1_FB8_Msk
 (0x1UL << 
CAN_F7R1_FB8_Pos
Ë

	)

7041 
	#CAN_F7R1_FB8
 
CAN_F7R1_FB8_Msk


	)

7042 
	#CAN_F7R1_FB9_Pos
 (9U)

	)

7043 
	#CAN_F7R1_FB9_Msk
 (0x1UL << 
CAN_F7R1_FB9_Pos
Ë

	)

7044 
	#CAN_F7R1_FB9
 
CAN_F7R1_FB9_Msk


	)

7045 
	#CAN_F7R1_FB10_Pos
 (10U)

	)

7046 
	#CAN_F7R1_FB10_Msk
 (0x1UL << 
CAN_F7R1_FB10_Pos
Ë

	)

7047 
	#CAN_F7R1_FB10
 
CAN_F7R1_FB10_Msk


	)

7048 
	#CAN_F7R1_FB11_Pos
 (11U)

	)

7049 
	#CAN_F7R1_FB11_Msk
 (0x1UL << 
CAN_F7R1_FB11_Pos
Ë

	)

7050 
	#CAN_F7R1_FB11
 
CAN_F7R1_FB11_Msk


	)

7051 
	#CAN_F7R1_FB12_Pos
 (12U)

	)

7052 
	#CAN_F7R1_FB12_Msk
 (0x1UL << 
CAN_F7R1_FB12_Pos
Ë

	)

7053 
	#CAN_F7R1_FB12
 
CAN_F7R1_FB12_Msk


	)

7054 
	#CAN_F7R1_FB13_Pos
 (13U)

	)

7055 
	#CAN_F7R1_FB13_Msk
 (0x1UL << 
CAN_F7R1_FB13_Pos
Ë

	)

7056 
	#CAN_F7R1_FB13
 
CAN_F7R1_FB13_Msk


	)

7057 
	#CAN_F7R1_FB14_Pos
 (14U)

	)

7058 
	#CAN_F7R1_FB14_Msk
 (0x1UL << 
CAN_F7R1_FB14_Pos
Ë

	)

7059 
	#CAN_F7R1_FB14
 
CAN_F7R1_FB14_Msk


	)

7060 
	#CAN_F7R1_FB15_Pos
 (15U)

	)

7061 
	#CAN_F7R1_FB15_Msk
 (0x1UL << 
CAN_F7R1_FB15_Pos
Ë

	)

7062 
	#CAN_F7R1_FB15
 
CAN_F7R1_FB15_Msk


	)

7063 
	#CAN_F7R1_FB16_Pos
 (16U)

	)

7064 
	#CAN_F7R1_FB16_Msk
 (0x1UL << 
CAN_F7R1_FB16_Pos
Ë

	)

7065 
	#CAN_F7R1_FB16
 
CAN_F7R1_FB16_Msk


	)

7066 
	#CAN_F7R1_FB17_Pos
 (17U)

	)

7067 
	#CAN_F7R1_FB17_Msk
 (0x1UL << 
CAN_F7R1_FB17_Pos
Ë

	)

7068 
	#CAN_F7R1_FB17
 
CAN_F7R1_FB17_Msk


	)

7069 
	#CAN_F7R1_FB18_Pos
 (18U)

	)

7070 
	#CAN_F7R1_FB18_Msk
 (0x1UL << 
CAN_F7R1_FB18_Pos
Ë

	)

7071 
	#CAN_F7R1_FB18
 
CAN_F7R1_FB18_Msk


	)

7072 
	#CAN_F7R1_FB19_Pos
 (19U)

	)

7073 
	#CAN_F7R1_FB19_Msk
 (0x1UL << 
CAN_F7R1_FB19_Pos
Ë

	)

7074 
	#CAN_F7R1_FB19
 
CAN_F7R1_FB19_Msk


	)

7075 
	#CAN_F7R1_FB20_Pos
 (20U)

	)

7076 
	#CAN_F7R1_FB20_Msk
 (0x1UL << 
CAN_F7R1_FB20_Pos
Ë

	)

7077 
	#CAN_F7R1_FB20
 
CAN_F7R1_FB20_Msk


	)

7078 
	#CAN_F7R1_FB21_Pos
 (21U)

	)

7079 
	#CAN_F7R1_FB21_Msk
 (0x1UL << 
CAN_F7R1_FB21_Pos
Ë

	)

7080 
	#CAN_F7R1_FB21
 
CAN_F7R1_FB21_Msk


	)

7081 
	#CAN_F7R1_FB22_Pos
 (22U)

	)

7082 
	#CAN_F7R1_FB22_Msk
 (0x1UL << 
CAN_F7R1_FB22_Pos
Ë

	)

7083 
	#CAN_F7R1_FB22
 
CAN_F7R1_FB22_Msk


	)

7084 
	#CAN_F7R1_FB23_Pos
 (23U)

	)

7085 
	#CAN_F7R1_FB23_Msk
 (0x1UL << 
CAN_F7R1_FB23_Pos
Ë

	)

7086 
	#CAN_F7R1_FB23
 
CAN_F7R1_FB23_Msk


	)

7087 
	#CAN_F7R1_FB24_Pos
 (24U)

	)

7088 
	#CAN_F7R1_FB24_Msk
 (0x1UL << 
CAN_F7R1_FB24_Pos
Ë

	)

7089 
	#CAN_F7R1_FB24
 
CAN_F7R1_FB24_Msk


	)

7090 
	#CAN_F7R1_FB25_Pos
 (25U)

	)

7091 
	#CAN_F7R1_FB25_Msk
 (0x1UL << 
CAN_F7R1_FB25_Pos
Ë

	)

7092 
	#CAN_F7R1_FB25
 
CAN_F7R1_FB25_Msk


	)

7093 
	#CAN_F7R1_FB26_Pos
 (26U)

	)

7094 
	#CAN_F7R1_FB26_Msk
 (0x1UL << 
CAN_F7R1_FB26_Pos
Ë

	)

7095 
	#CAN_F7R1_FB26
 
CAN_F7R1_FB26_Msk


	)

7096 
	#CAN_F7R1_FB27_Pos
 (27U)

	)

7097 
	#CAN_F7R1_FB27_Msk
 (0x1UL << 
CAN_F7R1_FB27_Pos
Ë

	)

7098 
	#CAN_F7R1_FB27
 
CAN_F7R1_FB27_Msk


	)

7099 
	#CAN_F7R1_FB28_Pos
 (28U)

	)

7100 
	#CAN_F7R1_FB28_Msk
 (0x1UL << 
CAN_F7R1_FB28_Pos
Ë

	)

7101 
	#CAN_F7R1_FB28
 
CAN_F7R1_FB28_Msk


	)

7102 
	#CAN_F7R1_FB29_Pos
 (29U)

	)

7103 
	#CAN_F7R1_FB29_Msk
 (0x1UL << 
CAN_F7R1_FB29_Pos
Ë

	)

7104 
	#CAN_F7R1_FB29
 
CAN_F7R1_FB29_Msk


	)

7105 
	#CAN_F7R1_FB30_Pos
 (30U)

	)

7106 
	#CAN_F7R1_FB30_Msk
 (0x1UL << 
CAN_F7R1_FB30_Pos
Ë

	)

7107 
	#CAN_F7R1_FB30
 
CAN_F7R1_FB30_Msk


	)

7108 
	#CAN_F7R1_FB31_Pos
 (31U)

	)

7109 
	#CAN_F7R1_FB31_Msk
 (0x1UL << 
CAN_F7R1_FB31_Pos
Ë

	)

7110 
	#CAN_F7R1_FB31
 
CAN_F7R1_FB31_Msk


	)

7113 
	#CAN_F8R1_FB0_Pos
 (0U)

	)

7114 
	#CAN_F8R1_FB0_Msk
 (0x1UL << 
CAN_F8R1_FB0_Pos
Ë

	)

7115 
	#CAN_F8R1_FB0
 
CAN_F8R1_FB0_Msk


	)

7116 
	#CAN_F8R1_FB1_Pos
 (1U)

	)

7117 
	#CAN_F8R1_FB1_Msk
 (0x1UL << 
CAN_F8R1_FB1_Pos
Ë

	)

7118 
	#CAN_F8R1_FB1
 
CAN_F8R1_FB1_Msk


	)

7119 
	#CAN_F8R1_FB2_Pos
 (2U)

	)

7120 
	#CAN_F8R1_FB2_Msk
 (0x1UL << 
CAN_F8R1_FB2_Pos
Ë

	)

7121 
	#CAN_F8R1_FB2
 
CAN_F8R1_FB2_Msk


	)

7122 
	#CAN_F8R1_FB3_Pos
 (3U)

	)

7123 
	#CAN_F8R1_FB3_Msk
 (0x1UL << 
CAN_F8R1_FB3_Pos
Ë

	)

7124 
	#CAN_F8R1_FB3
 
CAN_F8R1_FB3_Msk


	)

7125 
	#CAN_F8R1_FB4_Pos
 (4U)

	)

7126 
	#CAN_F8R1_FB4_Msk
 (0x1UL << 
CAN_F8R1_FB4_Pos
Ë

	)

7127 
	#CAN_F8R1_FB4
 
CAN_F8R1_FB4_Msk


	)

7128 
	#CAN_F8R1_FB5_Pos
 (5U)

	)

7129 
	#CAN_F8R1_FB5_Msk
 (0x1UL << 
CAN_F8R1_FB5_Pos
Ë

	)

7130 
	#CAN_F8R1_FB5
 
CAN_F8R1_FB5_Msk


	)

7131 
	#CAN_F8R1_FB6_Pos
 (6U)

	)

7132 
	#CAN_F8R1_FB6_Msk
 (0x1UL << 
CAN_F8R1_FB6_Pos
Ë

	)

7133 
	#CAN_F8R1_FB6
 
CAN_F8R1_FB6_Msk


	)

7134 
	#CAN_F8R1_FB7_Pos
 (7U)

	)

7135 
	#CAN_F8R1_FB7_Msk
 (0x1UL << 
CAN_F8R1_FB7_Pos
Ë

	)

7136 
	#CAN_F8R1_FB7
 
CAN_F8R1_FB7_Msk


	)

7137 
	#CAN_F8R1_FB8_Pos
 (8U)

	)

7138 
	#CAN_F8R1_FB8_Msk
 (0x1UL << 
CAN_F8R1_FB8_Pos
Ë

	)

7139 
	#CAN_F8R1_FB8
 
CAN_F8R1_FB8_Msk


	)

7140 
	#CAN_F8R1_FB9_Pos
 (9U)

	)

7141 
	#CAN_F8R1_FB9_Msk
 (0x1UL << 
CAN_F8R1_FB9_Pos
Ë

	)

7142 
	#CAN_F8R1_FB9
 
CAN_F8R1_FB9_Msk


	)

7143 
	#CAN_F8R1_FB10_Pos
 (10U)

	)

7144 
	#CAN_F8R1_FB10_Msk
 (0x1UL << 
CAN_F8R1_FB10_Pos
Ë

	)

7145 
	#CAN_F8R1_FB10
 
CAN_F8R1_FB10_Msk


	)

7146 
	#CAN_F8R1_FB11_Pos
 (11U)

	)

7147 
	#CAN_F8R1_FB11_Msk
 (0x1UL << 
CAN_F8R1_FB11_Pos
Ë

	)

7148 
	#CAN_F8R1_FB11
 
CAN_F8R1_FB11_Msk


	)

7149 
	#CAN_F8R1_FB12_Pos
 (12U)

	)

7150 
	#CAN_F8R1_FB12_Msk
 (0x1UL << 
CAN_F8R1_FB12_Pos
Ë

	)

7151 
	#CAN_F8R1_FB12
 
CAN_F8R1_FB12_Msk


	)

7152 
	#CAN_F8R1_FB13_Pos
 (13U)

	)

7153 
	#CAN_F8R1_FB13_Msk
 (0x1UL << 
CAN_F8R1_FB13_Pos
Ë

	)

7154 
	#CAN_F8R1_FB13
 
CAN_F8R1_FB13_Msk


	)

7155 
	#CAN_F8R1_FB14_Pos
 (14U)

	)

7156 
	#CAN_F8R1_FB14_Msk
 (0x1UL << 
CAN_F8R1_FB14_Pos
Ë

	)

7157 
	#CAN_F8R1_FB14
 
CAN_F8R1_FB14_Msk


	)

7158 
	#CAN_F8R1_FB15_Pos
 (15U)

	)

7159 
	#CAN_F8R1_FB15_Msk
 (0x1UL << 
CAN_F8R1_FB15_Pos
Ë

	)

7160 
	#CAN_F8R1_FB15
 
CAN_F8R1_FB15_Msk


	)

7161 
	#CAN_F8R1_FB16_Pos
 (16U)

	)

7162 
	#CAN_F8R1_FB16_Msk
 (0x1UL << 
CAN_F8R1_FB16_Pos
Ë

	)

7163 
	#CAN_F8R1_FB16
 
CAN_F8R1_FB16_Msk


	)

7164 
	#CAN_F8R1_FB17_Pos
 (17U)

	)

7165 
	#CAN_F8R1_FB17_Msk
 (0x1UL << 
CAN_F8R1_FB17_Pos
Ë

	)

7166 
	#CAN_F8R1_FB17
 
CAN_F8R1_FB17_Msk


	)

7167 
	#CAN_F8R1_FB18_Pos
 (18U)

	)

7168 
	#CAN_F8R1_FB18_Msk
 (0x1UL << 
CAN_F8R1_FB18_Pos
Ë

	)

7169 
	#CAN_F8R1_FB18
 
CAN_F8R1_FB18_Msk


	)

7170 
	#CAN_F8R1_FB19_Pos
 (19U)

	)

7171 
	#CAN_F8R1_FB19_Msk
 (0x1UL << 
CAN_F8R1_FB19_Pos
Ë

	)

7172 
	#CAN_F8R1_FB19
 
CAN_F8R1_FB19_Msk


	)

7173 
	#CAN_F8R1_FB20_Pos
 (20U)

	)

7174 
	#CAN_F8R1_FB20_Msk
 (0x1UL << 
CAN_F8R1_FB20_Pos
Ë

	)

7175 
	#CAN_F8R1_FB20
 
CAN_F8R1_FB20_Msk


	)

7176 
	#CAN_F8R1_FB21_Pos
 (21U)

	)

7177 
	#CAN_F8R1_FB21_Msk
 (0x1UL << 
CAN_F8R1_FB21_Pos
Ë

	)

7178 
	#CAN_F8R1_FB21
 
CAN_F8R1_FB21_Msk


	)

7179 
	#CAN_F8R1_FB22_Pos
 (22U)

	)

7180 
	#CAN_F8R1_FB22_Msk
 (0x1UL << 
CAN_F8R1_FB22_Pos
Ë

	)

7181 
	#CAN_F8R1_FB22
 
CAN_F8R1_FB22_Msk


	)

7182 
	#CAN_F8R1_FB23_Pos
 (23U)

	)

7183 
	#CAN_F8R1_FB23_Msk
 (0x1UL << 
CAN_F8R1_FB23_Pos
Ë

	)

7184 
	#CAN_F8R1_FB23
 
CAN_F8R1_FB23_Msk


	)

7185 
	#CAN_F8R1_FB24_Pos
 (24U)

	)

7186 
	#CAN_F8R1_FB24_Msk
 (0x1UL << 
CAN_F8R1_FB24_Pos
Ë

	)

7187 
	#CAN_F8R1_FB24
 
CAN_F8R1_FB24_Msk


	)

7188 
	#CAN_F8R1_FB25_Pos
 (25U)

	)

7189 
	#CAN_F8R1_FB25_Msk
 (0x1UL << 
CAN_F8R1_FB25_Pos
Ë

	)

7190 
	#CAN_F8R1_FB25
 
CAN_F8R1_FB25_Msk


	)

7191 
	#CAN_F8R1_FB26_Pos
 (26U)

	)

7192 
	#CAN_F8R1_FB26_Msk
 (0x1UL << 
CAN_F8R1_FB26_Pos
Ë

	)

7193 
	#CAN_F8R1_FB26
 
CAN_F8R1_FB26_Msk


	)

7194 
	#CAN_F8R1_FB27_Pos
 (27U)

	)

7195 
	#CAN_F8R1_FB27_Msk
 (0x1UL << 
CAN_F8R1_FB27_Pos
Ë

	)

7196 
	#CAN_F8R1_FB27
 
CAN_F8R1_FB27_Msk


	)

7197 
	#CAN_F8R1_FB28_Pos
 (28U)

	)

7198 
	#CAN_F8R1_FB28_Msk
 (0x1UL << 
CAN_F8R1_FB28_Pos
Ë

	)

7199 
	#CAN_F8R1_FB28
 
CAN_F8R1_FB28_Msk


	)

7200 
	#CAN_F8R1_FB29_Pos
 (29U)

	)

7201 
	#CAN_F8R1_FB29_Msk
 (0x1UL << 
CAN_F8R1_FB29_Pos
Ë

	)

7202 
	#CAN_F8R1_FB29
 
CAN_F8R1_FB29_Msk


	)

7203 
	#CAN_F8R1_FB30_Pos
 (30U)

	)

7204 
	#CAN_F8R1_FB30_Msk
 (0x1UL << 
CAN_F8R1_FB30_Pos
Ë

	)

7205 
	#CAN_F8R1_FB30
 
CAN_F8R1_FB30_Msk


	)

7206 
	#CAN_F8R1_FB31_Pos
 (31U)

	)

7207 
	#CAN_F8R1_FB31_Msk
 (0x1UL << 
CAN_F8R1_FB31_Pos
Ë

	)

7208 
	#CAN_F8R1_FB31
 
CAN_F8R1_FB31_Msk


	)

7211 
	#CAN_F9R1_FB0_Pos
 (0U)

	)

7212 
	#CAN_F9R1_FB0_Msk
 (0x1UL << 
CAN_F9R1_FB0_Pos
Ë

	)

7213 
	#CAN_F9R1_FB0
 
CAN_F9R1_FB0_Msk


	)

7214 
	#CAN_F9R1_FB1_Pos
 (1U)

	)

7215 
	#CAN_F9R1_FB1_Msk
 (0x1UL << 
CAN_F9R1_FB1_Pos
Ë

	)

7216 
	#CAN_F9R1_FB1
 
CAN_F9R1_FB1_Msk


	)

7217 
	#CAN_F9R1_FB2_Pos
 (2U)

	)

7218 
	#CAN_F9R1_FB2_Msk
 (0x1UL << 
CAN_F9R1_FB2_Pos
Ë

	)

7219 
	#CAN_F9R1_FB2
 
CAN_F9R1_FB2_Msk


	)

7220 
	#CAN_F9R1_FB3_Pos
 (3U)

	)

7221 
	#CAN_F9R1_FB3_Msk
 (0x1UL << 
CAN_F9R1_FB3_Pos
Ë

	)

7222 
	#CAN_F9R1_FB3
 
CAN_F9R1_FB3_Msk


	)

7223 
	#CAN_F9R1_FB4_Pos
 (4U)

	)

7224 
	#CAN_F9R1_FB4_Msk
 (0x1UL << 
CAN_F9R1_FB4_Pos
Ë

	)

7225 
	#CAN_F9R1_FB4
 
CAN_F9R1_FB4_Msk


	)

7226 
	#CAN_F9R1_FB5_Pos
 (5U)

	)

7227 
	#CAN_F9R1_FB5_Msk
 (0x1UL << 
CAN_F9R1_FB5_Pos
Ë

	)

7228 
	#CAN_F9R1_FB5
 
CAN_F9R1_FB5_Msk


	)

7229 
	#CAN_F9R1_FB6_Pos
 (6U)

	)

7230 
	#CAN_F9R1_FB6_Msk
 (0x1UL << 
CAN_F9R1_FB6_Pos
Ë

	)

7231 
	#CAN_F9R1_FB6
 
CAN_F9R1_FB6_Msk


	)

7232 
	#CAN_F9R1_FB7_Pos
 (7U)

	)

7233 
	#CAN_F9R1_FB7_Msk
 (0x1UL << 
CAN_F9R1_FB7_Pos
Ë

	)

7234 
	#CAN_F9R1_FB7
 
CAN_F9R1_FB7_Msk


	)

7235 
	#CAN_F9R1_FB8_Pos
 (8U)

	)

7236 
	#CAN_F9R1_FB8_Msk
 (0x1UL << 
CAN_F9R1_FB8_Pos
Ë

	)

7237 
	#CAN_F9R1_FB8
 
CAN_F9R1_FB8_Msk


	)

7238 
	#CAN_F9R1_FB9_Pos
 (9U)

	)

7239 
	#CAN_F9R1_FB9_Msk
 (0x1UL << 
CAN_F9R1_FB9_Pos
Ë

	)

7240 
	#CAN_F9R1_FB9
 
CAN_F9R1_FB9_Msk


	)

7241 
	#CAN_F9R1_FB10_Pos
 (10U)

	)

7242 
	#CAN_F9R1_FB10_Msk
 (0x1UL << 
CAN_F9R1_FB10_Pos
Ë

	)

7243 
	#CAN_F9R1_FB10
 
CAN_F9R1_FB10_Msk


	)

7244 
	#CAN_F9R1_FB11_Pos
 (11U)

	)

7245 
	#CAN_F9R1_FB11_Msk
 (0x1UL << 
CAN_F9R1_FB11_Pos
Ë

	)

7246 
	#CAN_F9R1_FB11
 
CAN_F9R1_FB11_Msk


	)

7247 
	#CAN_F9R1_FB12_Pos
 (12U)

	)

7248 
	#CAN_F9R1_FB12_Msk
 (0x1UL << 
CAN_F9R1_FB12_Pos
Ë

	)

7249 
	#CAN_F9R1_FB12
 
CAN_F9R1_FB12_Msk


	)

7250 
	#CAN_F9R1_FB13_Pos
 (13U)

	)

7251 
	#CAN_F9R1_FB13_Msk
 (0x1UL << 
CAN_F9R1_FB13_Pos
Ë

	)

7252 
	#CAN_F9R1_FB13
 
CAN_F9R1_FB13_Msk


	)

7253 
	#CAN_F9R1_FB14_Pos
 (14U)

	)

7254 
	#CAN_F9R1_FB14_Msk
 (0x1UL << 
CAN_F9R1_FB14_Pos
Ë

	)

7255 
	#CAN_F9R1_FB14
 
CAN_F9R1_FB14_Msk


	)

7256 
	#CAN_F9R1_FB15_Pos
 (15U)

	)

7257 
	#CAN_F9R1_FB15_Msk
 (0x1UL << 
CAN_F9R1_FB15_Pos
Ë

	)

7258 
	#CAN_F9R1_FB15
 
CAN_F9R1_FB15_Msk


	)

7259 
	#CAN_F9R1_FB16_Pos
 (16U)

	)

7260 
	#CAN_F9R1_FB16_Msk
 (0x1UL << 
CAN_F9R1_FB16_Pos
Ë

	)

7261 
	#CAN_F9R1_FB16
 
CAN_F9R1_FB16_Msk


	)

7262 
	#CAN_F9R1_FB17_Pos
 (17U)

	)

7263 
	#CAN_F9R1_FB17_Msk
 (0x1UL << 
CAN_F9R1_FB17_Pos
Ë

	)

7264 
	#CAN_F9R1_FB17
 
CAN_F9R1_FB17_Msk


	)

7265 
	#CAN_F9R1_FB18_Pos
 (18U)

	)

7266 
	#CAN_F9R1_FB18_Msk
 (0x1UL << 
CAN_F9R1_FB18_Pos
Ë

	)

7267 
	#CAN_F9R1_FB18
 
CAN_F9R1_FB18_Msk


	)

7268 
	#CAN_F9R1_FB19_Pos
 (19U)

	)

7269 
	#CAN_F9R1_FB19_Msk
 (0x1UL << 
CAN_F9R1_FB19_Pos
Ë

	)

7270 
	#CAN_F9R1_FB19
 
CAN_F9R1_FB19_Msk


	)

7271 
	#CAN_F9R1_FB20_Pos
 (20U)

	)

7272 
	#CAN_F9R1_FB20_Msk
 (0x1UL << 
CAN_F9R1_FB20_Pos
Ë

	)

7273 
	#CAN_F9R1_FB20
 
CAN_F9R1_FB20_Msk


	)

7274 
	#CAN_F9R1_FB21_Pos
 (21U)

	)

7275 
	#CAN_F9R1_FB21_Msk
 (0x1UL << 
CAN_F9R1_FB21_Pos
Ë

	)

7276 
	#CAN_F9R1_FB21
 
CAN_F9R1_FB21_Msk


	)

7277 
	#CAN_F9R1_FB22_Pos
 (22U)

	)

7278 
	#CAN_F9R1_FB22_Msk
 (0x1UL << 
CAN_F9R1_FB22_Pos
Ë

	)

7279 
	#CAN_F9R1_FB22
 
CAN_F9R1_FB22_Msk


	)

7280 
	#CAN_F9R1_FB23_Pos
 (23U)

	)

7281 
	#CAN_F9R1_FB23_Msk
 (0x1UL << 
CAN_F9R1_FB23_Pos
Ë

	)

7282 
	#CAN_F9R1_FB23
 
CAN_F9R1_FB23_Msk


	)

7283 
	#CAN_F9R1_FB24_Pos
 (24U)

	)

7284 
	#CAN_F9R1_FB24_Msk
 (0x1UL << 
CAN_F9R1_FB24_Pos
Ë

	)

7285 
	#CAN_F9R1_FB24
 
CAN_F9R1_FB24_Msk


	)

7286 
	#CAN_F9R1_FB25_Pos
 (25U)

	)

7287 
	#CAN_F9R1_FB25_Msk
 (0x1UL << 
CAN_F9R1_FB25_Pos
Ë

	)

7288 
	#CAN_F9R1_FB25
 
CAN_F9R1_FB25_Msk


	)

7289 
	#CAN_F9R1_FB26_Pos
 (26U)

	)

7290 
	#CAN_F9R1_FB26_Msk
 (0x1UL << 
CAN_F9R1_FB26_Pos
Ë

	)

7291 
	#CAN_F9R1_FB26
 
CAN_F9R1_FB26_Msk


	)

7292 
	#CAN_F9R1_FB27_Pos
 (27U)

	)

7293 
	#CAN_F9R1_FB27_Msk
 (0x1UL << 
CAN_F9R1_FB27_Pos
Ë

	)

7294 
	#CAN_F9R1_FB27
 
CAN_F9R1_FB27_Msk


	)

7295 
	#CAN_F9R1_FB28_Pos
 (28U)

	)

7296 
	#CAN_F9R1_FB28_Msk
 (0x1UL << 
CAN_F9R1_FB28_Pos
Ë

	)

7297 
	#CAN_F9R1_FB28
 
CAN_F9R1_FB28_Msk


	)

7298 
	#CAN_F9R1_FB29_Pos
 (29U)

	)

7299 
	#CAN_F9R1_FB29_Msk
 (0x1UL << 
CAN_F9R1_FB29_Pos
Ë

	)

7300 
	#CAN_F9R1_FB29
 
CAN_F9R1_FB29_Msk


	)

7301 
	#CAN_F9R1_FB30_Pos
 (30U)

	)

7302 
	#CAN_F9R1_FB30_Msk
 (0x1UL << 
CAN_F9R1_FB30_Pos
Ë

	)

7303 
	#CAN_F9R1_FB30
 
CAN_F9R1_FB30_Msk


	)

7304 
	#CAN_F9R1_FB31_Pos
 (31U)

	)

7305 
	#CAN_F9R1_FB31_Msk
 (0x1UL << 
CAN_F9R1_FB31_Pos
Ë

	)

7306 
	#CAN_F9R1_FB31
 
CAN_F9R1_FB31_Msk


	)

7309 
	#CAN_F10R1_FB0_Pos
 (0U)

	)

7310 
	#CAN_F10R1_FB0_Msk
 (0x1UL << 
CAN_F10R1_FB0_Pos
Ë

	)

7311 
	#CAN_F10R1_FB0
 
CAN_F10R1_FB0_Msk


	)

7312 
	#CAN_F10R1_FB1_Pos
 (1U)

	)

7313 
	#CAN_F10R1_FB1_Msk
 (0x1UL << 
CAN_F10R1_FB1_Pos
Ë

	)

7314 
	#CAN_F10R1_FB1
 
CAN_F10R1_FB1_Msk


	)

7315 
	#CAN_F10R1_FB2_Pos
 (2U)

	)

7316 
	#CAN_F10R1_FB2_Msk
 (0x1UL << 
CAN_F10R1_FB2_Pos
Ë

	)

7317 
	#CAN_F10R1_FB2
 
CAN_F10R1_FB2_Msk


	)

7318 
	#CAN_F10R1_FB3_Pos
 (3U)

	)

7319 
	#CAN_F10R1_FB3_Msk
 (0x1UL << 
CAN_F10R1_FB3_Pos
Ë

	)

7320 
	#CAN_F10R1_FB3
 
CAN_F10R1_FB3_Msk


	)

7321 
	#CAN_F10R1_FB4_Pos
 (4U)

	)

7322 
	#CAN_F10R1_FB4_Msk
 (0x1UL << 
CAN_F10R1_FB4_Pos
Ë

	)

7323 
	#CAN_F10R1_FB4
 
CAN_F10R1_FB4_Msk


	)

7324 
	#CAN_F10R1_FB5_Pos
 (5U)

	)

7325 
	#CAN_F10R1_FB5_Msk
 (0x1UL << 
CAN_F10R1_FB5_Pos
Ë

	)

7326 
	#CAN_F10R1_FB5
 
CAN_F10R1_FB5_Msk


	)

7327 
	#CAN_F10R1_FB6_Pos
 (6U)

	)

7328 
	#CAN_F10R1_FB6_Msk
 (0x1UL << 
CAN_F10R1_FB6_Pos
Ë

	)

7329 
	#CAN_F10R1_FB6
 
CAN_F10R1_FB6_Msk


	)

7330 
	#CAN_F10R1_FB7_Pos
 (7U)

	)

7331 
	#CAN_F10R1_FB7_Msk
 (0x1UL << 
CAN_F10R1_FB7_Pos
Ë

	)

7332 
	#CAN_F10R1_FB7
 
CAN_F10R1_FB7_Msk


	)

7333 
	#CAN_F10R1_FB8_Pos
 (8U)

	)

7334 
	#CAN_F10R1_FB8_Msk
 (0x1UL << 
CAN_F10R1_FB8_Pos
Ë

	)

7335 
	#CAN_F10R1_FB8
 
CAN_F10R1_FB8_Msk


	)

7336 
	#CAN_F10R1_FB9_Pos
 (9U)

	)

7337 
	#CAN_F10R1_FB9_Msk
 (0x1UL << 
CAN_F10R1_FB9_Pos
Ë

	)

7338 
	#CAN_F10R1_FB9
 
CAN_F10R1_FB9_Msk


	)

7339 
	#CAN_F10R1_FB10_Pos
 (10U)

	)

7340 
	#CAN_F10R1_FB10_Msk
 (0x1UL << 
CAN_F10R1_FB10_Pos
Ë

	)

7341 
	#CAN_F10R1_FB10
 
CAN_F10R1_FB10_Msk


	)

7342 
	#CAN_F10R1_FB11_Pos
 (11U)

	)

7343 
	#CAN_F10R1_FB11_Msk
 (0x1UL << 
CAN_F10R1_FB11_Pos
Ë

	)

7344 
	#CAN_F10R1_FB11
 
CAN_F10R1_FB11_Msk


	)

7345 
	#CAN_F10R1_FB12_Pos
 (12U)

	)

7346 
	#CAN_F10R1_FB12_Msk
 (0x1UL << 
CAN_F10R1_FB12_Pos
Ë

	)

7347 
	#CAN_F10R1_FB12
 
CAN_F10R1_FB12_Msk


	)

7348 
	#CAN_F10R1_FB13_Pos
 (13U)

	)

7349 
	#CAN_F10R1_FB13_Msk
 (0x1UL << 
CAN_F10R1_FB13_Pos
Ë

	)

7350 
	#CAN_F10R1_FB13
 
CAN_F10R1_FB13_Msk


	)

7351 
	#CAN_F10R1_FB14_Pos
 (14U)

	)

7352 
	#CAN_F10R1_FB14_Msk
 (0x1UL << 
CAN_F10R1_FB14_Pos
Ë

	)

7353 
	#CAN_F10R1_FB14
 
CAN_F10R1_FB14_Msk


	)

7354 
	#CAN_F10R1_FB15_Pos
 (15U)

	)

7355 
	#CAN_F10R1_FB15_Msk
 (0x1UL << 
CAN_F10R1_FB15_Pos
Ë

	)

7356 
	#CAN_F10R1_FB15
 
CAN_F10R1_FB15_Msk


	)

7357 
	#CAN_F10R1_FB16_Pos
 (16U)

	)

7358 
	#CAN_F10R1_FB16_Msk
 (0x1UL << 
CAN_F10R1_FB16_Pos
Ë

	)

7359 
	#CAN_F10R1_FB16
 
CAN_F10R1_FB16_Msk


	)

7360 
	#CAN_F10R1_FB17_Pos
 (17U)

	)

7361 
	#CAN_F10R1_FB17_Msk
 (0x1UL << 
CAN_F10R1_FB17_Pos
Ë

	)

7362 
	#CAN_F10R1_FB17
 
CAN_F10R1_FB17_Msk


	)

7363 
	#CAN_F10R1_FB18_Pos
 (18U)

	)

7364 
	#CAN_F10R1_FB18_Msk
 (0x1UL << 
CAN_F10R1_FB18_Pos
Ë

	)

7365 
	#CAN_F10R1_FB18
 
CAN_F10R1_FB18_Msk


	)

7366 
	#CAN_F10R1_FB19_Pos
 (19U)

	)

7367 
	#CAN_F10R1_FB19_Msk
 (0x1UL << 
CAN_F10R1_FB19_Pos
Ë

	)

7368 
	#CAN_F10R1_FB19
 
CAN_F10R1_FB19_Msk


	)

7369 
	#CAN_F10R1_FB20_Pos
 (20U)

	)

7370 
	#CAN_F10R1_FB20_Msk
 (0x1UL << 
CAN_F10R1_FB20_Pos
Ë

	)

7371 
	#CAN_F10R1_FB20
 
CAN_F10R1_FB20_Msk


	)

7372 
	#CAN_F10R1_FB21_Pos
 (21U)

	)

7373 
	#CAN_F10R1_FB21_Msk
 (0x1UL << 
CAN_F10R1_FB21_Pos
Ë

	)

7374 
	#CAN_F10R1_FB21
 
CAN_F10R1_FB21_Msk


	)

7375 
	#CAN_F10R1_FB22_Pos
 (22U)

	)

7376 
	#CAN_F10R1_FB22_Msk
 (0x1UL << 
CAN_F10R1_FB22_Pos
Ë

	)

7377 
	#CAN_F10R1_FB22
 
CAN_F10R1_FB22_Msk


	)

7378 
	#CAN_F10R1_FB23_Pos
 (23U)

	)

7379 
	#CAN_F10R1_FB23_Msk
 (0x1UL << 
CAN_F10R1_FB23_Pos
Ë

	)

7380 
	#CAN_F10R1_FB23
 
CAN_F10R1_FB23_Msk


	)

7381 
	#CAN_F10R1_FB24_Pos
 (24U)

	)

7382 
	#CAN_F10R1_FB24_Msk
 (0x1UL << 
CAN_F10R1_FB24_Pos
Ë

	)

7383 
	#CAN_F10R1_FB24
 
CAN_F10R1_FB24_Msk


	)

7384 
	#CAN_F10R1_FB25_Pos
 (25U)

	)

7385 
	#CAN_F10R1_FB25_Msk
 (0x1UL << 
CAN_F10R1_FB25_Pos
Ë

	)

7386 
	#CAN_F10R1_FB25
 
CAN_F10R1_FB25_Msk


	)

7387 
	#CAN_F10R1_FB26_Pos
 (26U)

	)

7388 
	#CAN_F10R1_FB26_Msk
 (0x1UL << 
CAN_F10R1_FB26_Pos
Ë

	)

7389 
	#CAN_F10R1_FB26
 
CAN_F10R1_FB26_Msk


	)

7390 
	#CAN_F10R1_FB27_Pos
 (27U)

	)

7391 
	#CAN_F10R1_FB27_Msk
 (0x1UL << 
CAN_F10R1_FB27_Pos
Ë

	)

7392 
	#CAN_F10R1_FB27
 
CAN_F10R1_FB27_Msk


	)

7393 
	#CAN_F10R1_FB28_Pos
 (28U)

	)

7394 
	#CAN_F10R1_FB28_Msk
 (0x1UL << 
CAN_F10R1_FB28_Pos
Ë

	)

7395 
	#CAN_F10R1_FB28
 
CAN_F10R1_FB28_Msk


	)

7396 
	#CAN_F10R1_FB29_Pos
 (29U)

	)

7397 
	#CAN_F10R1_FB29_Msk
 (0x1UL << 
CAN_F10R1_FB29_Pos
Ë

	)

7398 
	#CAN_F10R1_FB29
 
CAN_F10R1_FB29_Msk


	)

7399 
	#CAN_F10R1_FB30_Pos
 (30U)

	)

7400 
	#CAN_F10R1_FB30_Msk
 (0x1UL << 
CAN_F10R1_FB30_Pos
Ë

	)

7401 
	#CAN_F10R1_FB30
 
CAN_F10R1_FB30_Msk


	)

7402 
	#CAN_F10R1_FB31_Pos
 (31U)

	)

7403 
	#CAN_F10R1_FB31_Msk
 (0x1UL << 
CAN_F10R1_FB31_Pos
Ë

	)

7404 
	#CAN_F10R1_FB31
 
CAN_F10R1_FB31_Msk


	)

7407 
	#CAN_F11R1_FB0_Pos
 (0U)

	)

7408 
	#CAN_F11R1_FB0_Msk
 (0x1UL << 
CAN_F11R1_FB0_Pos
Ë

	)

7409 
	#CAN_F11R1_FB0
 
CAN_F11R1_FB0_Msk


	)

7410 
	#CAN_F11R1_FB1_Pos
 (1U)

	)

7411 
	#CAN_F11R1_FB1_Msk
 (0x1UL << 
CAN_F11R1_FB1_Pos
Ë

	)

7412 
	#CAN_F11R1_FB1
 
CAN_F11R1_FB1_Msk


	)

7413 
	#CAN_F11R1_FB2_Pos
 (2U)

	)

7414 
	#CAN_F11R1_FB2_Msk
 (0x1UL << 
CAN_F11R1_FB2_Pos
Ë

	)

7415 
	#CAN_F11R1_FB2
 
CAN_F11R1_FB2_Msk


	)

7416 
	#CAN_F11R1_FB3_Pos
 (3U)

	)

7417 
	#CAN_F11R1_FB3_Msk
 (0x1UL << 
CAN_F11R1_FB3_Pos
Ë

	)

7418 
	#CAN_F11R1_FB3
 
CAN_F11R1_FB3_Msk


	)

7419 
	#CAN_F11R1_FB4_Pos
 (4U)

	)

7420 
	#CAN_F11R1_FB4_Msk
 (0x1UL << 
CAN_F11R1_FB4_Pos
Ë

	)

7421 
	#CAN_F11R1_FB4
 
CAN_F11R1_FB4_Msk


	)

7422 
	#CAN_F11R1_FB5_Pos
 (5U)

	)

7423 
	#CAN_F11R1_FB5_Msk
 (0x1UL << 
CAN_F11R1_FB5_Pos
Ë

	)

7424 
	#CAN_F11R1_FB5
 
CAN_F11R1_FB5_Msk


	)

7425 
	#CAN_F11R1_FB6_Pos
 (6U)

	)

7426 
	#CAN_F11R1_FB6_Msk
 (0x1UL << 
CAN_F11R1_FB6_Pos
Ë

	)

7427 
	#CAN_F11R1_FB6
 
CAN_F11R1_FB6_Msk


	)

7428 
	#CAN_F11R1_FB7_Pos
 (7U)

	)

7429 
	#CAN_F11R1_FB7_Msk
 (0x1UL << 
CAN_F11R1_FB7_Pos
Ë

	)

7430 
	#CAN_F11R1_FB7
 
CAN_F11R1_FB7_Msk


	)

7431 
	#CAN_F11R1_FB8_Pos
 (8U)

	)

7432 
	#CAN_F11R1_FB8_Msk
 (0x1UL << 
CAN_F11R1_FB8_Pos
Ë

	)

7433 
	#CAN_F11R1_FB8
 
CAN_F11R1_FB8_Msk


	)

7434 
	#CAN_F11R1_FB9_Pos
 (9U)

	)

7435 
	#CAN_F11R1_FB9_Msk
 (0x1UL << 
CAN_F11R1_FB9_Pos
Ë

	)

7436 
	#CAN_F11R1_FB9
 
CAN_F11R1_FB9_Msk


	)

7437 
	#CAN_F11R1_FB10_Pos
 (10U)

	)

7438 
	#CAN_F11R1_FB10_Msk
 (0x1UL << 
CAN_F11R1_FB10_Pos
Ë

	)

7439 
	#CAN_F11R1_FB10
 
CAN_F11R1_FB10_Msk


	)

7440 
	#CAN_F11R1_FB11_Pos
 (11U)

	)

7441 
	#CAN_F11R1_FB11_Msk
 (0x1UL << 
CAN_F11R1_FB11_Pos
Ë

	)

7442 
	#CAN_F11R1_FB11
 
CAN_F11R1_FB11_Msk


	)

7443 
	#CAN_F11R1_FB12_Pos
 (12U)

	)

7444 
	#CAN_F11R1_FB12_Msk
 (0x1UL << 
CAN_F11R1_FB12_Pos
Ë

	)

7445 
	#CAN_F11R1_FB12
 
CAN_F11R1_FB12_Msk


	)

7446 
	#CAN_F11R1_FB13_Pos
 (13U)

	)

7447 
	#CAN_F11R1_FB13_Msk
 (0x1UL << 
CAN_F11R1_FB13_Pos
Ë

	)

7448 
	#CAN_F11R1_FB13
 
CAN_F11R1_FB13_Msk


	)

7449 
	#CAN_F11R1_FB14_Pos
 (14U)

	)

7450 
	#CAN_F11R1_FB14_Msk
 (0x1UL << 
CAN_F11R1_FB14_Pos
Ë

	)

7451 
	#CAN_F11R1_FB14
 
CAN_F11R1_FB14_Msk


	)

7452 
	#CAN_F11R1_FB15_Pos
 (15U)

	)

7453 
	#CAN_F11R1_FB15_Msk
 (0x1UL << 
CAN_F11R1_FB15_Pos
Ë

	)

7454 
	#CAN_F11R1_FB15
 
CAN_F11R1_FB15_Msk


	)

7455 
	#CAN_F11R1_FB16_Pos
 (16U)

	)

7456 
	#CAN_F11R1_FB16_Msk
 (0x1UL << 
CAN_F11R1_FB16_Pos
Ë

	)

7457 
	#CAN_F11R1_FB16
 
CAN_F11R1_FB16_Msk


	)

7458 
	#CAN_F11R1_FB17_Pos
 (17U)

	)

7459 
	#CAN_F11R1_FB17_Msk
 (0x1UL << 
CAN_F11R1_FB17_Pos
Ë

	)

7460 
	#CAN_F11R1_FB17
 
CAN_F11R1_FB17_Msk


	)

7461 
	#CAN_F11R1_FB18_Pos
 (18U)

	)

7462 
	#CAN_F11R1_FB18_Msk
 (0x1UL << 
CAN_F11R1_FB18_Pos
Ë

	)

7463 
	#CAN_F11R1_FB18
 
CAN_F11R1_FB18_Msk


	)

7464 
	#CAN_F11R1_FB19_Pos
 (19U)

	)

7465 
	#CAN_F11R1_FB19_Msk
 (0x1UL << 
CAN_F11R1_FB19_Pos
Ë

	)

7466 
	#CAN_F11R1_FB19
 
CAN_F11R1_FB19_Msk


	)

7467 
	#CAN_F11R1_FB20_Pos
 (20U)

	)

7468 
	#CAN_F11R1_FB20_Msk
 (0x1UL << 
CAN_F11R1_FB20_Pos
Ë

	)

7469 
	#CAN_F11R1_FB20
 
CAN_F11R1_FB20_Msk


	)

7470 
	#CAN_F11R1_FB21_Pos
 (21U)

	)

7471 
	#CAN_F11R1_FB21_Msk
 (0x1UL << 
CAN_F11R1_FB21_Pos
Ë

	)

7472 
	#CAN_F11R1_FB21
 
CAN_F11R1_FB21_Msk


	)

7473 
	#CAN_F11R1_FB22_Pos
 (22U)

	)

7474 
	#CAN_F11R1_FB22_Msk
 (0x1UL << 
CAN_F11R1_FB22_Pos
Ë

	)

7475 
	#CAN_F11R1_FB22
 
CAN_F11R1_FB22_Msk


	)

7476 
	#CAN_F11R1_FB23_Pos
 (23U)

	)

7477 
	#CAN_F11R1_FB23_Msk
 (0x1UL << 
CAN_F11R1_FB23_Pos
Ë

	)

7478 
	#CAN_F11R1_FB23
 
CAN_F11R1_FB23_Msk


	)

7479 
	#CAN_F11R1_FB24_Pos
 (24U)

	)

7480 
	#CAN_F11R1_FB24_Msk
 (0x1UL << 
CAN_F11R1_FB24_Pos
Ë

	)

7481 
	#CAN_F11R1_FB24
 
CAN_F11R1_FB24_Msk


	)

7482 
	#CAN_F11R1_FB25_Pos
 (25U)

	)

7483 
	#CAN_F11R1_FB25_Msk
 (0x1UL << 
CAN_F11R1_FB25_Pos
Ë

	)

7484 
	#CAN_F11R1_FB25
 
CAN_F11R1_FB25_Msk


	)

7485 
	#CAN_F11R1_FB26_Pos
 (26U)

	)

7486 
	#CAN_F11R1_FB26_Msk
 (0x1UL << 
CAN_F11R1_FB26_Pos
Ë

	)

7487 
	#CAN_F11R1_FB26
 
CAN_F11R1_FB26_Msk


	)

7488 
	#CAN_F11R1_FB27_Pos
 (27U)

	)

7489 
	#CAN_F11R1_FB27_Msk
 (0x1UL << 
CAN_F11R1_FB27_Pos
Ë

	)

7490 
	#CAN_F11R1_FB27
 
CAN_F11R1_FB27_Msk


	)

7491 
	#CAN_F11R1_FB28_Pos
 (28U)

	)

7492 
	#CAN_F11R1_FB28_Msk
 (0x1UL << 
CAN_F11R1_FB28_Pos
Ë

	)

7493 
	#CAN_F11R1_FB28
 
CAN_F11R1_FB28_Msk


	)

7494 
	#CAN_F11R1_FB29_Pos
 (29U)

	)

7495 
	#CAN_F11R1_FB29_Msk
 (0x1UL << 
CAN_F11R1_FB29_Pos
Ë

	)

7496 
	#CAN_F11R1_FB29
 
CAN_F11R1_FB29_Msk


	)

7497 
	#CAN_F11R1_FB30_Pos
 (30U)

	)

7498 
	#CAN_F11R1_FB30_Msk
 (0x1UL << 
CAN_F11R1_FB30_Pos
Ë

	)

7499 
	#CAN_F11R1_FB30
 
CAN_F11R1_FB30_Msk


	)

7500 
	#CAN_F11R1_FB31_Pos
 (31U)

	)

7501 
	#CAN_F11R1_FB31_Msk
 (0x1UL << 
CAN_F11R1_FB31_Pos
Ë

	)

7502 
	#CAN_F11R1_FB31
 
CAN_F11R1_FB31_Msk


	)

7505 
	#CAN_F12R1_FB0_Pos
 (0U)

	)

7506 
	#CAN_F12R1_FB0_Msk
 (0x1UL << 
CAN_F12R1_FB0_Pos
Ë

	)

7507 
	#CAN_F12R1_FB0
 
CAN_F12R1_FB0_Msk


	)

7508 
	#CAN_F12R1_FB1_Pos
 (1U)

	)

7509 
	#CAN_F12R1_FB1_Msk
 (0x1UL << 
CAN_F12R1_FB1_Pos
Ë

	)

7510 
	#CAN_F12R1_FB1
 
CAN_F12R1_FB1_Msk


	)

7511 
	#CAN_F12R1_FB2_Pos
 (2U)

	)

7512 
	#CAN_F12R1_FB2_Msk
 (0x1UL << 
CAN_F12R1_FB2_Pos
Ë

	)

7513 
	#CAN_F12R1_FB2
 
CAN_F12R1_FB2_Msk


	)

7514 
	#CAN_F12R1_FB3_Pos
 (3U)

	)

7515 
	#CAN_F12R1_FB3_Msk
 (0x1UL << 
CAN_F12R1_FB3_Pos
Ë

	)

7516 
	#CAN_F12R1_FB3
 
CAN_F12R1_FB3_Msk


	)

7517 
	#CAN_F12R1_FB4_Pos
 (4U)

	)

7518 
	#CAN_F12R1_FB4_Msk
 (0x1UL << 
CAN_F12R1_FB4_Pos
Ë

	)

7519 
	#CAN_F12R1_FB4
 
CAN_F12R1_FB4_Msk


	)

7520 
	#CAN_F12R1_FB5_Pos
 (5U)

	)

7521 
	#CAN_F12R1_FB5_Msk
 (0x1UL << 
CAN_F12R1_FB5_Pos
Ë

	)

7522 
	#CAN_F12R1_FB5
 
CAN_F12R1_FB5_Msk


	)

7523 
	#CAN_F12R1_FB6_Pos
 (6U)

	)

7524 
	#CAN_F12R1_FB6_Msk
 (0x1UL << 
CAN_F12R1_FB6_Pos
Ë

	)

7525 
	#CAN_F12R1_FB6
 
CAN_F12R1_FB6_Msk


	)

7526 
	#CAN_F12R1_FB7_Pos
 (7U)

	)

7527 
	#CAN_F12R1_FB7_Msk
 (0x1UL << 
CAN_F12R1_FB7_Pos
Ë

	)

7528 
	#CAN_F12R1_FB7
 
CAN_F12R1_FB7_Msk


	)

7529 
	#CAN_F12R1_FB8_Pos
 (8U)

	)

7530 
	#CAN_F12R1_FB8_Msk
 (0x1UL << 
CAN_F12R1_FB8_Pos
Ë

	)

7531 
	#CAN_F12R1_FB8
 
CAN_F12R1_FB8_Msk


	)

7532 
	#CAN_F12R1_FB9_Pos
 (9U)

	)

7533 
	#CAN_F12R1_FB9_Msk
 (0x1UL << 
CAN_F12R1_FB9_Pos
Ë

	)

7534 
	#CAN_F12R1_FB9
 
CAN_F12R1_FB9_Msk


	)

7535 
	#CAN_F12R1_FB10_Pos
 (10U)

	)

7536 
	#CAN_F12R1_FB10_Msk
 (0x1UL << 
CAN_F12R1_FB10_Pos
Ë

	)

7537 
	#CAN_F12R1_FB10
 
CAN_F12R1_FB10_Msk


	)

7538 
	#CAN_F12R1_FB11_Pos
 (11U)

	)

7539 
	#CAN_F12R1_FB11_Msk
 (0x1UL << 
CAN_F12R1_FB11_Pos
Ë

	)

7540 
	#CAN_F12R1_FB11
 
CAN_F12R1_FB11_Msk


	)

7541 
	#CAN_F12R1_FB12_Pos
 (12U)

	)

7542 
	#CAN_F12R1_FB12_Msk
 (0x1UL << 
CAN_F12R1_FB12_Pos
Ë

	)

7543 
	#CAN_F12R1_FB12
 
CAN_F12R1_FB12_Msk


	)

7544 
	#CAN_F12R1_FB13_Pos
 (13U)

	)

7545 
	#CAN_F12R1_FB13_Msk
 (0x1UL << 
CAN_F12R1_FB13_Pos
Ë

	)

7546 
	#CAN_F12R1_FB13
 
CAN_F12R1_FB13_Msk


	)

7547 
	#CAN_F12R1_FB14_Pos
 (14U)

	)

7548 
	#CAN_F12R1_FB14_Msk
 (0x1UL << 
CAN_F12R1_FB14_Pos
Ë

	)

7549 
	#CAN_F12R1_FB14
 
CAN_F12R1_FB14_Msk


	)

7550 
	#CAN_F12R1_FB15_Pos
 (15U)

	)

7551 
	#CAN_F12R1_FB15_Msk
 (0x1UL << 
CAN_F12R1_FB15_Pos
Ë

	)

7552 
	#CAN_F12R1_FB15
 
CAN_F12R1_FB15_Msk


	)

7553 
	#CAN_F12R1_FB16_Pos
 (16U)

	)

7554 
	#CAN_F12R1_FB16_Msk
 (0x1UL << 
CAN_F12R1_FB16_Pos
Ë

	)

7555 
	#CAN_F12R1_FB16
 
CAN_F12R1_FB16_Msk


	)

7556 
	#CAN_F12R1_FB17_Pos
 (17U)

	)

7557 
	#CAN_F12R1_FB17_Msk
 (0x1UL << 
CAN_F12R1_FB17_Pos
Ë

	)

7558 
	#CAN_F12R1_FB17
 
CAN_F12R1_FB17_Msk


	)

7559 
	#CAN_F12R1_FB18_Pos
 (18U)

	)

7560 
	#CAN_F12R1_FB18_Msk
 (0x1UL << 
CAN_F12R1_FB18_Pos
Ë

	)

7561 
	#CAN_F12R1_FB18
 
CAN_F12R1_FB18_Msk


	)

7562 
	#CAN_F12R1_FB19_Pos
 (19U)

	)

7563 
	#CAN_F12R1_FB19_Msk
 (0x1UL << 
CAN_F12R1_FB19_Pos
Ë

	)

7564 
	#CAN_F12R1_FB19
 
CAN_F12R1_FB19_Msk


	)

7565 
	#CAN_F12R1_FB20_Pos
 (20U)

	)

7566 
	#CAN_F12R1_FB20_Msk
 (0x1UL << 
CAN_F12R1_FB20_Pos
Ë

	)

7567 
	#CAN_F12R1_FB20
 
CAN_F12R1_FB20_Msk


	)

7568 
	#CAN_F12R1_FB21_Pos
 (21U)

	)

7569 
	#CAN_F12R1_FB21_Msk
 (0x1UL << 
CAN_F12R1_FB21_Pos
Ë

	)

7570 
	#CAN_F12R1_FB21
 
CAN_F12R1_FB21_Msk


	)

7571 
	#CAN_F12R1_FB22_Pos
 (22U)

	)

7572 
	#CAN_F12R1_FB22_Msk
 (0x1UL << 
CAN_F12R1_FB22_Pos
Ë

	)

7573 
	#CAN_F12R1_FB22
 
CAN_F12R1_FB22_Msk


	)

7574 
	#CAN_F12R1_FB23_Pos
 (23U)

	)

7575 
	#CAN_F12R1_FB23_Msk
 (0x1UL << 
CAN_F12R1_FB23_Pos
Ë

	)

7576 
	#CAN_F12R1_FB23
 
CAN_F12R1_FB23_Msk


	)

7577 
	#CAN_F12R1_FB24_Pos
 (24U)

	)

7578 
	#CAN_F12R1_FB24_Msk
 (0x1UL << 
CAN_F12R1_FB24_Pos
Ë

	)

7579 
	#CAN_F12R1_FB24
 
CAN_F12R1_FB24_Msk


	)

7580 
	#CAN_F12R1_FB25_Pos
 (25U)

	)

7581 
	#CAN_F12R1_FB25_Msk
 (0x1UL << 
CAN_F12R1_FB25_Pos
Ë

	)

7582 
	#CAN_F12R1_FB25
 
CAN_F12R1_FB25_Msk


	)

7583 
	#CAN_F12R1_FB26_Pos
 (26U)

	)

7584 
	#CAN_F12R1_FB26_Msk
 (0x1UL << 
CAN_F12R1_FB26_Pos
Ë

	)

7585 
	#CAN_F12R1_FB26
 
CAN_F12R1_FB26_Msk


	)

7586 
	#CAN_F12R1_FB27_Pos
 (27U)

	)

7587 
	#CAN_F12R1_FB27_Msk
 (0x1UL << 
CAN_F12R1_FB27_Pos
Ë

	)

7588 
	#CAN_F12R1_FB27
 
CAN_F12R1_FB27_Msk


	)

7589 
	#CAN_F12R1_FB28_Pos
 (28U)

	)

7590 
	#CAN_F12R1_FB28_Msk
 (0x1UL << 
CAN_F12R1_FB28_Pos
Ë

	)

7591 
	#CAN_F12R1_FB28
 
CAN_F12R1_FB28_Msk


	)

7592 
	#CAN_F12R1_FB29_Pos
 (29U)

	)

7593 
	#CAN_F12R1_FB29_Msk
 (0x1UL << 
CAN_F12R1_FB29_Pos
Ë

	)

7594 
	#CAN_F12R1_FB29
 
CAN_F12R1_FB29_Msk


	)

7595 
	#CAN_F12R1_FB30_Pos
 (30U)

	)

7596 
	#CAN_F12R1_FB30_Msk
 (0x1UL << 
CAN_F12R1_FB30_Pos
Ë

	)

7597 
	#CAN_F12R1_FB30
 
CAN_F12R1_FB30_Msk


	)

7598 
	#CAN_F12R1_FB31_Pos
 (31U)

	)

7599 
	#CAN_F12R1_FB31_Msk
 (0x1UL << 
CAN_F12R1_FB31_Pos
Ë

	)

7600 
	#CAN_F12R1_FB31
 
CAN_F12R1_FB31_Msk


	)

7603 
	#CAN_F13R1_FB0_Pos
 (0U)

	)

7604 
	#CAN_F13R1_FB0_Msk
 (0x1UL << 
CAN_F13R1_FB0_Pos
Ë

	)

7605 
	#CAN_F13R1_FB0
 
CAN_F13R1_FB0_Msk


	)

7606 
	#CAN_F13R1_FB1_Pos
 (1U)

	)

7607 
	#CAN_F13R1_FB1_Msk
 (0x1UL << 
CAN_F13R1_FB1_Pos
Ë

	)

7608 
	#CAN_F13R1_FB1
 
CAN_F13R1_FB1_Msk


	)

7609 
	#CAN_F13R1_FB2_Pos
 (2U)

	)

7610 
	#CAN_F13R1_FB2_Msk
 (0x1UL << 
CAN_F13R1_FB2_Pos
Ë

	)

7611 
	#CAN_F13R1_FB2
 
CAN_F13R1_FB2_Msk


	)

7612 
	#CAN_F13R1_FB3_Pos
 (3U)

	)

7613 
	#CAN_F13R1_FB3_Msk
 (0x1UL << 
CAN_F13R1_FB3_Pos
Ë

	)

7614 
	#CAN_F13R1_FB3
 
CAN_F13R1_FB3_Msk


	)

7615 
	#CAN_F13R1_FB4_Pos
 (4U)

	)

7616 
	#CAN_F13R1_FB4_Msk
 (0x1UL << 
CAN_F13R1_FB4_Pos
Ë

	)

7617 
	#CAN_F13R1_FB4
 
CAN_F13R1_FB4_Msk


	)

7618 
	#CAN_F13R1_FB5_Pos
 (5U)

	)

7619 
	#CAN_F13R1_FB5_Msk
 (0x1UL << 
CAN_F13R1_FB5_Pos
Ë

	)

7620 
	#CAN_F13R1_FB5
 
CAN_F13R1_FB5_Msk


	)

7621 
	#CAN_F13R1_FB6_Pos
 (6U)

	)

7622 
	#CAN_F13R1_FB6_Msk
 (0x1UL << 
CAN_F13R1_FB6_Pos
Ë

	)

7623 
	#CAN_F13R1_FB6
 
CAN_F13R1_FB6_Msk


	)

7624 
	#CAN_F13R1_FB7_Pos
 (7U)

	)

7625 
	#CAN_F13R1_FB7_Msk
 (0x1UL << 
CAN_F13R1_FB7_Pos
Ë

	)

7626 
	#CAN_F13R1_FB7
 
CAN_F13R1_FB7_Msk


	)

7627 
	#CAN_F13R1_FB8_Pos
 (8U)

	)

7628 
	#CAN_F13R1_FB8_Msk
 (0x1UL << 
CAN_F13R1_FB8_Pos
Ë

	)

7629 
	#CAN_F13R1_FB8
 
CAN_F13R1_FB8_Msk


	)

7630 
	#CAN_F13R1_FB9_Pos
 (9U)

	)

7631 
	#CAN_F13R1_FB9_Msk
 (0x1UL << 
CAN_F13R1_FB9_Pos
Ë

	)

7632 
	#CAN_F13R1_FB9
 
CAN_F13R1_FB9_Msk


	)

7633 
	#CAN_F13R1_FB10_Pos
 (10U)

	)

7634 
	#CAN_F13R1_FB10_Msk
 (0x1UL << 
CAN_F13R1_FB10_Pos
Ë

	)

7635 
	#CAN_F13R1_FB10
 
CAN_F13R1_FB10_Msk


	)

7636 
	#CAN_F13R1_FB11_Pos
 (11U)

	)

7637 
	#CAN_F13R1_FB11_Msk
 (0x1UL << 
CAN_F13R1_FB11_Pos
Ë

	)

7638 
	#CAN_F13R1_FB11
 
CAN_F13R1_FB11_Msk


	)

7639 
	#CAN_F13R1_FB12_Pos
 (12U)

	)

7640 
	#CAN_F13R1_FB12_Msk
 (0x1UL << 
CAN_F13R1_FB12_Pos
Ë

	)

7641 
	#CAN_F13R1_FB12
 
CAN_F13R1_FB12_Msk


	)

7642 
	#CAN_F13R1_FB13_Pos
 (13U)

	)

7643 
	#CAN_F13R1_FB13_Msk
 (0x1UL << 
CAN_F13R1_FB13_Pos
Ë

	)

7644 
	#CAN_F13R1_FB13
 
CAN_F13R1_FB13_Msk


	)

7645 
	#CAN_F13R1_FB14_Pos
 (14U)

	)

7646 
	#CAN_F13R1_FB14_Msk
 (0x1UL << 
CAN_F13R1_FB14_Pos
Ë

	)

7647 
	#CAN_F13R1_FB14
 
CAN_F13R1_FB14_Msk


	)

7648 
	#CAN_F13R1_FB15_Pos
 (15U)

	)

7649 
	#CAN_F13R1_FB15_Msk
 (0x1UL << 
CAN_F13R1_FB15_Pos
Ë

	)

7650 
	#CAN_F13R1_FB15
 
CAN_F13R1_FB15_Msk


	)

7651 
	#CAN_F13R1_FB16_Pos
 (16U)

	)

7652 
	#CAN_F13R1_FB16_Msk
 (0x1UL << 
CAN_F13R1_FB16_Pos
Ë

	)

7653 
	#CAN_F13R1_FB16
 
CAN_F13R1_FB16_Msk


	)

7654 
	#CAN_F13R1_FB17_Pos
 (17U)

	)

7655 
	#CAN_F13R1_FB17_Msk
 (0x1UL << 
CAN_F13R1_FB17_Pos
Ë

	)

7656 
	#CAN_F13R1_FB17
 
CAN_F13R1_FB17_Msk


	)

7657 
	#CAN_F13R1_FB18_Pos
 (18U)

	)

7658 
	#CAN_F13R1_FB18_Msk
 (0x1UL << 
CAN_F13R1_FB18_Pos
Ë

	)

7659 
	#CAN_F13R1_FB18
 
CAN_F13R1_FB18_Msk


	)

7660 
	#CAN_F13R1_FB19_Pos
 (19U)

	)

7661 
	#CAN_F13R1_FB19_Msk
 (0x1UL << 
CAN_F13R1_FB19_Pos
Ë

	)

7662 
	#CAN_F13R1_FB19
 
CAN_F13R1_FB19_Msk


	)

7663 
	#CAN_F13R1_FB20_Pos
 (20U)

	)

7664 
	#CAN_F13R1_FB20_Msk
 (0x1UL << 
CAN_F13R1_FB20_Pos
Ë

	)

7665 
	#CAN_F13R1_FB20
 
CAN_F13R1_FB20_Msk


	)

7666 
	#CAN_F13R1_FB21_Pos
 (21U)

	)

7667 
	#CAN_F13R1_FB21_Msk
 (0x1UL << 
CAN_F13R1_FB21_Pos
Ë

	)

7668 
	#CAN_F13R1_FB21
 
CAN_F13R1_FB21_Msk


	)

7669 
	#CAN_F13R1_FB22_Pos
 (22U)

	)

7670 
	#CAN_F13R1_FB22_Msk
 (0x1UL << 
CAN_F13R1_FB22_Pos
Ë

	)

7671 
	#CAN_F13R1_FB22
 
CAN_F13R1_FB22_Msk


	)

7672 
	#CAN_F13R1_FB23_Pos
 (23U)

	)

7673 
	#CAN_F13R1_FB23_Msk
 (0x1UL << 
CAN_F13R1_FB23_Pos
Ë

	)

7674 
	#CAN_F13R1_FB23
 
CAN_F13R1_FB23_Msk


	)

7675 
	#CAN_F13R1_FB24_Pos
 (24U)

	)

7676 
	#CAN_F13R1_FB24_Msk
 (0x1UL << 
CAN_F13R1_FB24_Pos
Ë

	)

7677 
	#CAN_F13R1_FB24
 
CAN_F13R1_FB24_Msk


	)

7678 
	#CAN_F13R1_FB25_Pos
 (25U)

	)

7679 
	#CAN_F13R1_FB25_Msk
 (0x1UL << 
CAN_F13R1_FB25_Pos
Ë

	)

7680 
	#CAN_F13R1_FB25
 
CAN_F13R1_FB25_Msk


	)

7681 
	#CAN_F13R1_FB26_Pos
 (26U)

	)

7682 
	#CAN_F13R1_FB26_Msk
 (0x1UL << 
CAN_F13R1_FB26_Pos
Ë

	)

7683 
	#CAN_F13R1_FB26
 
CAN_F13R1_FB26_Msk


	)

7684 
	#CAN_F13R1_FB27_Pos
 (27U)

	)

7685 
	#CAN_F13R1_FB27_Msk
 (0x1UL << 
CAN_F13R1_FB27_Pos
Ë

	)

7686 
	#CAN_F13R1_FB27
 
CAN_F13R1_FB27_Msk


	)

7687 
	#CAN_F13R1_FB28_Pos
 (28U)

	)

7688 
	#CAN_F13R1_FB28_Msk
 (0x1UL << 
CAN_F13R1_FB28_Pos
Ë

	)

7689 
	#CAN_F13R1_FB28
 
CAN_F13R1_FB28_Msk


	)

7690 
	#CAN_F13R1_FB29_Pos
 (29U)

	)

7691 
	#CAN_F13R1_FB29_Msk
 (0x1UL << 
CAN_F13R1_FB29_Pos
Ë

	)

7692 
	#CAN_F13R1_FB29
 
CAN_F13R1_FB29_Msk


	)

7693 
	#CAN_F13R1_FB30_Pos
 (30U)

	)

7694 
	#CAN_F13R1_FB30_Msk
 (0x1UL << 
CAN_F13R1_FB30_Pos
Ë

	)

7695 
	#CAN_F13R1_FB30
 
CAN_F13R1_FB30_Msk


	)

7696 
	#CAN_F13R1_FB31_Pos
 (31U)

	)

7697 
	#CAN_F13R1_FB31_Msk
 (0x1UL << 
CAN_F13R1_FB31_Pos
Ë

	)

7698 
	#CAN_F13R1_FB31
 
CAN_F13R1_FB31_Msk


	)

7701 
	#CAN_F0R2_FB0_Pos
 (0U)

	)

7702 
	#CAN_F0R2_FB0_Msk
 (0x1UL << 
CAN_F0R2_FB0_Pos
Ë

	)

7703 
	#CAN_F0R2_FB0
 
CAN_F0R2_FB0_Msk


	)

7704 
	#CAN_F0R2_FB1_Pos
 (1U)

	)

7705 
	#CAN_F0R2_FB1_Msk
 (0x1UL << 
CAN_F0R2_FB1_Pos
Ë

	)

7706 
	#CAN_F0R2_FB1
 
CAN_F0R2_FB1_Msk


	)

7707 
	#CAN_F0R2_FB2_Pos
 (2U)

	)

7708 
	#CAN_F0R2_FB2_Msk
 (0x1UL << 
CAN_F0R2_FB2_Pos
Ë

	)

7709 
	#CAN_F0R2_FB2
 
CAN_F0R2_FB2_Msk


	)

7710 
	#CAN_F0R2_FB3_Pos
 (3U)

	)

7711 
	#CAN_F0R2_FB3_Msk
 (0x1UL << 
CAN_F0R2_FB3_Pos
Ë

	)

7712 
	#CAN_F0R2_FB3
 
CAN_F0R2_FB3_Msk


	)

7713 
	#CAN_F0R2_FB4_Pos
 (4U)

	)

7714 
	#CAN_F0R2_FB4_Msk
 (0x1UL << 
CAN_F0R2_FB4_Pos
Ë

	)

7715 
	#CAN_F0R2_FB4
 
CAN_F0R2_FB4_Msk


	)

7716 
	#CAN_F0R2_FB5_Pos
 (5U)

	)

7717 
	#CAN_F0R2_FB5_Msk
 (0x1UL << 
CAN_F0R2_FB5_Pos
Ë

	)

7718 
	#CAN_F0R2_FB5
 
CAN_F0R2_FB5_Msk


	)

7719 
	#CAN_F0R2_FB6_Pos
 (6U)

	)

7720 
	#CAN_F0R2_FB6_Msk
 (0x1UL << 
CAN_F0R2_FB6_Pos
Ë

	)

7721 
	#CAN_F0R2_FB6
 
CAN_F0R2_FB6_Msk


	)

7722 
	#CAN_F0R2_FB7_Pos
 (7U)

	)

7723 
	#CAN_F0R2_FB7_Msk
 (0x1UL << 
CAN_F0R2_FB7_Pos
Ë

	)

7724 
	#CAN_F0R2_FB7
 
CAN_F0R2_FB7_Msk


	)

7725 
	#CAN_F0R2_FB8_Pos
 (8U)

	)

7726 
	#CAN_F0R2_FB8_Msk
 (0x1UL << 
CAN_F0R2_FB8_Pos
Ë

	)

7727 
	#CAN_F0R2_FB8
 
CAN_F0R2_FB8_Msk


	)

7728 
	#CAN_F0R2_FB9_Pos
 (9U)

	)

7729 
	#CAN_F0R2_FB9_Msk
 (0x1UL << 
CAN_F0R2_FB9_Pos
Ë

	)

7730 
	#CAN_F0R2_FB9
 
CAN_F0R2_FB9_Msk


	)

7731 
	#CAN_F0R2_FB10_Pos
 (10U)

	)

7732 
	#CAN_F0R2_FB10_Msk
 (0x1UL << 
CAN_F0R2_FB10_Pos
Ë

	)

7733 
	#CAN_F0R2_FB10
 
CAN_F0R2_FB10_Msk


	)

7734 
	#CAN_F0R2_FB11_Pos
 (11U)

	)

7735 
	#CAN_F0R2_FB11_Msk
 (0x1UL << 
CAN_F0R2_FB11_Pos
Ë

	)

7736 
	#CAN_F0R2_FB11
 
CAN_F0R2_FB11_Msk


	)

7737 
	#CAN_F0R2_FB12_Pos
 (12U)

	)

7738 
	#CAN_F0R2_FB12_Msk
 (0x1UL << 
CAN_F0R2_FB12_Pos
Ë

	)

7739 
	#CAN_F0R2_FB12
 
CAN_F0R2_FB12_Msk


	)

7740 
	#CAN_F0R2_FB13_Pos
 (13U)

	)

7741 
	#CAN_F0R2_FB13_Msk
 (0x1UL << 
CAN_F0R2_FB13_Pos
Ë

	)

7742 
	#CAN_F0R2_FB13
 
CAN_F0R2_FB13_Msk


	)

7743 
	#CAN_F0R2_FB14_Pos
 (14U)

	)

7744 
	#CAN_F0R2_FB14_Msk
 (0x1UL << 
CAN_F0R2_FB14_Pos
Ë

	)

7745 
	#CAN_F0R2_FB14
 
CAN_F0R2_FB14_Msk


	)

7746 
	#CAN_F0R2_FB15_Pos
 (15U)

	)

7747 
	#CAN_F0R2_FB15_Msk
 (0x1UL << 
CAN_F0R2_FB15_Pos
Ë

	)

7748 
	#CAN_F0R2_FB15
 
CAN_F0R2_FB15_Msk


	)

7749 
	#CAN_F0R2_FB16_Pos
 (16U)

	)

7750 
	#CAN_F0R2_FB16_Msk
 (0x1UL << 
CAN_F0R2_FB16_Pos
Ë

	)

7751 
	#CAN_F0R2_FB16
 
CAN_F0R2_FB16_Msk


	)

7752 
	#CAN_F0R2_FB17_Pos
 (17U)

	)

7753 
	#CAN_F0R2_FB17_Msk
 (0x1UL << 
CAN_F0R2_FB17_Pos
Ë

	)

7754 
	#CAN_F0R2_FB17
 
CAN_F0R2_FB17_Msk


	)

7755 
	#CAN_F0R2_FB18_Pos
 (18U)

	)

7756 
	#CAN_F0R2_FB18_Msk
 (0x1UL << 
CAN_F0R2_FB18_Pos
Ë

	)

7757 
	#CAN_F0R2_FB18
 
CAN_F0R2_FB18_Msk


	)

7758 
	#CAN_F0R2_FB19_Pos
 (19U)

	)

7759 
	#CAN_F0R2_FB19_Msk
 (0x1UL << 
CAN_F0R2_FB19_Pos
Ë

	)

7760 
	#CAN_F0R2_FB19
 
CAN_F0R2_FB19_Msk


	)

7761 
	#CAN_F0R2_FB20_Pos
 (20U)

	)

7762 
	#CAN_F0R2_FB20_Msk
 (0x1UL << 
CAN_F0R2_FB20_Pos
Ë

	)

7763 
	#CAN_F0R2_FB20
 
CAN_F0R2_FB20_Msk


	)

7764 
	#CAN_F0R2_FB21_Pos
 (21U)

	)

7765 
	#CAN_F0R2_FB21_Msk
 (0x1UL << 
CAN_F0R2_FB21_Pos
Ë

	)

7766 
	#CAN_F0R2_FB21
 
CAN_F0R2_FB21_Msk


	)

7767 
	#CAN_F0R2_FB22_Pos
 (22U)

	)

7768 
	#CAN_F0R2_FB22_Msk
 (0x1UL << 
CAN_F0R2_FB22_Pos
Ë

	)

7769 
	#CAN_F0R2_FB22
 
CAN_F0R2_FB22_Msk


	)

7770 
	#CAN_F0R2_FB23_Pos
 (23U)

	)

7771 
	#CAN_F0R2_FB23_Msk
 (0x1UL << 
CAN_F0R2_FB23_Pos
Ë

	)

7772 
	#CAN_F0R2_FB23
 
CAN_F0R2_FB23_Msk


	)

7773 
	#CAN_F0R2_FB24_Pos
 (24U)

	)

7774 
	#CAN_F0R2_FB24_Msk
 (0x1UL << 
CAN_F0R2_FB24_Pos
Ë

	)

7775 
	#CAN_F0R2_FB24
 
CAN_F0R2_FB24_Msk


	)

7776 
	#CAN_F0R2_FB25_Pos
 (25U)

	)

7777 
	#CAN_F0R2_FB25_Msk
 (0x1UL << 
CAN_F0R2_FB25_Pos
Ë

	)

7778 
	#CAN_F0R2_FB25
 
CAN_F0R2_FB25_Msk


	)

7779 
	#CAN_F0R2_FB26_Pos
 (26U)

	)

7780 
	#CAN_F0R2_FB26_Msk
 (0x1UL << 
CAN_F0R2_FB26_Pos
Ë

	)

7781 
	#CAN_F0R2_FB26
 
CAN_F0R2_FB26_Msk


	)

7782 
	#CAN_F0R2_FB27_Pos
 (27U)

	)

7783 
	#CAN_F0R2_FB27_Msk
 (0x1UL << 
CAN_F0R2_FB27_Pos
Ë

	)

7784 
	#CAN_F0R2_FB27
 
CAN_F0R2_FB27_Msk


	)

7785 
	#CAN_F0R2_FB28_Pos
 (28U)

	)

7786 
	#CAN_F0R2_FB28_Msk
 (0x1UL << 
CAN_F0R2_FB28_Pos
Ë

	)

7787 
	#CAN_F0R2_FB28
 
CAN_F0R2_FB28_Msk


	)

7788 
	#CAN_F0R2_FB29_Pos
 (29U)

	)

7789 
	#CAN_F0R2_FB29_Msk
 (0x1UL << 
CAN_F0R2_FB29_Pos
Ë

	)

7790 
	#CAN_F0R2_FB29
 
CAN_F0R2_FB29_Msk


	)

7791 
	#CAN_F0R2_FB30_Pos
 (30U)

	)

7792 
	#CAN_F0R2_FB30_Msk
 (0x1UL << 
CAN_F0R2_FB30_Pos
Ë

	)

7793 
	#CAN_F0R2_FB30
 
CAN_F0R2_FB30_Msk


	)

7794 
	#CAN_F0R2_FB31_Pos
 (31U)

	)

7795 
	#CAN_F0R2_FB31_Msk
 (0x1UL << 
CAN_F0R2_FB31_Pos
Ë

	)

7796 
	#CAN_F0R2_FB31
 
CAN_F0R2_FB31_Msk


	)

7799 
	#CAN_F1R2_FB0_Pos
 (0U)

	)

7800 
	#CAN_F1R2_FB0_Msk
 (0x1UL << 
CAN_F1R2_FB0_Pos
Ë

	)

7801 
	#CAN_F1R2_FB0
 
CAN_F1R2_FB0_Msk


	)

7802 
	#CAN_F1R2_FB1_Pos
 (1U)

	)

7803 
	#CAN_F1R2_FB1_Msk
 (0x1UL << 
CAN_F1R2_FB1_Pos
Ë

	)

7804 
	#CAN_F1R2_FB1
 
CAN_F1R2_FB1_Msk


	)

7805 
	#CAN_F1R2_FB2_Pos
 (2U)

	)

7806 
	#CAN_F1R2_FB2_Msk
 (0x1UL << 
CAN_F1R2_FB2_Pos
Ë

	)

7807 
	#CAN_F1R2_FB2
 
CAN_F1R2_FB2_Msk


	)

7808 
	#CAN_F1R2_FB3_Pos
 (3U)

	)

7809 
	#CAN_F1R2_FB3_Msk
 (0x1UL << 
CAN_F1R2_FB3_Pos
Ë

	)

7810 
	#CAN_F1R2_FB3
 
CAN_F1R2_FB3_Msk


	)

7811 
	#CAN_F1R2_FB4_Pos
 (4U)

	)

7812 
	#CAN_F1R2_FB4_Msk
 (0x1UL << 
CAN_F1R2_FB4_Pos
Ë

	)

7813 
	#CAN_F1R2_FB4
 
CAN_F1R2_FB4_Msk


	)

7814 
	#CAN_F1R2_FB5_Pos
 (5U)

	)

7815 
	#CAN_F1R2_FB5_Msk
 (0x1UL << 
CAN_F1R2_FB5_Pos
Ë

	)

7816 
	#CAN_F1R2_FB5
 
CAN_F1R2_FB5_Msk


	)

7817 
	#CAN_F1R2_FB6_Pos
 (6U)

	)

7818 
	#CAN_F1R2_FB6_Msk
 (0x1UL << 
CAN_F1R2_FB6_Pos
Ë

	)

7819 
	#CAN_F1R2_FB6
 
CAN_F1R2_FB6_Msk


	)

7820 
	#CAN_F1R2_FB7_Pos
 (7U)

	)

7821 
	#CAN_F1R2_FB7_Msk
 (0x1UL << 
CAN_F1R2_FB7_Pos
Ë

	)

7822 
	#CAN_F1R2_FB7
 
CAN_F1R2_FB7_Msk


	)

7823 
	#CAN_F1R2_FB8_Pos
 (8U)

	)

7824 
	#CAN_F1R2_FB8_Msk
 (0x1UL << 
CAN_F1R2_FB8_Pos
Ë

	)

7825 
	#CAN_F1R2_FB8
 
CAN_F1R2_FB8_Msk


	)

7826 
	#CAN_F1R2_FB9_Pos
 (9U)

	)

7827 
	#CAN_F1R2_FB9_Msk
 (0x1UL << 
CAN_F1R2_FB9_Pos
Ë

	)

7828 
	#CAN_F1R2_FB9
 
CAN_F1R2_FB9_Msk


	)

7829 
	#CAN_F1R2_FB10_Pos
 (10U)

	)

7830 
	#CAN_F1R2_FB10_Msk
 (0x1UL << 
CAN_F1R2_FB10_Pos
Ë

	)

7831 
	#CAN_F1R2_FB10
 
CAN_F1R2_FB10_Msk


	)

7832 
	#CAN_F1R2_FB11_Pos
 (11U)

	)

7833 
	#CAN_F1R2_FB11_Msk
 (0x1UL << 
CAN_F1R2_FB11_Pos
Ë

	)

7834 
	#CAN_F1R2_FB11
 
CAN_F1R2_FB11_Msk


	)

7835 
	#CAN_F1R2_FB12_Pos
 (12U)

	)

7836 
	#CAN_F1R2_FB12_Msk
 (0x1UL << 
CAN_F1R2_FB12_Pos
Ë

	)

7837 
	#CAN_F1R2_FB12
 
CAN_F1R2_FB12_Msk


	)

7838 
	#CAN_F1R2_FB13_Pos
 (13U)

	)

7839 
	#CAN_F1R2_FB13_Msk
 (0x1UL << 
CAN_F1R2_FB13_Pos
Ë

	)

7840 
	#CAN_F1R2_FB13
 
CAN_F1R2_FB13_Msk


	)

7841 
	#CAN_F1R2_FB14_Pos
 (14U)

	)

7842 
	#CAN_F1R2_FB14_Msk
 (0x1UL << 
CAN_F1R2_FB14_Pos
Ë

	)

7843 
	#CAN_F1R2_FB14
 
CAN_F1R2_FB14_Msk


	)

7844 
	#CAN_F1R2_FB15_Pos
 (15U)

	)

7845 
	#CAN_F1R2_FB15_Msk
 (0x1UL << 
CAN_F1R2_FB15_Pos
Ë

	)

7846 
	#CAN_F1R2_FB15
 
CAN_F1R2_FB15_Msk


	)

7847 
	#CAN_F1R2_FB16_Pos
 (16U)

	)

7848 
	#CAN_F1R2_FB16_Msk
 (0x1UL << 
CAN_F1R2_FB16_Pos
Ë

	)

7849 
	#CAN_F1R2_FB16
 
CAN_F1R2_FB16_Msk


	)

7850 
	#CAN_F1R2_FB17_Pos
 (17U)

	)

7851 
	#CAN_F1R2_FB17_Msk
 (0x1UL << 
CAN_F1R2_FB17_Pos
Ë

	)

7852 
	#CAN_F1R2_FB17
 
CAN_F1R2_FB17_Msk


	)

7853 
	#CAN_F1R2_FB18_Pos
 (18U)

	)

7854 
	#CAN_F1R2_FB18_Msk
 (0x1UL << 
CAN_F1R2_FB18_Pos
Ë

	)

7855 
	#CAN_F1R2_FB18
 
CAN_F1R2_FB18_Msk


	)

7856 
	#CAN_F1R2_FB19_Pos
 (19U)

	)

7857 
	#CAN_F1R2_FB19_Msk
 (0x1UL << 
CAN_F1R2_FB19_Pos
Ë

	)

7858 
	#CAN_F1R2_FB19
 
CAN_F1R2_FB19_Msk


	)

7859 
	#CAN_F1R2_FB20_Pos
 (20U)

	)

7860 
	#CAN_F1R2_FB20_Msk
 (0x1UL << 
CAN_F1R2_FB20_Pos
Ë

	)

7861 
	#CAN_F1R2_FB20
 
CAN_F1R2_FB20_Msk


	)

7862 
	#CAN_F1R2_FB21_Pos
 (21U)

	)

7863 
	#CAN_F1R2_FB21_Msk
 (0x1UL << 
CAN_F1R2_FB21_Pos
Ë

	)

7864 
	#CAN_F1R2_FB21
 
CAN_F1R2_FB21_Msk


	)

7865 
	#CAN_F1R2_FB22_Pos
 (22U)

	)

7866 
	#CAN_F1R2_FB22_Msk
 (0x1UL << 
CAN_F1R2_FB22_Pos
Ë

	)

7867 
	#CAN_F1R2_FB22
 
CAN_F1R2_FB22_Msk


	)

7868 
	#CAN_F1R2_FB23_Pos
 (23U)

	)

7869 
	#CAN_F1R2_FB23_Msk
 (0x1UL << 
CAN_F1R2_FB23_Pos
Ë

	)

7870 
	#CAN_F1R2_FB23
 
CAN_F1R2_FB23_Msk


	)

7871 
	#CAN_F1R2_FB24_Pos
 (24U)

	)

7872 
	#CAN_F1R2_FB24_Msk
 (0x1UL << 
CAN_F1R2_FB24_Pos
Ë

	)

7873 
	#CAN_F1R2_FB24
 
CAN_F1R2_FB24_Msk


	)

7874 
	#CAN_F1R2_FB25_Pos
 (25U)

	)

7875 
	#CAN_F1R2_FB25_Msk
 (0x1UL << 
CAN_F1R2_FB25_Pos
Ë

	)

7876 
	#CAN_F1R2_FB25
 
CAN_F1R2_FB25_Msk


	)

7877 
	#CAN_F1R2_FB26_Pos
 (26U)

	)

7878 
	#CAN_F1R2_FB26_Msk
 (0x1UL << 
CAN_F1R2_FB26_Pos
Ë

	)

7879 
	#CAN_F1R2_FB26
 
CAN_F1R2_FB26_Msk


	)

7880 
	#CAN_F1R2_FB27_Pos
 (27U)

	)

7881 
	#CAN_F1R2_FB27_Msk
 (0x1UL << 
CAN_F1R2_FB27_Pos
Ë

	)

7882 
	#CAN_F1R2_FB27
 
CAN_F1R2_FB27_Msk


	)

7883 
	#CAN_F1R2_FB28_Pos
 (28U)

	)

7884 
	#CAN_F1R2_FB28_Msk
 (0x1UL << 
CAN_F1R2_FB28_Pos
Ë

	)

7885 
	#CAN_F1R2_FB28
 
CAN_F1R2_FB28_Msk


	)

7886 
	#CAN_F1R2_FB29_Pos
 (29U)

	)

7887 
	#CAN_F1R2_FB29_Msk
 (0x1UL << 
CAN_F1R2_FB29_Pos
Ë

	)

7888 
	#CAN_F1R2_FB29
 
CAN_F1R2_FB29_Msk


	)

7889 
	#CAN_F1R2_FB30_Pos
 (30U)

	)

7890 
	#CAN_F1R2_FB30_Msk
 (0x1UL << 
CAN_F1R2_FB30_Pos
Ë

	)

7891 
	#CAN_F1R2_FB30
 
CAN_F1R2_FB30_Msk


	)

7892 
	#CAN_F1R2_FB31_Pos
 (31U)

	)

7893 
	#CAN_F1R2_FB31_Msk
 (0x1UL << 
CAN_F1R2_FB31_Pos
Ë

	)

7894 
	#CAN_F1R2_FB31
 
CAN_F1R2_FB31_Msk


	)

7897 
	#CAN_F2R2_FB0_Pos
 (0U)

	)

7898 
	#CAN_F2R2_FB0_Msk
 (0x1UL << 
CAN_F2R2_FB0_Pos
Ë

	)

7899 
	#CAN_F2R2_FB0
 
CAN_F2R2_FB0_Msk


	)

7900 
	#CAN_F2R2_FB1_Pos
 (1U)

	)

7901 
	#CAN_F2R2_FB1_Msk
 (0x1UL << 
CAN_F2R2_FB1_Pos
Ë

	)

7902 
	#CAN_F2R2_FB1
 
CAN_F2R2_FB1_Msk


	)

7903 
	#CAN_F2R2_FB2_Pos
 (2U)

	)

7904 
	#CAN_F2R2_FB2_Msk
 (0x1UL << 
CAN_F2R2_FB2_Pos
Ë

	)

7905 
	#CAN_F2R2_FB2
 
CAN_F2R2_FB2_Msk


	)

7906 
	#CAN_F2R2_FB3_Pos
 (3U)

	)

7907 
	#CAN_F2R2_FB3_Msk
 (0x1UL << 
CAN_F2R2_FB3_Pos
Ë

	)

7908 
	#CAN_F2R2_FB3
 
CAN_F2R2_FB3_Msk


	)

7909 
	#CAN_F2R2_FB4_Pos
 (4U)

	)

7910 
	#CAN_F2R2_FB4_Msk
 (0x1UL << 
CAN_F2R2_FB4_Pos
Ë

	)

7911 
	#CAN_F2R2_FB4
 
CAN_F2R2_FB4_Msk


	)

7912 
	#CAN_F2R2_FB5_Pos
 (5U)

	)

7913 
	#CAN_F2R2_FB5_Msk
 (0x1UL << 
CAN_F2R2_FB5_Pos
Ë

	)

7914 
	#CAN_F2R2_FB5
 
CAN_F2R2_FB5_Msk


	)

7915 
	#CAN_F2R2_FB6_Pos
 (6U)

	)

7916 
	#CAN_F2R2_FB6_Msk
 (0x1UL << 
CAN_F2R2_FB6_Pos
Ë

	)

7917 
	#CAN_F2R2_FB6
 
CAN_F2R2_FB6_Msk


	)

7918 
	#CAN_F2R2_FB7_Pos
 (7U)

	)

7919 
	#CAN_F2R2_FB7_Msk
 (0x1UL << 
CAN_F2R2_FB7_Pos
Ë

	)

7920 
	#CAN_F2R2_FB7
 
CAN_F2R2_FB7_Msk


	)

7921 
	#CAN_F2R2_FB8_Pos
 (8U)

	)

7922 
	#CAN_F2R2_FB8_Msk
 (0x1UL << 
CAN_F2R2_FB8_Pos
Ë

	)

7923 
	#CAN_F2R2_FB8
 
CAN_F2R2_FB8_Msk


	)

7924 
	#CAN_F2R2_FB9_Pos
 (9U)

	)

7925 
	#CAN_F2R2_FB9_Msk
 (0x1UL << 
CAN_F2R2_FB9_Pos
Ë

	)

7926 
	#CAN_F2R2_FB9
 
CAN_F2R2_FB9_Msk


	)

7927 
	#CAN_F2R2_FB10_Pos
 (10U)

	)

7928 
	#CAN_F2R2_FB10_Msk
 (0x1UL << 
CAN_F2R2_FB10_Pos
Ë

	)

7929 
	#CAN_F2R2_FB10
 
CAN_F2R2_FB10_Msk


	)

7930 
	#CAN_F2R2_FB11_Pos
 (11U)

	)

7931 
	#CAN_F2R2_FB11_Msk
 (0x1UL << 
CAN_F2R2_FB11_Pos
Ë

	)

7932 
	#CAN_F2R2_FB11
 
CAN_F2R2_FB11_Msk


	)

7933 
	#CAN_F2R2_FB12_Pos
 (12U)

	)

7934 
	#CAN_F2R2_FB12_Msk
 (0x1UL << 
CAN_F2R2_FB12_Pos
Ë

	)

7935 
	#CAN_F2R2_FB12
 
CAN_F2R2_FB12_Msk


	)

7936 
	#CAN_F2R2_FB13_Pos
 (13U)

	)

7937 
	#CAN_F2R2_FB13_Msk
 (0x1UL << 
CAN_F2R2_FB13_Pos
Ë

	)

7938 
	#CAN_F2R2_FB13
 
CAN_F2R2_FB13_Msk


	)

7939 
	#CAN_F2R2_FB14_Pos
 (14U)

	)

7940 
	#CAN_F2R2_FB14_Msk
 (0x1UL << 
CAN_F2R2_FB14_Pos
Ë

	)

7941 
	#CAN_F2R2_FB14
 
CAN_F2R2_FB14_Msk


	)

7942 
	#CAN_F2R2_FB15_Pos
 (15U)

	)

7943 
	#CAN_F2R2_FB15_Msk
 (0x1UL << 
CAN_F2R2_FB15_Pos
Ë

	)

7944 
	#CAN_F2R2_FB15
 
CAN_F2R2_FB15_Msk


	)

7945 
	#CAN_F2R2_FB16_Pos
 (16U)

	)

7946 
	#CAN_F2R2_FB16_Msk
 (0x1UL << 
CAN_F2R2_FB16_Pos
Ë

	)

7947 
	#CAN_F2R2_FB16
 
CAN_F2R2_FB16_Msk


	)

7948 
	#CAN_F2R2_FB17_Pos
 (17U)

	)

7949 
	#CAN_F2R2_FB17_Msk
 (0x1UL << 
CAN_F2R2_FB17_Pos
Ë

	)

7950 
	#CAN_F2R2_FB17
 
CAN_F2R2_FB17_Msk


	)

7951 
	#CAN_F2R2_FB18_Pos
 (18U)

	)

7952 
	#CAN_F2R2_FB18_Msk
 (0x1UL << 
CAN_F2R2_FB18_Pos
Ë

	)

7953 
	#CAN_F2R2_FB18
 
CAN_F2R2_FB18_Msk


	)

7954 
	#CAN_F2R2_FB19_Pos
 (19U)

	)

7955 
	#CAN_F2R2_FB19_Msk
 (0x1UL << 
CAN_F2R2_FB19_Pos
Ë

	)

7956 
	#CAN_F2R2_FB19
 
CAN_F2R2_FB19_Msk


	)

7957 
	#CAN_F2R2_FB20_Pos
 (20U)

	)

7958 
	#CAN_F2R2_FB20_Msk
 (0x1UL << 
CAN_F2R2_FB20_Pos
Ë

	)

7959 
	#CAN_F2R2_FB20
 
CAN_F2R2_FB20_Msk


	)

7960 
	#CAN_F2R2_FB21_Pos
 (21U)

	)

7961 
	#CAN_F2R2_FB21_Msk
 (0x1UL << 
CAN_F2R2_FB21_Pos
Ë

	)

7962 
	#CAN_F2R2_FB21
 
CAN_F2R2_FB21_Msk


	)

7963 
	#CAN_F2R2_FB22_Pos
 (22U)

	)

7964 
	#CAN_F2R2_FB22_Msk
 (0x1UL << 
CAN_F2R2_FB22_Pos
Ë

	)

7965 
	#CAN_F2R2_FB22
 
CAN_F2R2_FB22_Msk


	)

7966 
	#CAN_F2R2_FB23_Pos
 (23U)

	)

7967 
	#CAN_F2R2_FB23_Msk
 (0x1UL << 
CAN_F2R2_FB23_Pos
Ë

	)

7968 
	#CAN_F2R2_FB23
 
CAN_F2R2_FB23_Msk


	)

7969 
	#CAN_F2R2_FB24_Pos
 (24U)

	)

7970 
	#CAN_F2R2_FB24_Msk
 (0x1UL << 
CAN_F2R2_FB24_Pos
Ë

	)

7971 
	#CAN_F2R2_FB24
 
CAN_F2R2_FB24_Msk


	)

7972 
	#CAN_F2R2_FB25_Pos
 (25U)

	)

7973 
	#CAN_F2R2_FB25_Msk
 (0x1UL << 
CAN_F2R2_FB25_Pos
Ë

	)

7974 
	#CAN_F2R2_FB25
 
CAN_F2R2_FB25_Msk


	)

7975 
	#CAN_F2R2_FB26_Pos
 (26U)

	)

7976 
	#CAN_F2R2_FB26_Msk
 (0x1UL << 
CAN_F2R2_FB26_Pos
Ë

	)

7977 
	#CAN_F2R2_FB26
 
CAN_F2R2_FB26_Msk


	)

7978 
	#CAN_F2R2_FB27_Pos
 (27U)

	)

7979 
	#CAN_F2R2_FB27_Msk
 (0x1UL << 
CAN_F2R2_FB27_Pos
Ë

	)

7980 
	#CAN_F2R2_FB27
 
CAN_F2R2_FB27_Msk


	)

7981 
	#CAN_F2R2_FB28_Pos
 (28U)

	)

7982 
	#CAN_F2R2_FB28_Msk
 (0x1UL << 
CAN_F2R2_FB28_Pos
Ë

	)

7983 
	#CAN_F2R2_FB28
 
CAN_F2R2_FB28_Msk


	)

7984 
	#CAN_F2R2_FB29_Pos
 (29U)

	)

7985 
	#CAN_F2R2_FB29_Msk
 (0x1UL << 
CAN_F2R2_FB29_Pos
Ë

	)

7986 
	#CAN_F2R2_FB29
 
CAN_F2R2_FB29_Msk


	)

7987 
	#CAN_F2R2_FB30_Pos
 (30U)

	)

7988 
	#CAN_F2R2_FB30_Msk
 (0x1UL << 
CAN_F2R2_FB30_Pos
Ë

	)

7989 
	#CAN_F2R2_FB30
 
CAN_F2R2_FB30_Msk


	)

7990 
	#CAN_F2R2_FB31_Pos
 (31U)

	)

7991 
	#CAN_F2R2_FB31_Msk
 (0x1UL << 
CAN_F2R2_FB31_Pos
Ë

	)

7992 
	#CAN_F2R2_FB31
 
CAN_F2R2_FB31_Msk


	)

7995 
	#CAN_F3R2_FB0_Pos
 (0U)

	)

7996 
	#CAN_F3R2_FB0_Msk
 (0x1UL << 
CAN_F3R2_FB0_Pos
Ë

	)

7997 
	#CAN_F3R2_FB0
 
CAN_F3R2_FB0_Msk


	)

7998 
	#CAN_F3R2_FB1_Pos
 (1U)

	)

7999 
	#CAN_F3R2_FB1_Msk
 (0x1UL << 
CAN_F3R2_FB1_Pos
Ë

	)

8000 
	#CAN_F3R2_FB1
 
CAN_F3R2_FB1_Msk


	)

8001 
	#CAN_F3R2_FB2_Pos
 (2U)

	)

8002 
	#CAN_F3R2_FB2_Msk
 (0x1UL << 
CAN_F3R2_FB2_Pos
Ë

	)

8003 
	#CAN_F3R2_FB2
 
CAN_F3R2_FB2_Msk


	)

8004 
	#CAN_F3R2_FB3_Pos
 (3U)

	)

8005 
	#CAN_F3R2_FB3_Msk
 (0x1UL << 
CAN_F3R2_FB3_Pos
Ë

	)

8006 
	#CAN_F3R2_FB3
 
CAN_F3R2_FB3_Msk


	)

8007 
	#CAN_F3R2_FB4_Pos
 (4U)

	)

8008 
	#CAN_F3R2_FB4_Msk
 (0x1UL << 
CAN_F3R2_FB4_Pos
Ë

	)

8009 
	#CAN_F3R2_FB4
 
CAN_F3R2_FB4_Msk


	)

8010 
	#CAN_F3R2_FB5_Pos
 (5U)

	)

8011 
	#CAN_F3R2_FB5_Msk
 (0x1UL << 
CAN_F3R2_FB5_Pos
Ë

	)

8012 
	#CAN_F3R2_FB5
 
CAN_F3R2_FB5_Msk


	)

8013 
	#CAN_F3R2_FB6_Pos
 (6U)

	)

8014 
	#CAN_F3R2_FB6_Msk
 (0x1UL << 
CAN_F3R2_FB6_Pos
Ë

	)

8015 
	#CAN_F3R2_FB6
 
CAN_F3R2_FB6_Msk


	)

8016 
	#CAN_F3R2_FB7_Pos
 (7U)

	)

8017 
	#CAN_F3R2_FB7_Msk
 (0x1UL << 
CAN_F3R2_FB7_Pos
Ë

	)

8018 
	#CAN_F3R2_FB7
 
CAN_F3R2_FB7_Msk


	)

8019 
	#CAN_F3R2_FB8_Pos
 (8U)

	)

8020 
	#CAN_F3R2_FB8_Msk
 (0x1UL << 
CAN_F3R2_FB8_Pos
Ë

	)

8021 
	#CAN_F3R2_FB8
 
CAN_F3R2_FB8_Msk


	)

8022 
	#CAN_F3R2_FB9_Pos
 (9U)

	)

8023 
	#CAN_F3R2_FB9_Msk
 (0x1UL << 
CAN_F3R2_FB9_Pos
Ë

	)

8024 
	#CAN_F3R2_FB9
 
CAN_F3R2_FB9_Msk


	)

8025 
	#CAN_F3R2_FB10_Pos
 (10U)

	)

8026 
	#CAN_F3R2_FB10_Msk
 (0x1UL << 
CAN_F3R2_FB10_Pos
Ë

	)

8027 
	#CAN_F3R2_FB10
 
CAN_F3R2_FB10_Msk


	)

8028 
	#CAN_F3R2_FB11_Pos
 (11U)

	)

8029 
	#CAN_F3R2_FB11_Msk
 (0x1UL << 
CAN_F3R2_FB11_Pos
Ë

	)

8030 
	#CAN_F3R2_FB11
 
CAN_F3R2_FB11_Msk


	)

8031 
	#CAN_F3R2_FB12_Pos
 (12U)

	)

8032 
	#CAN_F3R2_FB12_Msk
 (0x1UL << 
CAN_F3R2_FB12_Pos
Ë

	)

8033 
	#CAN_F3R2_FB12
 
CAN_F3R2_FB12_Msk


	)

8034 
	#CAN_F3R2_FB13_Pos
 (13U)

	)

8035 
	#CAN_F3R2_FB13_Msk
 (0x1UL << 
CAN_F3R2_FB13_Pos
Ë

	)

8036 
	#CAN_F3R2_FB13
 
CAN_F3R2_FB13_Msk


	)

8037 
	#CAN_F3R2_FB14_Pos
 (14U)

	)

8038 
	#CAN_F3R2_FB14_Msk
 (0x1UL << 
CAN_F3R2_FB14_Pos
Ë

	)

8039 
	#CAN_F3R2_FB14
 
CAN_F3R2_FB14_Msk


	)

8040 
	#CAN_F3R2_FB15_Pos
 (15U)

	)

8041 
	#CAN_F3R2_FB15_Msk
 (0x1UL << 
CAN_F3R2_FB15_Pos
Ë

	)

8042 
	#CAN_F3R2_FB15
 
CAN_F3R2_FB15_Msk


	)

8043 
	#CAN_F3R2_FB16_Pos
 (16U)

	)

8044 
	#CAN_F3R2_FB16_Msk
 (0x1UL << 
CAN_F3R2_FB16_Pos
Ë

	)

8045 
	#CAN_F3R2_FB16
 
CAN_F3R2_FB16_Msk


	)

8046 
	#CAN_F3R2_FB17_Pos
 (17U)

	)

8047 
	#CAN_F3R2_FB17_Msk
 (0x1UL << 
CAN_F3R2_FB17_Pos
Ë

	)

8048 
	#CAN_F3R2_FB17
 
CAN_F3R2_FB17_Msk


	)

8049 
	#CAN_F3R2_FB18_Pos
 (18U)

	)

8050 
	#CAN_F3R2_FB18_Msk
 (0x1UL << 
CAN_F3R2_FB18_Pos
Ë

	)

8051 
	#CAN_F3R2_FB18
 
CAN_F3R2_FB18_Msk


	)

8052 
	#CAN_F3R2_FB19_Pos
 (19U)

	)

8053 
	#CAN_F3R2_FB19_Msk
 (0x1UL << 
CAN_F3R2_FB19_Pos
Ë

	)

8054 
	#CAN_F3R2_FB19
 
CAN_F3R2_FB19_Msk


	)

8055 
	#CAN_F3R2_FB20_Pos
 (20U)

	)

8056 
	#CAN_F3R2_FB20_Msk
 (0x1UL << 
CAN_F3R2_FB20_Pos
Ë

	)

8057 
	#CAN_F3R2_FB20
 
CAN_F3R2_FB20_Msk


	)

8058 
	#CAN_F3R2_FB21_Pos
 (21U)

	)

8059 
	#CAN_F3R2_FB21_Msk
 (0x1UL << 
CAN_F3R2_FB21_Pos
Ë

	)

8060 
	#CAN_F3R2_FB21
 
CAN_F3R2_FB21_Msk


	)

8061 
	#CAN_F3R2_FB22_Pos
 (22U)

	)

8062 
	#CAN_F3R2_FB22_Msk
 (0x1UL << 
CAN_F3R2_FB22_Pos
Ë

	)

8063 
	#CAN_F3R2_FB22
 
CAN_F3R2_FB22_Msk


	)

8064 
	#CAN_F3R2_FB23_Pos
 (23U)

	)

8065 
	#CAN_F3R2_FB23_Msk
 (0x1UL << 
CAN_F3R2_FB23_Pos
Ë

	)

8066 
	#CAN_F3R2_FB23
 
CAN_F3R2_FB23_Msk


	)

8067 
	#CAN_F3R2_FB24_Pos
 (24U)

	)

8068 
	#CAN_F3R2_FB24_Msk
 (0x1UL << 
CAN_F3R2_FB24_Pos
Ë

	)

8069 
	#CAN_F3R2_FB24
 
CAN_F3R2_FB24_Msk


	)

8070 
	#CAN_F3R2_FB25_Pos
 (25U)

	)

8071 
	#CAN_F3R2_FB25_Msk
 (0x1UL << 
CAN_F3R2_FB25_Pos
Ë

	)

8072 
	#CAN_F3R2_FB25
 
CAN_F3R2_FB25_Msk


	)

8073 
	#CAN_F3R2_FB26_Pos
 (26U)

	)

8074 
	#CAN_F3R2_FB26_Msk
 (0x1UL << 
CAN_F3R2_FB26_Pos
Ë

	)

8075 
	#CAN_F3R2_FB26
 
CAN_F3R2_FB26_Msk


	)

8076 
	#CAN_F3R2_FB27_Pos
 (27U)

	)

8077 
	#CAN_F3R2_FB27_Msk
 (0x1UL << 
CAN_F3R2_FB27_Pos
Ë

	)

8078 
	#CAN_F3R2_FB27
 
CAN_F3R2_FB27_Msk


	)

8079 
	#CAN_F3R2_FB28_Pos
 (28U)

	)

8080 
	#CAN_F3R2_FB28_Msk
 (0x1UL << 
CAN_F3R2_FB28_Pos
Ë

	)

8081 
	#CAN_F3R2_FB28
 
CAN_F3R2_FB28_Msk


	)

8082 
	#CAN_F3R2_FB29_Pos
 (29U)

	)

8083 
	#CAN_F3R2_FB29_Msk
 (0x1UL << 
CAN_F3R2_FB29_Pos
Ë

	)

8084 
	#CAN_F3R2_FB29
 
CAN_F3R2_FB29_Msk


	)

8085 
	#CAN_F3R2_FB30_Pos
 (30U)

	)

8086 
	#CAN_F3R2_FB30_Msk
 (0x1UL << 
CAN_F3R2_FB30_Pos
Ë

	)

8087 
	#CAN_F3R2_FB30
 
CAN_F3R2_FB30_Msk


	)

8088 
	#CAN_F3R2_FB31_Pos
 (31U)

	)

8089 
	#CAN_F3R2_FB31_Msk
 (0x1UL << 
CAN_F3R2_FB31_Pos
Ë

	)

8090 
	#CAN_F3R2_FB31
 
CAN_F3R2_FB31_Msk


	)

8093 
	#CAN_F4R2_FB0_Pos
 (0U)

	)

8094 
	#CAN_F4R2_FB0_Msk
 (0x1UL << 
CAN_F4R2_FB0_Pos
Ë

	)

8095 
	#CAN_F4R2_FB0
 
CAN_F4R2_FB0_Msk


	)

8096 
	#CAN_F4R2_FB1_Pos
 (1U)

	)

8097 
	#CAN_F4R2_FB1_Msk
 (0x1UL << 
CAN_F4R2_FB1_Pos
Ë

	)

8098 
	#CAN_F4R2_FB1
 
CAN_F4R2_FB1_Msk


	)

8099 
	#CAN_F4R2_FB2_Pos
 (2U)

	)

8100 
	#CAN_F4R2_FB2_Msk
 (0x1UL << 
CAN_F4R2_FB2_Pos
Ë

	)

8101 
	#CAN_F4R2_FB2
 
CAN_F4R2_FB2_Msk


	)

8102 
	#CAN_F4R2_FB3_Pos
 (3U)

	)

8103 
	#CAN_F4R2_FB3_Msk
 (0x1UL << 
CAN_F4R2_FB3_Pos
Ë

	)

8104 
	#CAN_F4R2_FB3
 
CAN_F4R2_FB3_Msk


	)

8105 
	#CAN_F4R2_FB4_Pos
 (4U)

	)

8106 
	#CAN_F4R2_FB4_Msk
 (0x1UL << 
CAN_F4R2_FB4_Pos
Ë

	)

8107 
	#CAN_F4R2_FB4
 
CAN_F4R2_FB4_Msk


	)

8108 
	#CAN_F4R2_FB5_Pos
 (5U)

	)

8109 
	#CAN_F4R2_FB5_Msk
 (0x1UL << 
CAN_F4R2_FB5_Pos
Ë

	)

8110 
	#CAN_F4R2_FB5
 
CAN_F4R2_FB5_Msk


	)

8111 
	#CAN_F4R2_FB6_Pos
 (6U)

	)

8112 
	#CAN_F4R2_FB6_Msk
 (0x1UL << 
CAN_F4R2_FB6_Pos
Ë

	)

8113 
	#CAN_F4R2_FB6
 
CAN_F4R2_FB6_Msk


	)

8114 
	#CAN_F4R2_FB7_Pos
 (7U)

	)

8115 
	#CAN_F4R2_FB7_Msk
 (0x1UL << 
CAN_F4R2_FB7_Pos
Ë

	)

8116 
	#CAN_F4R2_FB7
 
CAN_F4R2_FB7_Msk


	)

8117 
	#CAN_F4R2_FB8_Pos
 (8U)

	)

8118 
	#CAN_F4R2_FB8_Msk
 (0x1UL << 
CAN_F4R2_FB8_Pos
Ë

	)

8119 
	#CAN_F4R2_FB8
 
CAN_F4R2_FB8_Msk


	)

8120 
	#CAN_F4R2_FB9_Pos
 (9U)

	)

8121 
	#CAN_F4R2_FB9_Msk
 (0x1UL << 
CAN_F4R2_FB9_Pos
Ë

	)

8122 
	#CAN_F4R2_FB9
 
CAN_F4R2_FB9_Msk


	)

8123 
	#CAN_F4R2_FB10_Pos
 (10U)

	)

8124 
	#CAN_F4R2_FB10_Msk
 (0x1UL << 
CAN_F4R2_FB10_Pos
Ë

	)

8125 
	#CAN_F4R2_FB10
 
CAN_F4R2_FB10_Msk


	)

8126 
	#CAN_F4R2_FB11_Pos
 (11U)

	)

8127 
	#CAN_F4R2_FB11_Msk
 (0x1UL << 
CAN_F4R2_FB11_Pos
Ë

	)

8128 
	#CAN_F4R2_FB11
 
CAN_F4R2_FB11_Msk


	)

8129 
	#CAN_F4R2_FB12_Pos
 (12U)

	)

8130 
	#CAN_F4R2_FB12_Msk
 (0x1UL << 
CAN_F4R2_FB12_Pos
Ë

	)

8131 
	#CAN_F4R2_FB12
 
CAN_F4R2_FB12_Msk


	)

8132 
	#CAN_F4R2_FB13_Pos
 (13U)

	)

8133 
	#CAN_F4R2_FB13_Msk
 (0x1UL << 
CAN_F4R2_FB13_Pos
Ë

	)

8134 
	#CAN_F4R2_FB13
 
CAN_F4R2_FB13_Msk


	)

8135 
	#CAN_F4R2_FB14_Pos
 (14U)

	)

8136 
	#CAN_F4R2_FB14_Msk
 (0x1UL << 
CAN_F4R2_FB14_Pos
Ë

	)

8137 
	#CAN_F4R2_FB14
 
CAN_F4R2_FB14_Msk


	)

8138 
	#CAN_F4R2_FB15_Pos
 (15U)

	)

8139 
	#CAN_F4R2_FB15_Msk
 (0x1UL << 
CAN_F4R2_FB15_Pos
Ë

	)

8140 
	#CAN_F4R2_FB15
 
CAN_F4R2_FB15_Msk


	)

8141 
	#CAN_F4R2_FB16_Pos
 (16U)

	)

8142 
	#CAN_F4R2_FB16_Msk
 (0x1UL << 
CAN_F4R2_FB16_Pos
Ë

	)

8143 
	#CAN_F4R2_FB16
 
CAN_F4R2_FB16_Msk


	)

8144 
	#CAN_F4R2_FB17_Pos
 (17U)

	)

8145 
	#CAN_F4R2_FB17_Msk
 (0x1UL << 
CAN_F4R2_FB17_Pos
Ë

	)

8146 
	#CAN_F4R2_FB17
 
CAN_F4R2_FB17_Msk


	)

8147 
	#CAN_F4R2_FB18_Pos
 (18U)

	)

8148 
	#CAN_F4R2_FB18_Msk
 (0x1UL << 
CAN_F4R2_FB18_Pos
Ë

	)

8149 
	#CAN_F4R2_FB18
 
CAN_F4R2_FB18_Msk


	)

8150 
	#CAN_F4R2_FB19_Pos
 (19U)

	)

8151 
	#CAN_F4R2_FB19_Msk
 (0x1UL << 
CAN_F4R2_FB19_Pos
Ë

	)

8152 
	#CAN_F4R2_FB19
 
CAN_F4R2_FB19_Msk


	)

8153 
	#CAN_F4R2_FB20_Pos
 (20U)

	)

8154 
	#CAN_F4R2_FB20_Msk
 (0x1UL << 
CAN_F4R2_FB20_Pos
Ë

	)

8155 
	#CAN_F4R2_FB20
 
CAN_F4R2_FB20_Msk


	)

8156 
	#CAN_F4R2_FB21_Pos
 (21U)

	)

8157 
	#CAN_F4R2_FB21_Msk
 (0x1UL << 
CAN_F4R2_FB21_Pos
Ë

	)

8158 
	#CAN_F4R2_FB21
 
CAN_F4R2_FB21_Msk


	)

8159 
	#CAN_F4R2_FB22_Pos
 (22U)

	)

8160 
	#CAN_F4R2_FB22_Msk
 (0x1UL << 
CAN_F4R2_FB22_Pos
Ë

	)

8161 
	#CAN_F4R2_FB22
 
CAN_F4R2_FB22_Msk


	)

8162 
	#CAN_F4R2_FB23_Pos
 (23U)

	)

8163 
	#CAN_F4R2_FB23_Msk
 (0x1UL << 
CAN_F4R2_FB23_Pos
Ë

	)

8164 
	#CAN_F4R2_FB23
 
CAN_F4R2_FB23_Msk


	)

8165 
	#CAN_F4R2_FB24_Pos
 (24U)

	)

8166 
	#CAN_F4R2_FB24_Msk
 (0x1UL << 
CAN_F4R2_FB24_Pos
Ë

	)

8167 
	#CAN_F4R2_FB24
 
CAN_F4R2_FB24_Msk


	)

8168 
	#CAN_F4R2_FB25_Pos
 (25U)

	)

8169 
	#CAN_F4R2_FB25_Msk
 (0x1UL << 
CAN_F4R2_FB25_Pos
Ë

	)

8170 
	#CAN_F4R2_FB25
 
CAN_F4R2_FB25_Msk


	)

8171 
	#CAN_F4R2_FB26_Pos
 (26U)

	)

8172 
	#CAN_F4R2_FB26_Msk
 (0x1UL << 
CAN_F4R2_FB26_Pos
Ë

	)

8173 
	#CAN_F4R2_FB26
 
CAN_F4R2_FB26_Msk


	)

8174 
	#CAN_F4R2_FB27_Pos
 (27U)

	)

8175 
	#CAN_F4R2_FB27_Msk
 (0x1UL << 
CAN_F4R2_FB27_Pos
Ë

	)

8176 
	#CAN_F4R2_FB27
 
CAN_F4R2_FB27_Msk


	)

8177 
	#CAN_F4R2_FB28_Pos
 (28U)

	)

8178 
	#CAN_F4R2_FB28_Msk
 (0x1UL << 
CAN_F4R2_FB28_Pos
Ë

	)

8179 
	#CAN_F4R2_FB28
 
CAN_F4R2_FB28_Msk


	)

8180 
	#CAN_F4R2_FB29_Pos
 (29U)

	)

8181 
	#CAN_F4R2_FB29_Msk
 (0x1UL << 
CAN_F4R2_FB29_Pos
Ë

	)

8182 
	#CAN_F4R2_FB29
 
CAN_F4R2_FB29_Msk


	)

8183 
	#CAN_F4R2_FB30_Pos
 (30U)

	)

8184 
	#CAN_F4R2_FB30_Msk
 (0x1UL << 
CAN_F4R2_FB30_Pos
Ë

	)

8185 
	#CAN_F4R2_FB30
 
CAN_F4R2_FB30_Msk


	)

8186 
	#CAN_F4R2_FB31_Pos
 (31U)

	)

8187 
	#CAN_F4R2_FB31_Msk
 (0x1UL << 
CAN_F4R2_FB31_Pos
Ë

	)

8188 
	#CAN_F4R2_FB31
 
CAN_F4R2_FB31_Msk


	)

8191 
	#CAN_F5R2_FB0_Pos
 (0U)

	)

8192 
	#CAN_F5R2_FB0_Msk
 (0x1UL << 
CAN_F5R2_FB0_Pos
Ë

	)

8193 
	#CAN_F5R2_FB0
 
CAN_F5R2_FB0_Msk


	)

8194 
	#CAN_F5R2_FB1_Pos
 (1U)

	)

8195 
	#CAN_F5R2_FB1_Msk
 (0x1UL << 
CAN_F5R2_FB1_Pos
Ë

	)

8196 
	#CAN_F5R2_FB1
 
CAN_F5R2_FB1_Msk


	)

8197 
	#CAN_F5R2_FB2_Pos
 (2U)

	)

8198 
	#CAN_F5R2_FB2_Msk
 (0x1UL << 
CAN_F5R2_FB2_Pos
Ë

	)

8199 
	#CAN_F5R2_FB2
 
CAN_F5R2_FB2_Msk


	)

8200 
	#CAN_F5R2_FB3_Pos
 (3U)

	)

8201 
	#CAN_F5R2_FB3_Msk
 (0x1UL << 
CAN_F5R2_FB3_Pos
Ë

	)

8202 
	#CAN_F5R2_FB3
 
CAN_F5R2_FB3_Msk


	)

8203 
	#CAN_F5R2_FB4_Pos
 (4U)

	)

8204 
	#CAN_F5R2_FB4_Msk
 (0x1UL << 
CAN_F5R2_FB4_Pos
Ë

	)

8205 
	#CAN_F5R2_FB4
 
CAN_F5R2_FB4_Msk


	)

8206 
	#CAN_F5R2_FB5_Pos
 (5U)

	)

8207 
	#CAN_F5R2_FB5_Msk
 (0x1UL << 
CAN_F5R2_FB5_Pos
Ë

	)

8208 
	#CAN_F5R2_FB5
 
CAN_F5R2_FB5_Msk


	)

8209 
	#CAN_F5R2_FB6_Pos
 (6U)

	)

8210 
	#CAN_F5R2_FB6_Msk
 (0x1UL << 
CAN_F5R2_FB6_Pos
Ë

	)

8211 
	#CAN_F5R2_FB6
 
CAN_F5R2_FB6_Msk


	)

8212 
	#CAN_F5R2_FB7_Pos
 (7U)

	)

8213 
	#CAN_F5R2_FB7_Msk
 (0x1UL << 
CAN_F5R2_FB7_Pos
Ë

	)

8214 
	#CAN_F5R2_FB7
 
CAN_F5R2_FB7_Msk


	)

8215 
	#CAN_F5R2_FB8_Pos
 (8U)

	)

8216 
	#CAN_F5R2_FB8_Msk
 (0x1UL << 
CAN_F5R2_FB8_Pos
Ë

	)

8217 
	#CAN_F5R2_FB8
 
CAN_F5R2_FB8_Msk


	)

8218 
	#CAN_F5R2_FB9_Pos
 (9U)

	)

8219 
	#CAN_F5R2_FB9_Msk
 (0x1UL << 
CAN_F5R2_FB9_Pos
Ë

	)

8220 
	#CAN_F5R2_FB9
 
CAN_F5R2_FB9_Msk


	)

8221 
	#CAN_F5R2_FB10_Pos
 (10U)

	)

8222 
	#CAN_F5R2_FB10_Msk
 (0x1UL << 
CAN_F5R2_FB10_Pos
Ë

	)

8223 
	#CAN_F5R2_FB10
 
CAN_F5R2_FB10_Msk


	)

8224 
	#CAN_F5R2_FB11_Pos
 (11U)

	)

8225 
	#CAN_F5R2_FB11_Msk
 (0x1UL << 
CAN_F5R2_FB11_Pos
Ë

	)

8226 
	#CAN_F5R2_FB11
 
CAN_F5R2_FB11_Msk


	)

8227 
	#CAN_F5R2_FB12_Pos
 (12U)

	)

8228 
	#CAN_F5R2_FB12_Msk
 (0x1UL << 
CAN_F5R2_FB12_Pos
Ë

	)

8229 
	#CAN_F5R2_FB12
 
CAN_F5R2_FB12_Msk


	)

8230 
	#CAN_F5R2_FB13_Pos
 (13U)

	)

8231 
	#CAN_F5R2_FB13_Msk
 (0x1UL << 
CAN_F5R2_FB13_Pos
Ë

	)

8232 
	#CAN_F5R2_FB13
 
CAN_F5R2_FB13_Msk


	)

8233 
	#CAN_F5R2_FB14_Pos
 (14U)

	)

8234 
	#CAN_F5R2_FB14_Msk
 (0x1UL << 
CAN_F5R2_FB14_Pos
Ë

	)

8235 
	#CAN_F5R2_FB14
 
CAN_F5R2_FB14_Msk


	)

8236 
	#CAN_F5R2_FB15_Pos
 (15U)

	)

8237 
	#CAN_F5R2_FB15_Msk
 (0x1UL << 
CAN_F5R2_FB15_Pos
Ë

	)

8238 
	#CAN_F5R2_FB15
 
CAN_F5R2_FB15_Msk


	)

8239 
	#CAN_F5R2_FB16_Pos
 (16U)

	)

8240 
	#CAN_F5R2_FB16_Msk
 (0x1UL << 
CAN_F5R2_FB16_Pos
Ë

	)

8241 
	#CAN_F5R2_FB16
 
CAN_F5R2_FB16_Msk


	)

8242 
	#CAN_F5R2_FB17_Pos
 (17U)

	)

8243 
	#CAN_F5R2_FB17_Msk
 (0x1UL << 
CAN_F5R2_FB17_Pos
Ë

	)

8244 
	#CAN_F5R2_FB17
 
CAN_F5R2_FB17_Msk


	)

8245 
	#CAN_F5R2_FB18_Pos
 (18U)

	)

8246 
	#CAN_F5R2_FB18_Msk
 (0x1UL << 
CAN_F5R2_FB18_Pos
Ë

	)

8247 
	#CAN_F5R2_FB18
 
CAN_F5R2_FB18_Msk


	)

8248 
	#CAN_F5R2_FB19_Pos
 (19U)

	)

8249 
	#CAN_F5R2_FB19_Msk
 (0x1UL << 
CAN_F5R2_FB19_Pos
Ë

	)

8250 
	#CAN_F5R2_FB19
 
CAN_F5R2_FB19_Msk


	)

8251 
	#CAN_F5R2_FB20_Pos
 (20U)

	)

8252 
	#CAN_F5R2_FB20_Msk
 (0x1UL << 
CAN_F5R2_FB20_Pos
Ë

	)

8253 
	#CAN_F5R2_FB20
 
CAN_F5R2_FB20_Msk


	)

8254 
	#CAN_F5R2_FB21_Pos
 (21U)

	)

8255 
	#CAN_F5R2_FB21_Msk
 (0x1UL << 
CAN_F5R2_FB21_Pos
Ë

	)

8256 
	#CAN_F5R2_FB21
 
CAN_F5R2_FB21_Msk


	)

8257 
	#CAN_F5R2_FB22_Pos
 (22U)

	)

8258 
	#CAN_F5R2_FB22_Msk
 (0x1UL << 
CAN_F5R2_FB22_Pos
Ë

	)

8259 
	#CAN_F5R2_FB22
 
CAN_F5R2_FB22_Msk


	)

8260 
	#CAN_F5R2_FB23_Pos
 (23U)

	)

8261 
	#CAN_F5R2_FB23_Msk
 (0x1UL << 
CAN_F5R2_FB23_Pos
Ë

	)

8262 
	#CAN_F5R2_FB23
 
CAN_F5R2_FB23_Msk


	)

8263 
	#CAN_F5R2_FB24_Pos
 (24U)

	)

8264 
	#CAN_F5R2_FB24_Msk
 (0x1UL << 
CAN_F5R2_FB24_Pos
Ë

	)

8265 
	#CAN_F5R2_FB24
 
CAN_F5R2_FB24_Msk


	)

8266 
	#CAN_F5R2_FB25_Pos
 (25U)

	)

8267 
	#CAN_F5R2_FB25_Msk
 (0x1UL << 
CAN_F5R2_FB25_Pos
Ë

	)

8268 
	#CAN_F5R2_FB25
 
CAN_F5R2_FB25_Msk


	)

8269 
	#CAN_F5R2_FB26_Pos
 (26U)

	)

8270 
	#CAN_F5R2_FB26_Msk
 (0x1UL << 
CAN_F5R2_FB26_Pos
Ë

	)

8271 
	#CAN_F5R2_FB26
 
CAN_F5R2_FB26_Msk


	)

8272 
	#CAN_F5R2_FB27_Pos
 (27U)

	)

8273 
	#CAN_F5R2_FB27_Msk
 (0x1UL << 
CAN_F5R2_FB27_Pos
Ë

	)

8274 
	#CAN_F5R2_FB27
 
CAN_F5R2_FB27_Msk


	)

8275 
	#CAN_F5R2_FB28_Pos
 (28U)

	)

8276 
	#CAN_F5R2_FB28_Msk
 (0x1UL << 
CAN_F5R2_FB28_Pos
Ë

	)

8277 
	#CAN_F5R2_FB28
 
CAN_F5R2_FB28_Msk


	)

8278 
	#CAN_F5R2_FB29_Pos
 (29U)

	)

8279 
	#CAN_F5R2_FB29_Msk
 (0x1UL << 
CAN_F5R2_FB29_Pos
Ë

	)

8280 
	#CAN_F5R2_FB29
 
CAN_F5R2_FB29_Msk


	)

8281 
	#CAN_F5R2_FB30_Pos
 (30U)

	)

8282 
	#CAN_F5R2_FB30_Msk
 (0x1UL << 
CAN_F5R2_FB30_Pos
Ë

	)

8283 
	#CAN_F5R2_FB30
 
CAN_F5R2_FB30_Msk


	)

8284 
	#CAN_F5R2_FB31_Pos
 (31U)

	)

8285 
	#CAN_F5R2_FB31_Msk
 (0x1UL << 
CAN_F5R2_FB31_Pos
Ë

	)

8286 
	#CAN_F5R2_FB31
 
CAN_F5R2_FB31_Msk


	)

8289 
	#CAN_F6R2_FB0_Pos
 (0U)

	)

8290 
	#CAN_F6R2_FB0_Msk
 (0x1UL << 
CAN_F6R2_FB0_Pos
Ë

	)

8291 
	#CAN_F6R2_FB0
 
CAN_F6R2_FB0_Msk


	)

8292 
	#CAN_F6R2_FB1_Pos
 (1U)

	)

8293 
	#CAN_F6R2_FB1_Msk
 (0x1UL << 
CAN_F6R2_FB1_Pos
Ë

	)

8294 
	#CAN_F6R2_FB1
 
CAN_F6R2_FB1_Msk


	)

8295 
	#CAN_F6R2_FB2_Pos
 (2U)

	)

8296 
	#CAN_F6R2_FB2_Msk
 (0x1UL << 
CAN_F6R2_FB2_Pos
Ë

	)

8297 
	#CAN_F6R2_FB2
 
CAN_F6R2_FB2_Msk


	)

8298 
	#CAN_F6R2_FB3_Pos
 (3U)

	)

8299 
	#CAN_F6R2_FB3_Msk
 (0x1UL << 
CAN_F6R2_FB3_Pos
Ë

	)

8300 
	#CAN_F6R2_FB3
 
CAN_F6R2_FB3_Msk


	)

8301 
	#CAN_F6R2_FB4_Pos
 (4U)

	)

8302 
	#CAN_F6R2_FB4_Msk
 (0x1UL << 
CAN_F6R2_FB4_Pos
Ë

	)

8303 
	#CAN_F6R2_FB4
 
CAN_F6R2_FB4_Msk


	)

8304 
	#CAN_F6R2_FB5_Pos
 (5U)

	)

8305 
	#CAN_F6R2_FB5_Msk
 (0x1UL << 
CAN_F6R2_FB5_Pos
Ë

	)

8306 
	#CAN_F6R2_FB5
 
CAN_F6R2_FB5_Msk


	)

8307 
	#CAN_F6R2_FB6_Pos
 (6U)

	)

8308 
	#CAN_F6R2_FB6_Msk
 (0x1UL << 
CAN_F6R2_FB6_Pos
Ë

	)

8309 
	#CAN_F6R2_FB6
 
CAN_F6R2_FB6_Msk


	)

8310 
	#CAN_F6R2_FB7_Pos
 (7U)

	)

8311 
	#CAN_F6R2_FB7_Msk
 (0x1UL << 
CAN_F6R2_FB7_Pos
Ë

	)

8312 
	#CAN_F6R2_FB7
 
CAN_F6R2_FB7_Msk


	)

8313 
	#CAN_F6R2_FB8_Pos
 (8U)

	)

8314 
	#CAN_F6R2_FB8_Msk
 (0x1UL << 
CAN_F6R2_FB8_Pos
Ë

	)

8315 
	#CAN_F6R2_FB8
 
CAN_F6R2_FB8_Msk


	)

8316 
	#CAN_F6R2_FB9_Pos
 (9U)

	)

8317 
	#CAN_F6R2_FB9_Msk
 (0x1UL << 
CAN_F6R2_FB9_Pos
Ë

	)

8318 
	#CAN_F6R2_FB9
 
CAN_F6R2_FB9_Msk


	)

8319 
	#CAN_F6R2_FB10_Pos
 (10U)

	)

8320 
	#CAN_F6R2_FB10_Msk
 (0x1UL << 
CAN_F6R2_FB10_Pos
Ë

	)

8321 
	#CAN_F6R2_FB10
 
CAN_F6R2_FB10_Msk


	)

8322 
	#CAN_F6R2_FB11_Pos
 (11U)

	)

8323 
	#CAN_F6R2_FB11_Msk
 (0x1UL << 
CAN_F6R2_FB11_Pos
Ë

	)

8324 
	#CAN_F6R2_FB11
 
CAN_F6R2_FB11_Msk


	)

8325 
	#CAN_F6R2_FB12_Pos
 (12U)

	)

8326 
	#CAN_F6R2_FB12_Msk
 (0x1UL << 
CAN_F6R2_FB12_Pos
Ë

	)

8327 
	#CAN_F6R2_FB12
 
CAN_F6R2_FB12_Msk


	)

8328 
	#CAN_F6R2_FB13_Pos
 (13U)

	)

8329 
	#CAN_F6R2_FB13_Msk
 (0x1UL << 
CAN_F6R2_FB13_Pos
Ë

	)

8330 
	#CAN_F6R2_FB13
 
CAN_F6R2_FB13_Msk


	)

8331 
	#CAN_F6R2_FB14_Pos
 (14U)

	)

8332 
	#CAN_F6R2_FB14_Msk
 (0x1UL << 
CAN_F6R2_FB14_Pos
Ë

	)

8333 
	#CAN_F6R2_FB14
 
CAN_F6R2_FB14_Msk


	)

8334 
	#CAN_F6R2_FB15_Pos
 (15U)

	)

8335 
	#CAN_F6R2_FB15_Msk
 (0x1UL << 
CAN_F6R2_FB15_Pos
Ë

	)

8336 
	#CAN_F6R2_FB15
 
CAN_F6R2_FB15_Msk


	)

8337 
	#CAN_F6R2_FB16_Pos
 (16U)

	)

8338 
	#CAN_F6R2_FB16_Msk
 (0x1UL << 
CAN_F6R2_FB16_Pos
Ë

	)

8339 
	#CAN_F6R2_FB16
 
CAN_F6R2_FB16_Msk


	)

8340 
	#CAN_F6R2_FB17_Pos
 (17U)

	)

8341 
	#CAN_F6R2_FB17_Msk
 (0x1UL << 
CAN_F6R2_FB17_Pos
Ë

	)

8342 
	#CAN_F6R2_FB17
 
CAN_F6R2_FB17_Msk


	)

8343 
	#CAN_F6R2_FB18_Pos
 (18U)

	)

8344 
	#CAN_F6R2_FB18_Msk
 (0x1UL << 
CAN_F6R2_FB18_Pos
Ë

	)

8345 
	#CAN_F6R2_FB18
 
CAN_F6R2_FB18_Msk


	)

8346 
	#CAN_F6R2_FB19_Pos
 (19U)

	)

8347 
	#CAN_F6R2_FB19_Msk
 (0x1UL << 
CAN_F6R2_FB19_Pos
Ë

	)

8348 
	#CAN_F6R2_FB19
 
CAN_F6R2_FB19_Msk


	)

8349 
	#CAN_F6R2_FB20_Pos
 (20U)

	)

8350 
	#CAN_F6R2_FB20_Msk
 (0x1UL << 
CAN_F6R2_FB20_Pos
Ë

	)

8351 
	#CAN_F6R2_FB20
 
CAN_F6R2_FB20_Msk


	)

8352 
	#CAN_F6R2_FB21_Pos
 (21U)

	)

8353 
	#CAN_F6R2_FB21_Msk
 (0x1UL << 
CAN_F6R2_FB21_Pos
Ë

	)

8354 
	#CAN_F6R2_FB21
 
CAN_F6R2_FB21_Msk


	)

8355 
	#CAN_F6R2_FB22_Pos
 (22U)

	)

8356 
	#CAN_F6R2_FB22_Msk
 (0x1UL << 
CAN_F6R2_FB22_Pos
Ë

	)

8357 
	#CAN_F6R2_FB22
 
CAN_F6R2_FB22_Msk


	)

8358 
	#CAN_F6R2_FB23_Pos
 (23U)

	)

8359 
	#CAN_F6R2_FB23_Msk
 (0x1UL << 
CAN_F6R2_FB23_Pos
Ë

	)

8360 
	#CAN_F6R2_FB23
 
CAN_F6R2_FB23_Msk


	)

8361 
	#CAN_F6R2_FB24_Pos
 (24U)

	)

8362 
	#CAN_F6R2_FB24_Msk
 (0x1UL << 
CAN_F6R2_FB24_Pos
Ë

	)

8363 
	#CAN_F6R2_FB24
 
CAN_F6R2_FB24_Msk


	)

8364 
	#CAN_F6R2_FB25_Pos
 (25U)

	)

8365 
	#CAN_F6R2_FB25_Msk
 (0x1UL << 
CAN_F6R2_FB25_Pos
Ë

	)

8366 
	#CAN_F6R2_FB25
 
CAN_F6R2_FB25_Msk


	)

8367 
	#CAN_F6R2_FB26_Pos
 (26U)

	)

8368 
	#CAN_F6R2_FB26_Msk
 (0x1UL << 
CAN_F6R2_FB26_Pos
Ë

	)

8369 
	#CAN_F6R2_FB26
 
CAN_F6R2_FB26_Msk


	)

8370 
	#CAN_F6R2_FB27_Pos
 (27U)

	)

8371 
	#CAN_F6R2_FB27_Msk
 (0x1UL << 
CAN_F6R2_FB27_Pos
Ë

	)

8372 
	#CAN_F6R2_FB27
 
CAN_F6R2_FB27_Msk


	)

8373 
	#CAN_F6R2_FB28_Pos
 (28U)

	)

8374 
	#CAN_F6R2_FB28_Msk
 (0x1UL << 
CAN_F6R2_FB28_Pos
Ë

	)

8375 
	#CAN_F6R2_FB28
 
CAN_F6R2_FB28_Msk


	)

8376 
	#CAN_F6R2_FB29_Pos
 (29U)

	)

8377 
	#CAN_F6R2_FB29_Msk
 (0x1UL << 
CAN_F6R2_FB29_Pos
Ë

	)

8378 
	#CAN_F6R2_FB29
 
CAN_F6R2_FB29_Msk


	)

8379 
	#CAN_F6R2_FB30_Pos
 (30U)

	)

8380 
	#CAN_F6R2_FB30_Msk
 (0x1UL << 
CAN_F6R2_FB30_Pos
Ë

	)

8381 
	#CAN_F6R2_FB30
 
CAN_F6R2_FB30_Msk


	)

8382 
	#CAN_F6R2_FB31_Pos
 (31U)

	)

8383 
	#CAN_F6R2_FB31_Msk
 (0x1UL << 
CAN_F6R2_FB31_Pos
Ë

	)

8384 
	#CAN_F6R2_FB31
 
CAN_F6R2_FB31_Msk


	)

8387 
	#CAN_F7R2_FB0_Pos
 (0U)

	)

8388 
	#CAN_F7R2_FB0_Msk
 (0x1UL << 
CAN_F7R2_FB0_Pos
Ë

	)

8389 
	#CAN_F7R2_FB0
 
CAN_F7R2_FB0_Msk


	)

8390 
	#CAN_F7R2_FB1_Pos
 (1U)

	)

8391 
	#CAN_F7R2_FB1_Msk
 (0x1UL << 
CAN_F7R2_FB1_Pos
Ë

	)

8392 
	#CAN_F7R2_FB1
 
CAN_F7R2_FB1_Msk


	)

8393 
	#CAN_F7R2_FB2_Pos
 (2U)

	)

8394 
	#CAN_F7R2_FB2_Msk
 (0x1UL << 
CAN_F7R2_FB2_Pos
Ë

	)

8395 
	#CAN_F7R2_FB2
 
CAN_F7R2_FB2_Msk


	)

8396 
	#CAN_F7R2_FB3_Pos
 (3U)

	)

8397 
	#CAN_F7R2_FB3_Msk
 (0x1UL << 
CAN_F7R2_FB3_Pos
Ë

	)

8398 
	#CAN_F7R2_FB3
 
CAN_F7R2_FB3_Msk


	)

8399 
	#CAN_F7R2_FB4_Pos
 (4U)

	)

8400 
	#CAN_F7R2_FB4_Msk
 (0x1UL << 
CAN_F7R2_FB4_Pos
Ë

	)

8401 
	#CAN_F7R2_FB4
 
CAN_F7R2_FB4_Msk


	)

8402 
	#CAN_F7R2_FB5_Pos
 (5U)

	)

8403 
	#CAN_F7R2_FB5_Msk
 (0x1UL << 
CAN_F7R2_FB5_Pos
Ë

	)

8404 
	#CAN_F7R2_FB5
 
CAN_F7R2_FB5_Msk


	)

8405 
	#CAN_F7R2_FB6_Pos
 (6U)

	)

8406 
	#CAN_F7R2_FB6_Msk
 (0x1UL << 
CAN_F7R2_FB6_Pos
Ë

	)

8407 
	#CAN_F7R2_FB6
 
CAN_F7R2_FB6_Msk


	)

8408 
	#CAN_F7R2_FB7_Pos
 (7U)

	)

8409 
	#CAN_F7R2_FB7_Msk
 (0x1UL << 
CAN_F7R2_FB7_Pos
Ë

	)

8410 
	#CAN_F7R2_FB7
 
CAN_F7R2_FB7_Msk


	)

8411 
	#CAN_F7R2_FB8_Pos
 (8U)

	)

8412 
	#CAN_F7R2_FB8_Msk
 (0x1UL << 
CAN_F7R2_FB8_Pos
Ë

	)

8413 
	#CAN_F7R2_FB8
 
CAN_F7R2_FB8_Msk


	)

8414 
	#CAN_F7R2_FB9_Pos
 (9U)

	)

8415 
	#CAN_F7R2_FB9_Msk
 (0x1UL << 
CAN_F7R2_FB9_Pos
Ë

	)

8416 
	#CAN_F7R2_FB9
 
CAN_F7R2_FB9_Msk


	)

8417 
	#CAN_F7R2_FB10_Pos
 (10U)

	)

8418 
	#CAN_F7R2_FB10_Msk
 (0x1UL << 
CAN_F7R2_FB10_Pos
Ë

	)

8419 
	#CAN_F7R2_FB10
 
CAN_F7R2_FB10_Msk


	)

8420 
	#CAN_F7R2_FB11_Pos
 (11U)

	)

8421 
	#CAN_F7R2_FB11_Msk
 (0x1UL << 
CAN_F7R2_FB11_Pos
Ë

	)

8422 
	#CAN_F7R2_FB11
 
CAN_F7R2_FB11_Msk


	)

8423 
	#CAN_F7R2_FB12_Pos
 (12U)

	)

8424 
	#CAN_F7R2_FB12_Msk
 (0x1UL << 
CAN_F7R2_FB12_Pos
Ë

	)

8425 
	#CAN_F7R2_FB12
 
CAN_F7R2_FB12_Msk


	)

8426 
	#CAN_F7R2_FB13_Pos
 (13U)

	)

8427 
	#CAN_F7R2_FB13_Msk
 (0x1UL << 
CAN_F7R2_FB13_Pos
Ë

	)

8428 
	#CAN_F7R2_FB13
 
CAN_F7R2_FB13_Msk


	)

8429 
	#CAN_F7R2_FB14_Pos
 (14U)

	)

8430 
	#CAN_F7R2_FB14_Msk
 (0x1UL << 
CAN_F7R2_FB14_Pos
Ë

	)

8431 
	#CAN_F7R2_FB14
 
CAN_F7R2_FB14_Msk


	)

8432 
	#CAN_F7R2_FB15_Pos
 (15U)

	)

8433 
	#CAN_F7R2_FB15_Msk
 (0x1UL << 
CAN_F7R2_FB15_Pos
Ë

	)

8434 
	#CAN_F7R2_FB15
 
CAN_F7R2_FB15_Msk


	)

8435 
	#CAN_F7R2_FB16_Pos
 (16U)

	)

8436 
	#CAN_F7R2_FB16_Msk
 (0x1UL << 
CAN_F7R2_FB16_Pos
Ë

	)

8437 
	#CAN_F7R2_FB16
 
CAN_F7R2_FB16_Msk


	)

8438 
	#CAN_F7R2_FB17_Pos
 (17U)

	)

8439 
	#CAN_F7R2_FB17_Msk
 (0x1UL << 
CAN_F7R2_FB17_Pos
Ë

	)

8440 
	#CAN_F7R2_FB17
 
CAN_F7R2_FB17_Msk


	)

8441 
	#CAN_F7R2_FB18_Pos
 (18U)

	)

8442 
	#CAN_F7R2_FB18_Msk
 (0x1UL << 
CAN_F7R2_FB18_Pos
Ë

	)

8443 
	#CAN_F7R2_FB18
 
CAN_F7R2_FB18_Msk


	)

8444 
	#CAN_F7R2_FB19_Pos
 (19U)

	)

8445 
	#CAN_F7R2_FB19_Msk
 (0x1UL << 
CAN_F7R2_FB19_Pos
Ë

	)

8446 
	#CAN_F7R2_FB19
 
CAN_F7R2_FB19_Msk


	)

8447 
	#CAN_F7R2_FB20_Pos
 (20U)

	)

8448 
	#CAN_F7R2_FB20_Msk
 (0x1UL << 
CAN_F7R2_FB20_Pos
Ë

	)

8449 
	#CAN_F7R2_FB20
 
CAN_F7R2_FB20_Msk


	)

8450 
	#CAN_F7R2_FB21_Pos
 (21U)

	)

8451 
	#CAN_F7R2_FB21_Msk
 (0x1UL << 
CAN_F7R2_FB21_Pos
Ë

	)

8452 
	#CAN_F7R2_FB21
 
CAN_F7R2_FB21_Msk


	)

8453 
	#CAN_F7R2_FB22_Pos
 (22U)

	)

8454 
	#CAN_F7R2_FB22_Msk
 (0x1UL << 
CAN_F7R2_FB22_Pos
Ë

	)

8455 
	#CAN_F7R2_FB22
 
CAN_F7R2_FB22_Msk


	)

8456 
	#CAN_F7R2_FB23_Pos
 (23U)

	)

8457 
	#CAN_F7R2_FB23_Msk
 (0x1UL << 
CAN_F7R2_FB23_Pos
Ë

	)

8458 
	#CAN_F7R2_FB23
 
CAN_F7R2_FB23_Msk


	)

8459 
	#CAN_F7R2_FB24_Pos
 (24U)

	)

8460 
	#CAN_F7R2_FB24_Msk
 (0x1UL << 
CAN_F7R2_FB24_Pos
Ë

	)

8461 
	#CAN_F7R2_FB24
 
CAN_F7R2_FB24_Msk


	)

8462 
	#CAN_F7R2_FB25_Pos
 (25U)

	)

8463 
	#CAN_F7R2_FB25_Msk
 (0x1UL << 
CAN_F7R2_FB25_Pos
Ë

	)

8464 
	#CAN_F7R2_FB25
 
CAN_F7R2_FB25_Msk


	)

8465 
	#CAN_F7R2_FB26_Pos
 (26U)

	)

8466 
	#CAN_F7R2_FB26_Msk
 (0x1UL << 
CAN_F7R2_FB26_Pos
Ë

	)

8467 
	#CAN_F7R2_FB26
 
CAN_F7R2_FB26_Msk


	)

8468 
	#CAN_F7R2_FB27_Pos
 (27U)

	)

8469 
	#CAN_F7R2_FB27_Msk
 (0x1UL << 
CAN_F7R2_FB27_Pos
Ë

	)

8470 
	#CAN_F7R2_FB27
 
CAN_F7R2_FB27_Msk


	)

8471 
	#CAN_F7R2_FB28_Pos
 (28U)

	)

8472 
	#CAN_F7R2_FB28_Msk
 (0x1UL << 
CAN_F7R2_FB28_Pos
Ë

	)

8473 
	#CAN_F7R2_FB28
 
CAN_F7R2_FB28_Msk


	)

8474 
	#CAN_F7R2_FB29_Pos
 (29U)

	)

8475 
	#CAN_F7R2_FB29_Msk
 (0x1UL << 
CAN_F7R2_FB29_Pos
Ë

	)

8476 
	#CAN_F7R2_FB29
 
CAN_F7R2_FB29_Msk


	)

8477 
	#CAN_F7R2_FB30_Pos
 (30U)

	)

8478 
	#CAN_F7R2_FB30_Msk
 (0x1UL << 
CAN_F7R2_FB30_Pos
Ë

	)

8479 
	#CAN_F7R2_FB30
 
CAN_F7R2_FB30_Msk


	)

8480 
	#CAN_F7R2_FB31_Pos
 (31U)

	)

8481 
	#CAN_F7R2_FB31_Msk
 (0x1UL << 
CAN_F7R2_FB31_Pos
Ë

	)

8482 
	#CAN_F7R2_FB31
 
CAN_F7R2_FB31_Msk


	)

8485 
	#CAN_F8R2_FB0_Pos
 (0U)

	)

8486 
	#CAN_F8R2_FB0_Msk
 (0x1UL << 
CAN_F8R2_FB0_Pos
Ë

	)

8487 
	#CAN_F8R2_FB0
 
CAN_F8R2_FB0_Msk


	)

8488 
	#CAN_F8R2_FB1_Pos
 (1U)

	)

8489 
	#CAN_F8R2_FB1_Msk
 (0x1UL << 
CAN_F8R2_FB1_Pos
Ë

	)

8490 
	#CAN_F8R2_FB1
 
CAN_F8R2_FB1_Msk


	)

8491 
	#CAN_F8R2_FB2_Pos
 (2U)

	)

8492 
	#CAN_F8R2_FB2_Msk
 (0x1UL << 
CAN_F8R2_FB2_Pos
Ë

	)

8493 
	#CAN_F8R2_FB2
 
CAN_F8R2_FB2_Msk


	)

8494 
	#CAN_F8R2_FB3_Pos
 (3U)

	)

8495 
	#CAN_F8R2_FB3_Msk
 (0x1UL << 
CAN_F8R2_FB3_Pos
Ë

	)

8496 
	#CAN_F8R2_FB3
 
CAN_F8R2_FB3_Msk


	)

8497 
	#CAN_F8R2_FB4_Pos
 (4U)

	)

8498 
	#CAN_F8R2_FB4_Msk
 (0x1UL << 
CAN_F8R2_FB4_Pos
Ë

	)

8499 
	#CAN_F8R2_FB4
 
CAN_F8R2_FB4_Msk


	)

8500 
	#CAN_F8R2_FB5_Pos
 (5U)

	)

8501 
	#CAN_F8R2_FB5_Msk
 (0x1UL << 
CAN_F8R2_FB5_Pos
Ë

	)

8502 
	#CAN_F8R2_FB5
 
CAN_F8R2_FB5_Msk


	)

8503 
	#CAN_F8R2_FB6_Pos
 (6U)

	)

8504 
	#CAN_F8R2_FB6_Msk
 (0x1UL << 
CAN_F8R2_FB6_Pos
Ë

	)

8505 
	#CAN_F8R2_FB6
 
CAN_F8R2_FB6_Msk


	)

8506 
	#CAN_F8R2_FB7_Pos
 (7U)

	)

8507 
	#CAN_F8R2_FB7_Msk
 (0x1UL << 
CAN_F8R2_FB7_Pos
Ë

	)

8508 
	#CAN_F8R2_FB7
 
CAN_F8R2_FB7_Msk


	)

8509 
	#CAN_F8R2_FB8_Pos
 (8U)

	)

8510 
	#CAN_F8R2_FB8_Msk
 (0x1UL << 
CAN_F8R2_FB8_Pos
Ë

	)

8511 
	#CAN_F8R2_FB8
 
CAN_F8R2_FB8_Msk


	)

8512 
	#CAN_F8R2_FB9_Pos
 (9U)

	)

8513 
	#CAN_F8R2_FB9_Msk
 (0x1UL << 
CAN_F8R2_FB9_Pos
Ë

	)

8514 
	#CAN_F8R2_FB9
 
CAN_F8R2_FB9_Msk


	)

8515 
	#CAN_F8R2_FB10_Pos
 (10U)

	)

8516 
	#CAN_F8R2_FB10_Msk
 (0x1UL << 
CAN_F8R2_FB10_Pos
Ë

	)

8517 
	#CAN_F8R2_FB10
 
CAN_F8R2_FB10_Msk


	)

8518 
	#CAN_F8R2_FB11_Pos
 (11U)

	)

8519 
	#CAN_F8R2_FB11_Msk
 (0x1UL << 
CAN_F8R2_FB11_Pos
Ë

	)

8520 
	#CAN_F8R2_FB11
 
CAN_F8R2_FB11_Msk


	)

8521 
	#CAN_F8R2_FB12_Pos
 (12U)

	)

8522 
	#CAN_F8R2_FB12_Msk
 (0x1UL << 
CAN_F8R2_FB12_Pos
Ë

	)

8523 
	#CAN_F8R2_FB12
 
CAN_F8R2_FB12_Msk


	)

8524 
	#CAN_F8R2_FB13_Pos
 (13U)

	)

8525 
	#CAN_F8R2_FB13_Msk
 (0x1UL << 
CAN_F8R2_FB13_Pos
Ë

	)

8526 
	#CAN_F8R2_FB13
 
CAN_F8R2_FB13_Msk


	)

8527 
	#CAN_F8R2_FB14_Pos
 (14U)

	)

8528 
	#CAN_F8R2_FB14_Msk
 (0x1UL << 
CAN_F8R2_FB14_Pos
Ë

	)

8529 
	#CAN_F8R2_FB14
 
CAN_F8R2_FB14_Msk


	)

8530 
	#CAN_F8R2_FB15_Pos
 (15U)

	)

8531 
	#CAN_F8R2_FB15_Msk
 (0x1UL << 
CAN_F8R2_FB15_Pos
Ë

	)

8532 
	#CAN_F8R2_FB15
 
CAN_F8R2_FB15_Msk


	)

8533 
	#CAN_F8R2_FB16_Pos
 (16U)

	)

8534 
	#CAN_F8R2_FB16_Msk
 (0x1UL << 
CAN_F8R2_FB16_Pos
Ë

	)

8535 
	#CAN_F8R2_FB16
 
CAN_F8R2_FB16_Msk


	)

8536 
	#CAN_F8R2_FB17_Pos
 (17U)

	)

8537 
	#CAN_F8R2_FB17_Msk
 (0x1UL << 
CAN_F8R2_FB17_Pos
Ë

	)

8538 
	#CAN_F8R2_FB17
 
CAN_F8R2_FB17_Msk


	)

8539 
	#CAN_F8R2_FB18_Pos
 (18U)

	)

8540 
	#CAN_F8R2_FB18_Msk
 (0x1UL << 
CAN_F8R2_FB18_Pos
Ë

	)

8541 
	#CAN_F8R2_FB18
 
CAN_F8R2_FB18_Msk


	)

8542 
	#CAN_F8R2_FB19_Pos
 (19U)

	)

8543 
	#CAN_F8R2_FB19_Msk
 (0x1UL << 
CAN_F8R2_FB19_Pos
Ë

	)

8544 
	#CAN_F8R2_FB19
 
CAN_F8R2_FB19_Msk


	)

8545 
	#CAN_F8R2_FB20_Pos
 (20U)

	)

8546 
	#CAN_F8R2_FB20_Msk
 (0x1UL << 
CAN_F8R2_FB20_Pos
Ë

	)

8547 
	#CAN_F8R2_FB20
 
CAN_F8R2_FB20_Msk


	)

8548 
	#CAN_F8R2_FB21_Pos
 (21U)

	)

8549 
	#CAN_F8R2_FB21_Msk
 (0x1UL << 
CAN_F8R2_FB21_Pos
Ë

	)

8550 
	#CAN_F8R2_FB21
 
CAN_F8R2_FB21_Msk


	)

8551 
	#CAN_F8R2_FB22_Pos
 (22U)

	)

8552 
	#CAN_F8R2_FB22_Msk
 (0x1UL << 
CAN_F8R2_FB22_Pos
Ë

	)

8553 
	#CAN_F8R2_FB22
 
CAN_F8R2_FB22_Msk


	)

8554 
	#CAN_F8R2_FB23_Pos
 (23U)

	)

8555 
	#CAN_F8R2_FB23_Msk
 (0x1UL << 
CAN_F8R2_FB23_Pos
Ë

	)

8556 
	#CAN_F8R2_FB23
 
CAN_F8R2_FB23_Msk


	)

8557 
	#CAN_F8R2_FB24_Pos
 (24U)

	)

8558 
	#CAN_F8R2_FB24_Msk
 (0x1UL << 
CAN_F8R2_FB24_Pos
Ë

	)

8559 
	#CAN_F8R2_FB24
 
CAN_F8R2_FB24_Msk


	)

8560 
	#CAN_F8R2_FB25_Pos
 (25U)

	)

8561 
	#CAN_F8R2_FB25_Msk
 (0x1UL << 
CAN_F8R2_FB25_Pos
Ë

	)

8562 
	#CAN_F8R2_FB25
 
CAN_F8R2_FB25_Msk


	)

8563 
	#CAN_F8R2_FB26_Pos
 (26U)

	)

8564 
	#CAN_F8R2_FB26_Msk
 (0x1UL << 
CAN_F8R2_FB26_Pos
Ë

	)

8565 
	#CAN_F8R2_FB26
 
CAN_F8R2_FB26_Msk


	)

8566 
	#CAN_F8R2_FB27_Pos
 (27U)

	)

8567 
	#CAN_F8R2_FB27_Msk
 (0x1UL << 
CAN_F8R2_FB27_Pos
Ë

	)

8568 
	#CAN_F8R2_FB27
 
CAN_F8R2_FB27_Msk


	)

8569 
	#CAN_F8R2_FB28_Pos
 (28U)

	)

8570 
	#CAN_F8R2_FB28_Msk
 (0x1UL << 
CAN_F8R2_FB28_Pos
Ë

	)

8571 
	#CAN_F8R2_FB28
 
CAN_F8R2_FB28_Msk


	)

8572 
	#CAN_F8R2_FB29_Pos
 (29U)

	)

8573 
	#CAN_F8R2_FB29_Msk
 (0x1UL << 
CAN_F8R2_FB29_Pos
Ë

	)

8574 
	#CAN_F8R2_FB29
 
CAN_F8R2_FB29_Msk


	)

8575 
	#CAN_F8R2_FB30_Pos
 (30U)

	)

8576 
	#CAN_F8R2_FB30_Msk
 (0x1UL << 
CAN_F8R2_FB30_Pos
Ë

	)

8577 
	#CAN_F8R2_FB30
 
CAN_F8R2_FB30_Msk


	)

8578 
	#CAN_F8R2_FB31_Pos
 (31U)

	)

8579 
	#CAN_F8R2_FB31_Msk
 (0x1UL << 
CAN_F8R2_FB31_Pos
Ë

	)

8580 
	#CAN_F8R2_FB31
 
CAN_F8R2_FB31_Msk


	)

8583 
	#CAN_F9R2_FB0_Pos
 (0U)

	)

8584 
	#CAN_F9R2_FB0_Msk
 (0x1UL << 
CAN_F9R2_FB0_Pos
Ë

	)

8585 
	#CAN_F9R2_FB0
 
CAN_F9R2_FB0_Msk


	)

8586 
	#CAN_F9R2_FB1_Pos
 (1U)

	)

8587 
	#CAN_F9R2_FB1_Msk
 (0x1UL << 
CAN_F9R2_FB1_Pos
Ë

	)

8588 
	#CAN_F9R2_FB1
 
CAN_F9R2_FB1_Msk


	)

8589 
	#CAN_F9R2_FB2_Pos
 (2U)

	)

8590 
	#CAN_F9R2_FB2_Msk
 (0x1UL << 
CAN_F9R2_FB2_Pos
Ë

	)

8591 
	#CAN_F9R2_FB2
 
CAN_F9R2_FB2_Msk


	)

8592 
	#CAN_F9R2_FB3_Pos
 (3U)

	)

8593 
	#CAN_F9R2_FB3_Msk
 (0x1UL << 
CAN_F9R2_FB3_Pos
Ë

	)

8594 
	#CAN_F9R2_FB3
 
CAN_F9R2_FB3_Msk


	)

8595 
	#CAN_F9R2_FB4_Pos
 (4U)

	)

8596 
	#CAN_F9R2_FB4_Msk
 (0x1UL << 
CAN_F9R2_FB4_Pos
Ë

	)

8597 
	#CAN_F9R2_FB4
 
CAN_F9R2_FB4_Msk


	)

8598 
	#CAN_F9R2_FB5_Pos
 (5U)

	)

8599 
	#CAN_F9R2_FB5_Msk
 (0x1UL << 
CAN_F9R2_FB5_Pos
Ë

	)

8600 
	#CAN_F9R2_FB5
 
CAN_F9R2_FB5_Msk


	)

8601 
	#CAN_F9R2_FB6_Pos
 (6U)

	)

8602 
	#CAN_F9R2_FB6_Msk
 (0x1UL << 
CAN_F9R2_FB6_Pos
Ë

	)

8603 
	#CAN_F9R2_FB6
 
CAN_F9R2_FB6_Msk


	)

8604 
	#CAN_F9R2_FB7_Pos
 (7U)

	)

8605 
	#CAN_F9R2_FB7_Msk
 (0x1UL << 
CAN_F9R2_FB7_Pos
Ë

	)

8606 
	#CAN_F9R2_FB7
 
CAN_F9R2_FB7_Msk


	)

8607 
	#CAN_F9R2_FB8_Pos
 (8U)

	)

8608 
	#CAN_F9R2_FB8_Msk
 (0x1UL << 
CAN_F9R2_FB8_Pos
Ë

	)

8609 
	#CAN_F9R2_FB8
 
CAN_F9R2_FB8_Msk


	)

8610 
	#CAN_F9R2_FB9_Pos
 (9U)

	)

8611 
	#CAN_F9R2_FB9_Msk
 (0x1UL << 
CAN_F9R2_FB9_Pos
Ë

	)

8612 
	#CAN_F9R2_FB9
 
CAN_F9R2_FB9_Msk


	)

8613 
	#CAN_F9R2_FB10_Pos
 (10U)

	)

8614 
	#CAN_F9R2_FB10_Msk
 (0x1UL << 
CAN_F9R2_FB10_Pos
Ë

	)

8615 
	#CAN_F9R2_FB10
 
CAN_F9R2_FB10_Msk


	)

8616 
	#CAN_F9R2_FB11_Pos
 (11U)

	)

8617 
	#CAN_F9R2_FB11_Msk
 (0x1UL << 
CAN_F9R2_FB11_Pos
Ë

	)

8618 
	#CAN_F9R2_FB11
 
CAN_F9R2_FB11_Msk


	)

8619 
	#CAN_F9R2_FB12_Pos
 (12U)

	)

8620 
	#CAN_F9R2_FB12_Msk
 (0x1UL << 
CAN_F9R2_FB12_Pos
Ë

	)

8621 
	#CAN_F9R2_FB12
 
CAN_F9R2_FB12_Msk


	)

8622 
	#CAN_F9R2_FB13_Pos
 (13U)

	)

8623 
	#CAN_F9R2_FB13_Msk
 (0x1UL << 
CAN_F9R2_FB13_Pos
Ë

	)

8624 
	#CAN_F9R2_FB13
 
CAN_F9R2_FB13_Msk


	)

8625 
	#CAN_F9R2_FB14_Pos
 (14U)

	)

8626 
	#CAN_F9R2_FB14_Msk
 (0x1UL << 
CAN_F9R2_FB14_Pos
Ë

	)

8627 
	#CAN_F9R2_FB14
 
CAN_F9R2_FB14_Msk


	)

8628 
	#CAN_F9R2_FB15_Pos
 (15U)

	)

8629 
	#CAN_F9R2_FB15_Msk
 (0x1UL << 
CAN_F9R2_FB15_Pos
Ë

	)

8630 
	#CAN_F9R2_FB15
 
CAN_F9R2_FB15_Msk


	)

8631 
	#CAN_F9R2_FB16_Pos
 (16U)

	)

8632 
	#CAN_F9R2_FB16_Msk
 (0x1UL << 
CAN_F9R2_FB16_Pos
Ë

	)

8633 
	#CAN_F9R2_FB16
 
CAN_F9R2_FB16_Msk


	)

8634 
	#CAN_F9R2_FB17_Pos
 (17U)

	)

8635 
	#CAN_F9R2_FB17_Msk
 (0x1UL << 
CAN_F9R2_FB17_Pos
Ë

	)

8636 
	#CAN_F9R2_FB17
 
CAN_F9R2_FB17_Msk


	)

8637 
	#CAN_F9R2_FB18_Pos
 (18U)

	)

8638 
	#CAN_F9R2_FB18_Msk
 (0x1UL << 
CAN_F9R2_FB18_Pos
Ë

	)

8639 
	#CAN_F9R2_FB18
 
CAN_F9R2_FB18_Msk


	)

8640 
	#CAN_F9R2_FB19_Pos
 (19U)

	)

8641 
	#CAN_F9R2_FB19_Msk
 (0x1UL << 
CAN_F9R2_FB19_Pos
Ë

	)

8642 
	#CAN_F9R2_FB19
 
CAN_F9R2_FB19_Msk


	)

8643 
	#CAN_F9R2_FB20_Pos
 (20U)

	)

8644 
	#CAN_F9R2_FB20_Msk
 (0x1UL << 
CAN_F9R2_FB20_Pos
Ë

	)

8645 
	#CAN_F9R2_FB20
 
CAN_F9R2_FB20_Msk


	)

8646 
	#CAN_F9R2_FB21_Pos
 (21U)

	)

8647 
	#CAN_F9R2_FB21_Msk
 (0x1UL << 
CAN_F9R2_FB21_Pos
Ë

	)

8648 
	#CAN_F9R2_FB21
 
CAN_F9R2_FB21_Msk


	)

8649 
	#CAN_F9R2_FB22_Pos
 (22U)

	)

8650 
	#CAN_F9R2_FB22_Msk
 (0x1UL << 
CAN_F9R2_FB22_Pos
Ë

	)

8651 
	#CAN_F9R2_FB22
 
CAN_F9R2_FB22_Msk


	)

8652 
	#CAN_F9R2_FB23_Pos
 (23U)

	)

8653 
	#CAN_F9R2_FB23_Msk
 (0x1UL << 
CAN_F9R2_FB23_Pos
Ë

	)

8654 
	#CAN_F9R2_FB23
 
CAN_F9R2_FB23_Msk


	)

8655 
	#CAN_F9R2_FB24_Pos
 (24U)

	)

8656 
	#CAN_F9R2_FB24_Msk
 (0x1UL << 
CAN_F9R2_FB24_Pos
Ë

	)

8657 
	#CAN_F9R2_FB24
 
CAN_F9R2_FB24_Msk


	)

8658 
	#CAN_F9R2_FB25_Pos
 (25U)

	)

8659 
	#CAN_F9R2_FB25_Msk
 (0x1UL << 
CAN_F9R2_FB25_Pos
Ë

	)

8660 
	#CAN_F9R2_FB25
 
CAN_F9R2_FB25_Msk


	)

8661 
	#CAN_F9R2_FB26_Pos
 (26U)

	)

8662 
	#CAN_F9R2_FB26_Msk
 (0x1UL << 
CAN_F9R2_FB26_Pos
Ë

	)

8663 
	#CAN_F9R2_FB26
 
CAN_F9R2_FB26_Msk


	)

8664 
	#CAN_F9R2_FB27_Pos
 (27U)

	)

8665 
	#CAN_F9R2_FB27_Msk
 (0x1UL << 
CAN_F9R2_FB27_Pos
Ë

	)

8666 
	#CAN_F9R2_FB27
 
CAN_F9R2_FB27_Msk


	)

8667 
	#CAN_F9R2_FB28_Pos
 (28U)

	)

8668 
	#CAN_F9R2_FB28_Msk
 (0x1UL << 
CAN_F9R2_FB28_Pos
Ë

	)

8669 
	#CAN_F9R2_FB28
 
CAN_F9R2_FB28_Msk


	)

8670 
	#CAN_F9R2_FB29_Pos
 (29U)

	)

8671 
	#CAN_F9R2_FB29_Msk
 (0x1UL << 
CAN_F9R2_FB29_Pos
Ë

	)

8672 
	#CAN_F9R2_FB29
 
CAN_F9R2_FB29_Msk


	)

8673 
	#CAN_F9R2_FB30_Pos
 (30U)

	)

8674 
	#CAN_F9R2_FB30_Msk
 (0x1UL << 
CAN_F9R2_FB30_Pos
Ë

	)

8675 
	#CAN_F9R2_FB30
 
CAN_F9R2_FB30_Msk


	)

8676 
	#CAN_F9R2_FB31_Pos
 (31U)

	)

8677 
	#CAN_F9R2_FB31_Msk
 (0x1UL << 
CAN_F9R2_FB31_Pos
Ë

	)

8678 
	#CAN_F9R2_FB31
 
CAN_F9R2_FB31_Msk


	)

8681 
	#CAN_F10R2_FB0_Pos
 (0U)

	)

8682 
	#CAN_F10R2_FB0_Msk
 (0x1UL << 
CAN_F10R2_FB0_Pos
Ë

	)

8683 
	#CAN_F10R2_FB0
 
CAN_F10R2_FB0_Msk


	)

8684 
	#CAN_F10R2_FB1_Pos
 (1U)

	)

8685 
	#CAN_F10R2_FB1_Msk
 (0x1UL << 
CAN_F10R2_FB1_Pos
Ë

	)

8686 
	#CAN_F10R2_FB1
 
CAN_F10R2_FB1_Msk


	)

8687 
	#CAN_F10R2_FB2_Pos
 (2U)

	)

8688 
	#CAN_F10R2_FB2_Msk
 (0x1UL << 
CAN_F10R2_FB2_Pos
Ë

	)

8689 
	#CAN_F10R2_FB2
 
CAN_F10R2_FB2_Msk


	)

8690 
	#CAN_F10R2_FB3_Pos
 (3U)

	)

8691 
	#CAN_F10R2_FB3_Msk
 (0x1UL << 
CAN_F10R2_FB3_Pos
Ë

	)

8692 
	#CAN_F10R2_FB3
 
CAN_F10R2_FB3_Msk


	)

8693 
	#CAN_F10R2_FB4_Pos
 (4U)

	)

8694 
	#CAN_F10R2_FB4_Msk
 (0x1UL << 
CAN_F10R2_FB4_Pos
Ë

	)

8695 
	#CAN_F10R2_FB4
 
CAN_F10R2_FB4_Msk


	)

8696 
	#CAN_F10R2_FB5_Pos
 (5U)

	)

8697 
	#CAN_F10R2_FB5_Msk
 (0x1UL << 
CAN_F10R2_FB5_Pos
Ë

	)

8698 
	#CAN_F10R2_FB5
 
CAN_F10R2_FB5_Msk


	)

8699 
	#CAN_F10R2_FB6_Pos
 (6U)

	)

8700 
	#CAN_F10R2_FB6_Msk
 (0x1UL << 
CAN_F10R2_FB6_Pos
Ë

	)

8701 
	#CAN_F10R2_FB6
 
CAN_F10R2_FB6_Msk


	)

8702 
	#CAN_F10R2_FB7_Pos
 (7U)

	)

8703 
	#CAN_F10R2_FB7_Msk
 (0x1UL << 
CAN_F10R2_FB7_Pos
Ë

	)

8704 
	#CAN_F10R2_FB7
 
CAN_F10R2_FB7_Msk


	)

8705 
	#CAN_F10R2_FB8_Pos
 (8U)

	)

8706 
	#CAN_F10R2_FB8_Msk
 (0x1UL << 
CAN_F10R2_FB8_Pos
Ë

	)

8707 
	#CAN_F10R2_FB8
 
CAN_F10R2_FB8_Msk


	)

8708 
	#CAN_F10R2_FB9_Pos
 (9U)

	)

8709 
	#CAN_F10R2_FB9_Msk
 (0x1UL << 
CAN_F10R2_FB9_Pos
Ë

	)

8710 
	#CAN_F10R2_FB9
 
CAN_F10R2_FB9_Msk


	)

8711 
	#CAN_F10R2_FB10_Pos
 (10U)

	)

8712 
	#CAN_F10R2_FB10_Msk
 (0x1UL << 
CAN_F10R2_FB10_Pos
Ë

	)

8713 
	#CAN_F10R2_FB10
 
CAN_F10R2_FB10_Msk


	)

8714 
	#CAN_F10R2_FB11_Pos
 (11U)

	)

8715 
	#CAN_F10R2_FB11_Msk
 (0x1UL << 
CAN_F10R2_FB11_Pos
Ë

	)

8716 
	#CAN_F10R2_FB11
 
CAN_F10R2_FB11_Msk


	)

8717 
	#CAN_F10R2_FB12_Pos
 (12U)

	)

8718 
	#CAN_F10R2_FB12_Msk
 (0x1UL << 
CAN_F10R2_FB12_Pos
Ë

	)

8719 
	#CAN_F10R2_FB12
 
CAN_F10R2_FB12_Msk


	)

8720 
	#CAN_F10R2_FB13_Pos
 (13U)

	)

8721 
	#CAN_F10R2_FB13_Msk
 (0x1UL << 
CAN_F10R2_FB13_Pos
Ë

	)

8722 
	#CAN_F10R2_FB13
 
CAN_F10R2_FB13_Msk


	)

8723 
	#CAN_F10R2_FB14_Pos
 (14U)

	)

8724 
	#CAN_F10R2_FB14_Msk
 (0x1UL << 
CAN_F10R2_FB14_Pos
Ë

	)

8725 
	#CAN_F10R2_FB14
 
CAN_F10R2_FB14_Msk


	)

8726 
	#CAN_F10R2_FB15_Pos
 (15U)

	)

8727 
	#CAN_F10R2_FB15_Msk
 (0x1UL << 
CAN_F10R2_FB15_Pos
Ë

	)

8728 
	#CAN_F10R2_FB15
 
CAN_F10R2_FB15_Msk


	)

8729 
	#CAN_F10R2_FB16_Pos
 (16U)

	)

8730 
	#CAN_F10R2_FB16_Msk
 (0x1UL << 
CAN_F10R2_FB16_Pos
Ë

	)

8731 
	#CAN_F10R2_FB16
 
CAN_F10R2_FB16_Msk


	)

8732 
	#CAN_F10R2_FB17_Pos
 (17U)

	)

8733 
	#CAN_F10R2_FB17_Msk
 (0x1UL << 
CAN_F10R2_FB17_Pos
Ë

	)

8734 
	#CAN_F10R2_FB17
 
CAN_F10R2_FB17_Msk


	)

8735 
	#CAN_F10R2_FB18_Pos
 (18U)

	)

8736 
	#CAN_F10R2_FB18_Msk
 (0x1UL << 
CAN_F10R2_FB18_Pos
Ë

	)

8737 
	#CAN_F10R2_FB18
 
CAN_F10R2_FB18_Msk


	)

8738 
	#CAN_F10R2_FB19_Pos
 (19U)

	)

8739 
	#CAN_F10R2_FB19_Msk
 (0x1UL << 
CAN_F10R2_FB19_Pos
Ë

	)

8740 
	#CAN_F10R2_FB19
 
CAN_F10R2_FB19_Msk


	)

8741 
	#CAN_F10R2_FB20_Pos
 (20U)

	)

8742 
	#CAN_F10R2_FB20_Msk
 (0x1UL << 
CAN_F10R2_FB20_Pos
Ë

	)

8743 
	#CAN_F10R2_FB20
 
CAN_F10R2_FB20_Msk


	)

8744 
	#CAN_F10R2_FB21_Pos
 (21U)

	)

8745 
	#CAN_F10R2_FB21_Msk
 (0x1UL << 
CAN_F10R2_FB21_Pos
Ë

	)

8746 
	#CAN_F10R2_FB21
 
CAN_F10R2_FB21_Msk


	)

8747 
	#CAN_F10R2_FB22_Pos
 (22U)

	)

8748 
	#CAN_F10R2_FB22_Msk
 (0x1UL << 
CAN_F10R2_FB22_Pos
Ë

	)

8749 
	#CAN_F10R2_FB22
 
CAN_F10R2_FB22_Msk


	)

8750 
	#CAN_F10R2_FB23_Pos
 (23U)

	)

8751 
	#CAN_F10R2_FB23_Msk
 (0x1UL << 
CAN_F10R2_FB23_Pos
Ë

	)

8752 
	#CAN_F10R2_FB23
 
CAN_F10R2_FB23_Msk


	)

8753 
	#CAN_F10R2_FB24_Pos
 (24U)

	)

8754 
	#CAN_F10R2_FB24_Msk
 (0x1UL << 
CAN_F10R2_FB24_Pos
Ë

	)

8755 
	#CAN_F10R2_FB24
 
CAN_F10R2_FB24_Msk


	)

8756 
	#CAN_F10R2_FB25_Pos
 (25U)

	)

8757 
	#CAN_F10R2_FB25_Msk
 (0x1UL << 
CAN_F10R2_FB25_Pos
Ë

	)

8758 
	#CAN_F10R2_FB25
 
CAN_F10R2_FB25_Msk


	)

8759 
	#CAN_F10R2_FB26_Pos
 (26U)

	)

8760 
	#CAN_F10R2_FB26_Msk
 (0x1UL << 
CAN_F10R2_FB26_Pos
Ë

	)

8761 
	#CAN_F10R2_FB26
 
CAN_F10R2_FB26_Msk


	)

8762 
	#CAN_F10R2_FB27_Pos
 (27U)

	)

8763 
	#CAN_F10R2_FB27_Msk
 (0x1UL << 
CAN_F10R2_FB27_Pos
Ë

	)

8764 
	#CAN_F10R2_FB27
 
CAN_F10R2_FB27_Msk


	)

8765 
	#CAN_F10R2_FB28_Pos
 (28U)

	)

8766 
	#CAN_F10R2_FB28_Msk
 (0x1UL << 
CAN_F10R2_FB28_Pos
Ë

	)

8767 
	#CAN_F10R2_FB28
 
CAN_F10R2_FB28_Msk


	)

8768 
	#CAN_F10R2_FB29_Pos
 (29U)

	)

8769 
	#CAN_F10R2_FB29_Msk
 (0x1UL << 
CAN_F10R2_FB29_Pos
Ë

	)

8770 
	#CAN_F10R2_FB29
 
CAN_F10R2_FB29_Msk


	)

8771 
	#CAN_F10R2_FB30_Pos
 (30U)

	)

8772 
	#CAN_F10R2_FB30_Msk
 (0x1UL << 
CAN_F10R2_FB30_Pos
Ë

	)

8773 
	#CAN_F10R2_FB30
 
CAN_F10R2_FB30_Msk


	)

8774 
	#CAN_F10R2_FB31_Pos
 (31U)

	)

8775 
	#CAN_F10R2_FB31_Msk
 (0x1UL << 
CAN_F10R2_FB31_Pos
Ë

	)

8776 
	#CAN_F10R2_FB31
 
CAN_F10R2_FB31_Msk


	)

8779 
	#CAN_F11R2_FB0_Pos
 (0U)

	)

8780 
	#CAN_F11R2_FB0_Msk
 (0x1UL << 
CAN_F11R2_FB0_Pos
Ë

	)

8781 
	#CAN_F11R2_FB0
 
CAN_F11R2_FB0_Msk


	)

8782 
	#CAN_F11R2_FB1_Pos
 (1U)

	)

8783 
	#CAN_F11R2_FB1_Msk
 (0x1UL << 
CAN_F11R2_FB1_Pos
Ë

	)

8784 
	#CAN_F11R2_FB1
 
CAN_F11R2_FB1_Msk


	)

8785 
	#CAN_F11R2_FB2_Pos
 (2U)

	)

8786 
	#CAN_F11R2_FB2_Msk
 (0x1UL << 
CAN_F11R2_FB2_Pos
Ë

	)

8787 
	#CAN_F11R2_FB2
 
CAN_F11R2_FB2_Msk


	)

8788 
	#CAN_F11R2_FB3_Pos
 (3U)

	)

8789 
	#CAN_F11R2_FB3_Msk
 (0x1UL << 
CAN_F11R2_FB3_Pos
Ë

	)

8790 
	#CAN_F11R2_FB3
 
CAN_F11R2_FB3_Msk


	)

8791 
	#CAN_F11R2_FB4_Pos
 (4U)

	)

8792 
	#CAN_F11R2_FB4_Msk
 (0x1UL << 
CAN_F11R2_FB4_Pos
Ë

	)

8793 
	#CAN_F11R2_FB4
 
CAN_F11R2_FB4_Msk


	)

8794 
	#CAN_F11R2_FB5_Pos
 (5U)

	)

8795 
	#CAN_F11R2_FB5_Msk
 (0x1UL << 
CAN_F11R2_FB5_Pos
Ë

	)

8796 
	#CAN_F11R2_FB5
 
CAN_F11R2_FB5_Msk


	)

8797 
	#CAN_F11R2_FB6_Pos
 (6U)

	)

8798 
	#CAN_F11R2_FB6_Msk
 (0x1UL << 
CAN_F11R2_FB6_Pos
Ë

	)

8799 
	#CAN_F11R2_FB6
 
CAN_F11R2_FB6_Msk


	)

8800 
	#CAN_F11R2_FB7_Pos
 (7U)

	)

8801 
	#CAN_F11R2_FB7_Msk
 (0x1UL << 
CAN_F11R2_FB7_Pos
Ë

	)

8802 
	#CAN_F11R2_FB7
 
CAN_F11R2_FB7_Msk


	)

8803 
	#CAN_F11R2_FB8_Pos
 (8U)

	)

8804 
	#CAN_F11R2_FB8_Msk
 (0x1UL << 
CAN_F11R2_FB8_Pos
Ë

	)

8805 
	#CAN_F11R2_FB8
 
CAN_F11R2_FB8_Msk


	)

8806 
	#CAN_F11R2_FB9_Pos
 (9U)

	)

8807 
	#CAN_F11R2_FB9_Msk
 (0x1UL << 
CAN_F11R2_FB9_Pos
Ë

	)

8808 
	#CAN_F11R2_FB9
 
CAN_F11R2_FB9_Msk


	)

8809 
	#CAN_F11R2_FB10_Pos
 (10U)

	)

8810 
	#CAN_F11R2_FB10_Msk
 (0x1UL << 
CAN_F11R2_FB10_Pos
Ë

	)

8811 
	#CAN_F11R2_FB10
 
CAN_F11R2_FB10_Msk


	)

8812 
	#CAN_F11R2_FB11_Pos
 (11U)

	)

8813 
	#CAN_F11R2_FB11_Msk
 (0x1UL << 
CAN_F11R2_FB11_Pos
Ë

	)

8814 
	#CAN_F11R2_FB11
 
CAN_F11R2_FB11_Msk


	)

8815 
	#CAN_F11R2_FB12_Pos
 (12U)

	)

8816 
	#CAN_F11R2_FB12_Msk
 (0x1UL << 
CAN_F11R2_FB12_Pos
Ë

	)

8817 
	#CAN_F11R2_FB12
 
CAN_F11R2_FB12_Msk


	)

8818 
	#CAN_F11R2_FB13_Pos
 (13U)

	)

8819 
	#CAN_F11R2_FB13_Msk
 (0x1UL << 
CAN_F11R2_FB13_Pos
Ë

	)

8820 
	#CAN_F11R2_FB13
 
CAN_F11R2_FB13_Msk


	)

8821 
	#CAN_F11R2_FB14_Pos
 (14U)

	)

8822 
	#CAN_F11R2_FB14_Msk
 (0x1UL << 
CAN_F11R2_FB14_Pos
Ë

	)

8823 
	#CAN_F11R2_FB14
 
CAN_F11R2_FB14_Msk


	)

8824 
	#CAN_F11R2_FB15_Pos
 (15U)

	)

8825 
	#CAN_F11R2_FB15_Msk
 (0x1UL << 
CAN_F11R2_FB15_Pos
Ë

	)

8826 
	#CAN_F11R2_FB15
 
CAN_F11R2_FB15_Msk


	)

8827 
	#CAN_F11R2_FB16_Pos
 (16U)

	)

8828 
	#CAN_F11R2_FB16_Msk
 (0x1UL << 
CAN_F11R2_FB16_Pos
Ë

	)

8829 
	#CAN_F11R2_FB16
 
CAN_F11R2_FB16_Msk


	)

8830 
	#CAN_F11R2_FB17_Pos
 (17U)

	)

8831 
	#CAN_F11R2_FB17_Msk
 (0x1UL << 
CAN_F11R2_FB17_Pos
Ë

	)

8832 
	#CAN_F11R2_FB17
 
CAN_F11R2_FB17_Msk


	)

8833 
	#CAN_F11R2_FB18_Pos
 (18U)

	)

8834 
	#CAN_F11R2_FB18_Msk
 (0x1UL << 
CAN_F11R2_FB18_Pos
Ë

	)

8835 
	#CAN_F11R2_FB18
 
CAN_F11R2_FB18_Msk


	)

8836 
	#CAN_F11R2_FB19_Pos
 (19U)

	)

8837 
	#CAN_F11R2_FB19_Msk
 (0x1UL << 
CAN_F11R2_FB19_Pos
Ë

	)

8838 
	#CAN_F11R2_FB19
 
CAN_F11R2_FB19_Msk


	)

8839 
	#CAN_F11R2_FB20_Pos
 (20U)

	)

8840 
	#CAN_F11R2_FB20_Msk
 (0x1UL << 
CAN_F11R2_FB20_Pos
Ë

	)

8841 
	#CAN_F11R2_FB20
 
CAN_F11R2_FB20_Msk


	)

8842 
	#CAN_F11R2_FB21_Pos
 (21U)

	)

8843 
	#CAN_F11R2_FB21_Msk
 (0x1UL << 
CAN_F11R2_FB21_Pos
Ë

	)

8844 
	#CAN_F11R2_FB21
 
CAN_F11R2_FB21_Msk


	)

8845 
	#CAN_F11R2_FB22_Pos
 (22U)

	)

8846 
	#CAN_F11R2_FB22_Msk
 (0x1UL << 
CAN_F11R2_FB22_Pos
Ë

	)

8847 
	#CAN_F11R2_FB22
 
CAN_F11R2_FB22_Msk


	)

8848 
	#CAN_F11R2_FB23_Pos
 (23U)

	)

8849 
	#CAN_F11R2_FB23_Msk
 (0x1UL << 
CAN_F11R2_FB23_Pos
Ë

	)

8850 
	#CAN_F11R2_FB23
 
CAN_F11R2_FB23_Msk


	)

8851 
	#CAN_F11R2_FB24_Pos
 (24U)

	)

8852 
	#CAN_F11R2_FB24_Msk
 (0x1UL << 
CAN_F11R2_FB24_Pos
Ë

	)

8853 
	#CAN_F11R2_FB24
 
CAN_F11R2_FB24_Msk


	)

8854 
	#CAN_F11R2_FB25_Pos
 (25U)

	)

8855 
	#CAN_F11R2_FB25_Msk
 (0x1UL << 
CAN_F11R2_FB25_Pos
Ë

	)

8856 
	#CAN_F11R2_FB25
 
CAN_F11R2_FB25_Msk


	)

8857 
	#CAN_F11R2_FB26_Pos
 (26U)

	)

8858 
	#CAN_F11R2_FB26_Msk
 (0x1UL << 
CAN_F11R2_FB26_Pos
Ë

	)

8859 
	#CAN_F11R2_FB26
 
CAN_F11R2_FB26_Msk


	)

8860 
	#CAN_F11R2_FB27_Pos
 (27U)

	)

8861 
	#CAN_F11R2_FB27_Msk
 (0x1UL << 
CAN_F11R2_FB27_Pos
Ë

	)

8862 
	#CAN_F11R2_FB27
 
CAN_F11R2_FB27_Msk


	)

8863 
	#CAN_F11R2_FB28_Pos
 (28U)

	)

8864 
	#CAN_F11R2_FB28_Msk
 (0x1UL << 
CAN_F11R2_FB28_Pos
Ë

	)

8865 
	#CAN_F11R2_FB28
 
CAN_F11R2_FB28_Msk


	)

8866 
	#CAN_F11R2_FB29_Pos
 (29U)

	)

8867 
	#CAN_F11R2_FB29_Msk
 (0x1UL << 
CAN_F11R2_FB29_Pos
Ë

	)

8868 
	#CAN_F11R2_FB29
 
CAN_F11R2_FB29_Msk


	)

8869 
	#CAN_F11R2_FB30_Pos
 (30U)

	)

8870 
	#CAN_F11R2_FB30_Msk
 (0x1UL << 
CAN_F11R2_FB30_Pos
Ë

	)

8871 
	#CAN_F11R2_FB30
 
CAN_F11R2_FB30_Msk


	)

8872 
	#CAN_F11R2_FB31_Pos
 (31U)

	)

8873 
	#CAN_F11R2_FB31_Msk
 (0x1UL << 
CAN_F11R2_FB31_Pos
Ë

	)

8874 
	#CAN_F11R2_FB31
 
CAN_F11R2_FB31_Msk


	)

8877 
	#CAN_F12R2_FB0_Pos
 (0U)

	)

8878 
	#CAN_F12R2_FB0_Msk
 (0x1UL << 
CAN_F12R2_FB0_Pos
Ë

	)

8879 
	#CAN_F12R2_FB0
 
CAN_F12R2_FB0_Msk


	)

8880 
	#CAN_F12R2_FB1_Pos
 (1U)

	)

8881 
	#CAN_F12R2_FB1_Msk
 (0x1UL << 
CAN_F12R2_FB1_Pos
Ë

	)

8882 
	#CAN_F12R2_FB1
 
CAN_F12R2_FB1_Msk


	)

8883 
	#CAN_F12R2_FB2_Pos
 (2U)

	)

8884 
	#CAN_F12R2_FB2_Msk
 (0x1UL << 
CAN_F12R2_FB2_Pos
Ë

	)

8885 
	#CAN_F12R2_FB2
 
CAN_F12R2_FB2_Msk


	)

8886 
	#CAN_F12R2_FB3_Pos
 (3U)

	)

8887 
	#CAN_F12R2_FB3_Msk
 (0x1UL << 
CAN_F12R2_FB3_Pos
Ë

	)

8888 
	#CAN_F12R2_FB3
 
CAN_F12R2_FB3_Msk


	)

8889 
	#CAN_F12R2_FB4_Pos
 (4U)

	)

8890 
	#CAN_F12R2_FB4_Msk
 (0x1UL << 
CAN_F12R2_FB4_Pos
Ë

	)

8891 
	#CAN_F12R2_FB4
 
CAN_F12R2_FB4_Msk


	)

8892 
	#CAN_F12R2_FB5_Pos
 (5U)

	)

8893 
	#CAN_F12R2_FB5_Msk
 (0x1UL << 
CAN_F12R2_FB5_Pos
Ë

	)

8894 
	#CAN_F12R2_FB5
 
CAN_F12R2_FB5_Msk


	)

8895 
	#CAN_F12R2_FB6_Pos
 (6U)

	)

8896 
	#CAN_F12R2_FB6_Msk
 (0x1UL << 
CAN_F12R2_FB6_Pos
Ë

	)

8897 
	#CAN_F12R2_FB6
 
CAN_F12R2_FB6_Msk


	)

8898 
	#CAN_F12R2_FB7_Pos
 (7U)

	)

8899 
	#CAN_F12R2_FB7_Msk
 (0x1UL << 
CAN_F12R2_FB7_Pos
Ë

	)

8900 
	#CAN_F12R2_FB7
 
CAN_F12R2_FB7_Msk


	)

8901 
	#CAN_F12R2_FB8_Pos
 (8U)

	)

8902 
	#CAN_F12R2_FB8_Msk
 (0x1UL << 
CAN_F12R2_FB8_Pos
Ë

	)

8903 
	#CAN_F12R2_FB8
 
CAN_F12R2_FB8_Msk


	)

8904 
	#CAN_F12R2_FB9_Pos
 (9U)

	)

8905 
	#CAN_F12R2_FB9_Msk
 (0x1UL << 
CAN_F12R2_FB9_Pos
Ë

	)

8906 
	#CAN_F12R2_FB9
 
CAN_F12R2_FB9_Msk


	)

8907 
	#CAN_F12R2_FB10_Pos
 (10U)

	)

8908 
	#CAN_F12R2_FB10_Msk
 (0x1UL << 
CAN_F12R2_FB10_Pos
Ë

	)

8909 
	#CAN_F12R2_FB10
 
CAN_F12R2_FB10_Msk


	)

8910 
	#CAN_F12R2_FB11_Pos
 (11U)

	)

8911 
	#CAN_F12R2_FB11_Msk
 (0x1UL << 
CAN_F12R2_FB11_Pos
Ë

	)

8912 
	#CAN_F12R2_FB11
 
CAN_F12R2_FB11_Msk


	)

8913 
	#CAN_F12R2_FB12_Pos
 (12U)

	)

8914 
	#CAN_F12R2_FB12_Msk
 (0x1UL << 
CAN_F12R2_FB12_Pos
Ë

	)

8915 
	#CAN_F12R2_FB12
 
CAN_F12R2_FB12_Msk


	)

8916 
	#CAN_F12R2_FB13_Pos
 (13U)

	)

8917 
	#CAN_F12R2_FB13_Msk
 (0x1UL << 
CAN_F12R2_FB13_Pos
Ë

	)

8918 
	#CAN_F12R2_FB13
 
CAN_F12R2_FB13_Msk


	)

8919 
	#CAN_F12R2_FB14_Pos
 (14U)

	)

8920 
	#CAN_F12R2_FB14_Msk
 (0x1UL << 
CAN_F12R2_FB14_Pos
Ë

	)

8921 
	#CAN_F12R2_FB14
 
CAN_F12R2_FB14_Msk


	)

8922 
	#CAN_F12R2_FB15_Pos
 (15U)

	)

8923 
	#CAN_F12R2_FB15_Msk
 (0x1UL << 
CAN_F12R2_FB15_Pos
Ë

	)

8924 
	#CAN_F12R2_FB15
 
CAN_F12R2_FB15_Msk


	)

8925 
	#CAN_F12R2_FB16_Pos
 (16U)

	)

8926 
	#CAN_F12R2_FB16_Msk
 (0x1UL << 
CAN_F12R2_FB16_Pos
Ë

	)

8927 
	#CAN_F12R2_FB16
 
CAN_F12R2_FB16_Msk


	)

8928 
	#CAN_F12R2_FB17_Pos
 (17U)

	)

8929 
	#CAN_F12R2_FB17_Msk
 (0x1UL << 
CAN_F12R2_FB17_Pos
Ë

	)

8930 
	#CAN_F12R2_FB17
 
CAN_F12R2_FB17_Msk


	)

8931 
	#CAN_F12R2_FB18_Pos
 (18U)

	)

8932 
	#CAN_F12R2_FB18_Msk
 (0x1UL << 
CAN_F12R2_FB18_Pos
Ë

	)

8933 
	#CAN_F12R2_FB18
 
CAN_F12R2_FB18_Msk


	)

8934 
	#CAN_F12R2_FB19_Pos
 (19U)

	)

8935 
	#CAN_F12R2_FB19_Msk
 (0x1UL << 
CAN_F12R2_FB19_Pos
Ë

	)

8936 
	#CAN_F12R2_FB19
 
CAN_F12R2_FB19_Msk


	)

8937 
	#CAN_F12R2_FB20_Pos
 (20U)

	)

8938 
	#CAN_F12R2_FB20_Msk
 (0x1UL << 
CAN_F12R2_FB20_Pos
Ë

	)

8939 
	#CAN_F12R2_FB20
 
CAN_F12R2_FB20_Msk


	)

8940 
	#CAN_F12R2_FB21_Pos
 (21U)

	)

8941 
	#CAN_F12R2_FB21_Msk
 (0x1UL << 
CAN_F12R2_FB21_Pos
Ë

	)

8942 
	#CAN_F12R2_FB21
 
CAN_F12R2_FB21_Msk


	)

8943 
	#CAN_F12R2_FB22_Pos
 (22U)

	)

8944 
	#CAN_F12R2_FB22_Msk
 (0x1UL << 
CAN_F12R2_FB22_Pos
Ë

	)

8945 
	#CAN_F12R2_FB22
 
CAN_F12R2_FB22_Msk


	)

8946 
	#CAN_F12R2_FB23_Pos
 (23U)

	)

8947 
	#CAN_F12R2_FB23_Msk
 (0x1UL << 
CAN_F12R2_FB23_Pos
Ë

	)

8948 
	#CAN_F12R2_FB23
 
CAN_F12R2_FB23_Msk


	)

8949 
	#CAN_F12R2_FB24_Pos
 (24U)

	)

8950 
	#CAN_F12R2_FB24_Msk
 (0x1UL << 
CAN_F12R2_FB24_Pos
Ë

	)

8951 
	#CAN_F12R2_FB24
 
CAN_F12R2_FB24_Msk


	)

8952 
	#CAN_F12R2_FB25_Pos
 (25U)

	)

8953 
	#CAN_F12R2_FB25_Msk
 (0x1UL << 
CAN_F12R2_FB25_Pos
Ë

	)

8954 
	#CAN_F12R2_FB25
 
CAN_F12R2_FB25_Msk


	)

8955 
	#CAN_F12R2_FB26_Pos
 (26U)

	)

8956 
	#CAN_F12R2_FB26_Msk
 (0x1UL << 
CAN_F12R2_FB26_Pos
Ë

	)

8957 
	#CAN_F12R2_FB26
 
CAN_F12R2_FB26_Msk


	)

8958 
	#CAN_F12R2_FB27_Pos
 (27U)

	)

8959 
	#CAN_F12R2_FB27_Msk
 (0x1UL << 
CAN_F12R2_FB27_Pos
Ë

	)

8960 
	#CAN_F12R2_FB27
 
CAN_F12R2_FB27_Msk


	)

8961 
	#CAN_F12R2_FB28_Pos
 (28U)

	)

8962 
	#CAN_F12R2_FB28_Msk
 (0x1UL << 
CAN_F12R2_FB28_Pos
Ë

	)

8963 
	#CAN_F12R2_FB28
 
CAN_F12R2_FB28_Msk


	)

8964 
	#CAN_F12R2_FB29_Pos
 (29U)

	)

8965 
	#CAN_F12R2_FB29_Msk
 (0x1UL << 
CAN_F12R2_FB29_Pos
Ë

	)

8966 
	#CAN_F12R2_FB29
 
CAN_F12R2_FB29_Msk


	)

8967 
	#CAN_F12R2_FB30_Pos
 (30U)

	)

8968 
	#CAN_F12R2_FB30_Msk
 (0x1UL << 
CAN_F12R2_FB30_Pos
Ë

	)

8969 
	#CAN_F12R2_FB30
 
CAN_F12R2_FB30_Msk


	)

8970 
	#CAN_F12R2_FB31_Pos
 (31U)

	)

8971 
	#CAN_F12R2_FB31_Msk
 (0x1UL << 
CAN_F12R2_FB31_Pos
Ë

	)

8972 
	#CAN_F12R2_FB31
 
CAN_F12R2_FB31_Msk


	)

8975 
	#CAN_F13R2_FB0_Pos
 (0U)

	)

8976 
	#CAN_F13R2_FB0_Msk
 (0x1UL << 
CAN_F13R2_FB0_Pos
Ë

	)

8977 
	#CAN_F13R2_FB0
 
CAN_F13R2_FB0_Msk


	)

8978 
	#CAN_F13R2_FB1_Pos
 (1U)

	)

8979 
	#CAN_F13R2_FB1_Msk
 (0x1UL << 
CAN_F13R2_FB1_Pos
Ë

	)

8980 
	#CAN_F13R2_FB1
 
CAN_F13R2_FB1_Msk


	)

8981 
	#CAN_F13R2_FB2_Pos
 (2U)

	)

8982 
	#CAN_F13R2_FB2_Msk
 (0x1UL << 
CAN_F13R2_FB2_Pos
Ë

	)

8983 
	#CAN_F13R2_FB2
 
CAN_F13R2_FB2_Msk


	)

8984 
	#CAN_F13R2_FB3_Pos
 (3U)

	)

8985 
	#CAN_F13R2_FB3_Msk
 (0x1UL << 
CAN_F13R2_FB3_Pos
Ë

	)

8986 
	#CAN_F13R2_FB3
 
CAN_F13R2_FB3_Msk


	)

8987 
	#CAN_F13R2_FB4_Pos
 (4U)

	)

8988 
	#CAN_F13R2_FB4_Msk
 (0x1UL << 
CAN_F13R2_FB4_Pos
Ë

	)

8989 
	#CAN_F13R2_FB4
 
CAN_F13R2_FB4_Msk


	)

8990 
	#CAN_F13R2_FB5_Pos
 (5U)

	)

8991 
	#CAN_F13R2_FB5_Msk
 (0x1UL << 
CAN_F13R2_FB5_Pos
Ë

	)

8992 
	#CAN_F13R2_FB5
 
CAN_F13R2_FB5_Msk


	)

8993 
	#CAN_F13R2_FB6_Pos
 (6U)

	)

8994 
	#CAN_F13R2_FB6_Msk
 (0x1UL << 
CAN_F13R2_FB6_Pos
Ë

	)

8995 
	#CAN_F13R2_FB6
 
CAN_F13R2_FB6_Msk


	)

8996 
	#CAN_F13R2_FB7_Pos
 (7U)

	)

8997 
	#CAN_F13R2_FB7_Msk
 (0x1UL << 
CAN_F13R2_FB7_Pos
Ë

	)

8998 
	#CAN_F13R2_FB7
 
CAN_F13R2_FB7_Msk


	)

8999 
	#CAN_F13R2_FB8_Pos
 (8U)

	)

9000 
	#CAN_F13R2_FB8_Msk
 (0x1UL << 
CAN_F13R2_FB8_Pos
Ë

	)

9001 
	#CAN_F13R2_FB8
 
CAN_F13R2_FB8_Msk


	)

9002 
	#CAN_F13R2_FB9_Pos
 (9U)

	)

9003 
	#CAN_F13R2_FB9_Msk
 (0x1UL << 
CAN_F13R2_FB9_Pos
Ë

	)

9004 
	#CAN_F13R2_FB9
 
CAN_F13R2_FB9_Msk


	)

9005 
	#CAN_F13R2_FB10_Pos
 (10U)

	)

9006 
	#CAN_F13R2_FB10_Msk
 (0x1UL << 
CAN_F13R2_FB10_Pos
Ë

	)

9007 
	#CAN_F13R2_FB10
 
CAN_F13R2_FB10_Msk


	)

9008 
	#CAN_F13R2_FB11_Pos
 (11U)

	)

9009 
	#CAN_F13R2_FB11_Msk
 (0x1UL << 
CAN_F13R2_FB11_Pos
Ë

	)

9010 
	#CAN_F13R2_FB11
 
CAN_F13R2_FB11_Msk


	)

9011 
	#CAN_F13R2_FB12_Pos
 (12U)

	)

9012 
	#CAN_F13R2_FB12_Msk
 (0x1UL << 
CAN_F13R2_FB12_Pos
Ë

	)

9013 
	#CAN_F13R2_FB12
 
CAN_F13R2_FB12_Msk


	)

9014 
	#CAN_F13R2_FB13_Pos
 (13U)

	)

9015 
	#CAN_F13R2_FB13_Msk
 (0x1UL << 
CAN_F13R2_FB13_Pos
Ë

	)

9016 
	#CAN_F13R2_FB13
 
CAN_F13R2_FB13_Msk


	)

9017 
	#CAN_F13R2_FB14_Pos
 (14U)

	)

9018 
	#CAN_F13R2_FB14_Msk
 (0x1UL << 
CAN_F13R2_FB14_Pos
Ë

	)

9019 
	#CAN_F13R2_FB14
 
CAN_F13R2_FB14_Msk


	)

9020 
	#CAN_F13R2_FB15_Pos
 (15U)

	)

9021 
	#CAN_F13R2_FB15_Msk
 (0x1UL << 
CAN_F13R2_FB15_Pos
Ë

	)

9022 
	#CAN_F13R2_FB15
 
CAN_F13R2_FB15_Msk


	)

9023 
	#CAN_F13R2_FB16_Pos
 (16U)

	)

9024 
	#CAN_F13R2_FB16_Msk
 (0x1UL << 
CAN_F13R2_FB16_Pos
Ë

	)

9025 
	#CAN_F13R2_FB16
 
CAN_F13R2_FB16_Msk


	)

9026 
	#CAN_F13R2_FB17_Pos
 (17U)

	)

9027 
	#CAN_F13R2_FB17_Msk
 (0x1UL << 
CAN_F13R2_FB17_Pos
Ë

	)

9028 
	#CAN_F13R2_FB17
 
CAN_F13R2_FB17_Msk


	)

9029 
	#CAN_F13R2_FB18_Pos
 (18U)

	)

9030 
	#CAN_F13R2_FB18_Msk
 (0x1UL << 
CAN_F13R2_FB18_Pos
Ë

	)

9031 
	#CAN_F13R2_FB18
 
CAN_F13R2_FB18_Msk


	)

9032 
	#CAN_F13R2_FB19_Pos
 (19U)

	)

9033 
	#CAN_F13R2_FB19_Msk
 (0x1UL << 
CAN_F13R2_FB19_Pos
Ë

	)

9034 
	#CAN_F13R2_FB19
 
CAN_F13R2_FB19_Msk


	)

9035 
	#CAN_F13R2_FB20_Pos
 (20U)

	)

9036 
	#CAN_F13R2_FB20_Msk
 (0x1UL << 
CAN_F13R2_FB20_Pos
Ë

	)

9037 
	#CAN_F13R2_FB20
 
CAN_F13R2_FB20_Msk


	)

9038 
	#CAN_F13R2_FB21_Pos
 (21U)

	)

9039 
	#CAN_F13R2_FB21_Msk
 (0x1UL << 
CAN_F13R2_FB21_Pos
Ë

	)

9040 
	#CAN_F13R2_FB21
 
CAN_F13R2_FB21_Msk


	)

9041 
	#CAN_F13R2_FB22_Pos
 (22U)

	)

9042 
	#CAN_F13R2_FB22_Msk
 (0x1UL << 
CAN_F13R2_FB22_Pos
Ë

	)

9043 
	#CAN_F13R2_FB22
 
CAN_F13R2_FB22_Msk


	)

9044 
	#CAN_F13R2_FB23_Pos
 (23U)

	)

9045 
	#CAN_F13R2_FB23_Msk
 (0x1UL << 
CAN_F13R2_FB23_Pos
Ë

	)

9046 
	#CAN_F13R2_FB23
 
CAN_F13R2_FB23_Msk


	)

9047 
	#CAN_F13R2_FB24_Pos
 (24U)

	)

9048 
	#CAN_F13R2_FB24_Msk
 (0x1UL << 
CAN_F13R2_FB24_Pos
Ë

	)

9049 
	#CAN_F13R2_FB24
 
CAN_F13R2_FB24_Msk


	)

9050 
	#CAN_F13R2_FB25_Pos
 (25U)

	)

9051 
	#CAN_F13R2_FB25_Msk
 (0x1UL << 
CAN_F13R2_FB25_Pos
Ë

	)

9052 
	#CAN_F13R2_FB25
 
CAN_F13R2_FB25_Msk


	)

9053 
	#CAN_F13R2_FB26_Pos
 (26U)

	)

9054 
	#CAN_F13R2_FB26_Msk
 (0x1UL << 
CAN_F13R2_FB26_Pos
Ë

	)

9055 
	#CAN_F13R2_FB26
 
CAN_F13R2_FB26_Msk


	)

9056 
	#CAN_F13R2_FB27_Pos
 (27U)

	)

9057 
	#CAN_F13R2_FB27_Msk
 (0x1UL << 
CAN_F13R2_FB27_Pos
Ë

	)

9058 
	#CAN_F13R2_FB27
 
CAN_F13R2_FB27_Msk


	)

9059 
	#CAN_F13R2_FB28_Pos
 (28U)

	)

9060 
	#CAN_F13R2_FB28_Msk
 (0x1UL << 
CAN_F13R2_FB28_Pos
Ë

	)

9061 
	#CAN_F13R2_FB28
 
CAN_F13R2_FB28_Msk


	)

9062 
	#CAN_F13R2_FB29_Pos
 (29U)

	)

9063 
	#CAN_F13R2_FB29_Msk
 (0x1UL << 
CAN_F13R2_FB29_Pos
Ë

	)

9064 
	#CAN_F13R2_FB29
 
CAN_F13R2_FB29_Msk


	)

9065 
	#CAN_F13R2_FB30_Pos
 (30U)

	)

9066 
	#CAN_F13R2_FB30_Msk
 (0x1UL << 
CAN_F13R2_FB30_Pos
Ë

	)

9067 
	#CAN_F13R2_FB30
 
CAN_F13R2_FB30_Msk


	)

9068 
	#CAN_F13R2_FB31_Pos
 (31U)

	)

9069 
	#CAN_F13R2_FB31_Msk
 (0x1UL << 
CAN_F13R2_FB31_Pos
Ë

	)

9070 
	#CAN_F13R2_FB31
 
CAN_F13R2_FB31_Msk


	)

9079 
	#SPI_CR1_CPHA_Pos
 (0U)

	)

9080 
	#SPI_CR1_CPHA_Msk
 (0x1UL << 
SPI_CR1_CPHA_Pos
Ë

	)

9081 
	#SPI_CR1_CPHA
 
SPI_CR1_CPHA_Msk


	)

9082 
	#SPI_CR1_CPOL_Pos
 (1U)

	)

9083 
	#SPI_CR1_CPOL_Msk
 (0x1UL << 
SPI_CR1_CPOL_Pos
Ë

	)

9084 
	#SPI_CR1_CPOL
 
SPI_CR1_CPOL_Msk


	)

9085 
	#SPI_CR1_MSTR_Pos
 (2U)

	)

9086 
	#SPI_CR1_MSTR_Msk
 (0x1UL << 
SPI_CR1_MSTR_Pos
Ë

	)

9087 
	#SPI_CR1_MSTR
 
SPI_CR1_MSTR_Msk


	)

9089 
	#SPI_CR1_BR_Pos
 (3U)

	)

9090 
	#SPI_CR1_BR_Msk
 (0x7UL << 
SPI_CR1_BR_Pos
Ë

	)

9091 
	#SPI_CR1_BR
 
SPI_CR1_BR_Msk


	)

9092 
	#SPI_CR1_BR_0
 (0x1UL << 
SPI_CR1_BR_Pos
Ë

	)

9093 
	#SPI_CR1_BR_1
 (0x2UL << 
SPI_CR1_BR_Pos
Ë

	)

9094 
	#SPI_CR1_BR_2
 (0x4UL << 
SPI_CR1_BR_Pos
Ë

	)

9096 
	#SPI_CR1_SPE_Pos
 (6U)

	)

9097 
	#SPI_CR1_SPE_Msk
 (0x1UL << 
SPI_CR1_SPE_Pos
Ë

	)

9098 
	#SPI_CR1_SPE
 
SPI_CR1_SPE_Msk


	)

9099 
	#SPI_CR1_LSBFIRST_Pos
 (7U)

	)

9100 
	#SPI_CR1_LSBFIRST_Msk
 (0x1UL << 
SPI_CR1_LSBFIRST_Pos
Ë

	)

9101 
	#SPI_CR1_LSBFIRST
 
SPI_CR1_LSBFIRST_Msk


	)

9102 
	#SPI_CR1_SSI_Pos
 (8U)

	)

9103 
	#SPI_CR1_SSI_Msk
 (0x1UL << 
SPI_CR1_SSI_Pos
Ë

	)

9104 
	#SPI_CR1_SSI
 
SPI_CR1_SSI_Msk


	)

9105 
	#SPI_CR1_SSM_Pos
 (9U)

	)

9106 
	#SPI_CR1_SSM_Msk
 (0x1UL << 
SPI_CR1_SSM_Pos
Ë

	)

9107 
	#SPI_CR1_SSM
 
SPI_CR1_SSM_Msk


	)

9108 
	#SPI_CR1_RXONLY_Pos
 (10U)

	)

9109 
	#SPI_CR1_RXONLY_Msk
 (0x1UL << 
SPI_CR1_RXONLY_Pos
Ë

	)

9110 
	#SPI_CR1_RXONLY
 
SPI_CR1_RXONLY_Msk


	)

9111 
	#SPI_CR1_DFF_Pos
 (11U)

	)

9112 
	#SPI_CR1_DFF_Msk
 (0x1UL << 
SPI_CR1_DFF_Pos
Ë

	)

9113 
	#SPI_CR1_DFF
 
SPI_CR1_DFF_Msk


	)

9114 
	#SPI_CR1_CRCNEXT_Pos
 (12U)

	)

9115 
	#SPI_CR1_CRCNEXT_Msk
 (0x1UL << 
SPI_CR1_CRCNEXT_Pos
Ë

	)

9116 
	#SPI_CR1_CRCNEXT
 
SPI_CR1_CRCNEXT_Msk


	)

9117 
	#SPI_CR1_CRCEN_Pos
 (13U)

	)

9118 
	#SPI_CR1_CRCEN_Msk
 (0x1UL << 
SPI_CR1_CRCEN_Pos
Ë

	)

9119 
	#SPI_CR1_CRCEN
 
SPI_CR1_CRCEN_Msk


	)

9120 
	#SPI_CR1_BIDIOE_Pos
 (14U)

	)

9121 
	#SPI_CR1_BIDIOE_Msk
 (0x1UL << 
SPI_CR1_BIDIOE_Pos
Ë

	)

9122 
	#SPI_CR1_BIDIOE
 
SPI_CR1_BIDIOE_Msk


	)

9123 
	#SPI_CR1_BIDIMODE_Pos
 (15U)

	)

9124 
	#SPI_CR1_BIDIMODE_Msk
 (0x1UL << 
SPI_CR1_BIDIMODE_Pos
Ë

	)

9125 
	#SPI_CR1_BIDIMODE
 
SPI_CR1_BIDIMODE_Msk


	)

9128 
	#SPI_CR2_RXDMAEN_Pos
 (0U)

	)

9129 
	#SPI_CR2_RXDMAEN_Msk
 (0x1UL << 
SPI_CR2_RXDMAEN_Pos
Ë

	)

9130 
	#SPI_CR2_RXDMAEN
 
SPI_CR2_RXDMAEN_Msk


	)

9131 
	#SPI_CR2_TXDMAEN_Pos
 (1U)

	)

9132 
	#SPI_CR2_TXDMAEN_Msk
 (0x1UL << 
SPI_CR2_TXDMAEN_Pos
Ë

	)

9133 
	#SPI_CR2_TXDMAEN
 
SPI_CR2_TXDMAEN_Msk


	)

9134 
	#SPI_CR2_SSOE_Pos
 (2U)

	)

9135 
	#SPI_CR2_SSOE_Msk
 (0x1UL << 
SPI_CR2_SSOE_Pos
Ë

	)

9136 
	#SPI_CR2_SSOE
 
SPI_CR2_SSOE_Msk


	)

9137 
	#SPI_CR2_ERRIE_Pos
 (5U)

	)

9138 
	#SPI_CR2_ERRIE_Msk
 (0x1UL << 
SPI_CR2_ERRIE_Pos
Ë

	)

9139 
	#SPI_CR2_ERRIE
 
SPI_CR2_ERRIE_Msk


	)

9140 
	#SPI_CR2_RXNEIE_Pos
 (6U)

	)

9141 
	#SPI_CR2_RXNEIE_Msk
 (0x1UL << 
SPI_CR2_RXNEIE_Pos
Ë

	)

9142 
	#SPI_CR2_RXNEIE
 
SPI_CR2_RXNEIE_Msk


	)

9143 
	#SPI_CR2_TXEIE_Pos
 (7U)

	)

9144 
	#SPI_CR2_TXEIE_Msk
 (0x1UL << 
SPI_CR2_TXEIE_Pos
Ë

	)

9145 
	#SPI_CR2_TXEIE
 
SPI_CR2_TXEIE_Msk


	)

9148 
	#SPI_SR_RXNE_Pos
 (0U)

	)

9149 
	#SPI_SR_RXNE_Msk
 (0x1UL << 
SPI_SR_RXNE_Pos
Ë

	)

9150 
	#SPI_SR_RXNE
 
SPI_SR_RXNE_Msk


	)

9151 
	#SPI_SR_TXE_Pos
 (1U)

	)

9152 
	#SPI_SR_TXE_Msk
 (0x1UL << 
SPI_SR_TXE_Pos
Ë

	)

9153 
	#SPI_SR_TXE
 
SPI_SR_TXE_Msk


	)

9154 
	#SPI_SR_CHSIDE_Pos
 (2U)

	)

9155 
	#SPI_SR_CHSIDE_Msk
 (0x1UL << 
SPI_SR_CHSIDE_Pos
Ë

	)

9156 
	#SPI_SR_CHSIDE
 
SPI_SR_CHSIDE_Msk


	)

9157 
	#SPI_SR_UDR_Pos
 (3U)

	)

9158 
	#SPI_SR_UDR_Msk
 (0x1UL << 
SPI_SR_UDR_Pos
Ë

	)

9159 
	#SPI_SR_UDR
 
SPI_SR_UDR_Msk


	)

9160 
	#SPI_SR_CRCERR_Pos
 (4U)

	)

9161 
	#SPI_SR_CRCERR_Msk
 (0x1UL << 
SPI_SR_CRCERR_Pos
Ë

	)

9162 
	#SPI_SR_CRCERR
 
SPI_SR_CRCERR_Msk


	)

9163 
	#SPI_SR_MODF_Pos
 (5U)

	)

9164 
	#SPI_SR_MODF_Msk
 (0x1UL << 
SPI_SR_MODF_Pos
Ë

	)

9165 
	#SPI_SR_MODF
 
SPI_SR_MODF_Msk


	)

9166 
	#SPI_SR_OVR_Pos
 (6U)

	)

9167 
	#SPI_SR_OVR_Msk
 (0x1UL << 
SPI_SR_OVR_Pos
Ë

	)

9168 
	#SPI_SR_OVR
 
SPI_SR_OVR_Msk


	)

9169 
	#SPI_SR_BSY_Pos
 (7U)

	)

9170 
	#SPI_SR_BSY_Msk
 (0x1UL << 
SPI_SR_BSY_Pos
Ë

	)

9171 
	#SPI_SR_BSY
 
SPI_SR_BSY_Msk


	)

9174 
	#SPI_DR_DR_Pos
 (0U)

	)

9175 
	#SPI_DR_DR_Msk
 (0xFFFFUL << 
SPI_DR_DR_Pos
Ë

	)

9176 
	#SPI_DR_DR
 
SPI_DR_DR_Msk


	)

9179 
	#SPI_CRCPR_CRCPOLY_Pos
 (0U)

	)

9180 
	#SPI_CRCPR_CRCPOLY_Msk
 (0xFFFFUL << 
SPI_CRCPR_CRCPOLY_Pos
Ë

	)

9181 
	#SPI_CRCPR_CRCPOLY
 
SPI_CRCPR_CRCPOLY_Msk


	)

9184 
	#SPI_RXCRCR_RXCRC_Pos
 (0U)

	)

9185 
	#SPI_RXCRCR_RXCRC_Msk
 (0xFFFFUL << 
SPI_RXCRCR_RXCRC_Pos
Ë

	)

9186 
	#SPI_RXCRCR_RXCRC
 
SPI_RXCRCR_RXCRC_Msk


	)

9189 
	#SPI_TXCRCR_TXCRC_Pos
 (0U)

	)

9190 
	#SPI_TXCRCR_TXCRC_Msk
 (0xFFFFUL << 
SPI_TXCRCR_TXCRC_Pos
Ë

	)

9191 
	#SPI_TXCRCR_TXCRC
 
SPI_TXCRCR_TXCRC_Msk


	)

9193 
	#SPI_I2SCFGR_I2SMOD_Pos
 (11U)

	)

9194 
	#SPI_I2SCFGR_I2SMOD_Msk
 (0x1UL << 
SPI_I2SCFGR_I2SMOD_Pos
Ë

	)

9195 
	#SPI_I2SCFGR_I2SMOD
 
SPI_I2SCFGR_I2SMOD_Msk


	)

9204 
	#I2C_CR1_PE_Pos
 (0U)

	)

9205 
	#I2C_CR1_PE_Msk
 (0x1UL << 
I2C_CR1_PE_Pos
Ë

	)

9206 
	#I2C_CR1_PE
 
I2C_CR1_PE_Msk


	)

9207 
	#I2C_CR1_SMBUS_Pos
 (1U)

	)

9208 
	#I2C_CR1_SMBUS_Msk
 (0x1UL << 
I2C_CR1_SMBUS_Pos
Ë

	)

9209 
	#I2C_CR1_SMBUS
 
I2C_CR1_SMBUS_Msk


	)

9210 
	#I2C_CR1_SMBTYPE_Pos
 (3U)

	)

9211 
	#I2C_CR1_SMBTYPE_Msk
 (0x1UL << 
I2C_CR1_SMBTYPE_Pos
Ë

	)

9212 
	#I2C_CR1_SMBTYPE
 
I2C_CR1_SMBTYPE_Msk


	)

9213 
	#I2C_CR1_ENARP_Pos
 (4U)

	)

9214 
	#I2C_CR1_ENARP_Msk
 (0x1UL << 
I2C_CR1_ENARP_Pos
Ë

	)

9215 
	#I2C_CR1_ENARP
 
I2C_CR1_ENARP_Msk


	)

9216 
	#I2C_CR1_ENPEC_Pos
 (5U)

	)

9217 
	#I2C_CR1_ENPEC_Msk
 (0x1UL << 
I2C_CR1_ENPEC_Pos
Ë

	)

9218 
	#I2C_CR1_ENPEC
 
I2C_CR1_ENPEC_Msk


	)

9219 
	#I2C_CR1_ENGC_Pos
 (6U)

	)

9220 
	#I2C_CR1_ENGC_Msk
 (0x1UL << 
I2C_CR1_ENGC_Pos
Ë

	)

9221 
	#I2C_CR1_ENGC
 
I2C_CR1_ENGC_Msk


	)

9222 
	#I2C_CR1_NOSTRETCH_Pos
 (7U)

	)

9223 
	#I2C_CR1_NOSTRETCH_Msk
 (0x1UL << 
I2C_CR1_NOSTRETCH_Pos
Ë

	)

9224 
	#I2C_CR1_NOSTRETCH
 
I2C_CR1_NOSTRETCH_Msk


	)

9225 
	#I2C_CR1_START_Pos
 (8U)

	)

9226 
	#I2C_CR1_START_Msk
 (0x1UL << 
I2C_CR1_START_Pos
Ë

	)

9227 
	#I2C_CR1_START
 
I2C_CR1_START_Msk


	)

9228 
	#I2C_CR1_STOP_Pos
 (9U)

	)

9229 
	#I2C_CR1_STOP_Msk
 (0x1UL << 
I2C_CR1_STOP_Pos
Ë

	)

9230 
	#I2C_CR1_STOP
 
I2C_CR1_STOP_Msk


	)

9231 
	#I2C_CR1_ACK_Pos
 (10U)

	)

9232 
	#I2C_CR1_ACK_Msk
 (0x1UL << 
I2C_CR1_ACK_Pos
Ë

	)

9233 
	#I2C_CR1_ACK
 
I2C_CR1_ACK_Msk


	)

9234 
	#I2C_CR1_POS_Pos
 (11U)

	)

9235 
	#I2C_CR1_POS_Msk
 (0x1UL << 
I2C_CR1_POS_Pos
Ë

	)

9236 
	#I2C_CR1_POS
 
I2C_CR1_POS_Msk


	)

9237 
	#I2C_CR1_PEC_Pos
 (12U)

	)

9238 
	#I2C_CR1_PEC_Msk
 (0x1UL << 
I2C_CR1_PEC_Pos
Ë

	)

9239 
	#I2C_CR1_PEC
 
I2C_CR1_PEC_Msk


	)

9240 
	#I2C_CR1_ALERT_Pos
 (13U)

	)

9241 
	#I2C_CR1_ALERT_Msk
 (0x1UL << 
I2C_CR1_ALERT_Pos
Ë

	)

9242 
	#I2C_CR1_ALERT
 
I2C_CR1_ALERT_Msk


	)

9243 
	#I2C_CR1_SWRST_Pos
 (15U)

	)

9244 
	#I2C_CR1_SWRST_Msk
 (0x1UL << 
I2C_CR1_SWRST_Pos
Ë

	)

9245 
	#I2C_CR1_SWRST
 
I2C_CR1_SWRST_Msk


	)

9248 
	#I2C_CR2_FREQ_Pos
 (0U)

	)

9249 
	#I2C_CR2_FREQ_Msk
 (0x3FUL << 
I2C_CR2_FREQ_Pos
Ë

	)

9250 
	#I2C_CR2_FREQ
 
I2C_CR2_FREQ_Msk


	)

9251 
	#I2C_CR2_FREQ_0
 (0x01UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9252 
	#I2C_CR2_FREQ_1
 (0x02UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9253 
	#I2C_CR2_FREQ_2
 (0x04UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9254 
	#I2C_CR2_FREQ_3
 (0x08UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9255 
	#I2C_CR2_FREQ_4
 (0x10UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9256 
	#I2C_CR2_FREQ_5
 (0x20UL << 
I2C_CR2_FREQ_Pos
Ë

	)

9258 
	#I2C_CR2_ITERREN_Pos
 (8U)

	)

9259 
	#I2C_CR2_ITERREN_Msk
 (0x1UL << 
I2C_CR2_ITERREN_Pos
Ë

	)

9260 
	#I2C_CR2_ITERREN
 
I2C_CR2_ITERREN_Msk


	)

9261 
	#I2C_CR2_ITEVTEN_Pos
 (9U)

	)

9262 
	#I2C_CR2_ITEVTEN_Msk
 (0x1UL << 
I2C_CR2_ITEVTEN_Pos
Ë

	)

9263 
	#I2C_CR2_ITEVTEN
 
I2C_CR2_ITEVTEN_Msk


	)

9264 
	#I2C_CR2_ITBUFEN_Pos
 (10U)

	)

9265 
	#I2C_CR2_ITBUFEN_Msk
 (0x1UL << 
I2C_CR2_ITBUFEN_Pos
Ë

	)

9266 
	#I2C_CR2_ITBUFEN
 
I2C_CR2_ITBUFEN_Msk


	)

9267 
	#I2C_CR2_DMAEN_Pos
 (11U)

	)

9268 
	#I2C_CR2_DMAEN_Msk
 (0x1UL << 
I2C_CR2_DMAEN_Pos
Ë

	)

9269 
	#I2C_CR2_DMAEN
 
I2C_CR2_DMAEN_Msk


	)

9270 
	#I2C_CR2_LAST_Pos
 (12U)

	)

9271 
	#I2C_CR2_LAST_Msk
 (0x1UL << 
I2C_CR2_LAST_Pos
Ë

	)

9272 
	#I2C_CR2_LAST
 
I2C_CR2_LAST_Msk


	)

9275 
	#I2C_OAR1_ADD1_7
 0x000000FEU

	)

9276 
	#I2C_OAR1_ADD8_9
 0x00000300U

	)

9278 
	#I2C_OAR1_ADD0_Pos
 (0U)

	)

9279 
	#I2C_OAR1_ADD0_Msk
 (0x1UL << 
I2C_OAR1_ADD0_Pos
Ë

	)

9280 
	#I2C_OAR1_ADD0
 
I2C_OAR1_ADD0_Msk


	)

9281 
	#I2C_OAR1_ADD1_Pos
 (1U)

	)

9282 
	#I2C_OAR1_ADD1_Msk
 (0x1UL << 
I2C_OAR1_ADD1_Pos
Ë

	)

9283 
	#I2C_OAR1_ADD1
 
I2C_OAR1_ADD1_Msk


	)

9284 
	#I2C_OAR1_ADD2_Pos
 (2U)

	)

9285 
	#I2C_OAR1_ADD2_Msk
 (0x1UL << 
I2C_OAR1_ADD2_Pos
Ë

	)

9286 
	#I2C_OAR1_ADD2
 
I2C_OAR1_ADD2_Msk


	)

9287 
	#I2C_OAR1_ADD3_Pos
 (3U)

	)

9288 
	#I2C_OAR1_ADD3_Msk
 (0x1UL << 
I2C_OAR1_ADD3_Pos
Ë

	)

9289 
	#I2C_OAR1_ADD3
 
I2C_OAR1_ADD3_Msk


	)

9290 
	#I2C_OAR1_ADD4_Pos
 (4U)

	)

9291 
	#I2C_OAR1_ADD4_Msk
 (0x1UL << 
I2C_OAR1_ADD4_Pos
Ë

	)

9292 
	#I2C_OAR1_ADD4
 
I2C_OAR1_ADD4_Msk


	)

9293 
	#I2C_OAR1_ADD5_Pos
 (5U)

	)

9294 
	#I2C_OAR1_ADD5_Msk
 (0x1UL << 
I2C_OAR1_ADD5_Pos
Ë

	)

9295 
	#I2C_OAR1_ADD5
 
I2C_OAR1_ADD5_Msk


	)

9296 
	#I2C_OAR1_ADD6_Pos
 (6U)

	)

9297 
	#I2C_OAR1_ADD6_Msk
 (0x1UL << 
I2C_OAR1_ADD6_Pos
Ë

	)

9298 
	#I2C_OAR1_ADD6
 
I2C_OAR1_ADD6_Msk


	)

9299 
	#I2C_OAR1_ADD7_Pos
 (7U)

	)

9300 
	#I2C_OAR1_ADD7_Msk
 (0x1UL << 
I2C_OAR1_ADD7_Pos
Ë

	)

9301 
	#I2C_OAR1_ADD7
 
I2C_OAR1_ADD7_Msk


	)

9302 
	#I2C_OAR1_ADD8_Pos
 (8U)

	)

9303 
	#I2C_OAR1_ADD8_Msk
 (0x1UL << 
I2C_OAR1_ADD8_Pos
Ë

	)

9304 
	#I2C_OAR1_ADD8
 
I2C_OAR1_ADD8_Msk


	)

9305 
	#I2C_OAR1_ADD9_Pos
 (9U)

	)

9306 
	#I2C_OAR1_ADD9_Msk
 (0x1UL << 
I2C_OAR1_ADD9_Pos
Ë

	)

9307 
	#I2C_OAR1_ADD9
 
I2C_OAR1_ADD9_Msk


	)

9309 
	#I2C_OAR1_ADDMODE_Pos
 (15U)

	)

9310 
	#I2C_OAR1_ADDMODE_Msk
 (0x1UL << 
I2C_OAR1_ADDMODE_Pos
Ë

	)

9311 
	#I2C_OAR1_ADDMODE
 
I2C_OAR1_ADDMODE_Msk


	)

9314 
	#I2C_OAR2_ENDUAL_Pos
 (0U)

	)

9315 
	#I2C_OAR2_ENDUAL_Msk
 (0x1UL << 
I2C_OAR2_ENDUAL_Pos
Ë

	)

9316 
	#I2C_OAR2_ENDUAL
 
I2C_OAR2_ENDUAL_Msk


	)

9317 
	#I2C_OAR2_ADD2_Pos
 (1U)

	)

9318 
	#I2C_OAR2_ADD2_Msk
 (0x7FUL << 
I2C_OAR2_ADD2_Pos
Ë

	)

9319 
	#I2C_OAR2_ADD2
 
I2C_OAR2_ADD2_Msk


	)

9322 
	#I2C_DR_DR_Pos
 (0U)

	)

9323 
	#I2C_DR_DR_Msk
 (0xFFUL << 
I2C_DR_DR_Pos
Ë

	)

9324 
	#I2C_DR_DR
 
I2C_DR_DR_Msk


	)

9327 
	#I2C_SR1_SB_Pos
 (0U)

	)

9328 
	#I2C_SR1_SB_Msk
 (0x1UL << 
I2C_SR1_SB_Pos
Ë

	)

9329 
	#I2C_SR1_SB
 
I2C_SR1_SB_Msk


	)

9330 
	#I2C_SR1_ADDR_Pos
 (1U)

	)

9331 
	#I2C_SR1_ADDR_Msk
 (0x1UL << 
I2C_SR1_ADDR_Pos
Ë

	)

9332 
	#I2C_SR1_ADDR
 
I2C_SR1_ADDR_Msk


	)

9333 
	#I2C_SR1_BTF_Pos
 (2U)

	)

9334 
	#I2C_SR1_BTF_Msk
 (0x1UL << 
I2C_SR1_BTF_Pos
Ë

	)

9335 
	#I2C_SR1_BTF
 
I2C_SR1_BTF_Msk


	)

9336 
	#I2C_SR1_ADD10_Pos
 (3U)

	)

9337 
	#I2C_SR1_ADD10_Msk
 (0x1UL << 
I2C_SR1_ADD10_Pos
Ë

	)

9338 
	#I2C_SR1_ADD10
 
I2C_SR1_ADD10_Msk


	)

9339 
	#I2C_SR1_STOPF_Pos
 (4U)

	)

9340 
	#I2C_SR1_STOPF_Msk
 (0x1UL << 
I2C_SR1_STOPF_Pos
Ë

	)

9341 
	#I2C_SR1_STOPF
 
I2C_SR1_STOPF_Msk


	)

9342 
	#I2C_SR1_RXNE_Pos
 (6U)

	)

9343 
	#I2C_SR1_RXNE_Msk
 (0x1UL << 
I2C_SR1_RXNE_Pos
Ë

	)

9344 
	#I2C_SR1_RXNE
 
I2C_SR1_RXNE_Msk


	)

9345 
	#I2C_SR1_TXE_Pos
 (7U)

	)

9346 
	#I2C_SR1_TXE_Msk
 (0x1UL << 
I2C_SR1_TXE_Pos
Ë

	)

9347 
	#I2C_SR1_TXE
 
I2C_SR1_TXE_Msk


	)

9348 
	#I2C_SR1_BERR_Pos
 (8U)

	)

9349 
	#I2C_SR1_BERR_Msk
 (0x1UL << 
I2C_SR1_BERR_Pos
Ë

	)

9350 
	#I2C_SR1_BERR
 
I2C_SR1_BERR_Msk


	)

9351 
	#I2C_SR1_ARLO_Pos
 (9U)

	)

9352 
	#I2C_SR1_ARLO_Msk
 (0x1UL << 
I2C_SR1_ARLO_Pos
Ë

	)

9353 
	#I2C_SR1_ARLO
 
I2C_SR1_ARLO_Msk


	)

9354 
	#I2C_SR1_AF_Pos
 (10U)

	)

9355 
	#I2C_SR1_AF_Msk
 (0x1UL << 
I2C_SR1_AF_Pos
Ë

	)

9356 
	#I2C_SR1_AF
 
I2C_SR1_AF_Msk


	)

9357 
	#I2C_SR1_OVR_Pos
 (11U)

	)

9358 
	#I2C_SR1_OVR_Msk
 (0x1UL << 
I2C_SR1_OVR_Pos
Ë

	)

9359 
	#I2C_SR1_OVR
 
I2C_SR1_OVR_Msk


	)

9360 
	#I2C_SR1_PECERR_Pos
 (12U)

	)

9361 
	#I2C_SR1_PECERR_Msk
 (0x1UL << 
I2C_SR1_PECERR_Pos
Ë

	)

9362 
	#I2C_SR1_PECERR
 
I2C_SR1_PECERR_Msk


	)

9363 
	#I2C_SR1_TIMEOUT_Pos
 (14U)

	)

9364 
	#I2C_SR1_TIMEOUT_Msk
 (0x1UL << 
I2C_SR1_TIMEOUT_Pos
Ë

	)

9365 
	#I2C_SR1_TIMEOUT
 
I2C_SR1_TIMEOUT_Msk


	)

9366 
	#I2C_SR1_SMBALERT_Pos
 (15U)

	)

9367 
	#I2C_SR1_SMBALERT_Msk
 (0x1UL << 
I2C_SR1_SMBALERT_Pos
Ë

	)

9368 
	#I2C_SR1_SMBALERT
 
I2C_SR1_SMBALERT_Msk


	)

9371 
	#I2C_SR2_MSL_Pos
 (0U)

	)

9372 
	#I2C_SR2_MSL_Msk
 (0x1UL << 
I2C_SR2_MSL_Pos
Ë

	)

9373 
	#I2C_SR2_MSL
 
I2C_SR2_MSL_Msk


	)

9374 
	#I2C_SR2_BUSY_Pos
 (1U)

	)

9375 
	#I2C_SR2_BUSY_Msk
 (0x1UL << 
I2C_SR2_BUSY_Pos
Ë

	)

9376 
	#I2C_SR2_BUSY
 
I2C_SR2_BUSY_Msk


	)

9377 
	#I2C_SR2_TRA_Pos
 (2U)

	)

9378 
	#I2C_SR2_TRA_Msk
 (0x1UL << 
I2C_SR2_TRA_Pos
Ë

	)

9379 
	#I2C_SR2_TRA
 
I2C_SR2_TRA_Msk


	)

9380 
	#I2C_SR2_GENCALL_Pos
 (4U)

	)

9381 
	#I2C_SR2_GENCALL_Msk
 (0x1UL << 
I2C_SR2_GENCALL_Pos
Ë

	)

9382 
	#I2C_SR2_GENCALL
 
I2C_SR2_GENCALL_Msk


	)

9383 
	#I2C_SR2_SMBDEFAULT_Pos
 (5U)

	)

9384 
	#I2C_SR2_SMBDEFAULT_Msk
 (0x1UL << 
I2C_SR2_SMBDEFAULT_Pos
Ë

	)

9385 
	#I2C_SR2_SMBDEFAULT
 
I2C_SR2_SMBDEFAULT_Msk


	)

9386 
	#I2C_SR2_SMBHOST_Pos
 (6U)

	)

9387 
	#I2C_SR2_SMBHOST_Msk
 (0x1UL << 
I2C_SR2_SMBHOST_Pos
Ë

	)

9388 
	#I2C_SR2_SMBHOST
 
I2C_SR2_SMBHOST_Msk


	)

9389 
	#I2C_SR2_DUALF_Pos
 (7U)

	)

9390 
	#I2C_SR2_DUALF_Msk
 (0x1UL << 
I2C_SR2_DUALF_Pos
Ë

	)

9391 
	#I2C_SR2_DUALF
 
I2C_SR2_DUALF_Msk


	)

9392 
	#I2C_SR2_PEC_Pos
 (8U)

	)

9393 
	#I2C_SR2_PEC_Msk
 (0xFFUL << 
I2C_SR2_PEC_Pos
Ë

	)

9394 
	#I2C_SR2_PEC
 
I2C_SR2_PEC_Msk


	)

9397 
	#I2C_CCR_CCR_Pos
 (0U)

	)

9398 
	#I2C_CCR_CCR_Msk
 (0xFFFUL << 
I2C_CCR_CCR_Pos
Ë

	)

9399 
	#I2C_CCR_CCR
 
I2C_CCR_CCR_Msk


	)

9400 
	#I2C_CCR_DUTY_Pos
 (14U)

	)

9401 
	#I2C_CCR_DUTY_Msk
 (0x1UL << 
I2C_CCR_DUTY_Pos
Ë

	)

9402 
	#I2C_CCR_DUTY
 
I2C_CCR_DUTY_Msk


	)

9403 
	#I2C_CCR_FS_Pos
 (15U)

	)

9404 
	#I2C_CCR_FS_Msk
 (0x1UL << 
I2C_CCR_FS_Pos
Ë

	)

9405 
	#I2C_CCR_FS
 
I2C_CCR_FS_Msk


	)

9408 
	#I2C_TRISE_TRISE_Pos
 (0U)

	)

9409 
	#I2C_TRISE_TRISE_Msk
 (0x3FUL << 
I2C_TRISE_TRISE_Pos
Ë

	)

9410 
	#I2C_TRISE_TRISE
 
I2C_TRISE_TRISE_Msk


	)

9419 
	#USART_SR_PE_Pos
 (0U)

	)

9420 
	#USART_SR_PE_Msk
 (0x1UL << 
USART_SR_PE_Pos
Ë

	)

9421 
	#USART_SR_PE
 
USART_SR_PE_Msk


	)

9422 
	#USART_SR_FE_Pos
 (1U)

	)

9423 
	#USART_SR_FE_Msk
 (0x1UL << 
USART_SR_FE_Pos
Ë

	)

9424 
	#USART_SR_FE
 
USART_SR_FE_Msk


	)

9425 
	#USART_SR_NE_Pos
 (2U)

	)

9426 
	#USART_SR_NE_Msk
 (0x1UL << 
USART_SR_NE_Pos
Ë

	)

9427 
	#USART_SR_NE
 
USART_SR_NE_Msk


	)

9428 
	#USART_SR_ORE_Pos
 (3U)

	)

9429 
	#USART_SR_ORE_Msk
 (0x1UL << 
USART_SR_ORE_Pos
Ë

	)

9430 
	#USART_SR_ORE
 
USART_SR_ORE_Msk


	)

9431 
	#USART_SR_IDLE_Pos
 (4U)

	)

9432 
	#USART_SR_IDLE_Msk
 (0x1UL << 
USART_SR_IDLE_Pos
Ë

	)

9433 
	#USART_SR_IDLE
 
USART_SR_IDLE_Msk


	)

9434 
	#USART_SR_RXNE_Pos
 (5U)

	)

9435 
	#USART_SR_RXNE_Msk
 (0x1UL << 
USART_SR_RXNE_Pos
Ë

	)

9436 
	#USART_SR_RXNE
 
USART_SR_RXNE_Msk


	)

9437 
	#USART_SR_TC_Pos
 (6U)

	)

9438 
	#USART_SR_TC_Msk
 (0x1UL << 
USART_SR_TC_Pos
Ë

	)

9439 
	#USART_SR_TC
 
USART_SR_TC_Msk


	)

9440 
	#USART_SR_TXE_Pos
 (7U)

	)

9441 
	#USART_SR_TXE_Msk
 (0x1UL << 
USART_SR_TXE_Pos
Ë

	)

9442 
	#USART_SR_TXE
 
USART_SR_TXE_Msk


	)

9443 
	#USART_SR_LBD_Pos
 (8U)

	)

9444 
	#USART_SR_LBD_Msk
 (0x1UL << 
USART_SR_LBD_Pos
Ë

	)

9445 
	#USART_SR_LBD
 
USART_SR_LBD_Msk


	)

9446 
	#USART_SR_CTS_Pos
 (9U)

	)

9447 
	#USART_SR_CTS_Msk
 (0x1UL << 
USART_SR_CTS_Pos
Ë

	)

9448 
	#USART_SR_CTS
 
USART_SR_CTS_Msk


	)

9451 
	#USART_DR_DR_Pos
 (0U)

	)

9452 
	#USART_DR_DR_Msk
 (0x1FFUL << 
USART_DR_DR_Pos
Ë

	)

9453 
	#USART_DR_DR
 
USART_DR_DR_Msk


	)

9456 
	#USART_BRR_DIV_Fø˘i⁄_Pos
 (0U)

	)

9457 
	#USART_BRR_DIV_Fø˘i⁄_Msk
 (0xFUL << 
USART_BRR_DIV_Fø˘i⁄_Pos
Ë

	)

9458 
	#USART_BRR_DIV_Fø˘i⁄
 
USART_BRR_DIV_Fø˘i⁄_Msk


	)

9459 
	#USART_BRR_DIV_M™tisß_Pos
 (4U)

	)

9460 
	#USART_BRR_DIV_M™tisß_Msk
 (0xFFFUL << 
USART_BRR_DIV_M™tisß_Pos
Ë

	)

9461 
	#USART_BRR_DIV_M™tisß
 
USART_BRR_DIV_M™tisß_Msk


	)

9464 
	#USART_CR1_SBK_Pos
 (0U)

	)

9465 
	#USART_CR1_SBK_Msk
 (0x1UL << 
USART_CR1_SBK_Pos
Ë

	)

9466 
	#USART_CR1_SBK
 
USART_CR1_SBK_Msk


	)

9467 
	#USART_CR1_RWU_Pos
 (1U)

	)

9468 
	#USART_CR1_RWU_Msk
 (0x1UL << 
USART_CR1_RWU_Pos
Ë

	)

9469 
	#USART_CR1_RWU
 
USART_CR1_RWU_Msk


	)

9470 
	#USART_CR1_RE_Pos
 (2U)

	)

9471 
	#USART_CR1_RE_Msk
 (0x1UL << 
USART_CR1_RE_Pos
Ë

	)

9472 
	#USART_CR1_RE
 
USART_CR1_RE_Msk


	)

9473 
	#USART_CR1_TE_Pos
 (3U)

	)

9474 
	#USART_CR1_TE_Msk
 (0x1UL << 
USART_CR1_TE_Pos
Ë

	)

9475 
	#USART_CR1_TE
 
USART_CR1_TE_Msk


	)

9476 
	#USART_CR1_IDLEIE_Pos
 (4U)

	)

9477 
	#USART_CR1_IDLEIE_Msk
 (0x1UL << 
USART_CR1_IDLEIE_Pos
Ë

	)

9478 
	#USART_CR1_IDLEIE
 
USART_CR1_IDLEIE_Msk


	)

9479 
	#USART_CR1_RXNEIE_Pos
 (5U)

	)

9480 
	#USART_CR1_RXNEIE_Msk
 (0x1UL << 
USART_CR1_RXNEIE_Pos
Ë

	)

9481 
	#USART_CR1_RXNEIE
 
USART_CR1_RXNEIE_Msk


	)

9482 
	#USART_CR1_TCIE_Pos
 (6U)

	)

9483 
	#USART_CR1_TCIE_Msk
 (0x1UL << 
USART_CR1_TCIE_Pos
Ë

	)

9484 
	#USART_CR1_TCIE
 
USART_CR1_TCIE_Msk


	)

9485 
	#USART_CR1_TXEIE_Pos
 (7U)

	)

9486 
	#USART_CR1_TXEIE_Msk
 (0x1UL << 
USART_CR1_TXEIE_Pos
Ë

	)

9487 
	#USART_CR1_TXEIE
 
USART_CR1_TXEIE_Msk


	)

9488 
	#USART_CR1_PEIE_Pos
 (8U)

	)

9489 
	#USART_CR1_PEIE_Msk
 (0x1UL << 
USART_CR1_PEIE_Pos
Ë

	)

9490 
	#USART_CR1_PEIE
 
USART_CR1_PEIE_Msk


	)

9491 
	#USART_CR1_PS_Pos
 (9U)

	)

9492 
	#USART_CR1_PS_Msk
 (0x1UL << 
USART_CR1_PS_Pos
Ë

	)

9493 
	#USART_CR1_PS
 
USART_CR1_PS_Msk


	)

9494 
	#USART_CR1_PCE_Pos
 (10U)

	)

9495 
	#USART_CR1_PCE_Msk
 (0x1UL << 
USART_CR1_PCE_Pos
Ë

	)

9496 
	#USART_CR1_PCE
 
USART_CR1_PCE_Msk


	)

9497 
	#USART_CR1_WAKE_Pos
 (11U)

	)

9498 
	#USART_CR1_WAKE_Msk
 (0x1UL << 
USART_CR1_WAKE_Pos
Ë

	)

9499 
	#USART_CR1_WAKE
 
USART_CR1_WAKE_Msk


	)

9500 
	#USART_CR1_M_Pos
 (12U)

	)

9501 
	#USART_CR1_M_Msk
 (0x1UL << 
USART_CR1_M_Pos
Ë

	)

9502 
	#USART_CR1_M
 
USART_CR1_M_Msk


	)

9503 
	#USART_CR1_UE_Pos
 (13U)

	)

9504 
	#USART_CR1_UE_Msk
 (0x1UL << 
USART_CR1_UE_Pos
Ë

	)

9505 
	#USART_CR1_UE
 
USART_CR1_UE_Msk


	)

9508 
	#USART_CR2_ADD_Pos
 (0U)

	)

9509 
	#USART_CR2_ADD_Msk
 (0xFUL << 
USART_CR2_ADD_Pos
Ë

	)

9510 
	#USART_CR2_ADD
 
USART_CR2_ADD_Msk


	)

9511 
	#USART_CR2_LBDL_Pos
 (5U)

	)

9512 
	#USART_CR2_LBDL_Msk
 (0x1UL << 
USART_CR2_LBDL_Pos
Ë

	)

9513 
	#USART_CR2_LBDL
 
USART_CR2_LBDL_Msk


	)

9514 
	#USART_CR2_LBDIE_Pos
 (6U)

	)

9515 
	#USART_CR2_LBDIE_Msk
 (0x1UL << 
USART_CR2_LBDIE_Pos
Ë

	)

9516 
	#USART_CR2_LBDIE
 
USART_CR2_LBDIE_Msk


	)

9517 
	#USART_CR2_LBCL_Pos
 (8U)

	)

9518 
	#USART_CR2_LBCL_Msk
 (0x1UL << 
USART_CR2_LBCL_Pos
Ë

	)

9519 
	#USART_CR2_LBCL
 
USART_CR2_LBCL_Msk


	)

9520 
	#USART_CR2_CPHA_Pos
 (9U)

	)

9521 
	#USART_CR2_CPHA_Msk
 (0x1UL << 
USART_CR2_CPHA_Pos
Ë

	)

9522 
	#USART_CR2_CPHA
 
USART_CR2_CPHA_Msk


	)

9523 
	#USART_CR2_CPOL_Pos
 (10U)

	)

9524 
	#USART_CR2_CPOL_Msk
 (0x1UL << 
USART_CR2_CPOL_Pos
Ë

	)

9525 
	#USART_CR2_CPOL
 
USART_CR2_CPOL_Msk


	)

9526 
	#USART_CR2_CLKEN_Pos
 (11U)

	)

9527 
	#USART_CR2_CLKEN_Msk
 (0x1UL << 
USART_CR2_CLKEN_Pos
Ë

	)

9528 
	#USART_CR2_CLKEN
 
USART_CR2_CLKEN_Msk


	)

9530 
	#USART_CR2_STOP_Pos
 (12U)

	)

9531 
	#USART_CR2_STOP_Msk
 (0x3UL << 
USART_CR2_STOP_Pos
Ë

	)

9532 
	#USART_CR2_STOP
 
USART_CR2_STOP_Msk


	)

9533 
	#USART_CR2_STOP_0
 (0x1UL << 
USART_CR2_STOP_Pos
Ë

	)

9534 
	#USART_CR2_STOP_1
 (0x2UL << 
USART_CR2_STOP_Pos
Ë

	)

9536 
	#USART_CR2_LINEN_Pos
 (14U)

	)

9537 
	#USART_CR2_LINEN_Msk
 (0x1UL << 
USART_CR2_LINEN_Pos
Ë

	)

9538 
	#USART_CR2_LINEN
 
USART_CR2_LINEN_Msk


	)

9541 
	#USART_CR3_EIE_Pos
 (0U)

	)

9542 
	#USART_CR3_EIE_Msk
 (0x1UL << 
USART_CR3_EIE_Pos
Ë

	)

9543 
	#USART_CR3_EIE
 
USART_CR3_EIE_Msk


	)

9544 
	#USART_CR3_IREN_Pos
 (1U)

	)

9545 
	#USART_CR3_IREN_Msk
 (0x1UL << 
USART_CR3_IREN_Pos
Ë

	)

9546 
	#USART_CR3_IREN
 
USART_CR3_IREN_Msk


	)

9547 
	#USART_CR3_IRLP_Pos
 (2U)

	)

9548 
	#USART_CR3_IRLP_Msk
 (0x1UL << 
USART_CR3_IRLP_Pos
Ë

	)

9549 
	#USART_CR3_IRLP
 
USART_CR3_IRLP_Msk


	)

9550 
	#USART_CR3_HDSEL_Pos
 (3U)

	)

9551 
	#USART_CR3_HDSEL_Msk
 (0x1UL << 
USART_CR3_HDSEL_Pos
Ë

	)

9552 
	#USART_CR3_HDSEL
 
USART_CR3_HDSEL_Msk


	)

9553 
	#USART_CR3_NACK_Pos
 (4U)

	)

9554 
	#USART_CR3_NACK_Msk
 (0x1UL << 
USART_CR3_NACK_Pos
Ë

	)

9555 
	#USART_CR3_NACK
 
USART_CR3_NACK_Msk


	)

9556 
	#USART_CR3_SCEN_Pos
 (5U)

	)

9557 
	#USART_CR3_SCEN_Msk
 (0x1UL << 
USART_CR3_SCEN_Pos
Ë

	)

9558 
	#USART_CR3_SCEN
 
USART_CR3_SCEN_Msk


	)

9559 
	#USART_CR3_DMAR_Pos
 (6U)

	)

9560 
	#USART_CR3_DMAR_Msk
 (0x1UL << 
USART_CR3_DMAR_Pos
Ë

	)

9561 
	#USART_CR3_DMAR
 
USART_CR3_DMAR_Msk


	)

9562 
	#USART_CR3_DMAT_Pos
 (7U)

	)

9563 
	#USART_CR3_DMAT_Msk
 (0x1UL << 
USART_CR3_DMAT_Pos
Ë

	)

9564 
	#USART_CR3_DMAT
 
USART_CR3_DMAT_Msk


	)

9565 
	#USART_CR3_RTSE_Pos
 (8U)

	)

9566 
	#USART_CR3_RTSE_Msk
 (0x1UL << 
USART_CR3_RTSE_Pos
Ë

	)

9567 
	#USART_CR3_RTSE
 
USART_CR3_RTSE_Msk


	)

9568 
	#USART_CR3_CTSE_Pos
 (9U)

	)

9569 
	#USART_CR3_CTSE_Msk
 (0x1UL << 
USART_CR3_CTSE_Pos
Ë

	)

9570 
	#USART_CR3_CTSE
 
USART_CR3_CTSE_Msk


	)

9571 
	#USART_CR3_CTSIE_Pos
 (10U)

	)

9572 
	#USART_CR3_CTSIE_Msk
 (0x1UL << 
USART_CR3_CTSIE_Pos
Ë

	)

9573 
	#USART_CR3_CTSIE
 
USART_CR3_CTSIE_Msk


	)

9576 
	#USART_GTPR_PSC_Pos
 (0U)

	)

9577 
	#USART_GTPR_PSC_Msk
 (0xFFUL << 
USART_GTPR_PSC_Pos
Ë

	)

9578 
	#USART_GTPR_PSC
 
USART_GTPR_PSC_Msk


	)

9579 
	#USART_GTPR_PSC_0
 (0x01UL << 
USART_GTPR_PSC_Pos
Ë

	)

9580 
	#USART_GTPR_PSC_1
 (0x02UL << 
USART_GTPR_PSC_Pos
Ë

	)

9581 
	#USART_GTPR_PSC_2
 (0x04UL << 
USART_GTPR_PSC_Pos
Ë

	)

9582 
	#USART_GTPR_PSC_3
 (0x08UL << 
USART_GTPR_PSC_Pos
Ë

	)

9583 
	#USART_GTPR_PSC_4
 (0x10UL << 
USART_GTPR_PSC_Pos
Ë

	)

9584 
	#USART_GTPR_PSC_5
 (0x20UL << 
USART_GTPR_PSC_Pos
Ë

	)

9585 
	#USART_GTPR_PSC_6
 (0x40UL << 
USART_GTPR_PSC_Pos
Ë

	)

9586 
	#USART_GTPR_PSC_7
 (0x80UL << 
USART_GTPR_PSC_Pos
Ë

	)

9588 
	#USART_GTPR_GT_Pos
 (8U)

	)

9589 
	#USART_GTPR_GT_Msk
 (0xFFUL << 
USART_GTPR_GT_Pos
Ë

	)

9590 
	#USART_GTPR_GT
 
USART_GTPR_GT_Msk


	)

9599 
	#DBGMCU_IDCODE_DEV_ID_Pos
 (0U)

	)

9600 
	#DBGMCU_IDCODE_DEV_ID_Msk
 (0xFFFUL << 
DBGMCU_IDCODE_DEV_ID_Pos
Ë

	)

9601 
	#DBGMCU_IDCODE_DEV_ID
 
DBGMCU_IDCODE_DEV_ID_Msk


	)

9603 
	#DBGMCU_IDCODE_REV_ID_Pos
 (16U)

	)

9604 
	#DBGMCU_IDCODE_REV_ID_Msk
 (0xFFFFUL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9605 
	#DBGMCU_IDCODE_REV_ID
 
DBGMCU_IDCODE_REV_ID_Msk


	)

9606 
	#DBGMCU_IDCODE_REV_ID_0
 (0x0001UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9607 
	#DBGMCU_IDCODE_REV_ID_1
 (0x0002UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9608 
	#DBGMCU_IDCODE_REV_ID_2
 (0x0004UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9609 
	#DBGMCU_IDCODE_REV_ID_3
 (0x0008UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9610 
	#DBGMCU_IDCODE_REV_ID_4
 (0x0010UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9611 
	#DBGMCU_IDCODE_REV_ID_5
 (0x0020UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9612 
	#DBGMCU_IDCODE_REV_ID_6
 (0x0040UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9613 
	#DBGMCU_IDCODE_REV_ID_7
 (0x0080UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9614 
	#DBGMCU_IDCODE_REV_ID_8
 (0x0100UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9615 
	#DBGMCU_IDCODE_REV_ID_9
 (0x0200UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9616 
	#DBGMCU_IDCODE_REV_ID_10
 (0x0400UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9617 
	#DBGMCU_IDCODE_REV_ID_11
 (0x0800UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9618 
	#DBGMCU_IDCODE_REV_ID_12
 (0x1000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9619 
	#DBGMCU_IDCODE_REV_ID_13
 (0x2000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9620 
	#DBGMCU_IDCODE_REV_ID_14
 (0x4000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9621 
	#DBGMCU_IDCODE_REV_ID_15
 (0x8000UL << 
DBGMCU_IDCODE_REV_ID_Pos
Ë

	)

9624 
	#DBGMCU_CR_DBG_SLEEP_Pos
 (0U)

	)

9625 
	#DBGMCU_CR_DBG_SLEEP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_SLEEP_Pos
Ë

	)

9626 
	#DBGMCU_CR_DBG_SLEEP
 
DBGMCU_CR_DBG_SLEEP_Msk


	)

9627 
	#DBGMCU_CR_DBG_STOP_Pos
 (1U)

	)

9628 
	#DBGMCU_CR_DBG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_STOP_Pos
Ë

	)

9629 
	#DBGMCU_CR_DBG_STOP
 
DBGMCU_CR_DBG_STOP_Msk


	)

9630 
	#DBGMCU_CR_DBG_STANDBY_Pos
 (2U)

	)

9631 
	#DBGMCU_CR_DBG_STANDBY_Msk
 (0x1UL << 
DBGMCU_CR_DBG_STANDBY_Pos
Ë

	)

9632 
	#DBGMCU_CR_DBG_STANDBY
 
DBGMCU_CR_DBG_STANDBY_Msk


	)

9633 
	#DBGMCU_CR_TRACE_IOEN_Pos
 (5U)

	)

9634 
	#DBGMCU_CR_TRACE_IOEN_Msk
 (0x1UL << 
DBGMCU_CR_TRACE_IOEN_Pos
Ë

	)

9635 
	#DBGMCU_CR_TRACE_IOEN
 
DBGMCU_CR_TRACE_IOEN_Msk


	)

9637 
	#DBGMCU_CR_TRACE_MODE_Pos
 (6U)

	)

9638 
	#DBGMCU_CR_TRACE_MODE_Msk
 (0x3UL << 
DBGMCU_CR_TRACE_MODE_Pos
Ë

	)

9639 
	#DBGMCU_CR_TRACE_MODE
 
DBGMCU_CR_TRACE_MODE_Msk


	)

9640 
	#DBGMCU_CR_TRACE_MODE_0
 (0x1UL << 
DBGMCU_CR_TRACE_MODE_Pos
Ë

	)

9641 
	#DBGMCU_CR_TRACE_MODE_1
 (0x2UL << 
DBGMCU_CR_TRACE_MODE_Pos
Ë

	)

9643 
	#DBGMCU_CR_DBG_IWDG_STOP_Pos
 (8U)

	)

9644 
	#DBGMCU_CR_DBG_IWDG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_IWDG_STOP_Pos
Ë

	)

9645 
	#DBGMCU_CR_DBG_IWDG_STOP
 
DBGMCU_CR_DBG_IWDG_STOP_Msk


	)

9646 
	#DBGMCU_CR_DBG_WWDG_STOP_Pos
 (9U)

	)

9647 
	#DBGMCU_CR_DBG_WWDG_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_WWDG_STOP_Pos
Ë

	)

9648 
	#DBGMCU_CR_DBG_WWDG_STOP
 
DBGMCU_CR_DBG_WWDG_STOP_Msk


	)

9649 
	#DBGMCU_CR_DBG_TIM1_STOP_Pos
 (10U)

	)

9650 
	#DBGMCU_CR_DBG_TIM1_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM1_STOP_Pos
Ë

	)

9651 
	#DBGMCU_CR_DBG_TIM1_STOP
 
DBGMCU_CR_DBG_TIM1_STOP_Msk


	)

9652 
	#DBGMCU_CR_DBG_TIM2_STOP_Pos
 (11U)

	)

9653 
	#DBGMCU_CR_DBG_TIM2_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM2_STOP_Pos
Ë

	)

9654 
	#DBGMCU_CR_DBG_TIM2_STOP
 
DBGMCU_CR_DBG_TIM2_STOP_Msk


	)

9655 
	#DBGMCU_CR_DBG_TIM3_STOP_Pos
 (12U)

	)

9656 
	#DBGMCU_CR_DBG_TIM3_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM3_STOP_Pos
Ë

	)

9657 
	#DBGMCU_CR_DBG_TIM3_STOP
 
DBGMCU_CR_DBG_TIM3_STOP_Msk


	)

9658 
	#DBGMCU_CR_DBG_TIM4_STOP_Pos
 (13U)

	)

9659 
	#DBGMCU_CR_DBG_TIM4_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_TIM4_STOP_Pos
Ë

	)

9660 
	#DBGMCU_CR_DBG_TIM4_STOP
 
DBGMCU_CR_DBG_TIM4_STOP_Msk


	)

9661 
	#DBGMCU_CR_DBG_CAN1_STOP_Pos
 (14U)

	)

9662 
	#DBGMCU_CR_DBG_CAN1_STOP_Msk
 (0x1UL << 
DBGMCU_CR_DBG_CAN1_STOP_Pos
Ë

	)

9663 
	#DBGMCU_CR_DBG_CAN1_STOP
 
DBGMCU_CR_DBG_CAN1_STOP_Msk


	)

9664 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos
 (15U)

	)

9665 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk
 (0x1UL << 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Pos
Ë

	)

9666 
	#DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT_Msk


	)

9667 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos
 (16U)

	)

9668 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk
 (0x1UL << 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Pos
Ë

	)

9669 
	#DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT_Msk


	)

9677 
	#FLASH_ACR_LATENCY_Pos
 (0U)

	)

9678 
	#FLASH_ACR_LATENCY_Msk
 (0x7UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9679 
	#FLASH_ACR_LATENCY
 
FLASH_ACR_LATENCY_Msk


	)

9680 
	#FLASH_ACR_LATENCY_0
 (0x1UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9681 
	#FLASH_ACR_LATENCY_1
 (0x2UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9682 
	#FLASH_ACR_LATENCY_2
 (0x4UL << 
FLASH_ACR_LATENCY_Pos
Ë

	)

9684 
	#FLASH_ACR_HLFCYA_Pos
 (3U)

	)

9685 
	#FLASH_ACR_HLFCYA_Msk
 (0x1UL << 
FLASH_ACR_HLFCYA_Pos
Ë

	)

9686 
	#FLASH_ACR_HLFCYA
 
FLASH_ACR_HLFCYA_Msk


	)

9687 
	#FLASH_ACR_PRFTBE_Pos
 (4U)

	)

9688 
	#FLASH_ACR_PRFTBE_Msk
 (0x1UL << 
FLASH_ACR_PRFTBE_Pos
Ë

	)

9689 
	#FLASH_ACR_PRFTBE
 
FLASH_ACR_PRFTBE_Msk


	)

9690 
	#FLASH_ACR_PRFTBS_Pos
 (5U)

	)

9691 
	#FLASH_ACR_PRFTBS_Msk
 (0x1UL << 
FLASH_ACR_PRFTBS_Pos
Ë

	)

9692 
	#FLASH_ACR_PRFTBS
 
FLASH_ACR_PRFTBS_Msk


	)

9695 
	#FLASH_KEYR_FKEYR_Pos
 (0U)

	)

9696 
	#FLASH_KEYR_FKEYR_Msk
 (0xFFFFFFFFUL << 
FLASH_KEYR_FKEYR_Pos
Ë

	)

9697 
	#FLASH_KEYR_FKEYR
 
FLASH_KEYR_FKEYR_Msk


	)

9699 
	#RDP_KEY_Pos
 (0U)

	)

9700 
	#RDP_KEY_Msk
 (0xA5UL << 
RDP_KEY_Pos
Ë

	)

9701 
	#RDP_KEY
 
RDP_KEY_Msk


	)

9702 
	#FLASH_KEY1_Pos
 (0U)

	)

9703 
	#FLASH_KEY1_Msk
 (0x45670123UL << 
FLASH_KEY1_Pos
Ë

	)

9704 
	#FLASH_KEY1
 
FLASH_KEY1_Msk


	)

9705 
	#FLASH_KEY2_Pos
 (0U)

	)

9706 
	#FLASH_KEY2_Msk
 (0xCDEF89ABUL << 
FLASH_KEY2_Pos
Ë

	)

9707 
	#FLASH_KEY2
 
FLASH_KEY2_Msk


	)

9710 
	#FLASH_OPTKEYR_OPTKEYR_Pos
 (0U)

	)

9711 
	#FLASH_OPTKEYR_OPTKEYR_Msk
 (0xFFFFFFFFUL << 
FLASH_OPTKEYR_OPTKEYR_Pos
Ë

	)

9712 
	#FLASH_OPTKEYR_OPTKEYR
 
FLASH_OPTKEYR_OPTKEYR_Msk


	)

9714 
	#FLASH_OPTKEY1
 
FLASH_KEY1


	)

9715 
	#FLASH_OPTKEY2
 
FLASH_KEY2


	)

9718 
	#FLASH_SR_BSY_Pos
 (0U)

	)

9719 
	#FLASH_SR_BSY_Msk
 (0x1UL << 
FLASH_SR_BSY_Pos
Ë

	)

9720 
	#FLASH_SR_BSY
 
FLASH_SR_BSY_Msk


	)

9721 
	#FLASH_SR_PGERR_Pos
 (2U)

	)

9722 
	#FLASH_SR_PGERR_Msk
 (0x1UL << 
FLASH_SR_PGERR_Pos
Ë

	)

9723 
	#FLASH_SR_PGERR
 
FLASH_SR_PGERR_Msk


	)

9724 
	#FLASH_SR_WRPRTERR_Pos
 (4U)

	)

9725 
	#FLASH_SR_WRPRTERR_Msk
 (0x1UL << 
FLASH_SR_WRPRTERR_Pos
Ë

	)

9726 
	#FLASH_SR_WRPRTERR
 
FLASH_SR_WRPRTERR_Msk


	)

9727 
	#FLASH_SR_EOP_Pos
 (5U)

	)

9728 
	#FLASH_SR_EOP_Msk
 (0x1UL << 
FLASH_SR_EOP_Pos
Ë

	)

9729 
	#FLASH_SR_EOP
 
FLASH_SR_EOP_Msk


	)

9732 
	#FLASH_CR_PG_Pos
 (0U)

	)

9733 
	#FLASH_CR_PG_Msk
 (0x1UL << 
FLASH_CR_PG_Pos
Ë

	)

9734 
	#FLASH_CR_PG
 
FLASH_CR_PG_Msk


	)

9735 
	#FLASH_CR_PER_Pos
 (1U)

	)

9736 
	#FLASH_CR_PER_Msk
 (0x1UL << 
FLASH_CR_PER_Pos
Ë

	)

9737 
	#FLASH_CR_PER
 
FLASH_CR_PER_Msk


	)

9738 
	#FLASH_CR_MER_Pos
 (2U)

	)

9739 
	#FLASH_CR_MER_Msk
 (0x1UL << 
FLASH_CR_MER_Pos
Ë

	)

9740 
	#FLASH_CR_MER
 
FLASH_CR_MER_Msk


	)

9741 
	#FLASH_CR_OPTPG_Pos
 (4U)

	)

9742 
	#FLASH_CR_OPTPG_Msk
 (0x1UL << 
FLASH_CR_OPTPG_Pos
Ë

	)

9743 
	#FLASH_CR_OPTPG
 
FLASH_CR_OPTPG_Msk


	)

9744 
	#FLASH_CR_OPTER_Pos
 (5U)

	)

9745 
	#FLASH_CR_OPTER_Msk
 (0x1UL << 
FLASH_CR_OPTER_Pos
Ë

	)

9746 
	#FLASH_CR_OPTER
 
FLASH_CR_OPTER_Msk


	)

9747 
	#FLASH_CR_STRT_Pos
 (6U)

	)

9748 
	#FLASH_CR_STRT_Msk
 (0x1UL << 
FLASH_CR_STRT_Pos
Ë

	)

9749 
	#FLASH_CR_STRT
 
FLASH_CR_STRT_Msk


	)

9750 
	#FLASH_CR_LOCK_Pos
 (7U)

	)

9751 
	#FLASH_CR_LOCK_Msk
 (0x1UL << 
FLASH_CR_LOCK_Pos
Ë

	)

9752 
	#FLASH_CR_LOCK
 
FLASH_CR_LOCK_Msk


	)

9753 
	#FLASH_CR_OPTWRE_Pos
 (9U)

	)

9754 
	#FLASH_CR_OPTWRE_Msk
 (0x1UL << 
FLASH_CR_OPTWRE_Pos
Ë

	)

9755 
	#FLASH_CR_OPTWRE
 
FLASH_CR_OPTWRE_Msk


	)

9756 
	#FLASH_CR_ERRIE_Pos
 (10U)

	)

9757 
	#FLASH_CR_ERRIE_Msk
 (0x1UL << 
FLASH_CR_ERRIE_Pos
Ë

	)

9758 
	#FLASH_CR_ERRIE
 
FLASH_CR_ERRIE_Msk


	)

9759 
	#FLASH_CR_EOPIE_Pos
 (12U)

	)

9760 
	#FLASH_CR_EOPIE_Msk
 (0x1UL << 
FLASH_CR_EOPIE_Pos
Ë

	)

9761 
	#FLASH_CR_EOPIE
 
FLASH_CR_EOPIE_Msk


	)

9764 
	#FLASH_AR_FAR_Pos
 (0U)

	)

9765 
	#FLASH_AR_FAR_Msk
 (0xFFFFFFFFUL << 
FLASH_AR_FAR_Pos
Ë

	)

9766 
	#FLASH_AR_FAR
 
FLASH_AR_FAR_Msk


	)

9769 
	#FLASH_OBR_OPTERR_Pos
 (0U)

	)

9770 
	#FLASH_OBR_OPTERR_Msk
 (0x1UL << 
FLASH_OBR_OPTERR_Pos
Ë

	)

9771 
	#FLASH_OBR_OPTERR
 
FLASH_OBR_OPTERR_Msk


	)

9772 
	#FLASH_OBR_RDPRT_Pos
 (1U)

	)

9773 
	#FLASH_OBR_RDPRT_Msk
 (0x1UL << 
FLASH_OBR_RDPRT_Pos
Ë

	)

9774 
	#FLASH_OBR_RDPRT
 
FLASH_OBR_RDPRT_Msk


	)

9776 
	#FLASH_OBR_IWDG_SW_Pos
 (2U)

	)

9777 
	#FLASH_OBR_IWDG_SW_Msk
 (0x1UL << 
FLASH_OBR_IWDG_SW_Pos
Ë

	)

9778 
	#FLASH_OBR_IWDG_SW
 
FLASH_OBR_IWDG_SW_Msk


	)

9779 
	#FLASH_OBR_nRST_STOP_Pos
 (3U)

	)

9780 
	#FLASH_OBR_nRST_STOP_Msk
 (0x1UL << 
FLASH_OBR_nRST_STOP_Pos
Ë

	)

9781 
	#FLASH_OBR_nRST_STOP
 
FLASH_OBR_nRST_STOP_Msk


	)

9782 
	#FLASH_OBR_nRST_STDBY_Pos
 (4U)

	)

9783 
	#FLASH_OBR_nRST_STDBY_Msk
 (0x1UL << 
FLASH_OBR_nRST_STDBY_Pos
Ë

	)

9784 
	#FLASH_OBR_nRST_STDBY
 
FLASH_OBR_nRST_STDBY_Msk


	)

9785 
	#FLASH_OBR_USER_Pos
 (2U)

	)

9786 
	#FLASH_OBR_USER_Msk
 (0x7UL << 
FLASH_OBR_USER_Pos
Ë

	)

9787 
	#FLASH_OBR_USER
 
FLASH_OBR_USER_Msk


	)

9788 
	#FLASH_OBR_DATA0_Pos
 (10U)

	)

9789 
	#FLASH_OBR_DATA0_Msk
 (0xFFUL << 
FLASH_OBR_DATA0_Pos
Ë

	)

9790 
	#FLASH_OBR_DATA0
 
FLASH_OBR_DATA0_Msk


	)

9791 
	#FLASH_OBR_DATA1_Pos
 (18U)

	)

9792 
	#FLASH_OBR_DATA1_Msk
 (0xFFUL << 
FLASH_OBR_DATA1_Pos
Ë

	)

9793 
	#FLASH_OBR_DATA1
 
FLASH_OBR_DATA1_Msk


	)

9796 
	#FLASH_WRPR_WRP_Pos
 (0U)

	)

9797 
	#FLASH_WRPR_WRP_Msk
 (0xFFFFFFFFUL << 
FLASH_WRPR_WRP_Pos
Ë

	)

9798 
	#FLASH_WRPR_WRP
 
FLASH_WRPR_WRP_Msk


	)

9803 
	#FLASH_RDP_RDP_Pos
 (0U)

	)

9804 
	#FLASH_RDP_RDP_Msk
 (0xFFUL << 
FLASH_RDP_RDP_Pos
Ë

	)

9805 
	#FLASH_RDP_RDP
 
FLASH_RDP_RDP_Msk


	)

9806 
	#FLASH_RDP_nRDP_Pos
 (8U)

	)

9807 
	#FLASH_RDP_nRDP_Msk
 (0xFFUL << 
FLASH_RDP_nRDP_Pos
Ë

	)

9808 
	#FLASH_RDP_nRDP
 
FLASH_RDP_nRDP_Msk


	)

9811 
	#FLASH_USER_USER_Pos
 (16U)

	)

9812 
	#FLASH_USER_USER_Msk
 (0xFFUL << 
FLASH_USER_USER_Pos
Ë

	)

9813 
	#FLASH_USER_USER
 
FLASH_USER_USER_Msk


	)

9814 
	#FLASH_USER_nUSER_Pos
 (24U)

	)

9815 
	#FLASH_USER_nUSER_Msk
 (0xFFUL << 
FLASH_USER_nUSER_Pos
Ë

	)

9816 
	#FLASH_USER_nUSER
 
FLASH_USER_nUSER_Msk


	)

9819 
	#FLASH_DATA0_DATA0_Pos
 (0U)

	)

9820 
	#FLASH_DATA0_DATA0_Msk
 (0xFFUL << 
FLASH_DATA0_DATA0_Pos
Ë

	)

9821 
	#FLASH_DATA0_DATA0
 
FLASH_DATA0_DATA0_Msk


	)

9822 
	#FLASH_DATA0_nDATA0_Pos
 (8U)

	)

9823 
	#FLASH_DATA0_nDATA0_Msk
 (0xFFUL << 
FLASH_DATA0_nDATA0_Pos
Ë

	)

9824 
	#FLASH_DATA0_nDATA0
 
FLASH_DATA0_nDATA0_Msk


	)

9827 
	#FLASH_DATA1_DATA1_Pos
 (16U)

	)

9828 
	#FLASH_DATA1_DATA1_Msk
 (0xFFUL << 
FLASH_DATA1_DATA1_Pos
Ë

	)

9829 
	#FLASH_DATA1_DATA1
 
FLASH_DATA1_DATA1_Msk


	)

9830 
	#FLASH_DATA1_nDATA1_Pos
 (24U)

	)

9831 
	#FLASH_DATA1_nDATA1_Msk
 (0xFFUL << 
FLASH_DATA1_nDATA1_Pos
Ë

	)

9832 
	#FLASH_DATA1_nDATA1
 
FLASH_DATA1_nDATA1_Msk


	)

9835 
	#FLASH_WRP0_WRP0_Pos
 (0U)

	)

9836 
	#FLASH_WRP0_WRP0_Msk
 (0xFFUL << 
FLASH_WRP0_WRP0_Pos
Ë

	)

9837 
	#FLASH_WRP0_WRP0
 
FLASH_WRP0_WRP0_Msk


	)

9838 
	#FLASH_WRP0_nWRP0_Pos
 (8U)

	)

9839 
	#FLASH_WRP0_nWRP0_Msk
 (0xFFUL << 
FLASH_WRP0_nWRP0_Pos
Ë

	)

9840 
	#FLASH_WRP0_nWRP0
 
FLASH_WRP0_nWRP0_Msk


	)

9843 
	#FLASH_WRP1_WRP1_Pos
 (16U)

	)

9844 
	#FLASH_WRP1_WRP1_Msk
 (0xFFUL << 
FLASH_WRP1_WRP1_Pos
Ë

	)

9845 
	#FLASH_WRP1_WRP1
 
FLASH_WRP1_WRP1_Msk


	)

9846 
	#FLASH_WRP1_nWRP1_Pos
 (24U)

	)

9847 
	#FLASH_WRP1_nWRP1_Msk
 (0xFFUL << 
FLASH_WRP1_nWRP1_Pos
Ë

	)

9848 
	#FLASH_WRP1_nWRP1
 
FLASH_WRP1_nWRP1_Msk


	)

9851 
	#FLASH_WRP2_WRP2_Pos
 (0U)

	)

9852 
	#FLASH_WRP2_WRP2_Msk
 (0xFFUL << 
FLASH_WRP2_WRP2_Pos
Ë

	)

9853 
	#FLASH_WRP2_WRP2
 
FLASH_WRP2_WRP2_Msk


	)

9854 
	#FLASH_WRP2_nWRP2_Pos
 (8U)

	)

9855 
	#FLASH_WRP2_nWRP2_Msk
 (0xFFUL << 
FLASH_WRP2_nWRP2_Pos
Ë

	)

9856 
	#FLASH_WRP2_nWRP2
 
FLASH_WRP2_nWRP2_Msk


	)

9859 
	#FLASH_WRP3_WRP3_Pos
 (16U)

	)

9860 
	#FLASH_WRP3_WRP3_Msk
 (0xFFUL << 
FLASH_WRP3_WRP3_Pos
Ë

	)

9861 
	#FLASH_WRP3_WRP3
 
FLASH_WRP3_WRP3_Msk


	)

9862 
	#FLASH_WRP3_nWRP3_Pos
 (24U)

	)

9863 
	#FLASH_WRP3_nWRP3_Msk
 (0xFFUL << 
FLASH_WRP3_nWRP3_Pos
Ë

	)

9864 
	#FLASH_WRP3_nWRP3
 
FLASH_WRP3_nWRP3_Msk


	)

9881 
	#IS_ADC_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
ADC1
) || \

9882 ((
INSTANCE
Ë=
ADC2
))

	)

9884 
	#IS_ADC_COMMON_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC12_COMMON
)

	)

9886 
	#IS_ADC_MULTIMODE_MASTER_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

9888 
	#IS_ADC_DMA_CAPABILITY_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
ADC1
)

	)

9891 
	#IS_CAN_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CAN1
)

	)

9894 
	#IS_CRC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
CRC
)

	)

9899 
	#IS_DMA_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
DMA1_Ch™√l1
) || \

9900 ((
INSTANCE
Ë=
DMA1_Ch™√l2
) || \

9901 ((
INSTANCE
Ë=
DMA1_Ch™√l3
) || \

9902 ((
INSTANCE
Ë=
DMA1_Ch™√l4
) || \

9903 ((
INSTANCE
Ë=
DMA1_Ch™√l5
) || \

9904 ((
INSTANCE
Ë=
DMA1_Ch™√l6
) || \

9905 ((
INSTANCE
Ë=
DMA1_Ch™√l7
))

	)

9908 
	#IS_GPIO_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
GPIOA
) || \

9909 ((
INSTANCE
Ë=
GPIOB
) || \

9910 ((
INSTANCE
Ë=
GPIOC
) || \

9911 ((
INSTANCE
Ë=
GPIOD
) || \

9912 ((
INSTANCE
Ë=
GPIOE
))

	)

9915 
	#IS_GPIO_AF_INSTANCE
(
INSTANCE
Ë
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

9918 
	#IS_GPIO_LOCK_INSTANCE
(
INSTANCE
Ë
	`IS_GPIO_ALL_INSTANCE
(INSTANCE)

	)

9921 
	#IS_I2C_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
I2C1
) || \

9922 ((
INSTANCE
Ë=
I2C2
))

	)

9925 
	#IS_SMBUS_ALL_INSTANCE
 
IS_I2C_ALL_INSTANCE


	)

9928 
	#IS_IWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
IWDG
)

	)

9931 
	#IS_SPI_ALL_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
SPI1
) || \

9932 ((
INSTANCE
Ë=
SPI2
))

	)

9936 
	#IS_TIM_INSTANCE
(
INSTANCE
)\

9937 (((
INSTANCE
Ë=
TIM1
) || \

9938 ((
INSTANCE
Ë=
TIM2
) || \

9939 ((
INSTANCE
Ë=
TIM3
) || \

9940 ((
INSTANCE
Ë=
TIM4
))

	)

9942 
	#IS_TIM_ADVANCED_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
TIM1
)

	)

9944 
	#IS_TIM_CC1_INSTANCE
(
INSTANCE
)\

9945 (((
INSTANCE
Ë=
TIM1
) || \

9946 ((
INSTANCE
Ë=
TIM2
) || \

9947 ((
INSTANCE
Ë=
TIM3
) || \

9948 ((
INSTANCE
Ë=
TIM4
))

	)

9950 
	#IS_TIM_CC2_INSTANCE
(
INSTANCE
)\

9951 (((
INSTANCE
Ë=
TIM1
) || \

9952 ((
INSTANCE
Ë=
TIM2
) || \

9953 ((
INSTANCE
Ë=
TIM3
) || \

9954 ((
INSTANCE
Ë=
TIM4
))

	)

9956 
	#IS_TIM_CC3_INSTANCE
(
INSTANCE
)\

9957 (((
INSTANCE
Ë=
TIM1
) || \

9958 ((
INSTANCE
Ë=
TIM2
) || \

9959 ((
INSTANCE
Ë=
TIM3
) || \

9960 ((
INSTANCE
Ë=
TIM4
))

	)

9962 
	#IS_TIM_CC4_INSTANCE
(
INSTANCE
)\

9963 (((
INSTANCE
Ë=
TIM1
) || \

9964 ((
INSTANCE
Ë=
TIM2
) || \

9965 ((
INSTANCE
Ë=
TIM3
) || \

9966 ((
INSTANCE
Ë=
TIM4
))

	)

9968 
	#IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
INSTANCE
)\

9969 (((
INSTANCE
Ë=
TIM1
) || \

9970 ((
INSTANCE
Ë=
TIM2
) || \

9971 ((
INSTANCE
Ë=
TIM3
) || \

9972 ((
INSTANCE
Ë=
TIM4
))

	)

9974 
	#IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE
(
INSTANCE
)\

9975 (((
INSTANCE
Ë=
TIM1
) || \

9976 ((
INSTANCE
Ë=
TIM2
) || \

9977 ((
INSTANCE
Ë=
TIM3
) || \

9978 ((
INSTANCE
Ë=
TIM4
))

	)

9980 
	#IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
INSTANCE
)\

9981 (((
INSTANCE
Ë=
TIM1
) || \

9982 ((
INSTANCE
Ë=
TIM2
) || \

9983 ((
INSTANCE
Ë=
TIM3
) || \

9984 ((
INSTANCE
Ë=
TIM4
))

	)

9986 
	#IS_TIM_CLOCKSOURCE_ITRX_INSTANCE
(
INSTANCE
)\

9987 (((
INSTANCE
Ë=
TIM1
) || \

9988 ((
INSTANCE
Ë=
TIM2
) || \

9989 ((
INSTANCE
Ë=
TIM3
) || \

9990 ((
INSTANCE
Ë=
TIM4
))

	)

9992 
	#IS_TIM_OCXREF_CLEAR_INSTANCE
(
INSTANCE
)\

9993 (((
INSTANCE
Ë=
TIM1
) || \

9994 ((
INSTANCE
Ë=
TIM2
) || \

9995 ((
INSTANCE
Ë=
TIM3
) || \

9996 ((
INSTANCE
Ë=
TIM4
))

	)

9998 
	#IS_TIM_ENCODER_INTERFACE_INSTANCE
(
INSTANCE
)\

9999 (((
INSTANCE
Ë=
TIM1
) || \

10000 ((
INSTANCE
Ë=
TIM2
) || \

10001 ((
INSTANCE
Ë=
TIM3
) || \

10002 ((
INSTANCE
Ë=
TIM4
))

	)

10004 
	#IS_TIM_XOR_INSTANCE
(
INSTANCE
)\

10005 (((
INSTANCE
Ë=
TIM1
) || \

10006 ((
INSTANCE
Ë=
TIM2
) || \

10007 ((
INSTANCE
Ë=
TIM3
) || \

10008 ((
INSTANCE
Ë=
TIM4
))

	)

10010 
	#IS_TIM_MASTER_INSTANCE
(
INSTANCE
)\

10011 (((
INSTANCE
Ë=
TIM1
) || \

10012 ((
INSTANCE
Ë=
TIM2
) || \

10013 ((
INSTANCE
Ë=
TIM3
) || \

10014 ((
INSTANCE
Ë=
TIM4
))

	)

10016 
	#IS_TIM_SLAVE_INSTANCE
(
INSTANCE
)\

10017 (((
INSTANCE
Ë=
TIM1
) || \

10018 ((
INSTANCE
Ë=
TIM2
) || \

10019 ((
INSTANCE
Ë=
TIM3
) || \

10020 ((
INSTANCE
Ë=
TIM4
))

	)

10022 
	#IS_TIM_DMABURST_INSTANCE
(
INSTANCE
)\

10023 (((
INSTANCE
Ë=
TIM1
) || \

10024 ((
INSTANCE
Ë=
TIM2
) || \

10025 ((
INSTANCE
Ë=
TIM3
) || \

10026 ((
INSTANCE
Ë=
TIM4
))

	)

10028 
	#IS_TIM_BREAK_INSTANCE
(
INSTANCE
)\

10029 ((
INSTANCE
Ë=
TIM1
)

	)

10031 
	#IS_TIM_CCX_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

10032 ((((
INSTANCE
Ë=
TIM1
) && \

10033 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10034 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10035 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10036 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

10038 (((
INSTANCE
Ë=
TIM2
) && \

10039 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10040 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10041 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10042 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

10044 (((
INSTANCE
Ë=
TIM3
) && \

10045 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10046 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10047 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10048 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))) \

10050 (((
INSTANCE
Ë=
TIM4
) && \

10051 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10052 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10053 ((
CHANNEL
Ë=
TIM_CHANNEL_3
) || \

10054 ((
CHANNEL
Ë=
TIM_CHANNEL_4
))))

	)

10056 
	#IS_TIM_CCXN_INSTANCE
(
INSTANCE
, 
CHANNEL
) \

10057 (((
INSTANCE
Ë=
TIM1
) && \

10058 (((
CHANNEL
Ë=
TIM_CHANNEL_1
) || \

10059 ((
CHANNEL
Ë=
TIM_CHANNEL_2
) || \

10060 ((
CHANNEL
Ë=
TIM_CHANNEL_3
)))

	)

10062 
	#IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
INSTANCE
)\

10063 (((
INSTANCE
Ë=
TIM1
) || \

10064 ((
INSTANCE
Ë=
TIM2
) || \

10065 ((
INSTANCE
Ë=
TIM3
) || \

10066 ((
INSTANCE
Ë=
TIM4
))

	)

10068 
	#IS_TIM_REPETITION_COUNTER_INSTANCE
(
INSTANCE
)\

10069 ((
INSTANCE
Ë=
TIM1
)

	)

10071 
	#IS_TIM_CLOCK_DIVISION_INSTANCE
(
INSTANCE
)\

10072 (((
INSTANCE
Ë=
TIM1
) || \

10073 ((
INSTANCE
Ë=
TIM2
) || \

10074 ((
INSTANCE
Ë=
TIM3
) || \

10075 ((
INSTANCE
Ë=
TIM4
))

	)

10077 
	#IS_TIM_DMA_INSTANCE
(
INSTANCE
)\

10078 (((
INSTANCE
Ë=
TIM1
) || \

10079 ((
INSTANCE
Ë=
TIM2
) || \

10080 ((
INSTANCE
Ë=
TIM3
) || \

10081 ((
INSTANCE
Ë=
TIM4
))

	)

10083 
	#IS_TIM_DMA_CC_INSTANCE
(
INSTANCE
)\

10084 (((
INSTANCE
Ë=
TIM1
) || \

10085 ((
INSTANCE
Ë=
TIM2
) || \

10086 ((
INSTANCE
Ë=
TIM3
) || \

10087 ((
INSTANCE
Ë=
TIM4
))

	)

10089 
	#IS_TIM_COMMUTATION_EVENT_INSTANCE
(
INSTANCE
)\

10090 ((
INSTANCE
Ë=
TIM1
)

	)

10092 
	#IS_TIM_ETR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

10093 ((
INSTANCE
Ë=
TIM2
) || \

10094 ((
INSTANCE
Ë=
TIM3
) || \

10095 ((
INSTANCE
Ë=
TIM4
))

	)

10097 
	#IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
TIM1
) || \

10098 ((
INSTANCE
Ë=
TIM2
) || \

10099 ((
INSTANCE
Ë=
TIM3
) || \

10100 ((
INSTANCE
Ë=
TIM4
))

	)

10102 
	#IS_TIM_32B_COUNTER_INSTANCE
(
INSTANCE
Ë0U

	)

10108 
	#IS_USART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10109 ((
INSTANCE
Ë=
USART2
) || \

10110 ((
INSTANCE
Ë=
USART3
))

	)

10113 
	#IS_UART_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10114 ((
INSTANCE
Ë=
USART2
) || \

10115 ((
INSTANCE
Ë=
USART3
))

	)

10118 
	#IS_UART_HALFDUPLEX_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10119 ((
INSTANCE
Ë=
USART2
) || \

10120 ((
INSTANCE
Ë=
USART3
))

	)

10123 
	#IS_UART_LIN_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10124 ((
INSTANCE
Ë=
USART2
) || \

10125 ((
INSTANCE
Ë=
USART3
))

	)

10128 
	#IS_UART_HWFLOW_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10129 ((
INSTANCE
Ë=
USART2
) || \

10130 ((
INSTANCE
Ë=
USART3
))

	)

10133 
	#IS_SMARTCARD_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10134 ((
INSTANCE
Ë=
USART2
) || \

10135 ((
INSTANCE
Ë=
USART3
))

	)

10138 
	#IS_IRDA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10139 ((
INSTANCE
Ë=
USART2
) || \

10140 ((
INSTANCE
Ë=
USART3
))

	)

10143 
	#IS_UART_MULTIPROCESSOR_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10144 ((
INSTANCE
Ë=
USART2
) || \

10145 ((
INSTANCE
Ë=
USART3
))

	)

10148 
	#IS_UART_DMA_INSTANCE
(
INSTANCE
Ë(((INSTANCEË=
USART1
) || \

10149 ((
INSTANCE
Ë=
USART2
) || \

10150 ((
INSTANCE
Ë=
USART3
))

	)

10153 
	#IS_RTC_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
RTC
)

	)

10156 
	#IS_WWDG_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
WWDG
)

	)

10159 
	#IS_PCD_ALL_INSTANCE
(
INSTANCE
Ë((INSTANCEË=
USB
)

	)

10163 
	#RCC_HSE_MIN
 4000000U

	)

10164 
	#RCC_HSE_MAX
 16000000U

	)

10166 
	#RCC_MAX_FREQUENCY
 72000000U

	)

10180 
	#ADC1_IRQn
 
ADC1_2_IRQn


	)

10181 
	#TIM1_BRK_TIM15_IRQn
 
TIM1_BRK_IRQn


	)

10182 
	#TIM9_IRQn
 
TIM1_BRK_IRQn


	)

10183 
	#TIM1_BRK_TIM9_IRQn
 
TIM1_BRK_IRQn


	)

10184 
	#TIM1_TRG_COM_TIM17_IRQn
 
TIM1_TRG_COM_IRQn


	)

10185 
	#TIM1_TRG_COM_TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

10186 
	#TIM11_IRQn
 
TIM1_TRG_COM_IRQn


	)

10187 
	#TIM10_IRQn
 
TIM1_UP_IRQn


	)

10188 
	#TIM1_UP_TIM16_IRQn
 
TIM1_UP_IRQn


	)

10189 
	#TIM1_UP_TIM10_IRQn
 
TIM1_UP_IRQn


	)

10190 
	#OTG_FS_WKUP_IRQn
 
USBWakeUp_IRQn


	)

10191 
	#CEC_IRQn
 
USBWakeUp_IRQn


	)

10192 
	#CAN1_TX_IRQn
 
USB_HP_CAN1_TX_IRQn


	)

10193 
	#USB_HP_IRQn
 
USB_HP_CAN1_TX_IRQn


	)

10194 
	#CAN1_RX0_IRQn
 
USB_LP_CAN1_RX0_IRQn


	)

10195 
	#USB_LP_IRQn
 
USB_LP_CAN1_RX0_IRQn


	)

10199 
	#ADC1_IRQH™dÀr
 
ADC1_2_IRQH™dÀr


	)

10200 
	#TIM1_BRK_TIM15_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

10201 
	#TIM9_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

10202 
	#TIM1_BRK_TIM9_IRQH™dÀr
 
TIM1_BRK_IRQH™dÀr


	)

10203 
	#TIM1_TRG_COM_TIM17_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

10204 
	#TIM1_TRG_COM_TIM11_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

10205 
	#TIM11_IRQH™dÀr
 
TIM1_TRG_COM_IRQH™dÀr


	)

10206 
	#TIM10_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

10207 
	#TIM1_UP_TIM16_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

10208 
	#TIM1_UP_TIM10_IRQH™dÀr
 
TIM1_UP_IRQH™dÀr


	)

10209 
	#OTG_FS_WKUP_IRQH™dÀr
 
USBWakeUp_IRQH™dÀr


	)

10210 
	#CEC_IRQH™dÀr
 
USBWakeUp_IRQH™dÀr


	)

10211 
	#CAN1_TX_IRQH™dÀr
 
USB_HP_CAN1_TX_IRQH™dÀr


	)

10212 
	#USB_HP_IRQH™dÀr
 
USB_HP_CAN1_TX_IRQH™dÀr


	)

10213 
	#CAN1_RX0_IRQH™dÀr
 
USB_LP_CAN1_RX0_IRQH™dÀr


	)

10214 
	#USB_LP_IRQH™dÀr
 
USB_LP_CAN1_RX0_IRQH™dÀr


	)

10226 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f1xx.h

38 #i‚de‡
__STM32F1XX_H


39 
	#__STM32F1XX_H


	)

41 #ifde‡
__˝lu•lus


52 #i‡!
deföed
 (
STM32F1
)

53 
	#STM32F1


	)

60 #i‡!
deföed
 (
STM32F100xB
Ë&& !deföed (
STM32F100xE
Ë&& !deföed (
STM32F101x6
) && \

61 !
deföed
 (
STM32F101xB
Ë&& !deföed (
STM32F101xE
Ë&& !deföed (
STM32F101xG
Ë&& !deföed (
STM32F102x6
Ë&& !deföed (
STM32F102xB
Ë&& !deföed (
STM32F103x6
) && \

62 !
deföed
 (
STM32F103xB
Ë&& !deföed (
STM32F103xE
Ë&& !deföed (
STM32F103xG
Ë&& !deföed (
STM32F105xC
Ë&& !
	$deföed
 (
STM32F107xC
)

83 #i‡!
	`deföed
 (
USE_HAL_DRIVER
)

95 
	#__STM32F1_CMSIS_VERSION_MAIN
 (0x04Ë

	)

96 
	#__STM32F1_CMSIS_VERSION_SUB1
 (0x03Ë

	)

97 
	#__STM32F1_CMSIS_VERSION_SUB2
 (0x02Ë

	)

98 
	#__STM32F1_CMSIS_VERSION_RC
 (0x00Ë

	)

99 
	#__STM32F1_CMSIS_VERSION
 ((
__STM32F1_CMSIS_VERSION_MAIN
 << 24)\

100 |(
__STM32F1_CMSIS_VERSION_SUB1
 << 16)\

101 |(
__STM32F1_CMSIS_VERSION_SUB2
 << 8 )\

102 |(
__STM32F1_CMSIS_VERSION_RC
))

	)

112 #i‡
	`deföed
(
STM32F100xB
)

113 
	~"°m32f100xb.h
"

114 #ñi‡
	`deföed
(
STM32F100xE
)

115 
	~"°m32f100xe.h
"

116 #ñi‡
	`deföed
(
STM32F101x6
)

117 
	~"°m32f101x6.h
"

118 #ñi‡
	`deföed
(
STM32F101xB
)

119 
	~"°m32f101xb.h
"

120 #ñi‡
	`deföed
(
STM32F101xE
)

121 
	~"°m32f101xe.h
"

122 #ñi‡
	`deföed
(
STM32F101xG
)

123 
	~"°m32f101xg.h
"

124 #ñi‡
	`deföed
(
STM32F102x6
)

125 
	~"°m32f102x6.h
"

126 #ñi‡
	`deföed
(
STM32F102xB
)

127 
	~"°m32f102xb.h
"

128 #ñi‡
	`deföed
(
STM32F103x6
)

129 
	~"°m32f103x6.h
"

130 #ñi‡
	`deföed
(
STM32F103xB
)

131 
	~"°m32f103xb.h
"

132 #ñi‡
	`deföed
(
STM32F103xE
)

133 
	~"°m32f103xe.h
"

134 #ñi‡
	`deföed
(
STM32F103xG
)

135 
	~"°m32f103xg.h
"

136 #ñi‡
	`deföed
(
STM32F105xC
)

137 
	~"°m32f105xc.h
"

138 #ñi‡
	`deföed
(
STM32F107xC
)

139 
	~"°m32f107xc.h
"

153 
RESET
 = 0,

154 
SET
 = !
RESET


155 } 
	tFœgSètus
, 
	tITSètus
;

159 
DISABLE
 = 0,

160 
ENABLE
 = !
DISABLE


161 } 
	tFun˘i⁄ÆSèã
;

162 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

166 
SUCCESS
 = 0U,

167 
ERROR
 = !
SUCCESS


168 } 
	tEº‹Sètus
;

178 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

180 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

182 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

184 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

186 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

188 
	#READ_REG
(
REG
Ë((REG))

	)

190 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

192 
	#POSITION_VAL
(
VAL
Ë(
	`__CLZ
(
	`__RBIT
(VAL)))

	)

199 #i‡
	`deföed
 (
USE_HAL_DRIVER
)

200 
	~"°m32f1xx_hÆ.h
"

204 #ifde‡
__˝lu•lus


205 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Device\ST\STM32F1xx\Include\system_stm32f1xx.h

31 #i‚de‡
__SYSTEM_STM32F10X_H


32 
	#__SYSTEM_STM32F10X_H


	)

34 #ifde‡
__˝lu•lus


51 
uöt32_t
 
Sy°emC‹eClock
;

52 c⁄° 
uöt8_t
 
AHBPªscTabÀ
[16U];

53 c⁄° 
uöt8_t
 
APBPªscTabÀ
[8U];

79 
Sy°emInô
();

80 
Sy°emC‹eClockUpd©e
();

85 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_armcc.h

25 #i‚de‡
__CMSIS_ARMCC_H


26 
	#__CMSIS_ARMCC_H


	)

29 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 400677)

34 #i‡((
deföed
 (
__TARGET_ARCH_6_M
 ) && (__TARGET_ARCH_6_M == 1)) || \

35 (
deföed
 (
__TARGET_ARCH_6S_M
 ) && (
	g__TARGET_ARCH_6S_M
 == 1)) )

36 
	#__ARM_ARCH_6M__
 1

	)

39 #i‡(
deföed
 (
__TARGET_ARCH_7_M
 ) && (__TARGET_ARCH_7_M == 1))

40 
	#__ARM_ARCH_7M__
 1

	)

43 #i‡(
deföed
 (
__TARGET_ARCH_7E_M
) && (__TARGET_ARCH_7E_M == 1))

44 
	#__ARM_ARCH_7EM__
 1

	)

52 #i‚de‡ 
__ASM


53 
	#__ASM
 
__asm


	)

55 #i‚de‡ 
__INLINE


56 
	#__INLINE
 
__ölöe


	)

58 #i‚de‡ 
__STATIC_INLINE


59 
	#__STATIC_INLINE
 
__ölöe


	)

61 #i‚de‡ 
__STATIC_FORCEINLINE


62 
	#__STATIC_FORCEINLINE
 
__f‹˚ölöe


	)

64 #i‚de‡ 
__NO_RETURN


65 
	#__NO_RETURN
 
	`__de˛•ec
(
n‹ëu∫
)

	)

67 #i‚de‡ 
__USED


68 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

70 #i‚de‡ 
__WEAK


71 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

73 #i‚de‡ 
__PACKED


74 
	#__PACKED
 
	`__©åibuã__
((
∑cked
))

	)

76 #i‚de‡ 
__PACKED_STRUCT


77 
	#__PACKED_STRUCT
 
__∑cked
 

	)

79 #i‚de‡ 
__PACKED_UNION


80 
	#__PACKED_UNION
 
__∑cked
 

	)

82 #i‚de‡ 
__UNALIGNED_UINT32


83 
	#__UNALIGNED_UINT32
(
x
Ë(*((
__∑cked
 
uöt32_t
 *)(x)))

	)

85 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


86 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë((*((
__∑cked
 
uöt16_t
 *)◊ddr))Ë(vÆ))

	)

88 #i‚de‡ 
__UNALIGNED_UINT16_READ


89 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(*((c⁄° 
__∑cked
 
uöt16_t
 *)◊ddr)))

	)

91 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


92 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë((*((
__∑cked
 
uöt32_t
 *)◊ddr))Ë(vÆ))

	)

94 #i‚de‡ 
__UNALIGNED_UINT32_READ


95 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(*((c⁄° 
__∑cked
 
uöt32_t
 *)◊ddr)))

	)

97 #i‚de‡ 
__ALIGNED


98 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

100 #i‚de‡ 
__RESTRICT


101 
	#__RESTRICT
 
__ª°ri˘


	)

130 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

132 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

133 (
__ªgC⁄åﬁ
);

134 
	}
}

142 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

144 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

145 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

146 
	}
}

154 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

156 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

157 (
__ªgIPSR
);

158 
	}
}

166 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

168 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

169 (
__ªgAPSR
);

170 
	}
}

178 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

180 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

181 (
__ªgXPSR
);

182 
	}
}

190 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

192 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

193 (
__ªgPro˚ssSèckPoöãr
);

194 
	}
}

202 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

204 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

205 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

206 
	}
}

214 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

216 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

217 (
__ªgMaöSèckPoöãr
);

218 
	}
}

226 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

228 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

229 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

230 
	}
}

238 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

240 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

241 (
__ªgPriMask
);

242 
	}
}

250 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

252 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

253 
__ªgPriMask
 = (
¥iMask
);

254 
	}
}

257 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

258 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) )

265 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

273 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

281 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

283 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

284 (
__ªgBa£Pri
);

285 
	}
}

293 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

295 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

296 
__ªgBa£Pri
 = (
ba£Pri
 & 0xFFU);

297 
	}
}

306 
__STATIC_INLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
ba£Pri
)

308 
uöt32_t
 
__ªgBa£PriMax
 
	`__ASM
("basepri_max");

309 
__ªgBa£PriMax
 = (
ba£Pri
 & 0xFFU);

310 
	}
}

318 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

320 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

321 (
__ªgFau…Mask
);

322 
	}
}

330 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

332 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

333 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1U);

334 
	}
}

337 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

345 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

347 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

348 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

349 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

350 (
__ªgÂs¸
);

354 
	}
}

362 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

364 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

365 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

366 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

367 
__ªgÂs¸
 = (
Âs¸
);

369 ()
Âs¸
;

371 
	}
}

387 
	#__NOP
 
__n›


	)

394 
	#__WFI
 
__wfi


	)

402 
	#__WFE
 
__w„


	)

409 
	#__SEV
 
__£v


	)

418 
	#__ISB
() do {\

419 
	`__scheduÀ_b¨rõr
();\

420 
	`__isb
(0xF);\

421 
	`__scheduÀ_b¨rõr
();\

422 } 0U)

	)

429 
	#__DSB
() do {\

430 
	`__scheduÀ_b¨rõr
();\

431 
	`__dsb
(0xF);\

432 
	`__scheduÀ_b¨rõr
();\

433 } 0U)

	)

440 
	#__DMB
() do {\

441 
	`__scheduÀ_b¨rõr
();\

442 
	`__dmb
(0xF);\

443 
	`__scheduÀ_b¨rõr
();\

444 } 0U)

	)

453 
	#__REV
 
__ªv


	)

462 #i‚de‡
__NO_EMBEDDED_ASM


463 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

465 
ªv16
 
r0
,Ñ0

466 
bx
 
Ã


467 
	}
}

477 #i‚de‡
__NO_EMBEDDED_ASM


478 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt16_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

480 
ªvsh
 
r0
,Ñ0

481 
bx
 
Ã


482 
	}
}

493 
	#__ROR
 
__r‹


	)

503 
	#__BKPT
(
vÆue
Ë
	`__bªakpoöt
(vÆue)

	)

512 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

513 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) )

514 
	#__RBIT
 
__rbô


	)

516 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

518 
uöt32_t
 
ªsu…
;

519 
uöt32_t
 
s
 = (4U * 8U) - 1U;

521 
ªsu…
 = 
vÆue
;

522 
vÆue
 >>= 1U; value != 0U; value >>= 1U)

524 
ªsu…
 <<= 1U;

525 
ªsu…
 |
vÆue
 & 1U;

526 
s
--;

528 
ªsu…
 <<
s
;

529  
ªsu…
;

530 
	}
}

540 
	#__CLZ
 
__˛z


	)

543 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

544 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) )

552 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

553 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

555 
	#__LDREXB
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt8_t
 ) 
	`__ldªx
’å)Ë_Pøgma("p›")

	)

565 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

566 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

568 
	#__LDREXH
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt16_t
Ë
	`__ldªx
’å)Ë_Pøgma("p›")

	)

578 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

579 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

581 
	#__LDREXW
(
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë((
uöt32_t
 ) 
	`__ldªx
’å)Ë_Pøgma("p›")

	)

593 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

594 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

596 
	#__STREXB
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

608 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

609 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

611 
	#__STREXH
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

623 #i‡
deföed
(
__ARMCC_VERSION
) && (__ARMCC_VERSION < 5060020)

624 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

626 
	#__STREXW
(
vÆue
, 
±r
Ë
	`_Pøgma
("push"Ë_Pøgma("düg_suµªs†3731"Ë
	`__°ªx
(vÆue,ÖåË_Pøgma("p›")

	)

634 
	#__CLREX
 
__˛ªx


	)

644 
	#__SSAT
 
__sßt


	)

654 
	#__USAT
 
__ußt


	)

664 #i‚de‡
__NO_EMBEDDED_ASM


665 
__©åibuã__
((
£˘i⁄
(".ºx_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

667 
ºx
 
r0
,Ñ0

668 
bx
 
Ã


669 
	}
}

679 
	#__LDRBT
(
±r
Ë((
uöt8_t
 ) 
	`__ldπ
’å))

	)

688 
	#__LDRHT
(
±r
Ë((
uöt16_t
Ë
	`__ldπ
’å))

	)

697 
	#__LDRT
(
±r
Ë((
uöt32_t
 ) 
	`__ldπ
’å))

	)

706 
	#__STRBT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

715 
	#__STRHT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

724 
	#__STRT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

727 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

736 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

738 i‡((
ßt
 >= 1U) && (sat <= 32U))

740 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

741 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

742 i‡(
vÆ
 > 
max
)

744  
max
;

746 i‡(
vÆ
 < 
mö
)

748  
mö
;

751  
vÆ
;

752 
	}
}

761 
__©åibuã__
((
Æways_ölöe
)Ë
__STATIC_INLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

763 i‡(
ßt
 <= 31U)

765 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

766 i‡(
vÆ
 > (
öt32_t
)
max
)

768  
max
;

770 i‡(
vÆ
 < 0)

775  (
uöt32_t
)
vÆ
;

776 
	}
}

779 (
deföed
 (
__ARM_ARCH_7EM__
Ë&& (
	g__ARM_ARCH_7EM__
 == 1)) ) */

790 #i‡((
deföed
 (
__ARM_ARCH_7EM__
) && (__ARM_ARCH_7EM__ == 1)) )

792 
	#__SADD8
 
__ßdd8


	)

793 
	#__QADD8
 
__qadd8


	)

794 
	#__SHADD8
 
__shadd8


	)

795 
	#__UADD8
 
__uadd8


	)

796 
	#__UQADD8
 
__uqadd8


	)

797 
	#__UHADD8
 
__uhadd8


	)

798 
	#__SSUB8
 
__ssub8


	)

799 
	#__QSUB8
 
__qsub8


	)

800 
	#__SHSUB8
 
__shsub8


	)

801 
	#__USUB8
 
__usub8


	)

802 
	#__UQSUB8
 
__uqsub8


	)

803 
	#__UHSUB8
 
__uhsub8


	)

804 
	#__SADD16
 
__ßdd16


	)

805 
	#__QADD16
 
__qadd16


	)

806 
	#__SHADD16
 
__shadd16


	)

807 
	#__UADD16
 
__uadd16


	)

808 
	#__UQADD16
 
__uqadd16


	)

809 
	#__UHADD16
 
__uhadd16


	)

810 
	#__SSUB16
 
__ssub16


	)

811 
	#__QSUB16
 
__qsub16


	)

812 
	#__SHSUB16
 
__shsub16


	)

813 
	#__USUB16
 
__usub16


	)

814 
	#__UQSUB16
 
__uqsub16


	)

815 
	#__UHSUB16
 
__uhsub16


	)

816 
	#__SASX
 
__ßsx


	)

817 
	#__QASX
 
__qasx


	)

818 
	#__SHASX
 
__shasx


	)

819 
	#__UASX
 
__uasx


	)

820 
	#__UQASX
 
__uqasx


	)

821 
	#__UHASX
 
__uhasx


	)

822 
	#__SSAX
 
__sßx


	)

823 
	#__QSAX
 
__qßx


	)

824 
	#__SHSAX
 
__shßx


	)

825 
	#__USAX
 
__ußx


	)

826 
	#__UQSAX
 
__uqßx


	)

827 
	#__UHSAX
 
__uhßx


	)

828 
	#__USAD8
 
__ußd8


	)

829 
	#__USADA8
 
__ußda8


	)

830 
	#__SSAT16
 
__sßt16


	)

831 
	#__USAT16
 
__ußt16


	)

832 
	#__UXTB16
 
__uxtb16


	)

833 
	#__UXTAB16
 
__uxèb16


	)

834 
	#__SXTB16
 
__sxtb16


	)

835 
	#__SXTAB16
 
__sxèb16


	)

836 
	#__SMUAD
 
__smuad


	)

837 
	#__SMUADX
 
__smuadx


	)

838 
	#__SMLAD
 
__smœd


	)

839 
	#__SMLADX
 
__smœdx


	)

840 
	#__SMLALD
 
__smœld


	)

841 
	#__SMLALDX
 
__smœldx


	)

842 
	#__SMUSD
 
__smusd


	)

843 
	#__SMUSDX
 
__smusdx


	)

844 
	#__SMLSD
 
__smlsd


	)

845 
	#__SMLSDX
 
__smlsdx


	)

846 
	#__SMLSLD
 
__sml¶d


	)

847 
	#__SMLSLDX
 
__sml¶dx


	)

848 
	#__SEL
 
__£l


	)

849 
	#__QADD
 
__qadd


	)

850 
	#__QSUB
 
__qsub


	)

852 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

853 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

855 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

856 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

858 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
Ë–(
öt32_t
)((((
öt64_t
)(ARG1) * (ARG2)) + \

859 ((
öt64_t
)(
ARG3
Ë<< 32UËË>> 32U))

	)

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_armclang.h

27 #i‚de‡
__CMSIS_ARMCLANG_H


28 
	#__CMSIS_ARMCLANG_H


	)

30 #¥agm®
˛™g
 
sy°em_hódî


32 #i‚de‡
__ARM_COMPAT_H


33 
	~<¨m_com∑t.h
>

37 #i‚de‡ 
__ASM


38 
	#__ASM
 
__asm


	)

40 #i‚de‡ 
__INLINE


41 
	#__INLINE
 
__ölöe


	)

43 #i‚de‡ 
__STATIC_INLINE


44 
	#__STATIC_INLINE
 
__ölöe


	)

46 #i‚de‡ 
__STATIC_FORCEINLINE


47 
	#__STATIC_FORCEINLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
__ölöe


	)

49 #i‚de‡ 
__NO_RETURN


50 
	#__NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

52 #i‚de‡ 
__USED


53 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

55 #i‚de‡ 
__WEAK


56 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

58 #i‚de‡ 
__PACKED


59 
	#__PACKED
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

61 #i‚de‡ 
__PACKED_STRUCT


62 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

64 #i‚de‡ 
__PACKED_UNION


65 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

67 #i‚de‡ 
__UNALIGNED_UINT32


68 #¥agm®
˛™g
 
dügno°ic
 
push


69 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

71 
__©åibuã__
((
∑cked
)Ë
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

72 #¥agm®
˛™g
 
dügno°ic
 
p›


73 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

75 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


76 #¥agm®
˛™g
 
dügno°ic
 
push


77 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

79 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

80 #¥agm®
˛™g
 
dügno°ic
 
p›


81 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

83 #i‚de‡ 
__UNALIGNED_UINT16_READ


84 #¥agm®
˛™g
 
dügno°ic
 
push


85 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

87 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

88 #¥agm®
˛™g
 
dügno°ic
 
p›


89 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

91 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


92 #¥agm®
˛™g
 
dügno°ic
 
push


93 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

95 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

96 #¥agm®
˛™g
 
dügno°ic
 
p›


97 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

99 #i‚de‡ 
__UNALIGNED_UINT32_READ


100 #¥agm®
˛™g
 
dügno°ic
 
push


101 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpacked"

103 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

104 #¥agm®
˛™g
 
dügno°ic
 
p›


105 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

107 #i‚de‡ 
__ALIGNED


108 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

110 #i‚de‡ 
__RESTRICT


111 
	#__RESTRICT
 
__ª°ri˘


	)

142 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_CONTROL
()

144 
uöt32_t
 
ªsu…
;

146 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

147 (
ªsu…
);

148 
	}
}

151 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

157 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_CONTROL_NS
()

159 
uöt32_t
 
ªsu…
;

161 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ_ns" : "Ù" (
ªsu…
) );

162 (
ªsu…
);

163 
	}
}

172 
__STATIC_FORCEINLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

174 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

175 
	}
}

178 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

184 
__STATIC_FORCEINLINE
 
	$__TZ_£t_CONTROL_NS
(
uöt32_t
 
c⁄åﬁ
)

186 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ_ns, %0" : : "r" (
c⁄åﬁ
) : "memory");

187 
	}
}

196 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_IPSR
()

198 
uöt32_t
 
ªsu…
;

200 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

201 (
ªsu…
);

202 
	}
}

210 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_APSR
()

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

215 (
ªsu…
);

216 
	}
}

224 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_xPSR
()

226 
uöt32_t
 
ªsu…
;

228 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

229 (
ªsu…
);

230 
	}
}

238 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSP
()

240 
uöt32_t
 
ªsu…
;

242 
__ASM
 vﬁ©ûê("MRS %0,Ö•" : "Ù" (
ªsu…
) );

243 (
ªsu…
);

244 
	}
}

247 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

253 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSP_NS
()

255 
uöt32_t
 
ªsu…
;

257 
__ASM
 vﬁ©ûê("MRS %0,Ö•_ns" : "Ù" (
ªsu…
) );

258 (
ªsu…
);

259 
	}
}

268 
__STATIC_FORCEINLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

270 
__ASM
 vﬁ©ûê("MSRÖ•, %0" : : "r" (
t›OfProcSèck
) : );

271 
	}
}

274 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

280 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSP_NS
(
uöt32_t
 
t›OfProcSèck
)

282 
__ASM
 vﬁ©ûê("MSRÖ•_ns, %0" : : "r" (
t›OfProcSèck
) : );

283 
	}
}

292 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSP
()

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("MRS %0, m•" : "Ù" (
ªsu…
) );

297 (
ªsu…
);

298 
	}
}

301 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

307 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSP_NS
()

309 
uöt32_t
 
ªsu…
;

311 
__ASM
 vﬁ©ûê("MRS %0, m•_ns" : "Ù" (
ªsu…
) );

312 (
ªsu…
);

313 
	}
}

322 
__STATIC_FORCEINLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

324 
__ASM
 vﬁ©ûê("MSR m•, %0" : : "r" (
t›OfMaöSèck
) : );

325 
	}
}

328 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

334 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSP_NS
(
uöt32_t
 
t›OfMaöSèck
)

336 
__ASM
 vﬁ©ûê("MSR m•_ns, %0" : : "r" (
t›OfMaöSèck
) : );

337 
	}
}

341 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

347 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_SP_NS
()

349 
uöt32_t
 
ªsu…
;

351 
__ASM
 vﬁ©ûê("MRS %0, sp_ns" : "Ù" (
ªsu…
) );

352 (
ªsu…
);

353 
	}
}

361 
__STATIC_FORCEINLINE
 
	$__TZ_£t_SP_NS
(
uöt32_t
 
t›OfSèck
)

363 
__ASM
 vﬁ©ûê("MSR sp_ns, %0" : : "r" (
t›OfSèck
) : );

364 
	}
}

373 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

382 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

388 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PRIMASK_NS
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0,Örimask_ns" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__STATIC_FORCEINLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

405 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

406 
	}
}

409 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

415 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PRIMASK_NS
(
uöt32_t
 
¥iMask
)

417 
__ASM
 vﬁ©ûê("MSRÖrimask_ns, %0" : : "r" (
¥iMask
) : "memory");

418 
	}
}

422 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

423 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

424 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

430 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

438 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

446 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i" : "Ù" (
ªsu…
) );

451 (
ªsu…
);

452 
	}
}

455 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

461 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_BASEPRI_NS
()

463 
uöt32_t
 
ªsu…
;

465 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_ns" : "Ù" (
ªsu…
) );

466 (
ªsu…
);

467 
	}
}

476 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

478 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
ba£Pri
) : "memory");

479 
	}
}

482 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

488 
__STATIC_FORCEINLINE
 
	$__TZ_£t_BASEPRI_NS
(
uöt32_t
 
ba£Pri
)

490 
__ASM
 vﬁ©ûê("MSR ba£¥i_ns, %0" : : "r" (
ba£Pri
) : "memory");

491 
	}
}

501 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
ba£Pri
)

503 
__ASM
 vﬁ©ûê("MSR ba£¥i_max, %0" : : "r" (
ba£Pri
) : "memory");

504 
	}
}

512 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

514 
uöt32_t
 
ªsu…
;

516 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

517 (
ªsu…
);

518 
	}
}

521 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

527 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_FAULTMASK_NS
()

529 
uöt32_t
 
ªsu…
;

531 
__ASM
 vﬁ©ûê("MRS %0, fau…mask_ns" : "Ù" (
ªsu…
) );

532 (
ªsu…
);

533 
	}
}

542 
__STATIC_FORCEINLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

544 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

545 
	}
}

548 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

554 
__STATIC_FORCEINLINE
 
	$__TZ_£t_FAULTMASK_NS
(
uöt32_t
 
Áu…Mask
)

556 
__ASM
 vﬁ©ûê("MSR fau…mask_ns, %0" : : "r" (
Áu…Mask
) : "memory");

557 
	}
}

561 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

562 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

565 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

566 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

577 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSPLIM
()

579 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

580 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

584 
uöt32_t
 
ªsu…
;

585 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim" : "Ù" (
ªsu…
) );

586  
ªsu…
;

588 
	}
}

590 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3))

600 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSPLIM_NS
()

602 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

606 
uöt32_t
 
ªsu…
;

607 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim_ns" : "Ù" (
ªsu…
) );

608  
ªsu…
;

610 
	}
}

623 
__STATIC_FORCEINLINE
 
	$__£t_PSPLIM
(
uöt32_t
 
ProcSèckPåLimô
)

625 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

626 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

628 ()
ProcSèckPåLimô
;

630 
__ASM
 vﬁ©ûê("MSRÖ•lim, %0" : : "r" (
ProcSèckPåLimô
));

632 
	}
}

635 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

645 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSPLIM_NS
(
uöt32_t
 
ProcSèckPåLimô
)

647 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

649 ()
ProcSèckPåLimô
;

651 
__ASM
 vﬁ©ûê("MSRÖ•lim_ns, %0\n" : : "r" (
ProcSèckPåLimô
));

653 
	}
}

665 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSPLIM
()

667 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

668 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

672 
uöt32_t
 
ªsu…
;

673 
__ASM
 vﬁ©ûê("MRS %0, m•lim" : "Ù" (
ªsu…
) );

674  
ªsu…
;

676 
	}
}

679 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

688 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSPLIM_NS
()

690 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

694 
uöt32_t
 
ªsu…
;

695 
__ASM
 vﬁ©ûê("MRS %0, m•lim_ns" : "Ù" (
ªsu…
) );

696  
ªsu…
;

698 
	}
}

710 
__STATIC_FORCEINLINE
 
	$__£t_MSPLIM
(
uöt32_t
 
MaöSèckPåLimô
)

712 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

713 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

715 ()
MaöSèckPåLimô
;

717 
__ASM
 vﬁ©ûê("MSR m•lim, %0" : : "r" (
MaöSèckPåLimô
));

719 
	}
}

722 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

731 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSPLIM_NS
(
uöt32_t
 
MaöSèckPåLimô
)

733 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

735 ()
MaöSèckPåLimô
;

737 
__ASM
 vﬁ©ûê("MSR m•lim_ns, %0" : : "r" (
MaöSèckPåLimô
));

739 
	}
}

743 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

750 #i‡((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

751 (
deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

752 
	#__gë_FPSCR
 (
uöt32_t
)
__buûtö_¨m_gë_Âs¸


	)

754 
	#__gë_FPSCR
(Ë((
uöt32_t
)0U)

	)

762 #i‡((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

763 (
deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

764 
	#__£t_FPSCR
 
__buûtö_¨m_£t_Âs¸


	)

766 
	#__£t_FPSCR
(
x
Ë(()(x))

	)

782 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

783 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

784 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

786 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

787 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

794 
	#__NOP
 
__buûtö_¨m_n›


	)

800 
	#__WFI
 
__buûtö_¨m_wfi


	)

808 
	#__WFE
 
__buûtö_¨m_w„


	)

815 
	#__SEV
 
__buûtö_¨m_£v


	)

824 
	#__ISB
(Ë
	`__buûtö_¨m_isb
(0xF);

	)

831 
	#__DSB
(Ë
	`__buûtö_¨m_dsb
(0xF);

	)

839 
	#__DMB
(Ë
	`__buûtö_¨m_dmb
(0xF);

	)

848 
	#__REV
(
vÆue
Ë
	`__buûtö_bsw≠32
(vÆue)

	)

857 
	#__REV16
(
vÆue
Ë
	`__ROR
(
	`__REV
(vÆue), 16)

	)

866 
	#__REVSH
(
vÆue
Ë(
öt16_t
)
	`__buûtö_bsw≠16
(vÆue)

	)

876 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

878 
›2
 %= 32U;

879 i‡(
›2
 == 0U)

881  
›1
;

883  (
›1
 >> 
›2
) | (op1 << (32U - op2));

884 
	}
}

894 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

903 
	#__RBIT
 
__buûtö_¨m_rbô


	)

911 
	#__CLZ
 (
uöt8_t
)
__buûtö_˛z


	)

914 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

915 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

916 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

917 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

924 
	#__LDREXB
 (
uöt8_t
)
__buûtö_¨m_ldªx


	)

933 
	#__LDREXH
 (
uöt16_t
)
__buûtö_¨m_ldªx


	)

942 
	#__LDREXW
 (
uöt32_t
)
__buûtö_¨m_ldªx


	)

953 
	#__STREXB
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

964 
	#__STREXH
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

975 
	#__STREXW
 (
uöt32_t
)
__buûtö_¨m_°ªx


	)

982 
	#__CLREX
 
__buûtö_¨m_˛ªx


	)

985 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

986 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

987 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) ) */

990 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

991 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

992 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

1001 
	#__SSAT
 
__buûtö_¨m_sßt


	)

1011 
	#__USAT
 
__buûtö_¨m_ußt


	)

1021 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

1023 
uöt32_t
 
ªsu…
;

1025 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

1026 (
ªsu…
);

1027 
	}
}

1036 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
±r
)

1038 
uöt32_t
 
ªsu…
;

1040 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1041  ((
uöt8_t
Ë
ªsu…
);

1042 
	}
}

1051 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
±r
)

1053 
uöt32_t
 
ªsu…
;

1055 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1056  ((
uöt16_t
Ë
ªsu…
);

1057 
	}
}

1066 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
±r
)

1068 
uöt32_t
 
ªsu…
;

1070 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1071 (
ªsu…
);

1072 
	}
}

1081 
__STATIC_FORCEINLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1083 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1084 
	}
}

1093 
__STATIC_FORCEINLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1095 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1096 
	}
}

1105 
__STATIC_FORCEINLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1107 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
±r
Ë: "r" (
vÆue
) );

1108 
	}
}

1111 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1112 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1121 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1123 i‡((
ßt
 >= 1U) && (sat <= 32U))

1125 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

1126 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

1127 i‡(
vÆ
 > 
max
)

1129  
max
;

1131 i‡(
vÆ
 < 
mö
)

1133  
mö
;

1136  
vÆ
;

1137 
	}
}

1146 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1148 i‡(
ßt
 <= 31U)

1150 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

1151 i‡(
vÆ
 > (
öt32_t
)
max
)

1153  
max
;

1155 i‡(
vÆ
 < 0)

1160  (
uöt32_t
)
vÆ
;

1161 
	}
}

1164 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1165 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1168 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1169 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

1176 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDAB
(vﬁ©ûê
uöt8_t
 *
±r
)

1178 
uöt32_t
 
ªsu…
;

1180 
__ASM
 vﬁ©ûê("ldab %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1181  ((
uöt8_t
Ë
ªsu…
);

1182 
	}
}

1191 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDAH
(vﬁ©ûê
uöt16_t
 *
±r
)

1193 
uöt32_t
 
ªsu…
;

1195 
__ASM
 vﬁ©ûê("ldah %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1196  ((
uöt16_t
Ë
ªsu…
);

1197 
	}
}

1206 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDA
(vﬁ©ûê
uöt32_t
 *
±r
)

1208 
uöt32_t
 
ªsu…
;

1210 
__ASM
 vﬁ©ûê("ld®%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1211 (
ªsu…
);

1212 
	}
}

1221 
__STATIC_FORCEINLINE
 
	$__STLB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1223 
__ASM
 vﬁ©ûê("°lb %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1224 
	}
}

1233 
__STATIC_FORCEINLINE
 
	$__STLH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1235 
__ASM
 vﬁ©ûê("°lh %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1236 
	}
}

1245 
__STATIC_FORCEINLINE
 
	$__STL
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1247 
__ASM
 vﬁ©ûê("°»%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1248 
	}
}

1257 
	#__LDAEXB
 (
uöt8_t
)
__buûtö_¨m_ld´x


	)

1266 
	#__LDAEXH
 (
uöt16_t
)
__buûtö_¨m_ld´x


	)

1275 
	#__LDAEX
 (
uöt32_t
)
__buûtö_¨m_ld´x


	)

1286 
	#__STLEXB
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1297 
	#__STLEXH
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1308 
	#__STLEX
 (
uöt32_t
)
__buûtö_¨m_°Àx


	)

1311 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

1322 #i‡(
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1))

1324 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1326 
uöt32_t
 
ªsu…
;

1328 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1329 (
ªsu…
);

1330 
	}
}

1332 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1334 
uöt32_t
 
ªsu…
;

1336 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1337 (
ªsu…
);

1338 
	}
}

1340 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1342 
uöt32_t
 
ªsu…
;

1344 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1345 (
ªsu…
);

1346 
	}
}

1348 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1350 
uöt32_t
 
ªsu…
;

1352 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1353 (
ªsu…
);

1354 
	}
}

1356 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1358 
uöt32_t
 
ªsu…
;

1360 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1361 (
ªsu…
);

1362 
	}
}

1364 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1366 
uöt32_t
 
ªsu…
;

1368 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1369 (
ªsu…
);

1370 
	}
}

1373 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1375 
uöt32_t
 
ªsu…
;

1377 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1378 (
ªsu…
);

1379 
	}
}

1381 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1383 
uöt32_t
 
ªsu…
;

1385 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1386 (
ªsu…
);

1387 
	}
}

1389 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1391 
uöt32_t
 
ªsu…
;

1393 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1394 (
ªsu…
);

1395 
	}
}

1397 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1399 
uöt32_t
 
ªsu…
;

1401 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1402 (
ªsu…
);

1403 
	}
}

1405 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1407 
uöt32_t
 
ªsu…
;

1409 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1410 (
ªsu…
);

1411 
	}
}

1413 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1415 
uöt32_t
 
ªsu…
;

1417 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1418 (
ªsu…
);

1419 
	}
}

1422 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1424 
uöt32_t
 
ªsu…
;

1426 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1427 (
ªsu…
);

1428 
	}
}

1430 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1432 
uöt32_t
 
ªsu…
;

1434 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1435 (
ªsu…
);

1436 
	}
}

1438 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1440 
uöt32_t
 
ªsu…
;

1442 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1443 (
ªsu…
);

1444 
	}
}

1446 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1448 
uöt32_t
 
ªsu…
;

1450 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1451 (
ªsu…
);

1452 
	}
}

1454 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1456 
uöt32_t
 
ªsu…
;

1458 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1459 (
ªsu…
);

1460 
	}
}

1462 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1464 
uöt32_t
 
ªsu…
;

1466 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1467 (
ªsu…
);

1468 
	}
}

1470 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1472 
uöt32_t
 
ªsu…
;

1474 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1475 (
ªsu…
);

1476 
	}
}

1478 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1480 
uöt32_t
 
ªsu…
;

1482 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1483 (
ªsu…
);

1484 
	}
}

1486 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1488 
uöt32_t
 
ªsu…
;

1490 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1491 (
ªsu…
);

1492 
	}
}

1494 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1496 
uöt32_t
 
ªsu…
;

1498 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1499 (
ªsu…
);

1500 
	}
}

1502 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1504 
uöt32_t
 
ªsu…
;

1506 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1507 (
ªsu…
);

1508 
	}
}

1510 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1512 
uöt32_t
 
ªsu…
;

1514 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1515 (
ªsu…
);

1516 
	}
}

1518 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1520 
uöt32_t
 
ªsu…
;

1522 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1523 (
ªsu…
);

1524 
	}
}

1526 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1528 
uöt32_t
 
ªsu…
;

1530 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1531 (
ªsu…
);

1532 
	}
}

1534 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1536 
uöt32_t
 
ªsu…
;

1538 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1539 (
ªsu…
);

1540 
	}
}

1542 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1544 
uöt32_t
 
ªsu…
;

1546 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1547 (
ªsu…
);

1548 
	}
}

1550 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1552 
uöt32_t
 
ªsu…
;

1554 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1555 (
ªsu…
);

1556 
	}
}

1558 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1560 
uöt32_t
 
ªsu…
;

1562 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1563 (
ªsu…
);

1564 
	}
}

1566 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1568 
uöt32_t
 
ªsu…
;

1570 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1571 (
ªsu…
);

1572 
	}
}

1574 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1576 
uöt32_t
 
ªsu…
;

1578 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1579 (
ªsu…
);

1580 
	}
}

1582 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1584 
uöt32_t
 
ªsu…
;

1586 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1587 (
ªsu…
);

1588 
	}
}

1590 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1592 
uöt32_t
 
ªsu…
;

1594 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1595 (
ªsu…
);

1596 
	}
}

1598 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1600 
uöt32_t
 
ªsu…
;

1602 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1603 (
ªsu…
);

1604 
	}
}

1606 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1608 
uöt32_t
 
ªsu…
;

1610 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1611 (
ªsu…
);

1612 
	}
}

1614 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1616 
uöt32_t
 
ªsu…
;

1618 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1619 (
ªsu…
);

1620 
	}
}

1622 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1624 
uöt32_t
 
ªsu…
;

1626 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1627 (
ªsu…
);

1628 
	}
}

1630 
	#__SSAT16
(
ARG1
,
ARG2
) \

1632 
öt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1633 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1634 
__RES
; \

1635 })

	)

1637 
	#__USAT16
(
ARG1
,
ARG2
) \

1639 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1640 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1641 
__RES
; \

1642 })

	)

1644 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

1646 
uöt32_t
 
ªsu…
;

1648 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1649 (
ªsu…
);

1650 
	}
}

1652 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1654 
uöt32_t
 
ªsu…
;

1656 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1657 (
ªsu…
);

1658 
	}
}

1660 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

1662 
uöt32_t
 
ªsu…
;

1664 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1665 (
ªsu…
);

1666 
	}
}

1668 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1670 
uöt32_t
 
ªsu…
;

1672 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1673 (
ªsu…
);

1674 
	}
}

1676 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1678 
uöt32_t
 
ªsu…
;

1680 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1681 (
ªsu…
);

1682 
	}
}

1684 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1686 
uöt32_t
 
ªsu…
;

1688 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1689 (
ªsu…
);

1690 
	}
}

1692 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1694 
uöt32_t
 
ªsu…
;

1696 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1697 (
ªsu…
);

1698 
	}
}

1700 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1702 
uöt32_t
 
ªsu…
;

1704 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1705 (
ªsu…
);

1706 
	}
}

1708 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1710 
	uŒªg_u
{

1711 
uöt32_t
 
w32
[2];

1712 
uöt64_t
 
w64
;

1713 } 
Œr
;

1714 
Œr
.
w64
 = 
acc
;

1716 #i‚de‡
__ARMEB__


1717 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1719 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1722 (
Œr
.
w64
);

1723 
	}
}

1725 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1727 
	uŒªg_u
{

1728 
uöt32_t
 
w32
[2];

1729 
uöt64_t
 
w64
;

1730 } 
Œr
;

1731 
Œr
.
w64
 = 
acc
;

1733 #i‚de‡
__ARMEB__


1734 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1736 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1739 (
Œr
.
w64
);

1740 
	}
}

1742 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1744 
uöt32_t
 
ªsu…
;

1746 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1747 (
ªsu…
);

1748 
	}
}

1750 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1752 
uöt32_t
 
ªsu…
;

1754 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1755 (
ªsu…
);

1756 
	}
}

1758 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1760 
uöt32_t
 
ªsu…
;

1762 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1763 (
ªsu…
);

1764 
	}
}

1766 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1768 
uöt32_t
 
ªsu…
;

1770 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1771 (
ªsu…
);

1772 
	}
}

1774 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1776 
	uŒªg_u
{

1777 
uöt32_t
 
w32
[2];

1778 
uöt64_t
 
w64
;

1779 } 
Œr
;

1780 
Œr
.
w64
 = 
acc
;

1782 #i‚de‡
__ARMEB__


1783 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1785 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1788 (
Œr
.
w64
);

1789 
	}
}

1791 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1793 
	uŒªg_u
{

1794 
uöt32_t
 
w32
[2];

1795 
uöt64_t
 
w64
;

1796 } 
Œr
;

1797 
Œr
.
w64
 = 
acc
;

1799 #i‚de‡
__ARMEB__


1800 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1802 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1805 (
Œr
.
w64
);

1806 
	}
}

1808 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1810 
uöt32_t
 
ªsu…
;

1812 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1813 (
ªsu…
);

1814 
	}
}

1816 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QADD
–
öt32_t
 
›1
, i¡32_à
›2
)

1818 
öt32_t
 
ªsu…
;

1820 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1821 (
ªsu…
);

1822 
	}
}

1824 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QSUB
–
öt32_t
 
›1
, i¡32_à
›2
)

1826 
öt32_t
 
ªsu…
;

1828 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1829 (
ªsu…
);

1830 
	}
}

1833 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

1835 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

1836 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1837 
__RES
; \

1838 })

	)

1840 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

1842 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

1843 i‡(
ARG3
 == 0) \

1844 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

1846 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

1847 
__RES
; \

1848 })

	)

1851 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

1852 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

1854 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

1855 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

1857 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

1859 
öt32_t
 
ªsu…
;

1861 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1862 (
ªsu…
);

1863 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_compiler.h

25 #i‚de‡
__CMSIS_COMPILER_H


26 
	#__CMSIS_COMPILER_H


	)

28 
	~<°döt.h
>

33 #i‡ 
deföed
 ( 
__CC_ARM
 )

34 
	~"cmsis_¨mcc.h
"

40 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

41 
	~"cmsis_¨m˛™g.h
"

47 #ñi‡
deföed
 ( 
__GNUC__
 )

48 
	~"cmsis_gcc.h
"

54 #ñi‡
deföed
 ( 
__ICCARM__
 )

55 
	~<cmsis_icˇrm.h
>

61 #ñi‡
deföed
 ( 
__TI_ARM__
 )

62 
	~<cmsis_ccs.h
>

64 #i‚de‡ 
__ASM


65 
	#__ASM
 
__asm


	)

67 #i‚de‡ 
__INLINE


68 
	#__INLINE
 
ölöe


	)

70 #i‚de‡ 
__STATIC_INLINE


71 
	#__STATIC_INLINE
 
ölöe


	)

73 #i‚de‡ 
__STATIC_FORCEINLINE


74 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

76 #i‚de‡ 
__NO_RETURN


77 
	#__NO_RETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

79 #i‚de‡ 
__USED


80 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

82 #i‚de‡ 
__WEAK


83 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

85 #i‚de‡ 
__PACKED


86 
	#__PACKED
 
	`__©åibuã__
((
∑cked
))

	)

88 #i‚de‡ 
__PACKED_STRUCT


89 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

91 #i‚de‡ 
__PACKED_UNION


92 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
))

	)

94 #i‚de‡ 
__UNALIGNED_UINT32


95 
__©åibuã__
((
∑cked
)Ë
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

96 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

98 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


99 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

100 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

102 #i‚de‡ 
__UNALIGNED_UINT16_READ


103 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

104 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

106 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


107 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

108 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

110 #i‚de‡ 
__UNALIGNED_UINT32_READ


111 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

112 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

114 #i‚de‡ 
__ALIGNED


115 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

117 #i‚de‡ 
__RESTRICT


118 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__RESTRICT
. __RESTRICT 
is
 
ign‹ed
.

119 
	#__RESTRICT


	)

126 #ñi‡
deföed
 ( 
__TASKING__
 )

133 #i‚de‡ 
__ASM


134 
	#__ASM
 
__asm


	)

136 #i‚de‡ 
__INLINE


137 
	#__INLINE
 
ölöe


	)

139 #i‚de‡ 
__STATIC_INLINE


140 
	#__STATIC_INLINE
 
ölöe


	)

142 #i‚de‡ 
__STATIC_FORCEINLINE


143 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

145 #i‚de‡ 
__NO_RETURN


146 
	#__NO_RETURN
 
	`__©åibuã__
((
n‹ëu∫
))

	)

148 #i‚de‡ 
__USED


149 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

151 #i‚de‡ 
__WEAK


152 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

154 #i‚de‡ 
__PACKED


155 
	#__PACKED
 
__∑cked__


	)

157 #i‚de‡ 
__PACKED_STRUCT


158 
	#__PACKED_STRUCT
 
__∑cked__


	)

160 #i‚de‡ 
__PACKED_UNION


161 
	#__PACKED_UNION
 
__∑cked__


	)

163 #i‚de‡ 
__UNALIGNED_UINT32


164 
__∑cked__
 
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

165 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

167 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


168 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

169 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

171 #i‚de‡ 
__UNALIGNED_UINT16_READ


172 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

173 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

175 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


176 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

177 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

179 #i‚de‡ 
__UNALIGNED_UINT32_READ


180 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

181 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

183 #i‚de‡ 
__ALIGNED


184 
	#__ALIGNED
(
x
Ë
	`__Æign
(x)

	)

186 #i‚de‡ 
__RESTRICT


187 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__RESTRICT
. __RESTRICT 
is
 
ign‹ed
.

188 
	#__RESTRICT


	)

195 #ñi‡
deföed
 ( 
__CSMC__
 )

196 
	~<cmsis_csm.h
>

198 #i‚de‡ 
__ASM


199 
	#__ASM
 
_asm


	)

201 #i‚de‡ 
__INLINE


202 
	#__INLINE
 
ölöe


	)

204 #i‚de‡ 
__STATIC_INLINE


205 
	#__STATIC_INLINE
 
ölöe


	)

207 #i‚de‡ 
__STATIC_FORCEINLINE


208 
	#__STATIC_FORCEINLINE
 
__STATIC_INLINE


	)

210 #i‚de‡ 
__NO_RETURN


212 
	#__NO_RETURN


	)

214 #i‚de‡ 
__USED


215 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__USED
. __USED 
is
 
ign‹ed
.

216 
	#__USED


	)

218 #i‚de‡ 
__WEAK


219 
	#__WEAK
 
__wók


	)

221 #i‚de‡ 
__PACKED


222 
	#__PACKED
 @
∑cked


	)

224 #i‚de‡ 
__PACKED_STRUCT


225 
	#__PACKED_STRUCT
 @
∑cked
 

	)

227 #i‚de‡ 
__PACKED_UNION


228 
	#__PACKED_UNION
 @
∑cked
 

	)

230 #i‚de‡ 
__UNALIGNED_UINT32


231 @
∑cked
 
	sT_UINT32
 { 
uöt32_t
 
	mv
; };

232 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

234 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


235 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

236 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

238 #i‚de‡ 
__UNALIGNED_UINT16_READ


239 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

240 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

242 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


243 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

244 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

246 #i‚de‡ 
__UNALIGNED_UINT32_READ


247 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

248 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

250 #i‚de‡ 
__ALIGNED


251 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__ALIGNED
. __ALIGNED 
is
 
ign‹ed
.

252 
	#__ALIGNED
(
x
)

	)

254 #i‚de‡ 
__RESTRICT


255 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__RESTRICT
. __RESTRICT 
is
 
ign‹ed
.

256 
	#__RESTRICT


	)

261 #îr‹ 
Unknown
 
compûî
.

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_gcc.h

25 #i‚de‡
__CMSIS_GCC_H


26 
	#__CMSIS_GCC_H


	)

29 #¥agm®
GCC
 
dügno°ic
 
push


30 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wsign-conversion"

31 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wconversion"

32 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wunused-parameter"

35 #i‚de‡
__has_buûtö


36 
	#__has_buûtö
(
x
Ë(0)

	)

40 #i‚de‡ 
__ASM


41 
	#__ASM
 
__asm


	)

43 #i‚de‡ 
__INLINE


44 
	#__INLINE
 
ölöe


	)

46 #i‚de‡ 
__STATIC_INLINE


47 
	#__STATIC_INLINE
 
ölöe


	)

49 #i‚de‡ 
__STATIC_FORCEINLINE


50 
	#__STATIC_FORCEINLINE
 
	`__©åibuã__
((
Æways_ölöe
)Ë
ölöe


	)

52 #i‚de‡ 
__NO_RETURN


53 
	#__NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

55 #i‚de‡ 
__USED


56 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

58 #i‚de‡ 
__WEAK


59 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

61 #i‚de‡ 
__PACKED


62 
	#__PACKED
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

64 #i‚de‡ 
__PACKED_STRUCT


65 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

67 #i‚de‡ 
__PACKED_UNION


68 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

70 #i‚de‡ 
__UNALIGNED_UINT32


71 #¥agm®
GCC
 
dügno°ic
 
push


72 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

73 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

74 
__©åibuã__
((
∑cked
)Ë
	gT_UINT32
 { 
uöt32_t
 
	gv
; };

75 #¥agm®
GCC
 
dügno°ic
 
p›


76 
	#__UNALIGNED_UINT32
(
x
Ë(((
T_UINT32
 *)(x))->
v
)

	)

78 #i‚de‡ 
__UNALIGNED_UINT16_WRITE


79 #¥agm®
GCC
 
dügno°ic
 
push


80 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

81 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

82 
__PACKED_STRUCT
 
	gT_UINT16_WRITE
 { 
uöt16_t
 
	gv
; };

83 #¥agm®
GCC
 
dügno°ic
 
p›


84 
	#__UNALIGNED_UINT16_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT16_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

86 #i‚de‡ 
__UNALIGNED_UINT16_READ


87 #¥agm®
GCC
 
dügno°ic
 
push


88 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

89 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

90 
__PACKED_STRUCT
 
	gT_UINT16_READ
 { 
uöt16_t
 
	gv
; };

91 #¥agm®
GCC
 
dügno°ic
 
p›


92 
	#__UNALIGNED_UINT16_READ
(
addr
Ë(((c⁄° 
T_UINT16_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

94 #i‚de‡ 
__UNALIGNED_UINT32_WRITE


95 #¥agm®
GCC
 
dügno°ic
 
push


96 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

97 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

98 
__PACKED_STRUCT
 
	gT_UINT32_WRITE
 { 
uöt32_t
 
	gv
; };

99 #¥agm®
GCC
 
dügno°ic
 
p›


100 
	#__UNALIGNED_UINT32_WRITE
(
addr
, 
vÆ
Ë()((((
T_UINT32_WRITE
 *)(*)◊ddr))->
v
Ë(vÆ))

	)

102 #i‚de‡ 
__UNALIGNED_UINT32_READ


103 #¥agm®
GCC
 
dügno°ic
 
push


104 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wpacked"

105 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wattributes"

106 
__PACKED_STRUCT
 
	gT_UINT32_READ
 { 
uöt32_t
 
	gv
; };

107 #¥agm®
GCC
 
dügno°ic
 
p›


108 
	#__UNALIGNED_UINT32_READ
(
addr
Ë(((c⁄° 
T_UINT32_READ
 *)(c⁄° *)◊ddr))->
v
)

	)

110 #i‚de‡ 
__ALIGNED


111 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

113 #i‚de‡ 
__RESTRICT


114 
	#__RESTRICT
 
__ª°ri˘


	)

129 
__STATIC_FORCEINLINE
 
	$__íabÀ_úq
()

131 
__ASM
 volatile ("cpsie i" : : : "memory");

132 
	}
}

140 
__STATIC_FORCEINLINE
 
	$__dißbÀ_úq
()

142 
__ASM
 volatile ("cpsid i" : : : "memory");

143 
	}
}

151 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_CONTROL
()

153 
uöt32_t
 
ªsu…
;

155 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

156 (
ªsu…
);

157 
	}
}

160 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

166 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_CONTROL_NS
()

168 
uöt32_t
 
ªsu…
;

170 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ_ns" : "Ù" (
ªsu…
) );

171 (
ªsu…
);

172 
	}
}

181 
__STATIC_FORCEINLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

183 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

184 
	}
}

187 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

193 
__STATIC_FORCEINLINE
 
	$__TZ_£t_CONTROL_NS
(
uöt32_t
 
c⁄åﬁ
)

195 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ_ns, %0" : : "r" (
c⁄åﬁ
) : "memory");

196 
	}
}

205 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_IPSR
()

207 
uöt32_t
 
ªsu…
;

209 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

210 (
ªsu…
);

211 
	}
}

219 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_APSR
()

221 
uöt32_t
 
ªsu…
;

223 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

224 (
ªsu…
);

225 
	}
}

233 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_xPSR
()

235 
uöt32_t
 
ªsu…
;

237 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

238 (
ªsu…
);

239 
	}
}

247 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSP
()

249 
uöt32_t
 
ªsu…
;

251 
__ASM
 vﬁ©ûê("MRS %0,Ö•" : "Ù" (
ªsu…
) );

252 (
ªsu…
);

253 
	}
}

256 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

262 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSP_NS
()

264 
uöt32_t
 
ªsu…
;

266 
__ASM
 vﬁ©ûê("MRS %0,Ö•_ns" : "Ù" (
ªsu…
) );

267 (
ªsu…
);

268 
	}
}

277 
__STATIC_FORCEINLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

279 
__ASM
 vﬁ©ûê("MSRÖ•, %0" : : "r" (
t›OfProcSèck
) : );

280 
	}
}

283 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

289 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSP_NS
(
uöt32_t
 
t›OfProcSèck
)

291 
__ASM
 vﬁ©ûê("MSRÖ•_ns, %0" : : "r" (
t›OfProcSèck
) : );

292 
	}
}

301 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSP
()

303 
uöt32_t
 
ªsu…
;

305 
__ASM
 vﬁ©ûê("MRS %0, m•" : "Ù" (
ªsu…
) );

306 (
ªsu…
);

307 
	}
}

310 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

316 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSP_NS
()

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("MRS %0, m•_ns" : "Ù" (
ªsu…
) );

321 (
ªsu…
);

322 
	}
}

331 
__STATIC_FORCEINLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

333 
__ASM
 vﬁ©ûê("MSR m•, %0" : : "r" (
t›OfMaöSèck
) : );

334 
	}
}

337 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

343 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSP_NS
(
uöt32_t
 
t›OfMaöSèck
)

345 
__ASM
 vﬁ©ûê("MSR m•_ns, %0" : : "r" (
t›OfMaöSèck
) : );

346 
	}
}

350 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

356 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_SP_NS
()

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("MRS %0, sp_ns" : "Ù" (
ªsu…
) );

361 (
ªsu…
);

362 
	}
}

370 
__STATIC_FORCEINLINE
 
	$__TZ_£t_SP_NS
(
uöt32_t
 
t›OfSèck
)

372 
__ASM
 vﬁ©ûê("MSR sp_ns, %0" : : "r" (
t›OfSèck
) : );

373 
	}
}

382 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

384 
uöt32_t
 
ªsu…
;

386 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) :: "memory");

387 (
ªsu…
);

388 
	}
}

391 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

397 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PRIMASK_NS
()

399 
uöt32_t
 
ªsu…
;

401 
__ASM
 vﬁ©ûê("MRS %0,Örimask_ns" : "Ù" (
ªsu…
) :: "memory");

402 (
ªsu…
);

403 
	}
}

412 
__STATIC_FORCEINLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

414 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

415 
	}
}

418 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

424 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PRIMASK_NS
(
uöt32_t
 
¥iMask
)

426 
__ASM
 vﬁ©ûê("MSRÖrimask_ns, %0" : : "r" (
¥iMask
) : "memory");

427 
	}
}

431 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

432 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

433 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

439 
__STATIC_FORCEINLINE
 
	$__íabÀ_Áu…_úq
()

441 
__ASM
 volatile ("cpsie f" : : : "memory");

442 
	}
}

450 
__STATIC_FORCEINLINE
 
	$__dißbÀ_Áu…_úq
()

452 
__ASM
 volatile ("cpsid f" : : : "memory");

453 
	}
}

461 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

463 
uöt32_t
 
ªsu…
;

465 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i" : "Ù" (
ªsu…
) );

466 (
ªsu…
);

467 
	}
}

470 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

476 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_BASEPRI_NS
()

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_ns" : "Ù" (
ªsu…
) );

481 (
ªsu…
);

482 
	}
}

491 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

493 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
ba£Pri
) : "memory");

494 
	}
}

497 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

503 
__STATIC_FORCEINLINE
 
	$__TZ_£t_BASEPRI_NS
(
uöt32_t
 
ba£Pri
)

505 
__ASM
 vﬁ©ûê("MSR ba£¥i_ns, %0" : : "r" (
ba£Pri
) : "memory");

506 
	}
}

516 
__STATIC_FORCEINLINE
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
ba£Pri
)

518 
__ASM
 vﬁ©ûê("MSR ba£¥i_max, %0" : : "r" (
ba£Pri
) : "memory");

519 
	}
}

527 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

529 
uöt32_t
 
ªsu…
;

531 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

532 (
ªsu…
);

533 
	}
}

536 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

542 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_FAULTMASK_NS
()

544 
uöt32_t
 
ªsu…
;

546 
__ASM
 vﬁ©ûê("MRS %0, fau…mask_ns" : "Ù" (
ªsu…
) );

547 (
ªsu…
);

548 
	}
}

557 
__STATIC_FORCEINLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

559 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

560 
	}
}

563 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

569 
__STATIC_FORCEINLINE
 
	$__TZ_£t_FAULTMASK_NS
(
uöt32_t
 
Áu…Mask
)

571 
__ASM
 vﬁ©ûê("MSR fau…mask_ns, %0" : : "r" (
Áu…Mask
) : "memory");

572 
	}
}

576 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

577 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

580 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

581 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

592 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_PSPLIM
()

594 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

595 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

599 
uöt32_t
 
ªsu…
;

600 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim" : "Ù" (
ªsu…
) );

601  
ªsu…
;

603 
	}
}

605 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3))

614 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_PSPLIM_NS
()

616 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

620 
uöt32_t
 
ªsu…
;

621 
__ASM
 vﬁ©ûê("MRS %0,Ö•lim_ns" : "Ù" (
ªsu…
) );

622  
ªsu…
;

624 
	}
}

637 
__STATIC_FORCEINLINE
 
	$__£t_PSPLIM
(
uöt32_t
 
ProcSèckPåLimô
)

639 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

640 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

642 ()
ProcSèckPåLimô
;

644 
__ASM
 vﬁ©ûê("MSRÖ•lim, %0" : : "r" (
ProcSèckPåLimô
));

646 
	}
}

649 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

658 
__STATIC_FORCEINLINE
 
	$__TZ_£t_PSPLIM_NS
(
uöt32_t
 
ProcSèckPåLimô
)

660 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

662 ()
ProcSèckPåLimô
;

664 
__ASM
 vﬁ©ûê("MSRÖ•lim_ns, %0\n" : : "r" (
ProcSèckPåLimô
));

666 
	}
}

679 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_MSPLIM
()

681 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

682 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

686 
uöt32_t
 
ªsu…
;

687 
__ASM
 vﬁ©ûê("MRS %0, m•lim" : "Ù" (
ªsu…
) );

688  
ªsu…
;

690 
	}
}

693 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

702 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__TZ_gë_MSPLIM_NS
()

704 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

708 
uöt32_t
 
ªsu…
;

709 
__ASM
 vﬁ©ûê("MRS %0, m•lim_ns" : "Ù" (
ªsu…
) );

710  
ªsu…
;

712 
	}
}

725 
__STATIC_FORCEINLINE
 
	$__£t_MSPLIM
(
uöt32_t
 
MaöSèckPåLimô
)

727 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

728 (!
	`deföed
 (
__ARM_FEATURE_CMSE
) || (__ARM_FEATURE_CMSE < 3)))

730 ()
MaöSèckPåLimô
;

732 
__ASM
 vﬁ©ûê("MSR m•lim, %0" : : "r" (
MaöSèckPåLimô
));

734 
	}
}

737 #i‡(
deföed
 (
__ARM_FEATURE_CMSE
 ) && (__ARM_FEATURE_CMSE == 3))

746 
__STATIC_FORCEINLINE
 
	$__TZ_£t_MSPLIM_NS
(
uöt32_t
 
MaöSèckPåLimô
)

748 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)))

750 ()
MaöSèckPåLimô
;

752 
__ASM
 vﬁ©ûê("MSR m•lim_ns, %0" : : "r" (
MaöSèckPåLimô
));

754 
	}
}

758 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

766 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__gë_FPSCR
()

768 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

769 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

770 #i‡
	`__has_buûtö
(
__buûtö_¨m_gë_Âs¸
)

774  
	`__buûtö_¨m_gë_Âs¸
();

776 
uöt32_t
 
ªsu…
;

778 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

779 (
ªsu…
);

784 
	}
}

792 
__STATIC_FORCEINLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

794 #i‡((
	`deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

795 (
	`deföed
 (
__FPU_USED
 ) && (__FPU_USED == 1U)) )

796 #i‡
	`__has_buûtö
(
__buûtö_¨m_£t_Âs¸
)

800 
	`__buûtö_¨m_£t_Âs¸
(
Âs¸
);

802 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc", "memory");

805 ()
Âs¸
;

807 
	}
}

822 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

823 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

824 
	#__CMSIS_GCC_RW_REG
(
r
Ë"+l" (r)

	)

825 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

827 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

828 
	#__CMSIS_GCC_RW_REG
(
r
Ë"+r" (r)

	)

829 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

836 
	#__NOP
(Ë
__ASM
 vﬁ©ûê("n›")

	)

842 
	#__WFI
(Ë
__ASM
 vﬁ©ûê("wfi")

	)

850 
	#__WFE
(Ë
__ASM
 vﬁ©ûê("w„")

	)

857 
	#__SEV
(Ë
__ASM
 vﬁ©ûê("£v")

	)

866 
__STATIC_FORCEINLINE
 
	$__ISB
()

868 
__ASM
 volatile ("isb 0xF":::"memory");

869 
	}
}

877 
__STATIC_FORCEINLINE
 
	$__DSB
()

879 
__ASM
 volatile ("dsb 0xF":::"memory");

880 
	}
}

888 
__STATIC_FORCEINLINE
 
	$__DMB
()

890 
__ASM
 volatile ("dmb 0xF":::"memory");

891 
	}
}

900 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

902 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

903  
	`__buûtö_bsw≠32
(
vÆue
);

905 
uöt32_t
 
ªsu…
;

907 
__ASM
 vﬁ©ûê("ªv %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

908  
ªsu…
;

910 
	}
}

919 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

921 
uöt32_t
 
ªsu…
;

923 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

924  
ªsu…
;

925 
	}
}

934 
__STATIC_FORCEINLINE
 
öt16_t
 
	$__REVSH
(
öt16_t
 
vÆue
)

936 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

937  (
öt16_t
)
	`__buûtö_bsw≠16
(
vÆue
);

939 
öt16_t
 
ªsu…
;

941 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

942  
ªsu…
;

944 
	}
}

954 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

956 
›2
 %= 32U;

957 i‡(
›2
 == 0U)

959  
›1
;

961  (
›1
 >> 
›2
) | (op1 << (32U - op2));

962 
	}
}

972 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

981 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

983 
uöt32_t
 
ªsu…
;

985 #i‡((
	`deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

986 (
	`deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

987 (
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

988 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

990 
uöt32_t
 
s
 = (4U * 8U) - 1U;

992 
ªsu…
 = 
vÆue
;

993 
vÆue
 >>= 1U; value != 0U; value >>= 1U)

995 
ªsu…
 <<= 1U;

996 
ªsu…
 |
vÆue
 & 1U;

997 
s
--;

999 
ªsu…
 <<
s
;

1001  
ªsu…
;

1002 
	}
}

1011 
	#__CLZ
 (
uöt8_t
)
__buûtö_˛z


	)

1014 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

1015 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1016 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1017 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

1024 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

1026 
uöt32_t
 
ªsu…
;

1028 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1029 
__ASM
 vﬁ©ûê("ldªxb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

1034 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

1036  ((
uöt8_t
Ë
ªsu…
);

1037 
	}
}

1046 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

1048 
uöt32_t
 
ªsu…
;

1050 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1051 
__ASM
 vﬁ©ûê("ldªxh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

1056 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

1058  ((
uöt16_t
Ë
ªsu…
);

1059 
	}
}

1068 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

1070 
uöt32_t
 
ªsu…
;

1072 
__ASM
 vﬁ©ûê("ldªx %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

1073 (
ªsu…
);

1074 
	}
}

1085 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

1087 
uöt32_t
 
ªsu…
;

1089 
__ASM
 vﬁ©ûê("°ªxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

1090 (
ªsu…
);

1091 
	}
}

1102 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

1104 
uöt32_t
 
ªsu…
;

1106 
__ASM
 vﬁ©ûê("°ªxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

1107 (
ªsu…
);

1108 
	}
}

1119 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

1121 
uöt32_t
 
ªsu…
;

1123 
__ASM
 vﬁ©ûê("°ªx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

1124 (
ªsu…
);

1125 
	}
}

1132 
__STATIC_FORCEINLINE
 
	$__CLREX
()

1134 
__ASM
 volatile ("clrex" ::: "memory");

1135 
	}
}

1138 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1139 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1140 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) ) */

1143 #i‡((
deföed
 (
__ARM_ARCH_7M__
 ) && (__ARM_ARCH_7M__ == 1)) || \

1144 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (__ARM_ARCH_7EM__ == 1)) || \

1145 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) )

1153 
	#__SSAT
(
ARG1
,
ARG2
) \

1154 
__exãnsi⁄__
 \

1156 
öt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1157 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1158 
__RES
; \

1159 })

	)

1169 
	#__USAT
(
ARG1
,
ARG2
) \

1170 
__exãnsi⁄__
 \

1172 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1173 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1174 
__RES
; \

1175 })

	)

1185 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

1187 
uöt32_t
 
ªsu…
;

1189 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

1190 (
ªsu…
);

1191 
	}
}

1200 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
±r
)

1202 
uöt32_t
 
ªsu…
;

1204 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1205 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1210 
__ASM
 vﬁ©ûê("ldrbà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
±r
) : "memory" );

1212  ((
uöt8_t
Ë
ªsu…
);

1213 
	}
}

1222 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
±r
)

1224 
uöt32_t
 
ªsu…
;

1226 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

1227 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1232 
__ASM
 vﬁ©ûê("ldrhà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
±r
) : "memory" );

1234  ((
uöt16_t
Ë
ªsu…
);

1235 
	}
}

1244 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
±r
)

1246 
uöt32_t
 
ªsu…
;

1248 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1249 (
ªsu…
);

1250 
	}
}

1259 
__STATIC_FORCEINLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1261 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1262 
	}
}

1271 
__STATIC_FORCEINLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1273 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1274 
	}
}

1283 
__STATIC_FORCEINLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1285 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
±r
Ë: "r" (
vÆue
) );

1286 
	}
}

1289 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1290 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1299 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1301 i‡((
ßt
 >= 1U) && (sat <= 32U))

1303 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

1304 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

1305 i‡(
vÆ
 > 
max
)

1307  
max
;

1309 i‡(
vÆ
 < 
mö
)

1311  
mö
;

1314  
vÆ
;

1315 
	}
}

1324 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

1326 i‡(
ßt
 <= 31U)

1328 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

1329 i‡(
vÆ
 > (
öt32_t
)
max
)

1331  
max
;

1333 i‡(
vÆ
 < 0)

1338  (
uöt32_t
)
vÆ
;

1339 
	}
}

1342 (
deföed
 (
__ARM_ARCH_7EM__
 ) && (
	g__ARM_ARCH_7EM__
 == 1)) || \

1343 (
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) ) */

1346 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

1347 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (__ARM_ARCH_8M_BASE__ == 1)) )

1354 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDAB
(vﬁ©ûê
uöt8_t
 *
±r
)

1356 
uöt32_t
 
ªsu…
;

1358 
__ASM
 vﬁ©ûê("ldab %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1359  ((
uöt8_t
Ë
ªsu…
);

1360 
	}
}

1369 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDAH
(vﬁ©ûê
uöt16_t
 *
±r
)

1371 
uöt32_t
 
ªsu…
;

1373 
__ASM
 vﬁ©ûê("ldah %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1374  ((
uöt16_t
Ë
ªsu…
);

1375 
	}
}

1384 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDA
(vﬁ©ûê
uöt32_t
 *
±r
)

1386 
uöt32_t
 
ªsu…
;

1388 
__ASM
 vﬁ©ûê("ld®%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1389 (
ªsu…
);

1390 
	}
}

1399 
__STATIC_FORCEINLINE
 
	$__STLB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1401 
__ASM
 vﬁ©ûê("°lb %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1402 
	}
}

1411 
__STATIC_FORCEINLINE
 
	$__STLH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1413 
__ASM
 vﬁ©ûê("°lh %1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1414 
	}
}

1423 
__STATIC_FORCEINLINE
 
	$__STL
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1425 
__ASM
 vﬁ©ûê("°»%1, %0" : "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1426 
	}
}

1435 
__STATIC_FORCEINLINE
 
uöt8_t
 
	$__LDAEXB
(vﬁ©ûê
uöt8_t
 *
±r
)

1437 
uöt32_t
 
ªsu…
;

1439 
__ASM
 vﬁ©ûê("ld´xb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1440  ((
uöt8_t
Ë
ªsu…
);

1441 
	}
}

1450 
__STATIC_FORCEINLINE
 
uöt16_t
 
	$__LDAEXH
(vﬁ©ûê
uöt16_t
 *
±r
)

1452 
uöt32_t
 
ªsu…
;

1454 
__ASM
 vﬁ©ûê("ld´xh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1455  ((
uöt16_t
Ë
ªsu…
);

1456 
	}
}

1465 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__LDAEX
(vﬁ©ûê
uöt32_t
 *
±r
)

1467 
uöt32_t
 
ªsu…
;

1469 
__ASM
 vﬁ©ûê("ld´x %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
±r
) );

1470 (
ªsu…
);

1471 
	}
}

1482 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STLEXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

1484 
uöt32_t
 
ªsu…
;

1486 
__ASM
 vﬁ©ûê("°Àxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1487 (
ªsu…
);

1488 
	}
}

1499 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STLEXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

1501 
uöt32_t
 
ªsu…
;

1503 
__ASM
 vﬁ©ûê("°Àxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1504 (
ªsu…
);

1505 
	}
}

1516 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__STLEX
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

1518 
uöt32_t
 
ªsu…
;

1520 
__ASM
 vﬁ©ûê("°Àx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
±r
Ë: "r" ((
uöt32_t
)
vÆue
) );

1521 (
ªsu…
);

1522 
	}
}

1525 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) ) */

1536 #i‡(
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1))

1538 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1540 
uöt32_t
 
ªsu…
;

1542 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1543 (
ªsu…
);

1544 
	}
}

1546 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1548 
uöt32_t
 
ªsu…
;

1550 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1551 (
ªsu…
);

1552 
	}
}

1554 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1556 
uöt32_t
 
ªsu…
;

1558 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1559 (
ªsu…
);

1560 
	}
}

1562 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1564 
uöt32_t
 
ªsu…
;

1566 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1567 (
ªsu…
);

1568 
	}
}

1570 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1572 
uöt32_t
 
ªsu…
;

1574 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1575 (
ªsu…
);

1576 
	}
}

1578 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1580 
uöt32_t
 
ªsu…
;

1582 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1583 (
ªsu…
);

1584 
	}
}

1587 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1589 
uöt32_t
 
ªsu…
;

1591 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1592 (
ªsu…
);

1593 
	}
}

1595 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1597 
uöt32_t
 
ªsu…
;

1599 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1600 (
ªsu…
);

1601 
	}
}

1603 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1605 
uöt32_t
 
ªsu…
;

1607 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1608 (
ªsu…
);

1609 
	}
}

1611 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1613 
uöt32_t
 
ªsu…
;

1615 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1616 (
ªsu…
);

1617 
	}
}

1619 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1621 
uöt32_t
 
ªsu…
;

1623 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1624 (
ªsu…
);

1625 
	}
}

1627 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1629 
uöt32_t
 
ªsu…
;

1631 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1632 (
ªsu…
);

1633 
	}
}

1636 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1638 
uöt32_t
 
ªsu…
;

1640 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1641 (
ªsu…
);

1642 
	}
}

1644 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1646 
uöt32_t
 
ªsu…
;

1648 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1649 (
ªsu…
);

1650 
	}
}

1652 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1654 
uöt32_t
 
ªsu…
;

1656 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1657 (
ªsu…
);

1658 
	}
}

1660 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1662 
uöt32_t
 
ªsu…
;

1664 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1665 (
ªsu…
);

1666 
	}
}

1668 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1670 
uöt32_t
 
ªsu…
;

1672 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1673 (
ªsu…
);

1674 
	}
}

1676 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1678 
uöt32_t
 
ªsu…
;

1680 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1681 (
ªsu…
);

1682 
	}
}

1684 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1686 
uöt32_t
 
ªsu…
;

1688 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1689 (
ªsu…
);

1690 
	}
}

1692 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1694 
uöt32_t
 
ªsu…
;

1696 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1697 (
ªsu…
);

1698 
	}
}

1700 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1702 
uöt32_t
 
ªsu…
;

1704 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1705 (
ªsu…
);

1706 
	}
}

1708 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1710 
uöt32_t
 
ªsu…
;

1712 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1713 (
ªsu…
);

1714 
	}
}

1716 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1718 
uöt32_t
 
ªsu…
;

1720 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1721 (
ªsu…
);

1722 
	}
}

1724 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1726 
uöt32_t
 
ªsu…
;

1728 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1729 (
ªsu…
);

1730 
	}
}

1732 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1734 
uöt32_t
 
ªsu…
;

1736 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1737 (
ªsu…
);

1738 
	}
}

1740 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1742 
uöt32_t
 
ªsu…
;

1744 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1745 (
ªsu…
);

1746 
	}
}

1748 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1750 
uöt32_t
 
ªsu…
;

1752 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1753 (
ªsu…
);

1754 
	}
}

1756 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1758 
uöt32_t
 
ªsu…
;

1760 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1761 (
ªsu…
);

1762 
	}
}

1764 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1766 
uöt32_t
 
ªsu…
;

1768 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1769 (
ªsu…
);

1770 
	}
}

1772 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1774 
uöt32_t
 
ªsu…
;

1776 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1777 (
ªsu…
);

1778 
	}
}

1780 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1782 
uöt32_t
 
ªsu…
;

1784 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1785 (
ªsu…
);

1786 
	}
}

1788 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1790 
uöt32_t
 
ªsu…
;

1792 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1793 (
ªsu…
);

1794 
	}
}

1796 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1798 
uöt32_t
 
ªsu…
;

1800 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1801 (
ªsu…
);

1802 
	}
}

1804 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1806 
uöt32_t
 
ªsu…
;

1808 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1809 (
ªsu…
);

1810 
	}
}

1812 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1814 
uöt32_t
 
ªsu…
;

1816 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1817 (
ªsu…
);

1818 
	}
}

1820 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

1822 
uöt32_t
 
ªsu…
;

1824 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1825 (
ªsu…
);

1826 
	}
}

1828 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

1830 
uöt32_t
 
ªsu…
;

1832 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1833 (
ªsu…
);

1834 
	}
}

1836 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1838 
uöt32_t
 
ªsu…
;

1840 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1841 (
ªsu…
);

1842 
	}
}

1844 
	#__SSAT16
(
ARG1
,
ARG2
) \

1846 
öt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1847 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1848 
__RES
; \

1849 })

	)

1851 
	#__USAT16
(
ARG1
,
ARG2
) \

1853 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

1854 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

1855 
__RES
; \

1856 })

	)

1858 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

1860 
uöt32_t
 
ªsu…
;

1862 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1863 (
ªsu…
);

1864 
	}
}

1866 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1868 
uöt32_t
 
ªsu…
;

1870 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1871 (
ªsu…
);

1872 
	}
}

1874 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

1876 
uöt32_t
 
ªsu…
;

1878 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

1879 (
ªsu…
);

1880 
	}
}

1882 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

1884 
uöt32_t
 
ªsu…
;

1886 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1887 (
ªsu…
);

1888 
	}
}

1890 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1892 
uöt32_t
 
ªsu…
;

1894 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1895 (
ªsu…
);

1896 
	}
}

1898 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1900 
uöt32_t
 
ªsu…
;

1902 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1903 (
ªsu…
);

1904 
	}
}

1906 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1908 
uöt32_t
 
ªsu…
;

1910 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1911 (
ªsu…
);

1912 
	}
}

1914 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1916 
uöt32_t
 
ªsu…
;

1918 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1919 (
ªsu…
);

1920 
	}
}

1922 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1924 
	uŒªg_u
{

1925 
uöt32_t
 
w32
[2];

1926 
uöt64_t
 
w64
;

1927 } 
Œr
;

1928 
Œr
.
w64
 = 
acc
;

1930 #i‚de‡
__ARMEB__


1931 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1933 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1936 (
Œr
.
w64
);

1937 
	}
}

1939 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1941 
	uŒªg_u
{

1942 
uöt32_t
 
w32
[2];

1943 
uöt64_t
 
w64
;

1944 } 
Œr
;

1945 
Œr
.
w64
 = 
acc
;

1947 #i‚de‡
__ARMEB__


1948 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1950 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

1953 (
Œr
.
w64
);

1954 
	}
}

1956 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1958 
uöt32_t
 
ªsu…
;

1960 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1961 (
ªsu…
);

1962 
	}
}

1964 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

1966 
uöt32_t
 
ªsu…
;

1968 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

1969 (
ªsu…
);

1970 
	}
}

1972 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1974 
uöt32_t
 
ªsu…
;

1976 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1977 (
ªsu…
);

1978 
	}
}

1980 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

1982 
uöt32_t
 
ªsu…
;

1984 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

1985 (
ªsu…
);

1986 
	}
}

1988 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

1990 
	uŒªg_u
{

1991 
uöt32_t
 
w32
[2];

1992 
uöt64_t
 
w64
;

1993 } 
Œr
;

1994 
Œr
.
w64
 = 
acc
;

1996 #i‚de‡
__ARMEB__


1997 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

1999 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

2002 (
Œr
.
w64
);

2003 
	}
}

2005 
__STATIC_FORCEINLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

2007 
	uŒªg_u
{

2008 
uöt32_t
 
w32
[2];

2009 
uöt64_t
 
w64
;

2010 } 
Œr
;

2011 
Œr
.
w64
 = 
acc
;

2013 #i‚de‡
__ARMEB__


2014 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

2016 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

2019 (
Œr
.
w64
);

2020 
	}
}

2022 
__STATIC_FORCEINLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

2024 
uöt32_t
 
ªsu…
;

2026 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

2027 (
ªsu…
);

2028 
	}
}

2030 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QADD
–
öt32_t
 
›1
, i¡32_à
›2
)

2032 
öt32_t
 
ªsu…
;

2034 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

2035 (
ªsu…
);

2036 
	}
}

2038 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__QSUB
–
öt32_t
 
›1
, i¡32_à
›2
)

2040 
öt32_t
 
ªsu…
;

2042 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

2043 (
ªsu…
);

2044 
	}
}

2047 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

2049 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

2050 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

2051 
__RES
; \

2052 })

	)

2054 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

2056 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

2057 i‡(
ARG3
 == 0) \

2058 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

2060 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

2061 
__RES
; \

2062 })

	)

2065 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

2066 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

2068 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

2069 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

2071 
__STATIC_FORCEINLINE
 
öt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

2073 
öt32_t
 
ªsu…
;

2075 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

2076 (
ªsu…
);

2077 
	}
}

2083 #¥agm®
GCC
 
dügno°ic
 
p›


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_iccarm.h

26 #i‚de‡
__CMSIS_ICCARM_H__


27 
	#__CMSIS_ICCARM_H__


	)

29 #i‚de‡
__ICCARM__


30 #îr‹ 
This
 
fûe
 
should
 
⁄ly
 
be
 
compûed
 
by
 
ICCARM


33 #¥agm®
sy°em_ö˛ude


35 
	#__IAR_FT
 
	`_Pøgma
("ölöe=f‹˚d"Ë
__öåösic


	)

37 #i‡(
__VER__
 >= 8000000)

38 
	#__ICCARM_V8
 1

	)

40 
	#__ICCARM_V8
 0

	)

43 #i‚de‡
__ALIGNED


44 #i‡
__ICCARM_V8


45 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

46 #ñi‡(
__VER__
 >= 7080000)

48 
	#__ALIGNED
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

50 #w¨nög 
No
 
compûî
 
•ecific
 
sﬁuti⁄
 
__ALIGNED
.__ALIGNED 
is
 
ign‹ed
.

51 
	#__ALIGNED
(
x
)

	)

58 #i‡
__ARM_ARCH_6M__
 || 
__ARM_ARCH_7M__
 || 
__ARM_ARCH_7EM__
 || 
__ARM_ARCH_8M_BASE__
 || 
__ARM_ARCH_8M_MAIN__


61 #i‡
deföed
(
__ARM8M_MAINLINE__
Ë|| deföed(
__ARM8EM_MAINLINE__
)

62 
	#__ARM_ARCH_8M_MAIN__
 1

	)

63 #ñi‡
deföed
(
__ARM8M_BASELINE__
)

64 
	#__ARM_ARCH_8M_BASE__
 1

	)

65 #ñi‡
deföed
(
__ARM_ARCH_PROFILE
) && __ARM_ARCH_PROFILE == 'M'

66 #i‡
__ARM_ARCH
 == 6

67 
	#__ARM_ARCH_6M__
 1

	)

68 #ñi‡
__ARM_ARCH
 == 7

69 #i‡
__ARM_FEATURE_DSP


70 
	#__ARM_ARCH_7EM__
 1

	)

72 
	#__ARM_ARCH_7M__
 1

	)

79 #i‡!
deföed
(
__ARM_ARCH_6M__
Ë&& !deföed(
__ARM_ARCH_7M__
Ë&& !deföed(
__ARM_ARCH_7EM__
) && \

80 !
deföed
(
__ARM_ARCH_8M_BASE__
Ë&& !
	$deföed
(
__ARM_ARCH_8M_MAIN__
)

81 #i‡
	`deföed
(
__ARM6M__
Ë&& (
__CORE__
 == __ARM6M__)

82 
	#__ARM_ARCH_6M__
 1

	)

83 #ñi‡
	`deföed
(
__ARM7M__
Ë&& (
__CORE__
 == __ARM7M__)

84 
	#__ARM_ARCH_7M__
 1

	)

85 #ñi‡
	`deföed
(
__ARM7EM__
Ë&& (
__CORE__
 == __ARM7EM__)

86 
	#__ARM_ARCH_7EM__
 1

	)

87 #ñi‡
	`deföed
(
__ARM8M_BASELINE__
Ë&& (
__CORE
 == __ARM8M_BASELINE__)

88 
	#__ARM_ARCH_8M_BASE__
 1

	)

89 #ñi‡
	`deföed
(
__ARM8M_MAINLINE__
Ë&& (
__CORE
 == __ARM8M_MAINLINE__)

90 
	#__ARM_ARCH_8M_MAIN__
 1

	)

91 #ñi‡
	`deföed
(
__ARM8EM_MAINLINE__
Ë&& (
__CORE
 == __ARM8EM_MAINLINE__)

92 
	#__ARM_ARCH_8M_MAIN__
 1

	)

100 #i‡
	`deföed
(
__ARM_ARCH_6M__
) && __ARM_ARCH_6M__==1

101 
	#__IAR_M0_FAMILY
 1

	)

102 #ñi‡
	`deföed
(
__ARM_ARCH_8M_BASE__
) && __ARM_ARCH_8M_BASE__==1

103 
	#__IAR_M0_FAMILY
 1

	)

105 
	#__IAR_M0_FAMILY
 0

	)

109 #i‚de‡
__ASM


110 
	#__ASM
 
__asm


	)

113 #i‚de‡
__INLINE


114 
	#__INLINE
 
ölöe


	)

117 #i‚de‡ 
__NO_RETURN


118 #i‡
__ICCARM_V8


119 
	#__NO_RETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

121 
	#__NO_RETURN
 
	`_Pøgma
("obje˘_©åibuã=__n‹ëu∫")

	)

125 #i‚de‡ 
__PACKED


126 #i‡
__ICCARM_V8


127 
	#__PACKED
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

130 
	#__PACKED
 
__∑cked


	)

134 #i‚de‡ 
__PACKED_STRUCT


135 #i‡
__ICCARM_V8


136 
	#__PACKED_STRUCT
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

139 
	#__PACKED_STRUCT
 
__∑cked
 

	)

143 #i‚de‡ 
__PACKED_UNION


144 #i‡
__ICCARM_V8


145 
	#__PACKED_UNION
 
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(1)))

	)

148 
	#__PACKED_UNION
 
__∑cked
 

	)

152 #i‚de‡ 
__RESTRICT


153 
	#__RESTRICT
 
__ª°ri˘


	)

156 #i‚de‡ 
__STATIC_INLINE


157 
	#__STATIC_INLINE
 
ölöe


	)

160 #i‚de‡ 
__FORCEINLINE


161 
	#__FORCEINLINE
 
	`_Pøgma
("ölöe=f‹˚d")

	)

164 #i‚de‡ 
__STATIC_FORCEINLINE


165 
	#__STATIC_FORCEINLINE
 
__FORCEINLINE
 
__STATIC_INLINE


	)

168 #i‚de‡
__UNALIGNED_UINT16_READ


169 #¥agm®
œnguage
=
ßve


170 #¥agm®
œnguage
=
exãnded


171 
__IAR_FT
 
uöt16_t
 
	$__ür_uöt16_ªad
(c⁄° *
±r
)

173  *(
__∑cked
 
uöt16_t
*)(
±r
);

174 
	}
}

175 #¥agm®
œnguage
=
ª°‹e


176 
	#__UNALIGNED_UINT16_READ
(
PTR
Ë
	`__ür_uöt16_ªad
(PTR)

	)

180 #i‚de‡
__UNALIGNED_UINT16_WRITE


181 #¥agm®
œnguage
=
ßve


182 #¥agm®
œnguage
=
exãnded


183 
__IAR_FT
 
	$__ür_uöt16_wrôe
(c⁄° *
±r
, 
uöt16_t
 
vÆ
)

185 *(
__∑cked
 
uöt16_t
*)(
±r
Ë
vÆ
;;

186 
	}
}

187 #¥agm®
œnguage
=
ª°‹e


188 
	#__UNALIGNED_UINT16_WRITE
(
PTR
,
VAL
Ë
	`__ür_uöt16_wrôe
(PTR,VAL)

	)

191 #i‚de‡
__UNALIGNED_UINT32_READ


192 #¥agm®
œnguage
=
ßve


193 #¥agm®
œnguage
=
exãnded


194 
__IAR_FT
 
uöt32_t
 
	$__ür_uöt32_ªad
(c⁄° *
±r
)

196  *(
__∑cked
 
uöt32_t
*)(
±r
);

197 
	}
}

198 #¥agm®
œnguage
=
ª°‹e


199 
	#__UNALIGNED_UINT32_READ
(
PTR
Ë
	`__ür_uöt32_ªad
(PTR)

	)

202 #i‚de‡
__UNALIGNED_UINT32_WRITE


203 #¥agm®
œnguage
=
ßve


204 #¥agm®
œnguage
=
exãnded


205 
__IAR_FT
 
	$__ür_uöt32_wrôe
(c⁄° *
±r
, 
uöt32_t
 
vÆ
)

207 *(
__∑cked
 
uöt32_t
*)(
±r
Ë
vÆ
;;

208 
	}
}

209 #¥agm®
œnguage
=
ª°‹e


210 
	#__UNALIGNED_UINT32_WRITE
(
PTR
,
VAL
Ë
	`__ür_uöt32_wrôe
(PTR,VAL)

	)

213 #i‚de‡
__UNALIGNED_UINT32


214 #¥agm®
œnguage
=
ßve


215 #¥agm®
œnguage
=
exãnded


216 
__∑cked
 
	s__ür_u32
 { 
uöt32_t
 
	mv
; };

217 #¥agm®
œnguage
=
ª°‹e


218 
	#__UNALIGNED_UINT32
(
PTR
Ë(((
__ür_u32
 *)(PTR))->
v
)

	)

221 #i‚de‡ 
__USED


222 #i‡
__ICCARM_V8


223 
	#__USED
 
	`__©åibuã__
((
u£d
))

	)

225 
	#__USED
 
	`_Pøgma
("__roŸ")

	)

229 #i‚de‡ 
__WEAK


230 #i‡
__ICCARM_V8


231 
	#__WEAK
 
	`__©åibuã__
((
wók
))

	)

233 
	#__WEAK
 
	`_Pøgma
("__wók")

	)

238 #i‚de‡
__ICCARM_INTRINSICS_VERSION__


239 
	#__ICCARM_INTRINSICS_VERSION__
 0

	)

242 #i‡
__ICCARM_INTRINSICS_VERSION__
 == 2

244 #i‡
deföed
(
__CLZ
)

245 #unde‡
__CLZ


247 #i‡
deföed
(
__REVSH
)

248 #unde‡
__REVSH


250 #i‡
deföed
(
__RBIT
)

251 #unde‡
__RBIT


253 #i‡
deföed
(
__SSAT
)

254 #unde‡
__SSAT


256 #i‡
deföed
(
__USAT
)

257 #unde‡
__USAT


260 
	~"icˇrm_buûtö.h
"

262 
	#__dißbÀ_Áu…_úq
 
__ür_buûtö_dißbÀ_fiq


	)

263 
	#__dißbÀ_úq
 
__ür_buûtö_dißbÀ_öãºu±


	)

264 
	#__íabÀ_Áu…_úq
 
__ür_buûtö_íabÀ_fiq


	)

265 
	#__íabÀ_úq
 
__ür_buûtö_íabÀ_öãºu±


	)

266 
	#__¨m_r§
 
__ür_buûtö_r§


	)

267 
	#__¨m_w§
 
__ür_buûtö_w§


	)

270 
	#__gë_APSR
(Ë(
	`__¨m_r§
("APSR"))

	)

271 
	#__gë_BASEPRI
(Ë(
	`__¨m_r§
("BASEPRI"))

	)

272 
	#__gë_CONTROL
(Ë(
	`__¨m_r§
("CONTROL"))

	)

273 
	#__gë_FAULTMASK
(Ë(
	`__¨m_r§
("FAULTMASK"))

	)

275 #i‡((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

276 (
deföed
 (
__FPU_USED
 ) && (
	g__FPU_USED
 == 1U)) )

277 
	#__gë_FPSCR
(Ë(
	`__¨m_r§
("FPSCR"))

	)

278 
	#__£t_FPSCR
(
VALUE
Ë(
	`__¨m_w§
("FPSCR", (VALUE)))

	)

280 
	#__gë_FPSCR
(Ë–0 )

	)

281 
	#__£t_FPSCR
(
VALUE
Ë(()VALUE)

	)

284 
	#__gë_IPSR
(Ë(
	`__¨m_r§
("IPSR"))

	)

285 
	#__gë_MSP
(Ë(
	`__¨m_r§
("MSP"))

	)

286 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

287 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

289 
	#__gë_MSPLIM
(Ë(0U)

	)

291 
	#__gë_MSPLIM
(Ë(
	`__¨m_r§
("MSPLIM"))

	)

293 
	#__gë_PRIMASK
(Ë(
	`__¨m_r§
("PRIMASK"))

	)

294 
	#__gë_PSP
(Ë(
	`__¨m_r§
("PSP"))

	)

296 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

297 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

299 
	#__gë_PSPLIM
(Ë(0U)

	)

301 
	#__gë_PSPLIM
(Ë(
	`__¨m_r§
("PSPLIM"))

	)

304 
	#__gë_xPSR
(Ë(
	`__¨m_r§
("xPSR"))

	)

306 
	#__£t_BASEPRI
(
VALUE
Ë(
	`__¨m_w§
("BASEPRI", (VALUE)))

	)

307 
	#__£t_BASEPRI_MAX
(
VALUE
Ë(
	`__¨m_w§
("BASEPRI_MAX", (VALUE)))

	)

308 
	#__£t_CONTROL
(
VALUE
Ë(
	`__¨m_w§
("CONTROL", (VALUE)))

	)

309 
	#__£t_FAULTMASK
(
VALUE
Ë(
	`__¨m_w§
("FAULTMASK", (VALUE)))

	)

310 
	#__£t_MSP
(
VALUE
Ë(
	`__¨m_w§
("MSP", (VALUE)))

	)

312 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

313 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

315 
	#__£t_MSPLIM
(
VALUE
Ë(()(VALUE))

	)

317 
	#__£t_MSPLIM
(
VALUE
Ë(
	`__¨m_w§
("MSPLIM", (VALUE)))

	)

319 
	#__£t_PRIMASK
(
VALUE
Ë(
	`__¨m_w§
("PRIMASK", (VALUE)))

	)

320 
	#__£t_PSP
(
VALUE
Ë(
	`__¨m_w§
("PSP", (VALUE)))

	)

321 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

322 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

324 
	#__£t_PSPLIM
(
VALUE
Ë(()(VALUE))

	)

326 
	#__£t_PSPLIM
(
VALUE
Ë(
	`__¨m_w§
("PSPLIM", (VALUE)))

	)

329 
	#__TZ_gë_CONTROL_NS
(Ë(
	`__¨m_r§
("CONTROL_NS"))

	)

330 
	#__TZ_£t_CONTROL_NS
(
VALUE
Ë(
	`__¨m_w§
("CONTROL_NS", (VALUE)))

	)

331 
	#__TZ_gë_PSP_NS
(Ë(
	`__¨m_r§
("PSP_NS"))

	)

332 
	#__TZ_£t_PSP_NS
(
VALUE
Ë(
	`__¨m_w§
("PSP_NS", (VALUE)))

	)

333 
	#__TZ_gë_MSP_NS
(Ë(
	`__¨m_r§
("MSP_NS"))

	)

334 
	#__TZ_£t_MSP_NS
(
VALUE
Ë(
	`__¨m_w§
("MSP_NS", (VALUE)))

	)

335 
	#__TZ_gë_SP_NS
(Ë(
	`__¨m_r§
("SP_NS"))

	)

336 
	#__TZ_£t_SP_NS
(
VALUE
Ë(
	`__¨m_w§
("SP_NS", (VALUE)))

	)

337 
	#__TZ_gë_PRIMASK_NS
(Ë(
	`__¨m_r§
("PRIMASK_NS"))

	)

338 
	#__TZ_£t_PRIMASK_NS
(
VALUE
Ë(
	`__¨m_w§
("PRIMASK_NS", (VALUE)))

	)

339 
	#__TZ_gë_BASEPRI_NS
(Ë(
	`__¨m_r§
("BASEPRI_NS"))

	)

340 
	#__TZ_£t_BASEPRI_NS
(
VALUE
Ë(
	`__¨m_w§
("BASEPRI_NS", (VALUE)))

	)

341 
	#__TZ_gë_FAULTMASK_NS
(Ë(
	`__¨m_r§
("FAULTMASK_NS"))

	)

342 
	#__TZ_£t_FAULTMASK_NS
(
VALUE
)(
	`__¨m_w§
("FAULTMASK_NS", (VALUE)))

	)

344 #i‡(!(
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

345 (!
deföed
 (
__ARM_FEATURE_CMSE
Ë|| (
	g__ARM_FEATURE_CMSE
 < 3)))

347 
	#__TZ_gë_PSPLIM_NS
(Ë(0U)

	)

348 
	#__TZ_£t_PSPLIM_NS
(
VALUE
Ë(()(VALUE))

	)

350 
	#__TZ_gë_PSPLIM_NS
(Ë(
	`__¨m_r§
("PSPLIM_NS"))

	)

351 
	#__TZ_£t_PSPLIM_NS
(
VALUE
Ë(
	`__¨m_w§
("PSPLIM_NS", (VALUE)))

	)

354 
	#__TZ_gë_MSPLIM_NS
(Ë(
	`__¨m_r§
("MSPLIM_NS"))

	)

355 
	#__TZ_£t_MSPLIM_NS
(
VALUE
Ë(
	`__¨m_w§
("MSPLIM_NS", (VALUE)))

	)

357 
	#__NOP
 
__ür_buûtö_no_›î©i⁄


	)

359 
	#__CLZ
 
__ür_buûtö_CLZ


	)

360 
	#__CLREX
 
__ür_buûtö_CLREX


	)

362 
	#__DMB
 
__ür_buûtö_DMB


	)

363 
	#__DSB
 
__ür_buûtö_DSB


	)

364 
	#__ISB
 
__ür_buûtö_ISB


	)

366 
	#__LDREXB
 
__ür_buûtö_LDREXB


	)

367 
	#__LDREXH
 
__ür_buûtö_LDREXH


	)

368 
	#__LDREXW
 
__ür_buûtö_LDREX


	)

370 
	#__RBIT
 
__ür_buûtö_RBIT


	)

371 
	#__REV
 
__ür_buûtö_REV


	)

372 
	#__REV16
 
__ür_buûtö_REV16


	)

374 
__IAR_FT
 
öt16_t
 
	$__REVSH
(
öt16_t
 
vÆ
)

376  (
öt16_t
Ë
	`__ür_buûtö_REVSH
(
vÆ
);

377 
	}
}

379 
	#__ROR
 
__ür_buûtö_ROR


	)

380 
	#__RRX
 
__ür_buûtö_RRX


	)

382 
	#__SEV
 
__ür_buûtö_SEV


	)

384 #i‡!
__IAR_M0_FAMILY


385 
	#__SSAT
 
__ür_buûtö_SSAT


	)

388 
	#__STREXB
 
__ür_buûtö_STREXB


	)

389 
	#__STREXH
 
__ür_buûtö_STREXH


	)

390 
	#__STREXW
 
__ür_buûtö_STREX


	)

392 #i‡!
__IAR_M0_FAMILY


393 
	#__USAT
 
__ür_buûtö_USAT


	)

396 
	#__WFE
 
__ür_buûtö_WFE


	)

397 
	#__WFI
 
__ür_buûtö_WFI


	)

399 #i‡
__ARM_MEDIA__


400 
	#__SADD8
 
__ür_buûtö_SADD8


	)

401 
	#__QADD8
 
__ür_buûtö_QADD8


	)

402 
	#__SHADD8
 
__ür_buûtö_SHADD8


	)

403 
	#__UADD8
 
__ür_buûtö_UADD8


	)

404 
	#__UQADD8
 
__ür_buûtö_UQADD8


	)

405 
	#__UHADD8
 
__ür_buûtö_UHADD8


	)

406 
	#__SSUB8
 
__ür_buûtö_SSUB8


	)

407 
	#__QSUB8
 
__ür_buûtö_QSUB8


	)

408 
	#__SHSUB8
 
__ür_buûtö_SHSUB8


	)

409 
	#__USUB8
 
__ür_buûtö_USUB8


	)

410 
	#__UQSUB8
 
__ür_buûtö_UQSUB8


	)

411 
	#__UHSUB8
 
__ür_buûtö_UHSUB8


	)

412 
	#__SADD16
 
__ür_buûtö_SADD16


	)

413 
	#__QADD16
 
__ür_buûtö_QADD16


	)

414 
	#__SHADD16
 
__ür_buûtö_SHADD16


	)

415 
	#__UADD16
 
__ür_buûtö_UADD16


	)

416 
	#__UQADD16
 
__ür_buûtö_UQADD16


	)

417 
	#__UHADD16
 
__ür_buûtö_UHADD16


	)

418 
	#__SSUB16
 
__ür_buûtö_SSUB16


	)

419 
	#__QSUB16
 
__ür_buûtö_QSUB16


	)

420 
	#__SHSUB16
 
__ür_buûtö_SHSUB16


	)

421 
	#__USUB16
 
__ür_buûtö_USUB16


	)

422 
	#__UQSUB16
 
__ür_buûtö_UQSUB16


	)

423 
	#__UHSUB16
 
__ür_buûtö_UHSUB16


	)

424 
	#__SASX
 
__ür_buûtö_SASX


	)

425 
	#__QASX
 
__ür_buûtö_QASX


	)

426 
	#__SHASX
 
__ür_buûtö_SHASX


	)

427 
	#__UASX
 
__ür_buûtö_UASX


	)

428 
	#__UQASX
 
__ür_buûtö_UQASX


	)

429 
	#__UHASX
 
__ür_buûtö_UHASX


	)

430 
	#__SSAX
 
__ür_buûtö_SSAX


	)

431 
	#__QSAX
 
__ür_buûtö_QSAX


	)

432 
	#__SHSAX
 
__ür_buûtö_SHSAX


	)

433 
	#__USAX
 
__ür_buûtö_USAX


	)

434 
	#__UQSAX
 
__ür_buûtö_UQSAX


	)

435 
	#__UHSAX
 
__ür_buûtö_UHSAX


	)

436 
	#__USAD8
 
__ür_buûtö_USAD8


	)

437 
	#__USADA8
 
__ür_buûtö_USADA8


	)

438 
	#__SSAT16
 
__ür_buûtö_SSAT16


	)

439 
	#__USAT16
 
__ür_buûtö_USAT16


	)

440 
	#__UXTB16
 
__ür_buûtö_UXTB16


	)

441 
	#__UXTAB16
 
__ür_buûtö_UXTAB16


	)

442 
	#__SXTB16
 
__ür_buûtö_SXTB16


	)

443 
	#__SXTAB16
 
__ür_buûtö_SXTAB16


	)

444 
	#__SMUAD
 
__ür_buûtö_SMUAD


	)

445 
	#__SMUADX
 
__ür_buûtö_SMUADX


	)

446 
	#__SMMLA
 
__ür_buûtö_SMMLA


	)

447 
	#__SMLAD
 
__ür_buûtö_SMLAD


	)

448 
	#__SMLADX
 
__ür_buûtö_SMLADX


	)

449 
	#__SMLALD
 
__ür_buûtö_SMLALD


	)

450 
	#__SMLALDX
 
__ür_buûtö_SMLALDX


	)

451 
	#__SMUSD
 
__ür_buûtö_SMUSD


	)

452 
	#__SMUSDX
 
__ür_buûtö_SMUSDX


	)

453 
	#__SMLSD
 
__ür_buûtö_SMLSD


	)

454 
	#__SMLSDX
 
__ür_buûtö_SMLSDX


	)

455 
	#__SMLSLD
 
__ür_buûtö_SMLSLD


	)

456 
	#__SMLSLDX
 
__ür_buûtö_SMLSLDX


	)

457 
	#__SEL
 
__ür_buûtö_SEL


	)

458 
	#__QADD
 
__ür_buûtö_QADD


	)

459 
	#__QSUB
 
__ür_buûtö_QSUB


	)

460 
	#__PKHBT
 
__ür_buûtö_PKHBT


	)

461 
	#__PKHTB
 
__ür_buûtö_PKHTB


	)

466 #i‡
__IAR_M0_FAMILY


468 
	#__CLZ
 
__cmsis_ür_˛z_nŸ_a˘ive


	)

469 
	#__SSAT
 
__cmsis_ür_sßt_nŸ_a˘ive


	)

470 
	#__USAT
 
__cmsis_ür_ußt_nŸ_a˘ive


	)

471 
	#__RBIT
 
__cmsis_ür_rbô_nŸ_a˘ive


	)

472 
	#__gë_APSR
 
__cmsis_ür_gë_APSR_nŸ_a˘ive


	)

476 #i‡(!((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

477 (
deföed
 (
__FPU_USED
 ) && (
	g__FPU_USED
 == 1U)) ))

478 
	#__gë_FPSCR
 
__cmsis_ür_gë_FPSR_nŸ_a˘ive


	)

479 
	#__£t_FPSCR
 
__cmsis_ür_£t_FPSR_nŸ_a˘ive


	)

482 #ifde‡
__INTRINSICS_INCLUDED


483 #îr‹ 
öåösics
.
h
 
is
 
Æªady
 
ö˛uded
 
¥eviou¶y
!

486 
	~<öåösics.h
>

488 #i‡
__IAR_M0_FAMILY


490 #unde‡
__CLZ


491 #unde‡
__SSAT


492 #unde‡
__USAT


493 #unde‡
__RBIT


494 #unde‡
__gë_APSR


496 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
d©a
)

498 i‡(
d©a
 == 0U) {  32U; }

500 
uöt32_t
 
cou¡
 = 0U;

501 
uöt32_t
 
mask
 = 0x80000000U;

503 (
d©a
 & 
mask
) == 0U)

505 
cou¡
 += 1U;

506 
mask
 = mask >> 1U;

508  
cou¡
;

509 
	}
}

511 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
v
)

513 
uöt8_t
 
sc
 = 31U;

514 
uöt32_t
 
r
 = 
v
;

515 
v
 >>= 1U; v; v >>= 1U)

517 
r
 <<= 1U;

518 
r
 |
v
 & 1U;

519 
sc
--;

521  (
r
 << 
sc
);

522 
	}
}

524 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

526 
uöt32_t
 
ªs
;

527 
	`__asm
("MRS %0,APSR" : "Ù" (
ªs
));

528  
ªs
;

529 
	}
}

533 #i‡(!((
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)) && \

534 (
deföed
 (
__FPU_USED
 ) && (
	g__FPU_USED
 == 1U)) ))

535 #unde‡
__gë_FPSCR


536 #unde‡
__£t_FPSCR


537 
	#__gë_FPSCR
(Ë(0)

	)

538 
	#__£t_FPSCR
(
VALUE
Ë(()VALUE)

	)

541 #¥agm®
düg_suµªss
=
Pe940


542 #¥agm®
düg_suµªss
=
Pe177


544 
	#__íabÀ_úq
 
__íabÀ_öãºu±


	)

545 
	#__dißbÀ_úq
 
__dißbÀ_öãºu±


	)

546 
	#__NOP
 
__no_›î©i⁄


	)

548 
	#__gë_xPSR
 
__gë_PSR


	)

550 #i‡(!
deföed
(
__ARM_ARCH_6M__
) || __ARM_ARCH_6M__==0)

552 
__IAR_FT
 
uöt32_t
 
	$__LDREXW
(
uöt32_t
 vﬁ©ûê*
±r
)

554  
	`__LDREX
((*)
±r
);

555 
	}
}

557 
__IAR_FT
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, uöt32_àvﬁ©ûê*
±r
)

559  
	`__STREX
(
vÆue
, (*)
±r
);

560 
	}
}

565 #i‡(
__CORTEX_M
 >= 0x03)

567 
__IAR_FT
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

569 
uöt32_t
 
ªsu…
;

570 
	`__ASM
("RRX %0, %1" : "Ù"(
ªsu…
Ë: "r" (
vÆue
) : "cc");

571 (
ªsu…
);

572 
	}
}

574 
__IAR_FT
 
	$__£t_BASEPRI_MAX
(
uöt32_t
 
vÆue
)

576 
__asm
 vﬁ©ûe("MSR BASEPRI_MAX,%0"::"r" (
vÆue
));

577 
	}
}

580 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

581 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

586 
__IAR_FT
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

588  (
›1
 >> 
›2
) | (op1 << (((op1)*8)-op2));

589 
	}
}

591 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

592 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) )

594 
__IAR_FT
 
uöt32_t
 
	$__gë_MSPLIM
()

596 
uöt32_t
 
ªs
;

597 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

598 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

600 
ªs
 = 0U;

602 
__asm
 vﬁ©ûe("MRS %0,MSPLIM" : "Ù" (
ªs
));

604  
ªs
;

605 
	}
}

607 
__IAR_FT
 
	$__£t_MSPLIM
(
uöt32_t
 
vÆue
)

609 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

610 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

612 ()
vÆue
;

614 
__asm
 vﬁ©ûe("MSR MSPLIM,%0" :: "r" (
vÆue
));

616 
	}
}

618 
__IAR_FT
 
uöt32_t
 
	$__gë_PSPLIM
()

620 
uöt32_t
 
ªs
;

621 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

622 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

624 
ªs
 = 0U;

626 
__asm
 vﬁ©ûe("MRS %0,PSPLIM" : "Ù" (
ªs
));

628  
ªs
;

629 
	}
}

631 
__IAR_FT
 
	$__£t_PSPLIM
(
uöt32_t
 
vÆue
)

633 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

634 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

636 ()
vÆue
;

638 
__asm
 vﬁ©ûe("MSR PSPLIM,%0" :: "r" (
vÆue
));

640 
	}
}

642 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_CONTROL_NS
()

644 
uöt32_t
 
ªs
;

645 
__asm
 vﬁ©ûe("MRS %0,CONTROL_NS" : "Ù" (
ªs
));

646  
ªs
;

647 
	}
}

649 
__IAR_FT
 
	$__TZ_£t_CONTROL_NS
(
uöt32_t
 
vÆue
)

651 
__asm
 vﬁ©ûe("MSR CONTROL_NS,%0" :: "r" (
vÆue
));

652 
	}
}

654 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_PSP_NS
()

656 
uöt32_t
 
ªs
;

657 
__asm
 vﬁ©ûe("MRS %0,PSP_NS" : "Ù" (
ªs
));

658  
ªs
;

659 
	}
}

661 
__IAR_FT
 
	$__TZ_£t_PSP_NS
(
uöt32_t
 
vÆue
)

663 
__asm
 vﬁ©ûe("MSR PSP_NS,%0" :: "r" (
vÆue
));

664 
	}
}

666 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_MSP_NS
()

668 
uöt32_t
 
ªs
;

669 
__asm
 vﬁ©ûe("MRS %0,MSP_NS" : "Ù" (
ªs
));

670  
ªs
;

671 
	}
}

673 
__IAR_FT
 
	$__TZ_£t_MSP_NS
(
uöt32_t
 
vÆue
)

675 
__asm
 vﬁ©ûe("MSR MSP_NS,%0" :: "r" (
vÆue
));

676 
	}
}

678 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_SP_NS
()

680 
uöt32_t
 
ªs
;

681 
__asm
 vﬁ©ûe("MRS %0,SP_NS" : "Ù" (
ªs
));

682  
ªs
;

683 
	}
}

684 
__IAR_FT
 
	$__TZ_£t_SP_NS
(
uöt32_t
 
vÆue
)

686 
__asm
 vﬁ©ûe("MSR SP_NS,%0" :: "r" (
vÆue
));

687 
	}
}

689 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_PRIMASK_NS
()

691 
uöt32_t
 
ªs
;

692 
__asm
 vﬁ©ûe("MRS %0,PRIMASK_NS" : "Ù" (
ªs
));

693  
ªs
;

694 
	}
}

696 
__IAR_FT
 
	$__TZ_£t_PRIMASK_NS
(
uöt32_t
 
vÆue
)

698 
__asm
 vﬁ©ûe("MSR PRIMASK_NS,%0" :: "r" (
vÆue
));

699 
	}
}

701 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_BASEPRI_NS
()

703 
uöt32_t
 
ªs
;

704 
__asm
 vﬁ©ûe("MRS %0,BASEPRI_NS" : "Ù" (
ªs
));

705  
ªs
;

706 
	}
}

708 
__IAR_FT
 
	$__TZ_£t_BASEPRI_NS
(
uöt32_t
 
vÆue
)

710 
__asm
 vﬁ©ûe("MSR BASEPRI_NS,%0" :: "r" (
vÆue
));

711 
	}
}

713 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_FAULTMASK_NS
()

715 
uöt32_t
 
ªs
;

716 
__asm
 vﬁ©ûe("MRS %0,FAULTMASK_NS" : "Ù" (
ªs
));

717  
ªs
;

718 
	}
}

720 
__IAR_FT
 
	$__TZ_£t_FAULTMASK_NS
(
uöt32_t
 
vÆue
)

722 
__asm
 vﬁ©ûe("MSR FAULTMASK_NS,%0" :: "r" (
vÆue
));

723 
	}
}

725 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_PSPLIM_NS
()

727 
uöt32_t
 
ªs
;

728 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

729 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

731 
ªs
 = 0U;

733 
__asm
 vﬁ©ûe("MRS %0,PSPLIM_NS" : "Ù" (
ªs
));

735  
ªs
;

736 
	}
}

738 
__IAR_FT
 
	$__TZ_£t_PSPLIM_NS
(
uöt32_t
 
vÆue
)

740 #i‡(!(
	`deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \

741 (!
	`deföed
 (
__ARM_FEATURE_CMSE
 ) || (__ARM_FEATURE_CMSE < 3)))

743 ()
vÆue
;

745 
__asm
 vﬁ©ûe("MSR PSPLIM_NS,%0" :: "r" (
vÆue
));

747 
	}
}

749 
__IAR_FT
 
uöt32_t
 
	$__TZ_gë_MSPLIM_NS
()

751 
uöt32_t
 
ªs
;

752 
__asm
 vﬁ©ûe("MRS %0,MSPLIM_NS" : "Ù" (
ªs
));

753  
ªs
;

754 
	}
}

756 
__IAR_FT
 
	$__TZ_£t_MSPLIM_NS
(
uöt32_t
 
vÆue
)

758 
__asm
 vﬁ©ûe("MSR MSPLIM_NS,%0" :: "r" (
vÆue
));

759 
	}
}

765 
	#__BKPT
(
vÆue
Ë
__asm
 vﬁ©ûê("BKPT %0" : : "i"(vÆue))

	)

767 #i‡
__IAR_M0_FAMILY


768 
__STATIC_INLINE
 
öt32_t
 
	$__SSAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

770 i‡((
ßt
 >= 1U) && (sat <= 32U))

772 c⁄° 
öt32_t
 
max
 = (öt32_t)((1U << (
ßt
 - 1U)) - 1U);

773 c⁄° 
öt32_t
 
mö
 = -1 - 
max
 ;

774 i‡(
vÆ
 > 
max
)

776  
max
;

778 i‡(
vÆ
 < 
mö
)

780  
mö
;

783  
vÆ
;

784 
	}
}

786 
__STATIC_INLINE
 
uöt32_t
 
	$__USAT
(
öt32_t
 
vÆ
, 
uöt32_t
 
ßt
)

788 i‡(
ßt
 <= 31U)

790 c⁄° 
uöt32_t
 
max
 = ((1U << 
ßt
) - 1U);

791 i‡(
vÆ
 > (
öt32_t
)
max
)

793  
max
;

795 i‡(
vÆ
 < 0)

800  (
uöt32_t
)
vÆ
;

801 
	}
}

804 #i‡(
__CORTEX_M
 >= 0x03)

806 
__IAR_FT
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
addr
)

808 
uöt32_t
 
ªs
;

809 
	`__ASM
("LDRBT %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
) : "memory");

810  ((
uöt8_t
)
ªs
);

811 
	}
}

813 
__IAR_FT
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
addr
)

815 
uöt32_t
 
ªs
;

816 
	`__ASM
("LDRHT %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
) : "memory");

817  ((
uöt16_t
)
ªs
);

818 
	}
}

820 
__IAR_FT
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
addr
)

822 
uöt32_t
 
ªs
;

823 
	`__ASM
("LDRT %0, [%1]" : "Ù" (
ªs
Ë: "r" (
addr
) : "memory");

824  
ªs
;

825 
	}
}

827 
__IAR_FT
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

829 
	`__ASM
("STRBT %1, [%0]" : : "r" (
addr
), "r" ((
uöt32_t
)
vÆue
) : "memory");

830 
	}
}

832 
__IAR_FT
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

834 
	`__ASM
("STRHT %1, [%0]" : : "r" (
addr
), "r" ((
uöt32_t
)
vÆue
) : "memory");

835 
	}
}

837 
__IAR_FT
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

839 
	`__ASM
("STRT %1, [%0]" : : "r" (
addr
), "r" (
vÆue
) : "memory");

840 
	}
}

844 #i‡((
deföed
 (
__ARM_ARCH_8M_MAIN__
 ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \

845 (
deföed
 (
__ARM_ARCH_8M_BASE__
 ) && (
	g__ARM_ARCH_8M_BASE__
 == 1)) )

848 
__IAR_FT
 
uöt8_t
 
	$__LDAB
(vﬁ©ûê
uöt8_t
 *
±r
)

850 
uöt32_t
 
ªs
;

851 
__ASM
 vﬁ©ûê("LDAB %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

852  ((
uöt8_t
)
ªs
);

853 
	}
}

855 
__IAR_FT
 
uöt16_t
 
	$__LDAH
(vﬁ©ûê
uöt16_t
 *
±r
)

857 
uöt32_t
 
ªs
;

858 
__ASM
 vﬁ©ûê("LDAH %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

859  ((
uöt16_t
)
ªs
);

860 
	}
}

862 
__IAR_FT
 
uöt32_t
 
	$__LDA
(vﬁ©ûê
uöt32_t
 *
±r
)

864 
uöt32_t
 
ªs
;

865 
__ASM
 vﬁ©ûê("LDA %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

866  
ªs
;

867 
	}
}

869 
__IAR_FT
 
	$__STLB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

871 
__ASM
 vﬁ©ûê("STLB %1, [%0]" :: "r" (
±r
), "r" (
vÆue
) : "memory");

872 
	}
}

874 
__IAR_FT
 
	$__STLH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

876 
__ASM
 vﬁ©ûê("STLH %1, [%0]" :: "r" (
±r
), "r" (
vÆue
) : "memory");

877 
	}
}

879 
__IAR_FT
 
	$__STL
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

881 
__ASM
 vﬁ©ûê("STL %1, [%0]" :: "r" (
±r
), "r" (
vÆue
) : "memory");

882 
	}
}

884 
__IAR_FT
 
uöt8_t
 
	$__LDAEXB
(vﬁ©ûê
uöt8_t
 *
±r
)

886 
uöt32_t
 
ªs
;

887 
__ASM
 vﬁ©ûê("LDAEXB %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

888  ((
uöt8_t
)
ªs
);

889 
	}
}

891 
__IAR_FT
 
uöt16_t
 
	$__LDAEXH
(vﬁ©ûê
uöt16_t
 *
±r
)

893 
uöt32_t
 
ªs
;

894 
__ASM
 vﬁ©ûê("LDAEXH %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

895  ((
uöt16_t
)
ªs
);

896 
	}
}

898 
__IAR_FT
 
uöt32_t
 
	$__LDAEX
(vﬁ©ûê
uöt32_t
 *
±r
)

900 
uöt32_t
 
ªs
;

901 
__ASM
 vﬁ©ûê("LDAEX %0, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
) : "memory");

902  
ªs
;

903 
	}
}

905 
__IAR_FT
 
uöt32_t
 
	$__STLEXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
±r
)

907 
uöt32_t
 
ªs
;

908 
__ASM
 vﬁ©ûê("STLEXB %0, %2, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
), "r" (
vÆue
) : "memory");

909  
ªs
;

910 
	}
}

912 
__IAR_FT
 
uöt32_t
 
	$__STLEXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
±r
)

914 
uöt32_t
 
ªs
;

915 
__ASM
 vﬁ©ûê("STLEXH %0, %2, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
), "r" (
vÆue
) : "memory");

916  
ªs
;

917 
	}
}

919 
__IAR_FT
 
uöt32_t
 
	$__STLEX
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
±r
)

921 
uöt32_t
 
ªs
;

922 
__ASM
 vﬁ©ûê("STLEX %0, %2, [%1]" : "Ù" (
ªs
Ë: "r" (
±r
), "r" (
vÆue
) : "memory");

923  
ªs
;

924 
	}
}

928 #unde‡
__IAR_FT


929 #unde‡
__IAR_M0_FAMILY


930 #unde‡
__ICCARM_V8


932 #¥agm®
düg_deÁu…
=
Pe940


933 #¥agm®
düg_deÁu…
=
Pe177


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_version.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CMSIS_VERSION_H


32 
	#__CMSIS_VERSION_H


	)

35 
	#__CM_CMSIS_VERSION_MAIN
 ( 5UË

	)

36 
	#__CM_CMSIS_VERSION_SUB
 ( 1UË

	)

37 
	#__CM_CMSIS_VERSION
 ((
__CM_CMSIS_VERSION_MAIN
 << 16U) | \

38 
__CM_CMSIS_VERSION_SUB
 )

	)

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_armv8mbl.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_ARMV8MBL_H_GENERIC


32 
	#__CORE_ARMV8MBL_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__ARMv8MBL_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__ARMv8MBL_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__ARMv8MBL_CMSIS_VERSION
 ((
__ARMv8MBL_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__ARMv8MBL_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 ( 2UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_ARMV8MBL_H_DEPENDANT


127 
	#__CORE_ARMV8MBL_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__ARMv8MBL_REV


136 
	#__ARMv8MBL_REV
 0x0000U

	)

140 #i‚de‡
__FPU_PRESENT


141 
	#__FPU_PRESENT
 0U

	)

145 #i‚de‡
__MPU_PRESENT


146 
	#__MPU_PRESENT
 0U

	)

150 #i‚de‡
__SAUREGION_PRESENT


151 
	#__SAUREGION_PRESENT
 0U

	)

155 #i‚de‡
__VTOR_PRESENT


156 
	#__VTOR_PRESENT
 0U

	)

160 #i‚de‡
__NVIC_PRIO_BITS


161 
	#__NVIC_PRIO_BITS
 2U

	)

165 #i‚de‡
__Víd‹_SysTickC⁄fig


166 
	#__Víd‹_SysTickC⁄fig
 0U

	)

170 #i‚de‡
__ETM_PRESENT


171 
	#__ETM_PRESENT
 0U

	)

175 #i‚de‡
__MTB_PRESENT


176 
	#__MTB_PRESENT
 0U

	)

190 #ifde‡
__˝lu•lus


191 
	#__I
 vﬁ©ûê

	)

193 
	#__I
 vﬁ©ûêc⁄°

	)

195 
	#__O
 vﬁ©ûê

	)

196 
	#__IO
 vﬁ©ûê

	)

199 
	#__IM
 vﬁ©ûêc⁄°

	)

200 
	#__OM
 vﬁ©ûê

	)

201 
	#__IOM
 vﬁ©ûê

	)

237 
uöt32_t
 
_ª£rved0
:28;

238 
uöt32_t
 
V
:1;

239 
uöt32_t
 
C
:1;

240 
uöt32_t
 
Z
:1;

241 
uöt32_t
 
N
:1;

242 } 
b
;

243 
uöt32_t
 
w
;

244 } 
	tAPSR_Ty≥
;

247 
	#APSR_N_Pos
 31U

	)

248 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

250 
	#APSR_Z_Pos
 30U

	)

251 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

253 
	#APSR_C_Pos
 29U

	)

254 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

256 
	#APSR_V_Pos
 28U

	)

257 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

267 
uöt32_t
 
ISR
:9;

268 
uöt32_t
 
_ª£rved0
:23;

269 } 
b
;

270 
uöt32_t
 
w
;

271 } 
	tIPSR_Ty≥
;

274 
	#IPSR_ISR_Pos
 0U

	)

275 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

285 
uöt32_t
 
ISR
:9;

286 
uöt32_t
 
_ª£rved0
:15;

287 
uöt32_t
 
T
:1;

288 
uöt32_t
 
_ª£rved1
:3;

289 
uöt32_t
 
V
:1;

290 
uöt32_t
 
C
:1;

291 
uöt32_t
 
Z
:1;

292 
uöt32_t
 
N
:1;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	txPSR_Ty≥
;

298 
	#xPSR_N_Pos
 31U

	)

299 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

301 
	#xPSR_Z_Pos
 30U

	)

302 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

304 
	#xPSR_C_Pos
 29U

	)

305 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

307 
	#xPSR_V_Pos
 28U

	)

308 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

310 
	#xPSR_T_Pos
 24U

	)

311 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

313 
	#xPSR_ISR_Pos
 0U

	)

314 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

324 
uöt32_t
 
nPRIV
:1;

325 
uöt32_t
 
SPSEL
:1;

326 
uöt32_t
 
_ª£rved1
:30;

327 } 
b
;

328 
uöt32_t
 
w
;

329 } 
	tCONTROL_Ty≥
;

332 
	#CONTROL_SPSEL_Pos
 1U

	)

333 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

335 
	#CONTROL_nPRIV_Pos
 0U

	)

336 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

353 
__IOM
 
uöt32_t
 
ISER
[16U];

354 
uöt32_t
 
RESERVED0
[16U];

355 
__IOM
 
uöt32_t
 
ICER
[16U];

356 
uöt32_t
 
RSERVED1
[16U];

357 
__IOM
 
uöt32_t
 
ISPR
[16U];

358 
uöt32_t
 
RESERVED2
[16U];

359 
__IOM
 
uöt32_t
 
ICPR
[16U];

360 
uöt32_t
 
RESERVED3
[16U];

361 
__IOM
 
uöt32_t
 
IABR
[16U];

362 
uöt32_t
 
RESERVED4
[16U];

363 
__IOM
 
uöt32_t
 
ITNS
[16U];

364 
uöt32_t
 
RESERVED5
[16U];

365 
__IOM
 
uöt32_t
 
IPR
[124U];

366 } 
	tNVIC_Ty≥
;

383 
__IM
 
uöt32_t
 
CPUID
;

384 
__IOM
 
uöt32_t
 
ICSR
;

385 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

386 
__IOM
 
uöt32_t
 
VTOR
;

388 
uöt32_t
 
RESERVED0
;

390 
__IOM
 
uöt32_t
 
AIRCR
;

391 
__IOM
 
uöt32_t
 
SCR
;

392 
__IOM
 
uöt32_t
 
CCR
;

393 
uöt32_t
 
RESERVED1
;

394 
__IOM
 
uöt32_t
 
SHPR
[2U];

395 
__IOM
 
uöt32_t
 
SHCSR
;

396 } 
	tSCB_Ty≥
;

399 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

400 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

402 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

403 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

405 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

406 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

408 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

409 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

411 
	#SCB_CPUID_REVISION_Pos
 0U

	)

412 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

415 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

416 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

418 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

419 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

421 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

422 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

424 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

425 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

427 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

428 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

430 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

431 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

433 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

434 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

436 
	#SCB_ICSR_STTNS_Pos
 24U

	)

437 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

439 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

440 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

442 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

443 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

445 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

446 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

448 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

449 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

451 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

452 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

454 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

456 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

457 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

461 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

462 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

464 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

465 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

467 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

468 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

470 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

471 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

473 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

474 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

476 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

477 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

479 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

480 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

482 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

483 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

486 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

487 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

489 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

490 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

492 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

493 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

495 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

496 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

499 
	#SCB_CCR_BP_Pos
 18U

	)

500 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

502 
	#SCB_CCR_IC_Pos
 17U

	)

503 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

505 
	#SCB_CCR_DC_Pos
 16U

	)

506 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

508 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

509 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

511 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

512 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

514 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

515 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

517 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

518 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

520 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

521 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

524 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

525 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

527 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

528 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

530 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

531 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

533 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

534 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

536 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

537 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

539 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

540 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

542 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

543 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

560 
__IOM
 
uöt32_t
 
CTRL
;

561 
__IOM
 
uöt32_t
 
LOAD
;

562 
__IOM
 
uöt32_t
 
VAL
;

563 
__IM
 
uöt32_t
 
CALIB
;

564 } 
	tSysTick_Ty≥
;

567 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

568 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

570 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

571 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

573 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

574 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

576 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

577 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

580 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

581 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

584 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

585 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

588 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

589 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

591 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

592 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

594 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

595 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

612 
__IOM
 
uöt32_t
 
CTRL
;

613 
uöt32_t
 
RESERVED0
[6U];

614 
__IM
 
uöt32_t
 
PCSR
;

615 
__IOM
 
uöt32_t
 
COMP0
;

616 
uöt32_t
 
RESERVED1
[1U];

617 
__IOM
 
uöt32_t
 
FUNCTION0
;

618 
uöt32_t
 
RESERVED2
[1U];

619 
__IOM
 
uöt32_t
 
COMP1
;

620 
uöt32_t
 
RESERVED3
[1U];

621 
__IOM
 
uöt32_t
 
FUNCTION1
;

622 
uöt32_t
 
RESERVED4
[1U];

623 
__IOM
 
uöt32_t
 
COMP2
;

624 
uöt32_t
 
RESERVED5
[1U];

625 
__IOM
 
uöt32_t
 
FUNCTION2
;

626 
uöt32_t
 
RESERVED6
[1U];

627 
__IOM
 
uöt32_t
 
COMP3
;

628 
uöt32_t
 
RESERVED7
[1U];

629 
__IOM
 
uöt32_t
 
FUNCTION3
;

630 
uöt32_t
 
RESERVED8
[1U];

631 
__IOM
 
uöt32_t
 
COMP4
;

632 
uöt32_t
 
RESERVED9
[1U];

633 
__IOM
 
uöt32_t
 
FUNCTION4
;

634 
uöt32_t
 
RESERVED10
[1U];

635 
__IOM
 
uöt32_t
 
COMP5
;

636 
uöt32_t
 
RESERVED11
[1U];

637 
__IOM
 
uöt32_t
 
FUNCTION5
;

638 
uöt32_t
 
RESERVED12
[1U];

639 
__IOM
 
uöt32_t
 
COMP6
;

640 
uöt32_t
 
RESERVED13
[1U];

641 
__IOM
 
uöt32_t
 
FUNCTION6
;

642 
uöt32_t
 
RESERVED14
[1U];

643 
__IOM
 
uöt32_t
 
COMP7
;

644 
uöt32_t
 
RESERVED15
[1U];

645 
__IOM
 
uöt32_t
 
FUNCTION7
;

646 
uöt32_t
 
RESERVED16
[1U];

647 
__IOM
 
uöt32_t
 
COMP8
;

648 
uöt32_t
 
RESERVED17
[1U];

649 
__IOM
 
uöt32_t
 
FUNCTION8
;

650 
uöt32_t
 
RESERVED18
[1U];

651 
__IOM
 
uöt32_t
 
COMP9
;

652 
uöt32_t
 
RESERVED19
[1U];

653 
__IOM
 
uöt32_t
 
FUNCTION9
;

654 
uöt32_t
 
RESERVED20
[1U];

655 
__IOM
 
uöt32_t
 
COMP10
;

656 
uöt32_t
 
RESERVED21
[1U];

657 
__IOM
 
uöt32_t
 
FUNCTION10
;

658 
uöt32_t
 
RESERVED22
[1U];

659 
__IOM
 
uöt32_t
 
COMP11
;

660 
uöt32_t
 
RESERVED23
[1U];

661 
__IOM
 
uöt32_t
 
FUNCTION11
;

662 
uöt32_t
 
RESERVED24
[1U];

663 
__IOM
 
uöt32_t
 
COMP12
;

664 
uöt32_t
 
RESERVED25
[1U];

665 
__IOM
 
uöt32_t
 
FUNCTION12
;

666 
uöt32_t
 
RESERVED26
[1U];

667 
__IOM
 
uöt32_t
 
COMP13
;

668 
uöt32_t
 
RESERVED27
[1U];

669 
__IOM
 
uöt32_t
 
FUNCTION13
;

670 
uöt32_t
 
RESERVED28
[1U];

671 
__IOM
 
uöt32_t
 
COMP14
;

672 
uöt32_t
 
RESERVED29
[1U];

673 
__IOM
 
uöt32_t
 
FUNCTION14
;

674 
uöt32_t
 
RESERVED30
[1U];

675 
__IOM
 
uöt32_t
 
COMP15
;

676 
uöt32_t
 
RESERVED31
[1U];

677 
__IOM
 
uöt32_t
 
FUNCTION15
;

678 } 
	tDWT_Ty≥
;

681 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

682 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

684 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

685 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

687 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

688 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

690 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

691 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

693 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

694 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

697 
	#DWT_FUNCTION_ID_Pos
 27U

	)

698 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

700 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

701 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

703 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

704 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

706 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

707 
	#DWT_FUNCTION_ACTION_Msk
 (0x3UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

709 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

710 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

727 
__IM
 
uöt32_t
 
SSPSR
;

728 
__IOM
 
uöt32_t
 
CSPSR
;

729 
uöt32_t
 
RESERVED0
[2U];

730 
__IOM
 
uöt32_t
 
ACPR
;

731 
uöt32_t
 
RESERVED1
[55U];

732 
__IOM
 
uöt32_t
 
SPPR
;

733 
uöt32_t
 
RESERVED2
[131U];

734 
__IM
 
uöt32_t
 
FFSR
;

735 
__IOM
 
uöt32_t
 
FFCR
;

736 
__IOM
 
uöt32_t
 
PSCR
;

737 
uöt32_t
 
RESERVED3
[809U];

738 
__OM
 
uöt32_t
 
LAR
;

739 
__IM
 
uöt32_t
 
LSR
;

740 
uöt32_t
 
RESERVED4
[4U];

741 
__IM
 
uöt32_t
 
TYPE
;

742 
__IM
 
uöt32_t
 
DEVTYPE
;

743 } 
	tTPI_Ty≥
;

746 
	#TPI_ACPR_SWOSCALER_Pos
 0U

	)

747 
	#TPI_ACPR_SWOSCALER_Msk
 (0xFFFFUL )

	)

750 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

751 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

754 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

755 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

757 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

758 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

760 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

761 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

763 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

764 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

767 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

768 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

770 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

771 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

773 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

774 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

777 
	#TPI_PSCR_PSCou¡_Pos
 0U

	)

778 
	#TPI_PSCR_PSCou¡_Msk
 (0x1FUL )

	)

781 
	#TPI_LSR_nTT_Pos
 1U

	)

782 
	#TPI_LSR_nTT_Msk
 (0x1UL << 
TPI_LSR_nTT_Pos
Ë

	)

784 
	#TPI_LSR_SLK_Pos
 1U

	)

785 
	#TPI_LSR_SLK_Msk
 (0x1UL << 
TPI_LSR_SLK_Pos
Ë

	)

787 
	#TPI_LSR_SLI_Pos
 0U

	)

788 
	#TPI_LSR_SLI_Msk
 (0x1UL )

	)

791 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

792 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

794 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

795 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

797 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

798 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

800 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

801 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

804 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

805 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

807 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

808 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

813 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

826 
__IM
 
uöt32_t
 
TYPE
;

827 
__IOM
 
uöt32_t
 
CTRL
;

828 
__IOM
 
uöt32_t
 
RNR
;

829 
__IOM
 
uöt32_t
 
RBAR
;

830 
__IOM
 
uöt32_t
 
RLAR
;

831 
uöt32_t
 
RESERVED0
[7U];

833 
__IOM
 
uöt32_t
 
MAIR
[2];

835 
__IOM
 
uöt32_t
 
MAIR0
;

836 
__IOM
 
uöt32_t
 
MAIR1
;

839 } 
	tMPU_Ty≥
;

841 
	#MPU_TYPE_RALIASES
 1U

	)

844 
	#MPU_TYPE_IREGION_Pos
 16U

	)

845 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

847 
	#MPU_TYPE_DREGION_Pos
 8U

	)

848 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

850 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

851 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

854 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

855 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

857 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

858 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

860 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

861 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

864 
	#MPU_RNR_REGION_Pos
 0U

	)

865 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

868 
	#MPU_RBAR_BASE_Pos
 5U

	)

869 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

871 
	#MPU_RBAR_SH_Pos
 3U

	)

872 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

874 
	#MPU_RBAR_AP_Pos
 1U

	)

875 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

877 
	#MPU_RBAR_XN_Pos
 0U

	)

878 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

881 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

882 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

884 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

885 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

887 
	#MPU_RLAR_EN_Pos
 0U

	)

888 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

891 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

892 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

894 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

895 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

897 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

898 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

900 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

901 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

904 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

905 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

907 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

908 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

910 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

911 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

913 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

914 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

920 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

933 
__IOM
 
uöt32_t
 
CTRL
;

934 
__IM
 
uöt32_t
 
TYPE
;

935 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

936 
__IOM
 
uöt32_t
 
RNR
;

937 
__IOM
 
uöt32_t
 
RBAR
;

938 
__IOM
 
uöt32_t
 
RLAR
;

940 } 
	tSAU_Ty≥
;

943 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

944 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

946 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

947 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

950 
	#SAU_TYPE_SREGION_Pos
 0U

	)

951 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

953 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

955 
	#SAU_RNR_REGION_Pos
 0U

	)

956 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

959 
	#SAU_RBAR_BADDR_Pos
 5U

	)

960 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

963 
	#SAU_RLAR_LADDR_Pos
 5U

	)

964 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

966 
	#SAU_RLAR_NSC_Pos
 1U

	)

967 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

969 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

970 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

990 
__IOM
 
uöt32_t
 
DHCSR
;

991 
__OM
 
uöt32_t
 
DCRSR
;

992 
__IOM
 
uöt32_t
 
DCRDR
;

993 
__IOM
 
uöt32_t
 
DEMCR
;

994 
uöt32_t
 
RESERVED4
[1U];

995 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

996 
__IOM
 
uöt32_t
 
DSCSR
;

997 } 
	tC‹eDebug_Ty≥
;

1000 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1001 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1003 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1004 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1006 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1007 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1009 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1010 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1012 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1013 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1015 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1016 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1018 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1019 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1021 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1022 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1024 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1025 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1027 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1028 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1030 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1031 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1033 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1034 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1037 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1038 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1040 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1041 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1044 
	#C‹eDebug_DEMCR_DWTENA_Pos
 24U

	)

1045 
	#C‹eDebug_DEMCR_DWTENA_Msk
 (1UL << 
C‹eDebug_DEMCR_DWTENA_Pos
Ë

	)

1047 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1048 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1050 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1051 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1054 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1055 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1057 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1058 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1060 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1061 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1063 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1064 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

1067 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

1068 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

1070 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

1071 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

1073 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

1074 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

1092 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1100 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1113 
	#SCS_BASE
 (0xE000E000ULË

	)

1114 
	#DWT_BASE
 (0xE0001000ULË

	)

1115 
	#TPI_BASE
 (0xE0040000ULË

	)

1116 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1117 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1118 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1119 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1122 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1123 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1124 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1125 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1126 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1127 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

1129 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1130 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1131 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1134 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1135 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

1136 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

1139 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1140 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

1141 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

1142 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

1143 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

1144 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

1146 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

1147 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

1148 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

1149 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

1151 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1152 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

1153 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

1182 #ifde‡
CMSIS_NVIC_VIRTUAL


1183 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1184 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1186 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1188 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1189 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1190 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1191 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1192 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1193 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1194 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1195 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1196 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1197 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1198 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1199 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1202 #ifde‡
CMSIS_VECTAB_VIRTUAL


1203 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1204 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1206 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1208 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1209 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1212 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1218 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

1221 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

1222 
	#EXC_RETURN_S
 (0x00000040ULË

	)

1223 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

1224 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

1225 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

1226 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

1227 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

1230 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

1231 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

1233 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

1239 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

1240 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

1241 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

1243 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

1244 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

1252 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1254 i‡((
öt32_t
)(
IRQn
) >= 0)

1256 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1269 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1271 i‡((
öt32_t
)(
IRQn
) >= 0)

1273 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1288 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1290 i‡((
öt32_t
)(
IRQn
) >= 0)

1292 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1293 
__DSB
();

1294 
__ISB
();

1307 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1309 i‡((
öt32_t
)(
IRQn
) >= 0)

1311 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1326 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1328 i‡((
öt32_t
)(
IRQn
) >= 0)

1330 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1341 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1343 i‡((
öt32_t
)(
IRQn
) >= 0)

1345 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1358 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1360 i‡((
öt32_t
)(
IRQn
) >= 0)

1362 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1371 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1380 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1382 i‡((
öt32_t
)(
IRQn
) >= 0)

1384 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1401 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1403 i‡((
öt32_t
)(
IRQn
) >= 0)

1405 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1406 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1423 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1425 i‡((
öt32_t
)(
IRQn
) >= 0)

1427 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1428 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1447 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1449 i‡((
öt32_t
)(
IRQn
) >= 0)

1451 
NVIC
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1452 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1456 
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1457 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1471 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1474 i‡((
öt32_t
)(
IRQn
) >= 0)

1476 ((
uöt32_t
)(((
NVIC
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1480 ((
uöt32_t
)(((
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1496 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1498 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1499 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1500 
uöt32_t
 
SubPri‹ôyBôs
;

1502 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1503 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1506 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1507 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1523 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1525 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1526 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1527 
uöt32_t
 
SubPri‹ôyBôs
;

1529 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1530 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1532 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1533 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1547 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1549 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1550 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1552 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1554 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1566 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1568 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1569 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1571 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1573  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1581 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1583 
__DSB
();

1585 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1586 
SCB_AIRCR_SYSRESETREQ_Msk
);

1587 
__DSB
();

1591 
__NOP
();

1595 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1602 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1604 i‡((
öt32_t
)(
IRQn
) >= 0)

1606 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1619 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1621 i‡((
öt32_t
)(
IRQn
) >= 0)

1623 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1638 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1640 i‡((
öt32_t
)(
IRQn
) >= 0)

1642 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1655 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1657 i‡((
öt32_t
)(
IRQn
) >= 0)

1659 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1674 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1676 i‡((
öt32_t
)(
IRQn
) >= 0)

1678 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1689 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1691 i‡((
öt32_t
)(
IRQn
) >= 0)

1693 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1706 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

1708 i‡((
öt32_t
)(
IRQn
) >= 0)

1710 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1728 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1730 i‡((
öt32_t
)(
IRQn
) >= 0)

1732 
NVIC_NS
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC_NS->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1733 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1737 
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB_NS->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1738 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1751 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

1754 i‡((
öt32_t
)(
IRQn
) >= 0)

1756 ((
uöt32_t
)(((
NVIC_NS
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1760 ((
uöt32_t
)(((
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1769 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1771 
	~"mpu_¨mv8.h
"

1791 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1809 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1815 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

1817 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

1826 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

1828 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

1846 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1859 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1861 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1866 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1867 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1868 
SysTick
->
VAL
 = 0UL;

1869 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1870 
SysTick_CTRL_TICKINT_Msk
 |

1871 
SysTick_CTRL_ENABLE_Msk
;

1875 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1888 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

1890 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1895 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1896 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1897 
SysTick_NS
->
VAL
 = 0UL;

1898 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1899 
SysTick_CTRL_TICKINT_Msk
 |

1900 
SysTick_CTRL_ENABLE_Msk
;

1912 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_armv8mml.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_ARMV8MML_H_GENERIC


32 
	#__CORE_ARMV8MML_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__ARMv8MML_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__ARMv8MML_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__ARMv8MML_CMSIS_VERSION
 ((
__ARMv8MML_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__ARMv8MML_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (81UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 
__TARGET_FPU_VFP


78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #i‡
deföed
(
__ARM_FEATURE_DSP
)

89 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

90 
	#__DSP_USED
 1U

	)

93 
	#__DSP_USED
 0U

	)

96 
	#__DSP_USED
 0U

	)

99 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

100 #i‡
deföed
 
__ARM_PCS_VFP


101 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

102 
	#__FPU_USED
 1U

	)

105 
	#__FPU_USED
 0U

	)

108 
	#__FPU_USED
 0U

	)

111 #i‡
deföed
(
__ARM_FEATURE_DSP
)

112 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

113 
	#__DSP_USED
 1U

	)

116 
	#__DSP_USED
 0U

	)

119 
	#__DSP_USED
 0U

	)

122 #ñi‡
deföed
 ( 
__GNUC__
 )

123 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

124 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

125 
	#__FPU_USED
 1U

	)

128 
	#__FPU_USED
 0U

	)

131 
	#__FPU_USED
 0U

	)

134 #i‡
deföed
(
__ARM_FEATURE_DSP
)

135 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

136 
	#__DSP_USED
 1U

	)

139 
	#__DSP_USED
 0U

	)

142 
	#__DSP_USED
 0U

	)

145 #ñi‡
deföed
 ( 
__ICCARM__
 )

146 #i‡
deföed
 
__ARMVFP__


147 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

148 
	#__FPU_USED
 1U

	)

151 
	#__FPU_USED
 0U

	)

154 
	#__FPU_USED
 0U

	)

157 #i‡
deföed
(
__ARM_FEATURE_DSP
)

158 #i‡
deföed
(
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

159 
	#__DSP_USED
 1U

	)

162 
	#__DSP_USED
 0U

	)

165 
	#__DSP_USED
 0U

	)

168 #ñi‡
deföed
 ( 
__TI_ARM__
 )

169 #i‡
deföed
 
__TI_VFP_SUPPORT__


170 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

171 
	#__FPU_USED
 1U

	)

174 
	#__FPU_USED
 0U

	)

177 
	#__FPU_USED
 0U

	)

180 #ñi‡
deföed
 ( 
__TASKING__
 )

181 #i‡
deföed
 
__FPU_VFP__


182 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

183 
	#__FPU_USED
 1U

	)

186 
	#__FPU_USED
 0U

	)

189 
	#__FPU_USED
 0U

	)

192 #ñi‡
deföed
 ( 
__CSMC__
 )

193 #i‡–
__CSMC__
 & 0x400U)

194 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

195 
	#__FPU_USED
 1U

	)

198 
	#__FPU_USED
 0U

	)

201 
	#__FPU_USED
 0U

	)

206 
	~"cmsis_compûî.h
"

209 #ifde‡
__˝lu•lus


215 #i‚de‡
__CMSIS_GENERIC


217 #i‚de‡
__CORE_ARMV8MML_H_DEPENDANT


218 
	#__CORE_ARMV8MML_H_DEPENDANT


	)

220 #ifde‡
__˝lu•lus


225 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


226 #i‚de‡
__ARMv8MML_REV


227 
	#__ARMv8MML_REV
 0x0000U

	)

231 #i‚de‡
__FPU_PRESENT


232 
	#__FPU_PRESENT
 0U

	)

236 #i‚de‡
__MPU_PRESENT


237 
	#__MPU_PRESENT
 0U

	)

241 #i‚de‡
__SAUREGION_PRESENT


242 
	#__SAUREGION_PRESENT
 0U

	)

246 #i‚de‡
__DSP_PRESENT


247 
	#__DSP_PRESENT
 0U

	)

251 #i‚de‡
__NVIC_PRIO_BITS


252 
	#__NVIC_PRIO_BITS
 3U

	)

256 #i‚de‡
__Víd‹_SysTickC⁄fig


257 
	#__Víd‹_SysTickC⁄fig
 0U

	)

270 #ifde‡
__˝lu•lus


271 
	#__I
 vﬁ©ûê

	)

273 
	#__I
 vﬁ©ûêc⁄°

	)

275 
	#__O
 vﬁ©ûê

	)

276 
	#__IO
 vﬁ©ûê

	)

279 
	#__IM
 vﬁ©ûêc⁄°

	)

280 
	#__OM
 vﬁ©ûê

	)

281 
	#__IOM
 vﬁ©ûê

	)

318 
uöt32_t
 
_ª£rved0
:16;

319 
uöt32_t
 
GE
:4;

320 
uöt32_t
 
_ª£rved1
:7;

321 
uöt32_t
 
Q
:1;

322 
uöt32_t
 
V
:1;

323 
uöt32_t
 
C
:1;

324 
uöt32_t
 
Z
:1;

325 
uöt32_t
 
N
:1;

326 } 
b
;

327 
uöt32_t
 
w
;

328 } 
	tAPSR_Ty≥
;

331 
	#APSR_N_Pos
 31U

	)

332 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

334 
	#APSR_Z_Pos
 30U

	)

335 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

337 
	#APSR_C_Pos
 29U

	)

338 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

340 
	#APSR_V_Pos
 28U

	)

341 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

343 
	#APSR_Q_Pos
 27U

	)

344 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

346 
	#APSR_GE_Pos
 16U

	)

347 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

357 
uöt32_t
 
ISR
:9;

358 
uöt32_t
 
_ª£rved0
:23;

359 } 
b
;

360 
uöt32_t
 
w
;

361 } 
	tIPSR_Ty≥
;

364 
	#IPSR_ISR_Pos
 0U

	)

365 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

375 
uöt32_t
 
ISR
:9;

376 
uöt32_t
 
_ª£rved0
:7;

377 
uöt32_t
 
GE
:4;

378 
uöt32_t
 
_ª£rved1
:4;

379 
uöt32_t
 
T
:1;

380 
uöt32_t
 
IT
:2;

381 
uöt32_t
 
Q
:1;

382 
uöt32_t
 
V
:1;

383 
uöt32_t
 
C
:1;

384 
uöt32_t
 
Z
:1;

385 
uöt32_t
 
N
:1;

386 } 
b
;

387 
uöt32_t
 
w
;

388 } 
	txPSR_Ty≥
;

391 
	#xPSR_N_Pos
 31U

	)

392 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

394 
	#xPSR_Z_Pos
 30U

	)

395 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

397 
	#xPSR_C_Pos
 29U

	)

398 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

400 
	#xPSR_V_Pos
 28U

	)

401 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

403 
	#xPSR_Q_Pos
 27U

	)

404 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

406 
	#xPSR_IT_Pos
 25U

	)

407 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

409 
	#xPSR_T_Pos
 24U

	)

410 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

412 
	#xPSR_GE_Pos
 16U

	)

413 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

415 
	#xPSR_ISR_Pos
 0U

	)

416 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

426 
uöt32_t
 
nPRIV
:1;

427 
uöt32_t
 
SPSEL
:1;

428 
uöt32_t
 
FPCA
:1;

429 
uöt32_t
 
SFPA
:1;

430 
uöt32_t
 
_ª£rved1
:28;

431 } 
b
;

432 
uöt32_t
 
w
;

433 } 
	tCONTROL_Ty≥
;

436 
	#CONTROL_SFPA_Pos
 3U

	)

437 
	#CONTROL_SFPA_Msk
 (1UL << 
CONTROL_SFPA_Pos
Ë

	)

439 
	#CONTROL_FPCA_Pos
 2U

	)

440 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

442 
	#CONTROL_SPSEL_Pos
 1U

	)

443 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

445 
	#CONTROL_nPRIV_Pos
 0U

	)

446 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

463 
__IOM
 
uöt32_t
 
ISER
[16U];

464 
uöt32_t
 
RESERVED0
[16U];

465 
__IOM
 
uöt32_t
 
ICER
[16U];

466 
uöt32_t
 
RSERVED1
[16U];

467 
__IOM
 
uöt32_t
 
ISPR
[16U];

468 
uöt32_t
 
RESERVED2
[16U];

469 
__IOM
 
uöt32_t
 
ICPR
[16U];

470 
uöt32_t
 
RESERVED3
[16U];

471 
__IOM
 
uöt32_t
 
IABR
[16U];

472 
uöt32_t
 
RESERVED4
[16U];

473 
__IOM
 
uöt32_t
 
ITNS
[16U];

474 
uöt32_t
 
RESERVED5
[16U];

475 
__IOM
 
uöt8_t
 
IPR
[496U];

476 
uöt32_t
 
RESERVED6
[580U];

477 
__OM
 
uöt32_t
 
STIR
;

478 } 
	tNVIC_Ty≥
;

481 
	#NVIC_STIR_INTID_Pos
 0U

	)

482 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

499 
__IM
 
uöt32_t
 
CPUID
;

500 
__IOM
 
uöt32_t
 
ICSR
;

501 
__IOM
 
uöt32_t
 
VTOR
;

502 
__IOM
 
uöt32_t
 
AIRCR
;

503 
__IOM
 
uöt32_t
 
SCR
;

504 
__IOM
 
uöt32_t
 
CCR
;

505 
__IOM
 
uöt8_t
 
SHPR
[12U];

506 
__IOM
 
uöt32_t
 
SHCSR
;

507 
__IOM
 
uöt32_t
 
CFSR
;

508 
__IOM
 
uöt32_t
 
HFSR
;

509 
__IOM
 
uöt32_t
 
DFSR
;

510 
__IOM
 
uöt32_t
 
MMFAR
;

511 
__IOM
 
uöt32_t
 
BFAR
;

512 
__IOM
 
uöt32_t
 
AFSR
;

513 
__IM
 
uöt32_t
 
ID_PFR
[2U];

514 
__IM
 
uöt32_t
 
ID_DFR
;

515 
__IM
 
uöt32_t
 
ID_ADR
;

516 
__IM
 
uöt32_t
 
ID_MMFR
[4U];

517 
__IM
 
uöt32_t
 
ID_ISAR
[6U];

518 
__IM
 
uöt32_t
 
CLIDR
;

519 
__IM
 
uöt32_t
 
CTR
;

520 
__IM
 
uöt32_t
 
CCSIDR
;

521 
__IOM
 
uöt32_t
 
CSSELR
;

522 
__IOM
 
uöt32_t
 
CPACR
;

523 
__IOM
 
uöt32_t
 
NSACR
;

524 
uöt32_t
 
RESERVED3
[92U];

525 
__OM
 
uöt32_t
 
STIR
;

526 
uöt32_t
 
RESERVED4
[15U];

527 
__IM
 
uöt32_t
 
MVFR0
;

528 
__IM
 
uöt32_t
 
MVFR1
;

529 
__IM
 
uöt32_t
 
MVFR2
;

530 
uöt32_t
 
RESERVED5
[1U];

531 
__OM
 
uöt32_t
 
ICIALLU
;

532 
uöt32_t
 
RESERVED6
[1U];

533 
__OM
 
uöt32_t
 
ICIMVAU
;

534 
__OM
 
uöt32_t
 
DCIMVAC
;

535 
__OM
 
uöt32_t
 
DCISW
;

536 
__OM
 
uöt32_t
 
DCCMVAU
;

537 
__OM
 
uöt32_t
 
DCCMVAC
;

538 
__OM
 
uöt32_t
 
DCCSW
;

539 
__OM
 
uöt32_t
 
DCCIMVAC
;

540 
__OM
 
uöt32_t
 
DCCISW
;

541 
uöt32_t
 
RESERVED7
[6U];

542 
__IOM
 
uöt32_t
 
ITCMCR
;

543 
__IOM
 
uöt32_t
 
DTCMCR
;

544 
__IOM
 
uöt32_t
 
AHBPCR
;

545 
__IOM
 
uöt32_t
 
CACR
;

546 
__IOM
 
uöt32_t
 
AHBSCR
;

547 
uöt32_t
 
RESERVED8
[1U];

548 
__IOM
 
uöt32_t
 
ABFSR
;

549 } 
	tSCB_Ty≥
;

552 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

553 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

555 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

556 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

558 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

559 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

561 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

562 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

564 
	#SCB_CPUID_REVISION_Pos
 0U

	)

565 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

568 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

569 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

571 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

572 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

574 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

575 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

577 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

578 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

580 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

581 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

583 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

584 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

586 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

587 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

589 
	#SCB_ICSR_STTNS_Pos
 24U

	)

590 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

592 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

593 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

595 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

596 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

598 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

599 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

601 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

602 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

604 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

605 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

608 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

609 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

612 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

613 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

615 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

616 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

618 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

619 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

621 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

622 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

624 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

625 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

627 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

628 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

630 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

631 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

633 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

634 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

636 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

637 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

640 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

641 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

643 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

644 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

646 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

647 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

649 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

650 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

653 
	#SCB_CCR_BP_Pos
 18U

	)

654 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

656 
	#SCB_CCR_IC_Pos
 17U

	)

657 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

659 
	#SCB_CCR_DC_Pos
 16U

	)

660 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

662 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

663 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

665 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

666 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

668 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

669 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

671 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

672 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

674 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

675 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

678 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

679 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

681 
	#SCB_SHCSR_SECUREFAULTPENDED_Pos
 20U

	)

682 
	#SCB_SHCSR_SECUREFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTPENDED_Pos
Ë

	)

684 
	#SCB_SHCSR_SECUREFAULTENA_Pos
 19U

	)

685 
	#SCB_SHCSR_SECUREFAULTENA_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTENA_Pos
Ë

	)

687 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

688 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

690 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

691 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

693 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

694 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

696 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

697 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

699 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

700 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

702 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

703 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

705 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

706 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

708 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

709 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

711 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

712 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

714 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

715 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

717 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

718 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

720 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

721 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

723 
	#SCB_SHCSR_SECUREFAULTACT_Pos
 4U

	)

724 
	#SCB_SHCSR_SECUREFAULTACT_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTACT_Pos
Ë

	)

726 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

727 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

729 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

730 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

732 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

733 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

735 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

736 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

739 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

740 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

742 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

743 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

745 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

746 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

749 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

750 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

752 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

753 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

755 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

756 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

758 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

759 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

761 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

762 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

764 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

765 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

768 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

769 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

771 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

772 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

774 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

775 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

777 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

778 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

780 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

781 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

783 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

784 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

786 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

787 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

790 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

791 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

793 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

794 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

796 
	#SCB_CFSR_STKOF_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 4UË

	)

797 
	#SCB_CFSR_STKOF_Msk
 (1UL << 
SCB_CFSR_STKOF_Pos
Ë

	)

799 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

800 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

802 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

803 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

805 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

806 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

808 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

809 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

812 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

813 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

815 
	#SCB_HFSR_FORCED_Pos
 30U

	)

816 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

818 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

819 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

822 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

823 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

825 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

826 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

828 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

829 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

831 
	#SCB_DFSR_BKPT_Pos
 1U

	)

832 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

834 
	#SCB_DFSR_HALTED_Pos
 0U

	)

835 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

838 
	#SCB_NSACR_CP11_Pos
 11U

	)

839 
	#SCB_NSACR_CP11_Msk
 (1UL << 
SCB_NSACR_CP11_Pos
Ë

	)

841 
	#SCB_NSACR_CP10_Pos
 10U

	)

842 
	#SCB_NSACR_CP10_Msk
 (1UL << 
SCB_NSACR_CP10_Pos
Ë

	)

844 
	#SCB_NSACR_CPn_Pos
 0U

	)

845 
	#SCB_NSACR_CPn_Msk
 (1UL )

	)

848 
	#SCB_CLIDR_LOUU_Pos
 27U

	)

849 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

851 
	#SCB_CLIDR_LOC_Pos
 24U

	)

852 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_LOC_Pos
Ë

	)

855 
	#SCB_CTR_FORMAT_Pos
 29U

	)

856 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

858 
	#SCB_CTR_CWG_Pos
 24U

	)

859 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

861 
	#SCB_CTR_ERG_Pos
 20U

	)

862 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

864 
	#SCB_CTR_DMINLINE_Pos
 16U

	)

865 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

867 
	#SCB_CTR_IMINLINE_Pos
 0U

	)

868 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL )

	)

871 
	#SCB_CCSIDR_WT_Pos
 31U

	)

872 
	#SCB_CCSIDR_WT_Msk
 (1UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

874 
	#SCB_CCSIDR_WB_Pos
 30U

	)

875 
	#SCB_CCSIDR_WB_Msk
 (1UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

877 
	#SCB_CCSIDR_RA_Pos
 29U

	)

878 
	#SCB_CCSIDR_RA_Msk
 (1UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

880 
	#SCB_CCSIDR_WA_Pos
 28U

	)

881 
	#SCB_CCSIDR_WA_Msk
 (1UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

883 
	#SCB_CCSIDR_NUMSETS_Pos
 13U

	)

884 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

886 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3U

	)

887 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

889 
	#SCB_CCSIDR_LINESIZE_Pos
 0U

	)

890 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL )

	)

893 
	#SCB_CSSELR_LEVEL_Pos
 1U

	)

894 
	#SCB_CSSELR_LEVEL_Msk
 (7UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

896 
	#SCB_CSSELR_IND_Pos
 0U

	)

897 
	#SCB_CSSELR_IND_Msk
 (1UL )

	)

900 
	#SCB_STIR_INTID_Pos
 0U

	)

901 
	#SCB_STIR_INTID_Msk
 (0x1FFUL )

	)

904 
	#SCB_DCISW_WAY_Pos
 30U

	)

905 
	#SCB_DCISW_WAY_Msk
 (3UL << 
SCB_DCISW_WAY_Pos
Ë

	)

907 
	#SCB_DCISW_SET_Pos
 5U

	)

908 
	#SCB_DCISW_SET_Msk
 (0x1FFUL << 
SCB_DCISW_SET_Pos
Ë

	)

911 
	#SCB_DCCSW_WAY_Pos
 30U

	)

912 
	#SCB_DCCSW_WAY_Msk
 (3UL << 
SCB_DCCSW_WAY_Pos
Ë

	)

914 
	#SCB_DCCSW_SET_Pos
 5U

	)

915 
	#SCB_DCCSW_SET_Msk
 (0x1FFUL << 
SCB_DCCSW_SET_Pos
Ë

	)

918 
	#SCB_DCCISW_WAY_Pos
 30U

	)

919 
	#SCB_DCCISW_WAY_Msk
 (3UL << 
SCB_DCCISW_WAY_Pos
Ë

	)

921 
	#SCB_DCCISW_SET_Pos
 5U

	)

922 
	#SCB_DCCISW_SET_Msk
 (0x1FFUL << 
SCB_DCCISW_SET_Pos
Ë

	)

925 
	#SCB_ITCMCR_SZ_Pos
 3U

	)

926 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

928 
	#SCB_ITCMCR_RETEN_Pos
 2U

	)

929 
	#SCB_ITCMCR_RETEN_Msk
 (1UL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

931 
	#SCB_ITCMCR_RMW_Pos
 1U

	)

932 
	#SCB_ITCMCR_RMW_Msk
 (1UL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

934 
	#SCB_ITCMCR_EN_Pos
 0U

	)

935 
	#SCB_ITCMCR_EN_Msk
 (1UL )

	)

938 
	#SCB_DTCMCR_SZ_Pos
 3U

	)

939 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

941 
	#SCB_DTCMCR_RETEN_Pos
 2U

	)

942 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

944 
	#SCB_DTCMCR_RMW_Pos
 1U

	)

945 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

947 
	#SCB_DTCMCR_EN_Pos
 0U

	)

948 
	#SCB_DTCMCR_EN_Msk
 (1UL )

	)

951 
	#SCB_AHBPCR_SZ_Pos
 1U

	)

952 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

954 
	#SCB_AHBPCR_EN_Pos
 0U

	)

955 
	#SCB_AHBPCR_EN_Msk
 (1UL )

	)

958 
	#SCB_CACR_FORCEWT_Pos
 2U

	)

959 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

961 
	#SCB_CACR_ECCEN_Pos
 1U

	)

962 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

964 
	#SCB_CACR_SIWT_Pos
 0U

	)

965 
	#SCB_CACR_SIWT_Msk
 (1UL )

	)

968 
	#SCB_AHBSCR_INITCOUNT_Pos
 11U

	)

969 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

971 
	#SCB_AHBSCR_TPRI_Pos
 2U

	)

972 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

974 
	#SCB_AHBSCR_CTL_Pos
 0U

	)

975 
	#SCB_AHBSCR_CTL_Msk
 (3UL )

	)

978 
	#SCB_ABFSR_AXIMTYPE_Pos
 8U

	)

979 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

981 
	#SCB_ABFSR_EPPB_Pos
 4U

	)

982 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

984 
	#SCB_ABFSR_AXIM_Pos
 3U

	)

985 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

987 
	#SCB_ABFSR_AHBP_Pos
 2U

	)

988 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

990 
	#SCB_ABFSR_DTCM_Pos
 1U

	)

991 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

993 
	#SCB_ABFSR_ITCM_Pos
 0U

	)

994 
	#SCB_ABFSR_ITCM_Msk
 (1UL )

	)

1011 
uöt32_t
 
RESERVED0
[1U];

1012 
__IM
 
uöt32_t
 
ICTR
;

1013 
__IOM
 
uöt32_t
 
ACTLR
;

1014 
__IOM
 
uöt32_t
 
CPPWR
;

1015 } 
	tSCnSCB_Ty≥
;

1018 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

1019 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

1036 
__IOM
 
uöt32_t
 
CTRL
;

1037 
__IOM
 
uöt32_t
 
LOAD
;

1038 
__IOM
 
uöt32_t
 
VAL
;

1039 
__IM
 
uöt32_t
 
CALIB
;

1040 } 
	tSysTick_Ty≥
;

1043 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

1044 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

1046 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

1047 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

1049 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

1050 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

1052 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

1053 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

1056 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

1057 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

1060 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

1061 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

1064 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

1065 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

1067 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

1068 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

1070 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

1071 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

1088 
__OM
 union

1090 
__OM
 
uöt8_t
 
u8
;

1091 
__OM
 
uöt16_t
 
u16
;

1092 
__OM
 
uöt32_t
 
u32
;

1093 } 
PORT
 [32U];

1094 
uöt32_t
 
RESERVED0
[864U];

1095 
__IOM
 
uöt32_t
 
TER
;

1096 
uöt32_t
 
RESERVED1
[15U];

1097 
__IOM
 
uöt32_t
 
TPR
;

1098 
uöt32_t
 
RESERVED2
[15U];

1099 
__IOM
 
uöt32_t
 
TCR
;

1100 
uöt32_t
 
RESERVED3
[29U];

1101 
__OM
 
uöt32_t
 
IWR
;

1102 
__IM
 
uöt32_t
 
IRR
;

1103 
__IOM
 
uöt32_t
 
IMCR
;

1104 
uöt32_t
 
RESERVED4
[43U];

1105 
__OM
 
uöt32_t
 
LAR
;

1106 
__IM
 
uöt32_t
 
LSR
;

1107 
uöt32_t
 
RESERVED5
[1U];

1108 
__IM
 
uöt32_t
 
DEVARCH
;

1109 
uöt32_t
 
RESERVED6
[4U];

1110 
__IM
 
uöt32_t
 
PID4
;

1111 
__IM
 
uöt32_t
 
PID5
;

1112 
__IM
 
uöt32_t
 
PID6
;

1113 
__IM
 
uöt32_t
 
PID7
;

1114 
__IM
 
uöt32_t
 
PID0
;

1115 
__IM
 
uöt32_t
 
PID1
;

1116 
__IM
 
uöt32_t
 
PID2
;

1117 
__IM
 
uöt32_t
 
PID3
;

1118 
__IM
 
uöt32_t
 
CID0
;

1119 
__IM
 
uöt32_t
 
CID1
;

1120 
__IM
 
uöt32_t
 
CID2
;

1121 
__IM
 
uöt32_t
 
CID3
;

1122 } 
	tITM_Ty≥
;

1125 
	#ITM_STIM_DISABLED_Pos
 1U

	)

1126 
	#ITM_STIM_DISABLED_Msk
 (0x1UL << 
ITM_STIM_DISABLED_Pos
Ë

	)

1128 
	#ITM_STIM_FIFOREADY_Pos
 0U

	)

1129 
	#ITM_STIM_FIFOREADY_Msk
 (0x1UL )

	)

1132 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

1133 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

1136 
	#ITM_TCR_BUSY_Pos
 23U

	)

1137 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

1139 
	#ITM_TCR_TRACEBUSID_Pos
 16U

	)

1140 
	#ITM_TCR_TRACEBUSID_Msk
 (0x7FUL << 
ITM_TCR_TRACEBUSID_Pos
Ë

	)

1142 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

1143 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

1145 
	#ITM_TCR_TSPRESCALE_Pos
 8U

	)

1146 
	#ITM_TCR_TSPRESCALE_Msk
 (3UL << 
ITM_TCR_TSPRESCALE_Pos
Ë

	)

1148 
	#ITM_TCR_STALLENA_Pos
 5U

	)

1149 
	#ITM_TCR_STALLENA_Msk
 (1UL << 
ITM_TCR_STALLENA_Pos
Ë

	)

1151 
	#ITM_TCR_SWOENA_Pos
 4U

	)

1152 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

1154 
	#ITM_TCR_DWTENA_Pos
 3U

	)

1155 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

1157 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

1158 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

1160 
	#ITM_TCR_TSENA_Pos
 1U

	)

1161 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

1163 
	#ITM_TCR_ITMENA_Pos
 0U

	)

1164 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

1167 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

1168 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

1171 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

1172 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

1175 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

1176 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

1179 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

1180 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

1182 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

1183 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

1185 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

1186 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

1203 
__IOM
 
uöt32_t
 
CTRL
;

1204 
__IOM
 
uöt32_t
 
CYCCNT
;

1205 
__IOM
 
uöt32_t
 
CPICNT
;

1206 
__IOM
 
uöt32_t
 
EXCCNT
;

1207 
__IOM
 
uöt32_t
 
SLEEPCNT
;

1208 
__IOM
 
uöt32_t
 
LSUCNT
;

1209 
__IOM
 
uöt32_t
 
FOLDCNT
;

1210 
__IM
 
uöt32_t
 
PCSR
;

1211 
__IOM
 
uöt32_t
 
COMP0
;

1212 
uöt32_t
 
RESERVED1
[1U];

1213 
__IOM
 
uöt32_t
 
FUNCTION0
;

1214 
uöt32_t
 
RESERVED2
[1U];

1215 
__IOM
 
uöt32_t
 
COMP1
;

1216 
uöt32_t
 
RESERVED3
[1U];

1217 
__IOM
 
uöt32_t
 
FUNCTION1
;

1218 
uöt32_t
 
RESERVED4
[1U];

1219 
__IOM
 
uöt32_t
 
COMP2
;

1220 
uöt32_t
 
RESERVED5
[1U];

1221 
__IOM
 
uöt32_t
 
FUNCTION2
;

1222 
uöt32_t
 
RESERVED6
[1U];

1223 
__IOM
 
uöt32_t
 
COMP3
;

1224 
uöt32_t
 
RESERVED7
[1U];

1225 
__IOM
 
uöt32_t
 
FUNCTION3
;

1226 
uöt32_t
 
RESERVED8
[1U];

1227 
__IOM
 
uöt32_t
 
COMP4
;

1228 
uöt32_t
 
RESERVED9
[1U];

1229 
__IOM
 
uöt32_t
 
FUNCTION4
;

1230 
uöt32_t
 
RESERVED10
[1U];

1231 
__IOM
 
uöt32_t
 
COMP5
;

1232 
uöt32_t
 
RESERVED11
[1U];

1233 
__IOM
 
uöt32_t
 
FUNCTION5
;

1234 
uöt32_t
 
RESERVED12
[1U];

1235 
__IOM
 
uöt32_t
 
COMP6
;

1236 
uöt32_t
 
RESERVED13
[1U];

1237 
__IOM
 
uöt32_t
 
FUNCTION6
;

1238 
uöt32_t
 
RESERVED14
[1U];

1239 
__IOM
 
uöt32_t
 
COMP7
;

1240 
uöt32_t
 
RESERVED15
[1U];

1241 
__IOM
 
uöt32_t
 
FUNCTION7
;

1242 
uöt32_t
 
RESERVED16
[1U];

1243 
__IOM
 
uöt32_t
 
COMP8
;

1244 
uöt32_t
 
RESERVED17
[1U];

1245 
__IOM
 
uöt32_t
 
FUNCTION8
;

1246 
uöt32_t
 
RESERVED18
[1U];

1247 
__IOM
 
uöt32_t
 
COMP9
;

1248 
uöt32_t
 
RESERVED19
[1U];

1249 
__IOM
 
uöt32_t
 
FUNCTION9
;

1250 
uöt32_t
 
RESERVED20
[1U];

1251 
__IOM
 
uöt32_t
 
COMP10
;

1252 
uöt32_t
 
RESERVED21
[1U];

1253 
__IOM
 
uöt32_t
 
FUNCTION10
;

1254 
uöt32_t
 
RESERVED22
[1U];

1255 
__IOM
 
uöt32_t
 
COMP11
;

1256 
uöt32_t
 
RESERVED23
[1U];

1257 
__IOM
 
uöt32_t
 
FUNCTION11
;

1258 
uöt32_t
 
RESERVED24
[1U];

1259 
__IOM
 
uöt32_t
 
COMP12
;

1260 
uöt32_t
 
RESERVED25
[1U];

1261 
__IOM
 
uöt32_t
 
FUNCTION12
;

1262 
uöt32_t
 
RESERVED26
[1U];

1263 
__IOM
 
uöt32_t
 
COMP13
;

1264 
uöt32_t
 
RESERVED27
[1U];

1265 
__IOM
 
uöt32_t
 
FUNCTION13
;

1266 
uöt32_t
 
RESERVED28
[1U];

1267 
__IOM
 
uöt32_t
 
COMP14
;

1268 
uöt32_t
 
RESERVED29
[1U];

1269 
__IOM
 
uöt32_t
 
FUNCTION14
;

1270 
uöt32_t
 
RESERVED30
[1U];

1271 
__IOM
 
uöt32_t
 
COMP15
;

1272 
uöt32_t
 
RESERVED31
[1U];

1273 
__IOM
 
uöt32_t
 
FUNCTION15
;

1274 
uöt32_t
 
RESERVED32
[934U];

1275 
__IM
 
uöt32_t
 
LSR
;

1276 
uöt32_t
 
RESERVED33
[1U];

1277 
__IM
 
uöt32_t
 
DEVARCH
;

1278 } 
	tDWT_Ty≥
;

1281 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

1282 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1284 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

1285 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1287 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

1288 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1290 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

1291 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1293 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

1294 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1296 
	#DWT_CTRL_CYCDISS_Pos
 23U

	)

1297 
	#DWT_CTRL_CYCDISS_Msk
 (0x1UL << 
DWT_CTRL_CYCDISS_Pos
Ë

	)

1299 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

1300 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1302 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

1303 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1305 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

1306 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1308 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

1309 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1311 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

1312 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1314 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

1315 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1317 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

1318 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1320 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

1321 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1323 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

1324 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1326 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

1327 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1329 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

1330 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1332 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

1333 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1335 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

1336 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

1339 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

1340 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1343 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1344 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1347 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1348 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1351 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1352 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1355 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1356 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1359 
	#DWT_FUNCTION_ID_Pos
 27U

	)

1360 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

1362 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1363 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1365 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1366 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1368 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

1369 
	#DWT_FUNCTION_ACTION_Msk
 (0x1UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

1371 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

1372 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

1389 
__IM
 
uöt32_t
 
SSPSR
;

1390 
__IOM
 
uöt32_t
 
CSPSR
;

1391 
uöt32_t
 
RESERVED0
[2U];

1392 
__IOM
 
uöt32_t
 
ACPR
;

1393 
uöt32_t
 
RESERVED1
[55U];

1394 
__IOM
 
uöt32_t
 
SPPR
;

1395 
uöt32_t
 
RESERVED2
[131U];

1396 
__IM
 
uöt32_t
 
FFSR
;

1397 
__IOM
 
uöt32_t
 
FFCR
;

1398 
__IOM
 
uöt32_t
 
PSCR
;

1399 
uöt32_t
 
RESERVED3
[809U];

1400 
__OM
 
uöt32_t
 
LAR
;

1401 
__IM
 
uöt32_t
 
LSR
;

1402 
uöt32_t
 
RESERVED4
[4U];

1403 
__IM
 
uöt32_t
 
TYPE
;

1404 
__IM
 
uöt32_t
 
DEVTYPE
;

1405 } 
	tTPI_Ty≥
;

1408 
	#TPI_ACPR_SWOSCALER_Pos
 0U

	)

1409 
	#TPI_ACPR_SWOSCALER_Msk
 (0xFFFFUL )

	)

1412 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1413 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1416 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1417 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1419 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1420 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1422 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1423 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1425 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1426 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1429 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1430 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1432 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

1433 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

1435 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1436 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1439 
	#TPI_PSCR_PSCou¡_Pos
 0U

	)

1440 
	#TPI_PSCR_PSCou¡_Msk
 (0x1FUL )

	)

1443 
	#TPI_LSR_nTT_Pos
 1U

	)

1444 
	#TPI_LSR_nTT_Msk
 (0x1UL << 
TPI_LSR_nTT_Pos
Ë

	)

1446 
	#TPI_LSR_SLK_Pos
 1U

	)

1447 
	#TPI_LSR_SLK_Msk
 (0x1UL << 
TPI_LSR_SLK_Pos
Ë

	)

1449 
	#TPI_LSR_SLI_Pos
 0U

	)

1450 
	#TPI_LSR_SLI_Msk
 (0x1UL )

	)

1453 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1454 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1456 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1457 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1459 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1460 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1462 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

1463 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

1466 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1467 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1469 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1470 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1475 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1488 
__IM
 
uöt32_t
 
TYPE
;

1489 
__IOM
 
uöt32_t
 
CTRL
;

1490 
__IOM
 
uöt32_t
 
RNR
;

1491 
__IOM
 
uöt32_t
 
RBAR
;

1492 
__IOM
 
uöt32_t
 
RLAR
;

1493 
__IOM
 
uöt32_t
 
RBAR_A1
;

1494 
__IOM
 
uöt32_t
 
RLAR_A1
;

1495 
__IOM
 
uöt32_t
 
RBAR_A2
;

1496 
__IOM
 
uöt32_t
 
RLAR_A2
;

1497 
__IOM
 
uöt32_t
 
RBAR_A3
;

1498 
__IOM
 
uöt32_t
 
RLAR_A3
;

1499 
uöt32_t
 
RESERVED0
[1];

1501 
__IOM
 
uöt32_t
 
MAIR
[2];

1503 
__IOM
 
uöt32_t
 
MAIR0
;

1504 
__IOM
 
uöt32_t
 
MAIR1
;

1507 } 
	tMPU_Ty≥
;

1509 
	#MPU_TYPE_RALIASES
 4U

	)

1512 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1513 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1515 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1516 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1518 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1519 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1522 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1523 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1525 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1526 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1528 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1529 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1532 
	#MPU_RNR_REGION_Pos
 0U

	)

1533 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1536 
	#MPU_RBAR_BASE_Pos
 5U

	)

1537 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

1539 
	#MPU_RBAR_SH_Pos
 3U

	)

1540 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

1542 
	#MPU_RBAR_AP_Pos
 1U

	)

1543 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

1545 
	#MPU_RBAR_XN_Pos
 0U

	)

1546 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

1549 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

1550 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

1552 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

1553 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

1555 
	#MPU_RLAR_EN_Pos
 0U

	)

1556 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

1559 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

1560 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

1562 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

1563 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

1565 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

1566 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

1568 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

1569 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

1572 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

1573 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

1575 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

1576 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

1578 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

1579 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

1581 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

1582 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

1588 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1601 
__IOM
 
uöt32_t
 
CTRL
;

1602 
__IM
 
uöt32_t
 
TYPE
;

1603 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1604 
__IOM
 
uöt32_t
 
RNR
;

1605 
__IOM
 
uöt32_t
 
RBAR
;

1606 
__IOM
 
uöt32_t
 
RLAR
;

1608 
uöt32_t
 
RESERVED0
[3];

1610 
__IOM
 
uöt32_t
 
SFSR
;

1611 
__IOM
 
uöt32_t
 
SFAR
;

1612 } 
	tSAU_Ty≥
;

1615 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

1616 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

1618 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

1619 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

1622 
	#SAU_TYPE_SREGION_Pos
 0U

	)

1623 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

1625 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1627 
	#SAU_RNR_REGION_Pos
 0U

	)

1628 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

1631 
	#SAU_RBAR_BADDR_Pos
 5U

	)

1632 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

1635 
	#SAU_RLAR_LADDR_Pos
 5U

	)

1636 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

1638 
	#SAU_RLAR_NSC_Pos
 1U

	)

1639 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

1641 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

1642 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

1647 
	#SAU_SFSR_LSERR_Pos
 7U

	)

1648 
	#SAU_SFSR_LSERR_Msk
 (1UL << 
SAU_SFSR_LSERR_Pos
Ë

	)

1650 
	#SAU_SFSR_SFARVALID_Pos
 6U

	)

1651 
	#SAU_SFSR_SFARVALID_Msk
 (1UL << 
SAU_SFSR_SFARVALID_Pos
Ë

	)

1653 
	#SAU_SFSR_LSPERR_Pos
 5U

	)

1654 
	#SAU_SFSR_LSPERR_Msk
 (1UL << 
SAU_SFSR_LSPERR_Pos
Ë

	)

1656 
	#SAU_SFSR_INVTRAN_Pos
 4U

	)

1657 
	#SAU_SFSR_INVTRAN_Msk
 (1UL << 
SAU_SFSR_INVTRAN_Pos
Ë

	)

1659 
	#SAU_SFSR_AUVIOL_Pos
 3U

	)

1660 
	#SAU_SFSR_AUVIOL_Msk
 (1UL << 
SAU_SFSR_AUVIOL_Pos
Ë

	)

1662 
	#SAU_SFSR_INVER_Pos
 2U

	)

1663 
	#SAU_SFSR_INVER_Msk
 (1UL << 
SAU_SFSR_INVER_Pos
Ë

	)

1665 
	#SAU_SFSR_INVIS_Pos
 1U

	)

1666 
	#SAU_SFSR_INVIS_Msk
 (1UL << 
SAU_SFSR_INVIS_Pos
Ë

	)

1668 
	#SAU_SFSR_INVEP_Pos
 0U

	)

1669 
	#SAU_SFSR_INVEP_Msk
 (1UL )

	)

1687 
uöt32_t
 
RESERVED0
[1U];

1688 
__IOM
 
uöt32_t
 
FPCCR
;

1689 
__IOM
 
uöt32_t
 
FPCAR
;

1690 
__IOM
 
uöt32_t
 
FPDSCR
;

1691 
__IM
 
uöt32_t
 
MVFR0
;

1692 
__IM
 
uöt32_t
 
MVFR1
;

1693 } 
	tFPU_Ty≥
;

1696 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1697 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1699 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1700 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1702 
	#FPU_FPCCR_LSPENS_Pos
 29U

	)

1703 
	#FPU_FPCCR_LSPENS_Msk
 (1UL << 
FPU_FPCCR_LSPENS_Pos
Ë

	)

1705 
	#FPU_FPCCR_CLRONRET_Pos
 28U

	)

1706 
	#FPU_FPCCR_CLRONRET_Msk
 (1UL << 
FPU_FPCCR_CLRONRET_Pos
Ë

	)

1708 
	#FPU_FPCCR_CLRONRETS_Pos
 27U

	)

1709 
	#FPU_FPCCR_CLRONRETS_Msk
 (1UL << 
FPU_FPCCR_CLRONRETS_Pos
Ë

	)

1711 
	#FPU_FPCCR_TS_Pos
 26U

	)

1712 
	#FPU_FPCCR_TS_Msk
 (1UL << 
FPU_FPCCR_TS_Pos
Ë

	)

1714 
	#FPU_FPCCR_UFRDY_Pos
 10U

	)

1715 
	#FPU_FPCCR_UFRDY_Msk
 (1UL << 
FPU_FPCCR_UFRDY_Pos
Ë

	)

1717 
	#FPU_FPCCR_SPLIMVIOL_Pos
 9U

	)

1718 
	#FPU_FPCCR_SPLIMVIOL_Msk
 (1UL << 
FPU_FPCCR_SPLIMVIOL_Pos
Ë

	)

1720 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1721 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1723 
	#FPU_FPCCR_SFRDY_Pos
 7U

	)

1724 
	#FPU_FPCCR_SFRDY_Msk
 (1UL << 
FPU_FPCCR_SFRDY_Pos
Ë

	)

1726 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1727 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1729 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1730 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1732 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1733 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1735 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1736 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1738 
	#FPU_FPCCR_S_Pos
 2U

	)

1739 
	#FPU_FPCCR_S_Msk
 (1UL << 
FPU_FPCCR_S_Pos
Ë

	)

1741 
	#FPU_FPCCR_USER_Pos
 1U

	)

1742 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1744 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1745 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1748 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1749 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1752 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1753 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1755 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1756 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1758 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1759 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1761 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1762 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1765 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1766 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1768 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1769 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1771 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1772 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1774 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1775 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1777 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1778 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1780 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1781 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1783 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1784 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1786 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1787 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1790 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1791 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1793 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1794 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1796 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1797 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1799 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1800 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1817 
__IOM
 
uöt32_t
 
DHCSR
;

1818 
__OM
 
uöt32_t
 
DCRSR
;

1819 
__IOM
 
uöt32_t
 
DCRDR
;

1820 
__IOM
 
uöt32_t
 
DEMCR
;

1821 
uöt32_t
 
RESERVED4
[1U];

1822 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

1823 
__IOM
 
uöt32_t
 
DSCSR
;

1824 } 
	tC‹eDebug_Ty≥
;

1827 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1828 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1830 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1831 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1833 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1834 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1836 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1837 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1839 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1840 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1842 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1843 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1845 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1846 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1848 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1849 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1851 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1852 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1854 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1855 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1857 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1858 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1860 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1861 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1863 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1864 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1867 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1868 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1870 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1871 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1874 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1875 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1877 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1878 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1880 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1881 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1883 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1884 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1886 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1887 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1889 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1890 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1892 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1893 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1895 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1896 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1898 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1899 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1901 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1902 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1904 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1905 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1907 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1908 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1910 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1911 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1914 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1915 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1917 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1918 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1920 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1921 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1923 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1924 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

1927 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

1928 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

1930 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

1931 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

1933 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

1934 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

1952 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1960 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1973 
	#SCS_BASE
 (0xE000E000ULË

	)

1974 
	#ITM_BASE
 (0xE0000000ULË

	)

1975 
	#DWT_BASE
 (0xE0001000ULË

	)

1976 
	#TPI_BASE
 (0xE0040000ULË

	)

1977 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1978 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1979 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1980 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1982 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1983 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1984 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1985 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1986 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1987 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1988 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1989 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

1991 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1992 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1993 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1996 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1997 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

1998 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

2001 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

2002 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

2004 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2005 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

2006 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

2007 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

2008 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

2009 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

2011 
	#SCnSCB_NS
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE_NS
 )

	)

2012 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

2013 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

2014 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

2015 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

2017 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2018 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

2019 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

2022 
	#FPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0F30ULË

	)

2023 
	#FPU_NS
 ((
FPU_Ty≥
 *Ë
FPU_BASE_NS
 )

	)

2052 #ifde‡
CMSIS_NVIC_VIRTUAL


2053 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2054 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

2056 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2058 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

2059 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

2060 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

2061 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

2062 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

2063 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

2064 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

2065 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

2066 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

2067 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

2068 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

2069 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

2072 #ifde‡
CMSIS_VECTAB_VIRTUAL


2073 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2074 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

2076 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2078 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

2079 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

2082 
	#NVIC_USER_IRQ_OFFSET
 16

	)

2088 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

2091 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

2092 
	#EXC_RETURN_S
 (0x00000040ULË

	)

2093 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

2094 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

2095 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

2096 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

2097 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

2100 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

2101 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

2103 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

2116 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

2118 
uöt32_t
 
ªg_vÆue
;

2119 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2121 
ªg_vÆue
 = 
SCB
->
AIRCR
;

2122 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2123 
ªg_vÆue
 = (reg_value |

2124 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2125 (
Pri‹ôyGroupTmp
 << 8U) );

2126 
SCB
->
AIRCR
 = 
ªg_vÆue
;

2135 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

2137  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2147 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2149 i‡((
öt32_t
)(
IRQn
) >= 0)

2151 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2164 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2166 i‡((
öt32_t
)(
IRQn
) >= 0)

2168 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2183 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2185 i‡((
öt32_t
)(
IRQn
) >= 0)

2187 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2188 
__DSB
();

2189 
__ISB
();

2202 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2204 i‡((
öt32_t
)(
IRQn
) >= 0)

2206 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2221 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2223 i‡((
öt32_t
)(
IRQn
) >= 0)

2225 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2236 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2238 i‡((
öt32_t
)(
IRQn
) >= 0)

2240 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2253 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

2255 i‡((
öt32_t
)(
IRQn
) >= 0)

2257 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2266 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2275 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2277 i‡((
öt32_t
)(
IRQn
) >= 0)

2279 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2296 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2298 i‡((
öt32_t
)(
IRQn
) >= 0)

2300 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2301 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2318 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2320 i‡((
öt32_t
)(
IRQn
) >= 0)

2322 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2323 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2342 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2344 i‡((
öt32_t
)(
IRQn
) >= 0)

2346 
NVIC
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2350 
SCB
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2364 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

2367 i‡((
öt32_t
)(
IRQn
) >= 0)

2369 (((
uöt32_t
)
NVIC
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2373 (((
uöt32_t
)
SCB
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2389 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

2391 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2392 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2393 
uöt32_t
 
SubPri‹ôyBôs
;

2395 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2396 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2399 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

2400 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

2416 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

2418 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2419 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2420 
uöt32_t
 
SubPri‹ôyBôs
;

2422 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2423 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2425 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

2426 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

2439 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

2441 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2442 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

2454 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

2456 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2457  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

2465 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

2467 
__DSB
();

2469 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2470 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

2471 
SCB_AIRCR_SYSRESETREQ_Msk
 );

2472 
__DSB
();

2476 
__NOP
();

2480 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2490 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôyGroupög_NS
(
uöt32_t
 
Pri‹ôyGroup
)

2492 
uöt32_t
 
ªg_vÆue
;

2493 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2495 
ªg_vÆue
 = 
SCB_NS
->
AIRCR
;

2496 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2497 
ªg_vÆue
 = (reg_value |

2498 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2499 (
Pri‹ôyGroupTmp
 << 8U) );

2500 
SCB_NS
->
AIRCR
 = 
ªg_vÆue
;

2509 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôyGroupög_NS
()

2511  ((
uöt32_t
)((
SCB_NS
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2521 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2523 i‡((
öt32_t
)(
IRQn
) >= 0)

2525 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2538 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2540 i‡((
öt32_t
)(
IRQn
) >= 0)

2542 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2557 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2559 i‡((
öt32_t
)(
IRQn
) >= 0)

2561 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2574 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2576 i‡((
öt32_t
)(
IRQn
) >= 0)

2578 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2593 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2595 i‡((
öt32_t
)(
IRQn
) >= 0)

2597 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2608 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2610 i‡((
öt32_t
)(
IRQn
) >= 0)

2612 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2625 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

2627 i‡((
öt32_t
)(
IRQn
) >= 0)

2629 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2647 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2649 i‡((
öt32_t
)(
IRQn
) >= 0)

2651 
NVIC_NS
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2655 
SCB_NS
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2668 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

2671 i‡((
öt32_t
)(
IRQn
) >= 0)

2673 (((
uöt32_t
)
NVIC_NS
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2677 (((
uöt32_t
)
SCB_NS
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2686 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2688 
	~"mpu_¨mv8.h
"

2708 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

2710 
uöt32_t
 
mv‰0
;

2712 
mv‰0
 = 
FPU
->
MVFR0
;

2713 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x220U)

2717 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2740 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2746 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

2748 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

2757 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

2759 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

2777 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2790 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2792 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2797 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2798 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2799 
SysTick
->
VAL
 = 0UL;

2800 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2801 
SysTick_CTRL_TICKINT_Msk
 |

2802 
SysTick_CTRL_ENABLE_Msk
;

2806 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2819 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

2821 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2826 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2827 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2828 
SysTick_NS
->
VAL
 = 0UL;

2829 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2830 
SysTick_CTRL_TICKINT_Msk
 |

2831 
SysTick_CTRL_ENABLE_Msk
;

2850 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2851 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2862 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2864 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2865 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2867 
ITM
->
PORT
[0U].
u32
 == 0UL)

2869 
__NOP
();

2871 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2873  (
	gch
);

2883 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2885 
öt32_t
 
	gch
 = -1;

2887 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2889 
ch
 = 
ITM_RxBuf„r
;

2890 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2893  (
	gch
);

2903 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2906 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2921 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm0.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM0_H_GENERIC


32 
	#__CORE_CM0_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM0_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM0_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM0_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (0UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM0_H_DEPENDANT


127 
	#__CORE_CM0_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM0_REV


136 
	#__CM0_REV
 0x0000U

	)

140 #i‚de‡
__NVIC_PRIO_BITS


141 
	#__NVIC_PRIO_BITS
 2U

	)

145 #i‚de‡
__Víd‹_SysTickC⁄fig


146 
	#__Víd‹_SysTickC⁄fig
 0U

	)

159 #ifde‡
__˝lu•lus


160 
	#__I
 vﬁ©ûê

	)

162 
	#__I
 vﬁ©ûêc⁄°

	)

164 
	#__O
 vﬁ©ûê

	)

165 
	#__IO
 vﬁ©ûê

	)

168 
	#__IM
 vﬁ©ûêc⁄°

	)

169 
	#__OM
 vﬁ©ûê

	)

170 
	#__IOM
 vﬁ©ûê

	)

203 
uöt32_t
 
_ª£rved0
:28;

204 
uöt32_t
 
V
:1;

205 
uöt32_t
 
C
:1;

206 
uöt32_t
 
Z
:1;

207 
uöt32_t
 
N
:1;

208 } 
b
;

209 
uöt32_t
 
w
;

210 } 
	tAPSR_Ty≥
;

213 
	#APSR_N_Pos
 31U

	)

214 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

216 
	#APSR_Z_Pos
 30U

	)

217 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

219 
	#APSR_C_Pos
 29U

	)

220 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

222 
	#APSR_V_Pos
 28U

	)

223 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
uöt32_t
 
ISR
:9;

234 
uöt32_t
 
_ª£rved0
:23;

235 } 
b
;

236 
uöt32_t
 
w
;

237 } 
	tIPSR_Ty≥
;

240 
	#IPSR_ISR_Pos
 0U

	)

241 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

251 
uöt32_t
 
ISR
:9;

252 
uöt32_t
 
_ª£rved0
:15;

253 
uöt32_t
 
T
:1;

254 
uöt32_t
 
_ª£rved1
:3;

255 
uöt32_t
 
V
:1;

256 
uöt32_t
 
C
:1;

257 
uöt32_t
 
Z
:1;

258 
uöt32_t
 
N
:1;

259 } 
b
;

260 
uöt32_t
 
w
;

261 } 
	txPSR_Ty≥
;

264 
	#xPSR_N_Pos
 31U

	)

265 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

267 
	#xPSR_Z_Pos
 30U

	)

268 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

270 
	#xPSR_C_Pos
 29U

	)

271 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

273 
	#xPSR_V_Pos
 28U

	)

274 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

276 
	#xPSR_T_Pos
 24U

	)

277 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

279 
	#xPSR_ISR_Pos
 0U

	)

280 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

290 
uöt32_t
 
_ª£rved0
:1;

291 
uöt32_t
 
SPSEL
:1;

292 
uöt32_t
 
_ª£rved1
:30;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	tCONTROL_Ty≥
;

298 
	#CONTROL_SPSEL_Pos
 1U

	)

299 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

316 
__IOM
 
uöt32_t
 
ISER
[1U];

317 
uöt32_t
 
RESERVED0
[31U];

318 
__IOM
 
uöt32_t
 
ICER
[1U];

319 
uöt32_t
 
RSERVED1
[31U];

320 
__IOM
 
uöt32_t
 
ISPR
[1U];

321 
uöt32_t
 
RESERVED2
[31U];

322 
__IOM
 
uöt32_t
 
ICPR
[1U];

323 
uöt32_t
 
RESERVED3
[31U];

324 
uöt32_t
 
RESERVED4
[64U];

325 
__IOM
 
uöt32_t
 
IP
[8U];

326 } 
	tNVIC_Ty≥
;

343 
__IM
 
uöt32_t
 
CPUID
;

344 
__IOM
 
uöt32_t
 
ICSR
;

345 
uöt32_t
 
RESERVED0
;

346 
__IOM
 
uöt32_t
 
AIRCR
;

347 
__IOM
 
uöt32_t
 
SCR
;

348 
__IOM
 
uöt32_t
 
CCR
;

349 
uöt32_t
 
RESERVED1
;

350 
__IOM
 
uöt32_t
 
SHP
[2U];

351 
__IOM
 
uöt32_t
 
SHCSR
;

352 } 
	tSCB_Ty≥
;

355 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

356 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

358 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

359 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

361 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

362 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

364 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

365 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

367 
	#SCB_CPUID_REVISION_Pos
 0U

	)

368 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

371 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

372 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

374 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

375 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

377 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

378 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

381 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

384 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

386 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

387 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

389 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

390 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

392 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

393 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

395 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

396 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

399 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

400 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

402 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

403 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

405 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

406 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

408 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

409 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

412 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

415 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

416 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

418 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

419 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

421 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

422 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

425 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

426 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

428 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

429 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

432 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

433 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

450 
__IOM
 
uöt32_t
 
CTRL
;

451 
__IOM
 
uöt32_t
 
LOAD
;

452 
__IOM
 
uöt32_t
 
VAL
;

453 
__IM
 
uöt32_t
 
CALIB
;

454 } 
	tSysTick_Ty≥
;

457 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

458 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

460 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

461 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

463 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

464 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

466 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

467 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

470 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

471 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

474 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

475 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

478 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

479 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

481 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

482 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

484 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

485 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

513 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

521 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

534 
	#SCS_BASE
 (0xE000E000ULË

	)

535 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

536 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

537 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

539 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

540 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

541 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

569 #ifde‡
CMSIS_NVIC_VIRTUAL


570 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


571 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

573 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


575 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

576 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

577 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

578 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

579 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

580 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

581 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

582 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

584 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

585 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

586 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

589 #ifde‡
CMSIS_VECTAB_VIRTUAL


590 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


591 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

593 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


595 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

596 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

599 
	#NVIC_USER_IRQ_OFFSET
 16

	)

603 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

604 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

605 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

610 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

611 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

612 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

614 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

615 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

623 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

625 i‡((
öt32_t
)(
IRQn
) >= 0)

627 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

640 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

642 i‡((
öt32_t
)(
IRQn
) >= 0)

644 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

659 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

661 i‡((
öt32_t
)(
IRQn
) >= 0)

663 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

664 
__DSB
();

665 
__ISB
();

678 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

680 i‡((
öt32_t
)(
IRQn
) >= 0)

682 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

697 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

699 i‡((
öt32_t
)(
IRQn
) >= 0)

701 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

712 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

714 i‡((
öt32_t
)(
IRQn
) >= 0)

716 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

730 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

732 i‡((
öt32_t
)(
IRQn
) >= 0)

734 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

735 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

739 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

740 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

754 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

757 i‡((
öt32_t
)(
IRQn
) >= 0)

759 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

763 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

779 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

781 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

782 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

783 
uöt32_t
 
SubPri‹ôyBôs
;

785 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

786 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

789 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

790 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

806 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

808 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

809 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

810 
uöt32_t
 
SubPri‹ôyBôs
;

812 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

813 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

815 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

816 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

830 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

832 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

833 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

845 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

847 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

848  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

856 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

858 
__DSB
();

860 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

861 
SCB_AIRCR_SYSRESETREQ_Msk
);

862 
__DSB
();

866 
__NOP
();

889 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

907 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

920 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

922 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

927 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

928 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

929 
SysTick
->
VAL
 = 0UL;

930 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

931 
SysTick_CTRL_TICKINT_Msk
 |

932 
SysTick_CTRL_ENABLE_Msk
;

943 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm0plus.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM0PLUS_H_GENERIC


32 
	#__CORE_CM0PLUS_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM0PLUS_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM0PLUS_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM0PLUS_CMSIS_VERSION
 ((
__CM0PLUS_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM0PLUS_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (0UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM0PLUS_H_DEPENDANT


127 
	#__CORE_CM0PLUS_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM0PLUS_REV


136 
	#__CM0PLUS_REV
 0x0000U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__VTOR_PRESENT


146 
	#__VTOR_PRESENT
 0U

	)

150 #i‚de‡
__NVIC_PRIO_BITS


151 
	#__NVIC_PRIO_BITS
 2U

	)

155 #i‚de‡
__Víd‹_SysTickC⁄fig


156 
	#__Víd‹_SysTickC⁄fig
 0U

	)

169 #ifde‡
__˝lu•lus


170 
	#__I
 vﬁ©ûê

	)

172 
	#__I
 vﬁ©ûêc⁄°

	)

174 
	#__O
 vﬁ©ûê

	)

175 
	#__IO
 vﬁ©ûê

	)

178 
	#__IM
 vﬁ©ûêc⁄°

	)

179 
	#__OM
 vﬁ©ûê

	)

180 
	#__IOM
 vﬁ©ûê

	)

214 
uöt32_t
 
_ª£rved0
:28;

215 
uöt32_t
 
V
:1;

216 
uöt32_t
 
C
:1;

217 
uöt32_t
 
Z
:1;

218 
uöt32_t
 
N
:1;

219 } 
b
;

220 
uöt32_t
 
w
;

221 } 
	tAPSR_Ty≥
;

224 
	#APSR_N_Pos
 31U

	)

225 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

227 
	#APSR_Z_Pos
 30U

	)

228 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

230 
	#APSR_C_Pos
 29U

	)

231 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

233 
	#APSR_V_Pos
 28U

	)

234 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

244 
uöt32_t
 
ISR
:9;

245 
uöt32_t
 
_ª£rved0
:23;

246 } 
b
;

247 
uöt32_t
 
w
;

248 } 
	tIPSR_Ty≥
;

251 
	#IPSR_ISR_Pos
 0U

	)

252 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:15;

264 
uöt32_t
 
T
:1;

265 
uöt32_t
 
_ª£rved1
:3;

266 
uöt32_t
 
V
:1;

267 
uöt32_t
 
C
:1;

268 
uöt32_t
 
Z
:1;

269 
uöt32_t
 
N
:1;

270 } 
b
;

271 
uöt32_t
 
w
;

272 } 
	txPSR_Ty≥
;

275 
	#xPSR_N_Pos
 31U

	)

276 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

278 
	#xPSR_Z_Pos
 30U

	)

279 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

281 
	#xPSR_C_Pos
 29U

	)

282 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

284 
	#xPSR_V_Pos
 28U

	)

285 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

287 
	#xPSR_T_Pos
 24U

	)

288 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

290 
	#xPSR_ISR_Pos
 0U

	)

291 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

301 
uöt32_t
 
nPRIV
:1;

302 
uöt32_t
 
SPSEL
:1;

303 
uöt32_t
 
_ª£rved1
:30;

304 } 
b
;

305 
uöt32_t
 
w
;

306 } 
	tCONTROL_Ty≥
;

309 
	#CONTROL_SPSEL_Pos
 1U

	)

310 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

312 
	#CONTROL_nPRIV_Pos
 0U

	)

313 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

330 
__IOM
 
uöt32_t
 
ISER
[1U];

331 
uöt32_t
 
RESERVED0
[31U];

332 
__IOM
 
uöt32_t
 
ICER
[1U];

333 
uöt32_t
 
RSERVED1
[31U];

334 
__IOM
 
uöt32_t
 
ISPR
[1U];

335 
uöt32_t
 
RESERVED2
[31U];

336 
__IOM
 
uöt32_t
 
ICPR
[1U];

337 
uöt32_t
 
RESERVED3
[31U];

338 
uöt32_t
 
RESERVED4
[64U];

339 
__IOM
 
uöt32_t
 
IP
[8U];

340 } 
	tNVIC_Ty≥
;

357 
__IM
 
uöt32_t
 
CPUID
;

358 
__IOM
 
uöt32_t
 
ICSR
;

359 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

360 
__IOM
 
uöt32_t
 
VTOR
;

362 
uöt32_t
 
RESERVED0
;

364 
__IOM
 
uöt32_t
 
AIRCR
;

365 
__IOM
 
uöt32_t
 
SCR
;

366 
__IOM
 
uöt32_t
 
CCR
;

367 
uöt32_t
 
RESERVED1
;

368 
__IOM
 
uöt32_t
 
SHP
[2U];

369 
__IOM
 
uöt32_t
 
SHCSR
;

370 } 
	tSCB_Ty≥
;

373 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

374 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

376 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

377 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

379 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

380 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

382 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

383 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

385 
	#SCB_CPUID_REVISION_Pos
 0U

	)

386 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

389 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

390 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

392 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

393 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

395 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

396 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

398 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

399 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

401 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

402 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

404 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

405 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

407 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

408 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

410 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

411 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

413 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

414 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

416 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

418 
	#SCB_VTOR_TBLOFF_Pos
 8U

	)

419 
	#SCB_VTOR_TBLOFF_Msk
 (0xFFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

423 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

424 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

426 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

427 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

429 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

430 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

432 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

433 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

435 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

436 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

439 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

440 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

442 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

443 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

445 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

446 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

449 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

450 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

452 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

453 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

457 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

474 
__IOM
 
uöt32_t
 
CTRL
;

475 
__IOM
 
uöt32_t
 
LOAD
;

476 
__IOM
 
uöt32_t
 
VAL
;

477 
__IM
 
uöt32_t
 
CALIB
;

478 } 
	tSysTick_Ty≥
;

481 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

482 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

484 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

485 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

487 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

488 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

490 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

491 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

494 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

495 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

498 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

499 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

502 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

503 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

505 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

506 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

508 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

509 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

513 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

526 
__IM
 
uöt32_t
 
TYPE
;

527 
__IOM
 
uöt32_t
 
CTRL
;

528 
__IOM
 
uöt32_t
 
RNR
;

529 
__IOM
 
uöt32_t
 
RBAR
;

530 
__IOM
 
uöt32_t
 
RASR
;

531 } 
	tMPU_Ty≥
;

533 
	#MPU_TYPE_RALIASES
 1U

	)

536 
	#MPU_TYPE_IREGION_Pos
 16U

	)

537 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

539 
	#MPU_TYPE_DREGION_Pos
 8U

	)

540 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

542 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

543 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

546 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

547 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

549 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

550 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

552 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

553 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

556 
	#MPU_RNR_REGION_Pos
 0U

	)

557 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

560 
	#MPU_RBAR_ADDR_Pos
 8U

	)

561 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

563 
	#MPU_RBAR_VALID_Pos
 4U

	)

564 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

566 
	#MPU_RBAR_REGION_Pos
 0U

	)

567 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

570 
	#MPU_RASR_ATTRS_Pos
 16U

	)

571 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

573 
	#MPU_RASR_XN_Pos
 28U

	)

574 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

576 
	#MPU_RASR_AP_Pos
 24U

	)

577 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

579 
	#MPU_RASR_TEX_Pos
 19U

	)

580 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

582 
	#MPU_RASR_S_Pos
 18U

	)

583 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

585 
	#MPU_RASR_C_Pos
 17U

	)

586 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

588 
	#MPU_RASR_B_Pos
 16U

	)

589 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

591 
	#MPU_RASR_SRD_Pos
 8U

	)

592 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

594 
	#MPU_RASR_SIZE_Pos
 1U

	)

595 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

597 
	#MPU_RASR_ENABLE_Pos
 0U

	)

598 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

627 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

635 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

648 
	#SCS_BASE
 (0xE000E000ULË

	)

649 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

650 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

651 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

653 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

654 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

655 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

657 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

658 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

659 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

687 #ifde‡
CMSIS_NVIC_VIRTUAL


688 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


689 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

691 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


693 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

694 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

695 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

696 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

697 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

698 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

699 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

700 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

702 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

703 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

704 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

707 #ifde‡
CMSIS_VECTAB_VIRTUAL


708 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


709 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

711 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


713 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

714 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

717 
	#NVIC_USER_IRQ_OFFSET
 16

	)

721 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

722 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

723 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

728 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

729 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

730 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

732 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

733 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

741 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

743 i‡((
öt32_t
)(
IRQn
) >= 0)

745 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

758 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

760 i‡((
öt32_t
)(
IRQn
) >= 0)

762 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

777 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

779 i‡((
öt32_t
)(
IRQn
) >= 0)

781 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

782 
__DSB
();

783 
__ISB
();

796 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

798 i‡((
öt32_t
)(
IRQn
) >= 0)

800 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

815 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

817 i‡((
öt32_t
)(
IRQn
) >= 0)

819 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

830 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

832 i‡((
öt32_t
)(
IRQn
) >= 0)

834 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

848 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

850 i‡((
öt32_t
)(
IRQn
) >= 0)

852 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

853 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

857 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

858 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

872 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

875 i‡((
öt32_t
)(
IRQn
) >= 0)

877 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

881 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

897 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

899 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

900 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

901 
uöt32_t
 
SubPri‹ôyBôs
;

903 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

904 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

907 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

908 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

924 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

926 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

927 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

928 
uöt32_t
 
SubPri‹ôyBôs
;

930 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

931 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

933 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

934 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

948 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

950 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

951 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

953 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

955 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

967 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

969 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

970 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

972 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

974  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

983 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

985 
__DSB
();

987 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

988 
SCB_AIRCR_SYSRESETREQ_Msk
);

989 
__DSB
();

993 
__NOP
();

1001 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1003 
	~"mpu_¨mv7.h
"

1023 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1041 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1054 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1056 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1061 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1062 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1063 
SysTick
->
VAL
 = 0UL;

1064 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1065 
SysTick_CTRL_TICKINT_Msk
 |

1066 
SysTick_CTRL_ENABLE_Msk
;

1077 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm1.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM1_H_GENERIC


32 
	#__CORE_CM1_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM1_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM1_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM1_CMSIS_VERSION
 ((
__CM1_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM1_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (1UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM1_H_DEPENDANT


127 
	#__CORE_CM1_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM1_REV


136 
	#__CM1_REV
 0x0100U

	)

140 #i‚de‡
__NVIC_PRIO_BITS


141 
	#__NVIC_PRIO_BITS
 2U

	)

145 #i‚de‡
__Víd‹_SysTickC⁄fig


146 
	#__Víd‹_SysTickC⁄fig
 0U

	)

159 #ifde‡
__˝lu•lus


160 
	#__I
 vﬁ©ûê

	)

162 
	#__I
 vﬁ©ûêc⁄°

	)

164 
	#__O
 vﬁ©ûê

	)

165 
	#__IO
 vﬁ©ûê

	)

168 
	#__IM
 vﬁ©ûêc⁄°

	)

169 
	#__OM
 vﬁ©ûê

	)

170 
	#__IOM
 vﬁ©ûê

	)

203 
uöt32_t
 
_ª£rved0
:28;

204 
uöt32_t
 
V
:1;

205 
uöt32_t
 
C
:1;

206 
uöt32_t
 
Z
:1;

207 
uöt32_t
 
N
:1;

208 } 
b
;

209 
uöt32_t
 
w
;

210 } 
	tAPSR_Ty≥
;

213 
	#APSR_N_Pos
 31U

	)

214 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

216 
	#APSR_Z_Pos
 30U

	)

217 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

219 
	#APSR_C_Pos
 29U

	)

220 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

222 
	#APSR_V_Pos
 28U

	)

223 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
uöt32_t
 
ISR
:9;

234 
uöt32_t
 
_ª£rved0
:23;

235 } 
b
;

236 
uöt32_t
 
w
;

237 } 
	tIPSR_Ty≥
;

240 
	#IPSR_ISR_Pos
 0U

	)

241 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

251 
uöt32_t
 
ISR
:9;

252 
uöt32_t
 
_ª£rved0
:15;

253 
uöt32_t
 
T
:1;

254 
uöt32_t
 
_ª£rved1
:3;

255 
uöt32_t
 
V
:1;

256 
uöt32_t
 
C
:1;

257 
uöt32_t
 
Z
:1;

258 
uöt32_t
 
N
:1;

259 } 
b
;

260 
uöt32_t
 
w
;

261 } 
	txPSR_Ty≥
;

264 
	#xPSR_N_Pos
 31U

	)

265 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

267 
	#xPSR_Z_Pos
 30U

	)

268 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

270 
	#xPSR_C_Pos
 29U

	)

271 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

273 
	#xPSR_V_Pos
 28U

	)

274 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

276 
	#xPSR_T_Pos
 24U

	)

277 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

279 
	#xPSR_ISR_Pos
 0U

	)

280 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

290 
uöt32_t
 
_ª£rved0
:1;

291 
uöt32_t
 
SPSEL
:1;

292 
uöt32_t
 
_ª£rved1
:30;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	tCONTROL_Ty≥
;

298 
	#CONTROL_SPSEL_Pos
 1U

	)

299 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

316 
__IOM
 
uöt32_t
 
ISER
[1U];

317 
uöt32_t
 
RESERVED0
[31U];

318 
__IOM
 
uöt32_t
 
ICER
[1U];

319 
uöt32_t
 
RSERVED1
[31U];

320 
__IOM
 
uöt32_t
 
ISPR
[1U];

321 
uöt32_t
 
RESERVED2
[31U];

322 
__IOM
 
uöt32_t
 
ICPR
[1U];

323 
uöt32_t
 
RESERVED3
[31U];

324 
uöt32_t
 
RESERVED4
[64U];

325 
__IOM
 
uöt32_t
 
IP
[8U];

326 } 
	tNVIC_Ty≥
;

343 
__IM
 
uöt32_t
 
CPUID
;

344 
__IOM
 
uöt32_t
 
ICSR
;

345 
uöt32_t
 
RESERVED0
;

346 
__IOM
 
uöt32_t
 
AIRCR
;

347 
__IOM
 
uöt32_t
 
SCR
;

348 
__IOM
 
uöt32_t
 
CCR
;

349 
uöt32_t
 
RESERVED1
;

350 
__IOM
 
uöt32_t
 
SHP
[2U];

351 
__IOM
 
uöt32_t
 
SHCSR
;

352 } 
	tSCB_Ty≥
;

355 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

356 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

358 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

359 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

361 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

362 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

364 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

365 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

367 
	#SCB_CPUID_REVISION_Pos
 0U

	)

368 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

371 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

372 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

374 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

375 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

377 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

378 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

381 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

384 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

386 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

387 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

389 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

390 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

392 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

393 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

395 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

396 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

399 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

400 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

402 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

403 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

405 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

406 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

408 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

409 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

412 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

415 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

416 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

418 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

419 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

421 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

422 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

425 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

426 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

428 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

429 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

432 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

433 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

450 
uöt32_t
 
RESERVED0
[2U];

451 
__IOM
 
uöt32_t
 
ACTLR
;

452 } 
	tSCnSCB_Ty≥
;

455 
	#SCnSCB_ACTLR_ITCMUAEN_Pos
 4U

	)

456 
	#SCnSCB_ACTLR_ITCMUAEN_Msk
 (1UL << 
SCnSCB_ACTLR_ITCMUAEN_Pos
Ë

	)

458 
	#SCnSCB_ACTLR_ITCMLAEN_Pos
 3U

	)

459 
	#SCnSCB_ACTLR_ITCMLAEN_Msk
 (1UL << 
SCnSCB_ACTLR_ITCMLAEN_Pos
Ë

	)

476 
__IOM
 
uöt32_t
 
CTRL
;

477 
__IOM
 
uöt32_t
 
LOAD
;

478 
__IOM
 
uöt32_t
 
VAL
;

479 
__IM
 
uöt32_t
 
CALIB
;

480 } 
	tSysTick_Ty≥
;

483 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

484 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

486 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

487 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

489 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

490 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

492 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

493 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

496 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

497 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

500 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

501 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

504 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

505 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

507 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

508 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

510 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

511 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

539 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

547 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

560 
	#SCS_BASE
 (0xE000E000ULË

	)

561 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

562 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

563 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

565 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

566 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

567 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

568 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

596 #ifde‡
CMSIS_NVIC_VIRTUAL


597 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


598 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

600 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


602 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

603 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

604 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

605 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

606 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

607 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

608 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

609 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

611 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

612 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

613 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

616 #ifde‡
CMSIS_VECTAB_VIRTUAL


617 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


618 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

620 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


622 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

623 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

626 
	#NVIC_USER_IRQ_OFFSET
 16

	)

630 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

631 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

632 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

637 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

638 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

639 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

641 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

642 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

650 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

652 i‡((
öt32_t
)(
IRQn
) >= 0)

654 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

667 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

669 i‡((
öt32_t
)(
IRQn
) >= 0)

671 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

686 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

688 i‡((
öt32_t
)(
IRQn
) >= 0)

690 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

691 
__DSB
();

692 
__ISB
();

705 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

707 i‡((
öt32_t
)(
IRQn
) >= 0)

709 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

724 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

726 i‡((
öt32_t
)(
IRQn
) >= 0)

728 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

739 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

741 i‡((
öt32_t
)(
IRQn
) >= 0)

743 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

757 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

759 i‡((
öt32_t
)(
IRQn
) >= 0)

761 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

762 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

766 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

767 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

781 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

784 i‡((
öt32_t
)(
IRQn
) >= 0)

786 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

790 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

806 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

808 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

809 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

810 
uöt32_t
 
SubPri‹ôyBôs
;

812 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

813 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

816 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

817 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

833 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

835 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

836 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

837 
uöt32_t
 
SubPri‹ôyBôs
;

839 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

840 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

842 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

843 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

857 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

859 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

860 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

872 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

874 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

875  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

883 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

885 
__DSB
();

887 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

888 
SCB_AIRCR_SYSRESETREQ_Msk
);

889 
__DSB
();

893 
__NOP
();

916 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

934 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

947 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

949 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

954 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

955 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

956 
SysTick
->
VAL
 = 0UL;

957 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

958 
SysTick_CTRL_TICKINT_Msk
 |

959 
SysTick_CTRL_ENABLE_Msk
;

970 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm23.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM23_H_GENERIC


32 
	#__CORE_CM23_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM23_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM23_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM23_CMSIS_VERSION
 ((
__CM23_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM23_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (23UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM23_H_DEPENDANT


127 
	#__CORE_CM23_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM23_REV


136 
	#__CM23_REV
 0x0000U

	)

140 #i‚de‡
__FPU_PRESENT


141 
	#__FPU_PRESENT
 0U

	)

145 #i‚de‡
__MPU_PRESENT


146 
	#__MPU_PRESENT
 0U

	)

150 #i‚de‡
__SAUREGION_PRESENT


151 
	#__SAUREGION_PRESENT
 0U

	)

155 #i‚de‡
__VTOR_PRESENT


156 
	#__VTOR_PRESENT
 0U

	)

160 #i‚de‡
__NVIC_PRIO_BITS


161 
	#__NVIC_PRIO_BITS
 2U

	)

165 #i‚de‡
__Víd‹_SysTickC⁄fig


166 
	#__Víd‹_SysTickC⁄fig
 0U

	)

170 #i‚de‡
__ETM_PRESENT


171 
	#__ETM_PRESENT
 0U

	)

175 #i‚de‡
__MTB_PRESENT


176 
	#__MTB_PRESENT
 0U

	)

190 #ifde‡
__˝lu•lus


191 
	#__I
 vﬁ©ûê

	)

193 
	#__I
 vﬁ©ûêc⁄°

	)

195 
	#__O
 vﬁ©ûê

	)

196 
	#__IO
 vﬁ©ûê

	)

199 
	#__IM
 vﬁ©ûêc⁄°

	)

200 
	#__OM
 vﬁ©ûê

	)

201 
	#__IOM
 vﬁ©ûê

	)

237 
uöt32_t
 
_ª£rved0
:28;

238 
uöt32_t
 
V
:1;

239 
uöt32_t
 
C
:1;

240 
uöt32_t
 
Z
:1;

241 
uöt32_t
 
N
:1;

242 } 
b
;

243 
uöt32_t
 
w
;

244 } 
	tAPSR_Ty≥
;

247 
	#APSR_N_Pos
 31U

	)

248 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

250 
	#APSR_Z_Pos
 30U

	)

251 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

253 
	#APSR_C_Pos
 29U

	)

254 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

256 
	#APSR_V_Pos
 28U

	)

257 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

267 
uöt32_t
 
ISR
:9;

268 
uöt32_t
 
_ª£rved0
:23;

269 } 
b
;

270 
uöt32_t
 
w
;

271 } 
	tIPSR_Ty≥
;

274 
	#IPSR_ISR_Pos
 0U

	)

275 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

285 
uöt32_t
 
ISR
:9;

286 
uöt32_t
 
_ª£rved0
:15;

287 
uöt32_t
 
T
:1;

288 
uöt32_t
 
_ª£rved1
:3;

289 
uöt32_t
 
V
:1;

290 
uöt32_t
 
C
:1;

291 
uöt32_t
 
Z
:1;

292 
uöt32_t
 
N
:1;

293 } 
b
;

294 
uöt32_t
 
w
;

295 } 
	txPSR_Ty≥
;

298 
	#xPSR_N_Pos
 31U

	)

299 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

301 
	#xPSR_Z_Pos
 30U

	)

302 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

304 
	#xPSR_C_Pos
 29U

	)

305 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

307 
	#xPSR_V_Pos
 28U

	)

308 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

310 
	#xPSR_T_Pos
 24U

	)

311 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

313 
	#xPSR_ISR_Pos
 0U

	)

314 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

324 
uöt32_t
 
nPRIV
:1;

325 
uöt32_t
 
SPSEL
:1;

326 
uöt32_t
 
_ª£rved1
:30;

327 } 
b
;

328 
uöt32_t
 
w
;

329 } 
	tCONTROL_Ty≥
;

332 
	#CONTROL_SPSEL_Pos
 1U

	)

333 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

335 
	#CONTROL_nPRIV_Pos
 0U

	)

336 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

353 
__IOM
 
uöt32_t
 
ISER
[16U];

354 
uöt32_t
 
RESERVED0
[16U];

355 
__IOM
 
uöt32_t
 
ICER
[16U];

356 
uöt32_t
 
RSERVED1
[16U];

357 
__IOM
 
uöt32_t
 
ISPR
[16U];

358 
uöt32_t
 
RESERVED2
[16U];

359 
__IOM
 
uöt32_t
 
ICPR
[16U];

360 
uöt32_t
 
RESERVED3
[16U];

361 
__IOM
 
uöt32_t
 
IABR
[16U];

362 
uöt32_t
 
RESERVED4
[16U];

363 
__IOM
 
uöt32_t
 
ITNS
[16U];

364 
uöt32_t
 
RESERVED5
[16U];

365 
__IOM
 
uöt32_t
 
IPR
[124U];

366 } 
	tNVIC_Ty≥
;

383 
__IM
 
uöt32_t
 
CPUID
;

384 
__IOM
 
uöt32_t
 
ICSR
;

385 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

386 
__IOM
 
uöt32_t
 
VTOR
;

388 
uöt32_t
 
RESERVED0
;

390 
__IOM
 
uöt32_t
 
AIRCR
;

391 
__IOM
 
uöt32_t
 
SCR
;

392 
__IOM
 
uöt32_t
 
CCR
;

393 
uöt32_t
 
RESERVED1
;

394 
__IOM
 
uöt32_t
 
SHPR
[2U];

395 
__IOM
 
uöt32_t
 
SHCSR
;

396 } 
	tSCB_Ty≥
;

399 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

400 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

402 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

403 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

405 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

406 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

408 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

409 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

411 
	#SCB_CPUID_REVISION_Pos
 0U

	)

412 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

415 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

416 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

418 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

419 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

421 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

422 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

424 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

425 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

427 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

428 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

430 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

431 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

433 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

434 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

436 
	#SCB_ICSR_STTNS_Pos
 24U

	)

437 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

439 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

440 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

442 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

443 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

445 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

446 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

448 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

449 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

451 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

452 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

454 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

456 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

457 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

461 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

462 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

464 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

465 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

467 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

468 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

470 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

471 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

473 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

474 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

476 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

477 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

479 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

480 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

482 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

483 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

486 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

487 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

489 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

490 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

492 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

493 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

495 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

496 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

499 
	#SCB_CCR_BP_Pos
 18U

	)

500 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

502 
	#SCB_CCR_IC_Pos
 17U

	)

503 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

505 
	#SCB_CCR_DC_Pos
 16U

	)

506 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

508 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

509 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

511 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

512 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

514 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

515 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

517 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

518 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

520 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

521 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

524 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

525 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

527 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

528 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

530 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

531 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

533 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

534 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

536 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

537 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

539 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

540 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

542 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

543 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

560 
__IOM
 
uöt32_t
 
CTRL
;

561 
__IOM
 
uöt32_t
 
LOAD
;

562 
__IOM
 
uöt32_t
 
VAL
;

563 
__IM
 
uöt32_t
 
CALIB
;

564 } 
	tSysTick_Ty≥
;

567 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

568 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

570 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

571 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

573 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

574 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

576 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

577 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

580 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

581 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

584 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

585 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

588 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

589 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

591 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

592 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

594 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

595 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

612 
__IOM
 
uöt32_t
 
CTRL
;

613 
uöt32_t
 
RESERVED0
[6U];

614 
__IM
 
uöt32_t
 
PCSR
;

615 
__IOM
 
uöt32_t
 
COMP0
;

616 
uöt32_t
 
RESERVED1
[1U];

617 
__IOM
 
uöt32_t
 
FUNCTION0
;

618 
uöt32_t
 
RESERVED2
[1U];

619 
__IOM
 
uöt32_t
 
COMP1
;

620 
uöt32_t
 
RESERVED3
[1U];

621 
__IOM
 
uöt32_t
 
FUNCTION1
;

622 
uöt32_t
 
RESERVED4
[1U];

623 
__IOM
 
uöt32_t
 
COMP2
;

624 
uöt32_t
 
RESERVED5
[1U];

625 
__IOM
 
uöt32_t
 
FUNCTION2
;

626 
uöt32_t
 
RESERVED6
[1U];

627 
__IOM
 
uöt32_t
 
COMP3
;

628 
uöt32_t
 
RESERVED7
[1U];

629 
__IOM
 
uöt32_t
 
FUNCTION3
;

630 
uöt32_t
 
RESERVED8
[1U];

631 
__IOM
 
uöt32_t
 
COMP4
;

632 
uöt32_t
 
RESERVED9
[1U];

633 
__IOM
 
uöt32_t
 
FUNCTION4
;

634 
uöt32_t
 
RESERVED10
[1U];

635 
__IOM
 
uöt32_t
 
COMP5
;

636 
uöt32_t
 
RESERVED11
[1U];

637 
__IOM
 
uöt32_t
 
FUNCTION5
;

638 
uöt32_t
 
RESERVED12
[1U];

639 
__IOM
 
uöt32_t
 
COMP6
;

640 
uöt32_t
 
RESERVED13
[1U];

641 
__IOM
 
uöt32_t
 
FUNCTION6
;

642 
uöt32_t
 
RESERVED14
[1U];

643 
__IOM
 
uöt32_t
 
COMP7
;

644 
uöt32_t
 
RESERVED15
[1U];

645 
__IOM
 
uöt32_t
 
FUNCTION7
;

646 
uöt32_t
 
RESERVED16
[1U];

647 
__IOM
 
uöt32_t
 
COMP8
;

648 
uöt32_t
 
RESERVED17
[1U];

649 
__IOM
 
uöt32_t
 
FUNCTION8
;

650 
uöt32_t
 
RESERVED18
[1U];

651 
__IOM
 
uöt32_t
 
COMP9
;

652 
uöt32_t
 
RESERVED19
[1U];

653 
__IOM
 
uöt32_t
 
FUNCTION9
;

654 
uöt32_t
 
RESERVED20
[1U];

655 
__IOM
 
uöt32_t
 
COMP10
;

656 
uöt32_t
 
RESERVED21
[1U];

657 
__IOM
 
uöt32_t
 
FUNCTION10
;

658 
uöt32_t
 
RESERVED22
[1U];

659 
__IOM
 
uöt32_t
 
COMP11
;

660 
uöt32_t
 
RESERVED23
[1U];

661 
__IOM
 
uöt32_t
 
FUNCTION11
;

662 
uöt32_t
 
RESERVED24
[1U];

663 
__IOM
 
uöt32_t
 
COMP12
;

664 
uöt32_t
 
RESERVED25
[1U];

665 
__IOM
 
uöt32_t
 
FUNCTION12
;

666 
uöt32_t
 
RESERVED26
[1U];

667 
__IOM
 
uöt32_t
 
COMP13
;

668 
uöt32_t
 
RESERVED27
[1U];

669 
__IOM
 
uöt32_t
 
FUNCTION13
;

670 
uöt32_t
 
RESERVED28
[1U];

671 
__IOM
 
uöt32_t
 
COMP14
;

672 
uöt32_t
 
RESERVED29
[1U];

673 
__IOM
 
uöt32_t
 
FUNCTION14
;

674 
uöt32_t
 
RESERVED30
[1U];

675 
__IOM
 
uöt32_t
 
COMP15
;

676 
uöt32_t
 
RESERVED31
[1U];

677 
__IOM
 
uöt32_t
 
FUNCTION15
;

678 } 
	tDWT_Ty≥
;

681 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

682 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

684 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

685 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

687 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

688 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

690 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

691 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

693 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

694 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

697 
	#DWT_FUNCTION_ID_Pos
 27U

	)

698 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

700 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

701 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

703 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

704 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

706 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

707 
	#DWT_FUNCTION_ACTION_Msk
 (0x3UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

709 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

710 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

727 
__IM
 
uöt32_t
 
SSPSR
;

728 
__IOM
 
uöt32_t
 
CSPSR
;

729 
uöt32_t
 
RESERVED0
[2U];

730 
__IOM
 
uöt32_t
 
ACPR
;

731 
uöt32_t
 
RESERVED1
[55U];

732 
__IOM
 
uöt32_t
 
SPPR
;

733 
uöt32_t
 
RESERVED2
[131U];

734 
__IM
 
uöt32_t
 
FFSR
;

735 
__IOM
 
uöt32_t
 
FFCR
;

736 
__IOM
 
uöt32_t
 
PSCR
;

737 
uöt32_t
 
RESERVED3
[759U];

738 
__IM
 
uöt32_t
 
TRIGGER
;

739 
__IM
 
uöt32_t
 
ITFTTD0
;

740 
__IOM
 
uöt32_t
 
ITATBCTR2
;

741 
uöt32_t
 
RESERVED4
[1U];

742 
__IM
 
uöt32_t
 
ITATBCTR0
;

743 
__IM
 
uöt32_t
 
ITFTTD1
;

744 
__IOM
 
uöt32_t
 
ITCTRL
;

745 
uöt32_t
 
RESERVED5
[39U];

746 
__IOM
 
uöt32_t
 
CLAIMSET
;

747 
__IOM
 
uöt32_t
 
CLAIMCLR
;

748 
uöt32_t
 
RESERVED7
[8U];

749 
__IM
 
uöt32_t
 
DEVID
;

750 
__IM
 
uöt32_t
 
DEVTYPE
;

751 } 
	tTPI_Ty≥
;

754 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

755 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

758 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

759 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

762 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

763 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

765 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

766 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

768 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

769 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

771 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

772 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

775 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

776 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

778 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

779 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

781 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

782 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

785 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

786 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

789 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
 29U

	)

790 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
Ë

	)

792 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
 27U

	)

793 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
Ë

	)

795 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
 26U

	)

796 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
Ë

	)

798 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
 24U

	)

799 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
Ë

	)

801 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Pos
 16U

	)

802 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

804 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Pos
 8U

	)

805 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

807 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Pos
 0U

	)

808 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Msk
 (0xFFUL )

	)

811 
	#TPI_ITATBCTR2_AFVALID2S_Pos
 1U

	)

812 
	#TPI_ITATBCTR2_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID2S_Pos
Ë

	)

814 
	#TPI_ITATBCTR2_AFVALID1S_Pos
 1U

	)

815 
	#TPI_ITATBCTR2_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID1S_Pos
Ë

	)

817 
	#TPI_ITATBCTR2_ATREADY2S_Pos
 0U

	)

818 
	#TPI_ITATBCTR2_ATREADY2S_Msk
 (0x1UL )

	)

820 
	#TPI_ITATBCTR2_ATREADY1S_Pos
 0U

	)

821 
	#TPI_ITATBCTR2_ATREADY1S_Msk
 (0x1UL )

	)

824 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
 29U

	)

825 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
Ë

	)

827 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
 27U

	)

828 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
Ë

	)

830 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
 26U

	)

831 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
Ë

	)

833 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
 24U

	)

834 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
Ë

	)

836 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Pos
 16U

	)

837 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

839 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Pos
 8U

	)

840 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

842 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Pos
 0U

	)

843 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Msk
 (0xFFUL )

	)

846 
	#TPI_ITATBCTR0_AFVALID2S_Pos
 1U

	)

847 
	#TPI_ITATBCTR0_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID2S_Pos
Ë

	)

849 
	#TPI_ITATBCTR0_AFVALID1S_Pos
 1U

	)

850 
	#TPI_ITATBCTR0_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID1S_Pos
Ë

	)

852 
	#TPI_ITATBCTR0_ATREADY2S_Pos
 0U

	)

853 
	#TPI_ITATBCTR0_ATREADY2S_Msk
 (0x1UL )

	)

855 
	#TPI_ITATBCTR0_ATREADY1S_Pos
 0U

	)

856 
	#TPI_ITATBCTR0_ATREADY1S_Msk
 (0x1UL )

	)

859 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

860 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

863 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

864 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

866 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

867 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

869 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

870 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

872 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

873 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

875 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

876 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x3FUL )

	)

879 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

880 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

882 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

883 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

888 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

901 
__IM
 
uöt32_t
 
TYPE
;

902 
__IOM
 
uöt32_t
 
CTRL
;

903 
__IOM
 
uöt32_t
 
RNR
;

904 
__IOM
 
uöt32_t
 
RBAR
;

905 
__IOM
 
uöt32_t
 
RLAR
;

906 
uöt32_t
 
RESERVED0
[7U];

908 
__IOM
 
uöt32_t
 
MAIR
[2];

910 
__IOM
 
uöt32_t
 
MAIR0
;

911 
__IOM
 
uöt32_t
 
MAIR1
;

914 } 
	tMPU_Ty≥
;

916 
	#MPU_TYPE_RALIASES
 1U

	)

919 
	#MPU_TYPE_IREGION_Pos
 16U

	)

920 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

922 
	#MPU_TYPE_DREGION_Pos
 8U

	)

923 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

925 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

926 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

929 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

930 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

932 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

933 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

935 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

936 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

939 
	#MPU_RNR_REGION_Pos
 0U

	)

940 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

943 
	#MPU_RBAR_BASE_Pos
 5U

	)

944 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

946 
	#MPU_RBAR_SH_Pos
 3U

	)

947 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

949 
	#MPU_RBAR_AP_Pos
 1U

	)

950 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

952 
	#MPU_RBAR_XN_Pos
 0U

	)

953 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

956 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

957 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

959 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

960 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

962 
	#MPU_RLAR_EN_Pos
 0U

	)

963 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

966 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

967 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

969 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

970 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

972 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

973 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

975 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

976 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

979 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

980 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

982 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

983 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

985 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

986 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

988 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

989 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

995 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1008 
__IOM
 
uöt32_t
 
CTRL
;

1009 
__IM
 
uöt32_t
 
TYPE
;

1010 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1011 
__IOM
 
uöt32_t
 
RNR
;

1012 
__IOM
 
uöt32_t
 
RBAR
;

1013 
__IOM
 
uöt32_t
 
RLAR
;

1015 } 
	tSAU_Ty≥
;

1018 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

1019 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

1021 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

1022 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

1025 
	#SAU_TYPE_SREGION_Pos
 0U

	)

1026 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

1028 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1030 
	#SAU_RNR_REGION_Pos
 0U

	)

1031 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

1034 
	#SAU_RBAR_BADDR_Pos
 5U

	)

1035 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

1038 
	#SAU_RLAR_LADDR_Pos
 5U

	)

1039 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

1041 
	#SAU_RLAR_NSC_Pos
 1U

	)

1042 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

1044 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

1045 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

1065 
__IOM
 
uöt32_t
 
DHCSR
;

1066 
__OM
 
uöt32_t
 
DCRSR
;

1067 
__IOM
 
uöt32_t
 
DCRDR
;

1068 
__IOM
 
uöt32_t
 
DEMCR
;

1069 
uöt32_t
 
RESERVED4
[1U];

1070 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

1071 
__IOM
 
uöt32_t
 
DSCSR
;

1072 } 
	tC‹eDebug_Ty≥
;

1075 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1076 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1078 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1079 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1081 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1082 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1084 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1085 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1087 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1088 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1090 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1091 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1093 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1094 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1096 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1097 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1099 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1100 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1102 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1103 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1105 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1106 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1108 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1109 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1112 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1113 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1115 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1116 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1119 
	#C‹eDebug_DEMCR_DWTENA_Pos
 24U

	)

1120 
	#C‹eDebug_DEMCR_DWTENA_Msk
 (1UL << 
C‹eDebug_DEMCR_DWTENA_Pos
Ë

	)

1122 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1123 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1125 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1126 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1129 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1130 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1132 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1133 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1135 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1136 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1138 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1139 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

1142 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

1143 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

1145 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

1146 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

1148 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

1149 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

1167 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1175 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1188 
	#SCS_BASE
 (0xE000E000ULË

	)

1189 
	#DWT_BASE
 (0xE0001000ULË

	)

1190 
	#TPI_BASE
 (0xE0040000ULË

	)

1191 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1192 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1193 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1194 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1197 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1198 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1199 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1200 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1201 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1202 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

1204 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1205 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1206 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1209 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1210 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

1211 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

1214 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1215 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

1216 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

1217 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

1218 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

1219 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

1221 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

1222 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

1223 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

1224 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

1226 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1227 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

1228 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

1257 #ifde‡
CMSIS_NVIC_VIRTUAL


1258 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1259 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1261 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1265 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1266 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1267 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1268 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1269 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1270 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1271 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1272 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1273 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1274 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1277 #ifde‡
CMSIS_VECTAB_VIRTUAL


1278 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1279 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1281 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1283 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1284 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1287 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1293 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

1296 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

1297 
	#EXC_RETURN_S
 (0x00000040ULË

	)

1298 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

1299 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

1300 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

1301 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

1302 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

1305 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

1306 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

1308 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

1314 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

1315 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

1316 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

1318 
	#__NVIC_SëPri‹ôyGroupög
(
X
Ë()(X)

	)

1319 
	#__NVIC_GëPri‹ôyGroupög
(Ë(0U)

	)

1327 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1329 i‡((
öt32_t
)(
IRQn
) >= 0)

1331 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1344 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1346 i‡((
öt32_t
)(
IRQn
) >= 0)

1348 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1363 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1365 i‡((
öt32_t
)(
IRQn
) >= 0)

1367 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1368 
__DSB
();

1369 
__ISB
();

1382 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1384 i‡((
öt32_t
)(
IRQn
) >= 0)

1386 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1401 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1403 i‡((
öt32_t
)(
IRQn
) >= 0)

1405 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1416 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1418 i‡((
öt32_t
)(
IRQn
) >= 0)

1420 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1433 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1435 i‡((
öt32_t
)(
IRQn
) >= 0)

1437 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1446 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1455 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1457 i‡((
öt32_t
)(
IRQn
) >= 0)

1459 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1476 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1478 i‡((
öt32_t
)(
IRQn
) >= 0)

1480 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1481 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1498 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

1500 i‡((
öt32_t
)(
IRQn
) >= 0)

1502 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

1503 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1522 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1524 i‡((
öt32_t
)(
IRQn
) >= 0)

1526 
NVIC
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1527 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1531 
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1532 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1546 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) >= 0)

1551 ((
uöt32_t
)(((
NVIC
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1555 ((
uöt32_t
)(((
SCB
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1571 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1573 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1574 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1575 
uöt32_t
 
SubPri‹ôyBôs
;

1577 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1578 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1581 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1582 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1598 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1600 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1601 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1602 
uöt32_t
 
SubPri‹ôyBôs
;

1604 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1605 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1607 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1608 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1622 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1624 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1625 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1627 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1629 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1641 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1643 #i‡
deföed
 (
__VTOR_PRESENT
) && (__VTOR_PRESENT == 1U)

1644 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1646 
uöt32_t
 *
ve˘‹s
 = (uint32_t *)0x0U;

1648  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1656 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1658 
__DSB
();

1660 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1661 
SCB_AIRCR_SYSRESETREQ_Msk
);

1662 
__DSB
();

1666 
__NOP
();

1670 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1677 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1679 i‡((
öt32_t
)(
IRQn
) >= 0)

1681 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1694 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1696 i‡((
öt32_t
)(
IRQn
) >= 0)

1698 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1713 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1715 i‡((
öt32_t
)(
IRQn
) >= 0)

1717 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1730 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1732 i‡((
öt32_t
)(
IRQn
) >= 0)

1734 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1749 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1751 i‡((
öt32_t
)(
IRQn
) >= 0)

1753 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1764 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

1766 i‡((
öt32_t
)(
IRQn
) >= 0)

1768 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1781 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

1783 i‡((
öt32_t
)(
IRQn
) >= 0)

1785 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1803 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1805 i‡((
öt32_t
)(
IRQn
) >= 0)

1807 
NVIC_NS
->
IPR
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC_NS->IPR[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1808 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1812 
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB_NS->SHPR[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

1813 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

1826 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

1829 i‡((
öt32_t
)(
IRQn
) >= 0)

1831 ((
uöt32_t
)(((
NVIC_NS
->
IPR
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1835 ((
uöt32_t
)(((
SCB_NS
->
SHPR
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

1844 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1846 
	~"mpu_¨mv8.h
"

1866 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1884 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1890 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

1892 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

1901 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

1903 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

1921 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1934 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1936 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1941 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1942 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1943 
SysTick
->
VAL
 = 0UL;

1944 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1945 
SysTick_CTRL_TICKINT_Msk
 |

1946 
SysTick_CTRL_ENABLE_Msk
;

1950 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1963 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

1965 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1970 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1971 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1972 
SysTick_NS
->
VAL
 = 0UL;

1973 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1974 
SysTick_CTRL_TICKINT_Msk
 |

1975 
SysTick_CTRL_ENABLE_Msk
;

1987 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm3.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM3_H_GENERIC


32 
	#__CORE_CM3_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM3_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM3_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM3_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (3UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM3_H_DEPENDANT


127 
	#__CORE_CM3_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__CM3_REV


136 
	#__CM3_REV
 0x0200U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__NVIC_PRIO_BITS


146 
	#__NVIC_PRIO_BITS
 3U

	)

150 #i‚de‡
__Víd‹_SysTickC⁄fig


151 
	#__Víd‹_SysTickC⁄fig
 0U

	)

164 #ifde‡
__˝lu•lus


165 
	#__I
 vﬁ©ûê

	)

167 
	#__I
 vﬁ©ûêc⁄°

	)

169 
	#__O
 vﬁ©ûê

	)

170 
	#__IO
 vﬁ©ûê

	)

173 
	#__IM
 vﬁ©ûêc⁄°

	)

174 
	#__OM
 vﬁ©ûê

	)

175 
	#__IOM
 vﬁ©ûê

	)

210 
uöt32_t
 
_ª£rved0
:27;

211 
uöt32_t
 
Q
:1;

212 
uöt32_t
 
V
:1;

213 
uöt32_t
 
C
:1;

214 
uöt32_t
 
Z
:1;

215 
uöt32_t
 
N
:1;

216 } 
b
;

217 
uöt32_t
 
w
;

218 } 
	tAPSR_Ty≥
;

221 
	#APSR_N_Pos
 31U

	)

222 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

224 
	#APSR_Z_Pos
 30U

	)

225 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

227 
	#APSR_C_Pos
 29U

	)

228 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

230 
	#APSR_V_Pos
 28U

	)

231 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
	#APSR_Q_Pos
 27U

	)

234 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

244 
uöt32_t
 
ISR
:9;

245 
uöt32_t
 
_ª£rved0
:23;

246 } 
b
;

247 
uöt32_t
 
w
;

248 } 
	tIPSR_Ty≥
;

251 
	#IPSR_ISR_Pos
 0U

	)

252 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:1;

264 
uöt32_t
 
ICI_IT_1
:6;

265 
uöt32_t
 
_ª£rved1
:8;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
ICI_IT_2
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

278 
	#xPSR_N_Pos
 31U

	)

279 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

281 
	#xPSR_Z_Pos
 30U

	)

282 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

284 
	#xPSR_C_Pos
 29U

	)

285 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

287 
	#xPSR_V_Pos
 28U

	)

288 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

290 
	#xPSR_Q_Pos
 27U

	)

291 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

293 
	#xPSR_ICI_IT_2_Pos
 25U

	)

294 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

296 
	#xPSR_T_Pos
 24U

	)

297 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

299 
	#xPSR_ICI_IT_1_Pos
 10U

	)

300 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

302 
	#xPSR_ISR_Pos
 0U

	)

303 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

313 
uöt32_t
 
nPRIV
:1;

314 
uöt32_t
 
SPSEL
:1;

315 
uöt32_t
 
_ª£rved1
:30;

316 } 
b
;

317 
uöt32_t
 
w
;

318 } 
	tCONTROL_Ty≥
;

321 
	#CONTROL_SPSEL_Pos
 1U

	)

322 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

324 
	#CONTROL_nPRIV_Pos
 0U

	)

325 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

342 
__IOM
 
uöt32_t
 
ISER
[8U];

343 
uöt32_t
 
RESERVED0
[24U];

344 
__IOM
 
uöt32_t
 
ICER
[8U];

345 
uöt32_t
 
RSERVED1
[24U];

346 
__IOM
 
uöt32_t
 
ISPR
[8U];

347 
uöt32_t
 
RESERVED2
[24U];

348 
__IOM
 
uöt32_t
 
ICPR
[8U];

349 
uöt32_t
 
RESERVED3
[24U];

350 
__IOM
 
uöt32_t
 
IABR
[8U];

351 
uöt32_t
 
RESERVED4
[56U];

352 
__IOM
 
uöt8_t
 
IP
[240U];

353 
uöt32_t
 
RESERVED5
[644U];

354 
__OM
 
uöt32_t
 
STIR
;

355 } 
	tNVIC_Ty≥
;

358 
	#NVIC_STIR_INTID_Pos
 0U

	)

359 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

376 
__IM
 
uöt32_t
 
CPUID
;

377 
__IOM
 
uöt32_t
 
ICSR
;

378 
__IOM
 
uöt32_t
 
VTOR
;

379 
__IOM
 
uöt32_t
 
AIRCR
;

380 
__IOM
 
uöt32_t
 
SCR
;

381 
__IOM
 
uöt32_t
 
CCR
;

382 
__IOM
 
uöt8_t
 
SHP
[12U];

383 
__IOM
 
uöt32_t
 
SHCSR
;

384 
__IOM
 
uöt32_t
 
CFSR
;

385 
__IOM
 
uöt32_t
 
HFSR
;

386 
__IOM
 
uöt32_t
 
DFSR
;

387 
__IOM
 
uöt32_t
 
MMFAR
;

388 
__IOM
 
uöt32_t
 
BFAR
;

389 
__IOM
 
uöt32_t
 
AFSR
;

390 
__IM
 
uöt32_t
 
PFR
[2U];

391 
__IM
 
uöt32_t
 
DFR
;

392 
__IM
 
uöt32_t
 
ADR
;

393 
__IM
 
uöt32_t
 
MMFR
[4U];

394 
__IM
 
uöt32_t
 
ISAR
[5U];

395 
uöt32_t
 
RESERVED0
[5U];

396 
__IOM
 
uöt32_t
 
CPACR
;

397 } 
	tSCB_Ty≥
;

400 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

401 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

403 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

404 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

406 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

407 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

409 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

410 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

412 
	#SCB_CPUID_REVISION_Pos
 0U

	)

413 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

416 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

417 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

419 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

420 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

422 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

423 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

425 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

426 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

428 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

429 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

431 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

432 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

434 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

435 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

437 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

438 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

440 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

441 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

443 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

444 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

447 #i‡
deföed
 (
__CM3_REV
) && (__CM3_REV < 0x0201U)

448 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

449 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

451 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

452 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

454 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

455 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

459 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

460 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

462 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

463 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

465 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

466 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

468 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

469 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

471 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

472 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

474 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

475 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

477 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

478 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

481 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

482 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

484 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

485 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

487 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

488 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

491 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

492 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

494 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

495 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

497 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

498 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

500 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

501 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

503 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

504 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

506 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

507 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

510 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

511 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

513 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

514 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

516 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

517 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

519 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

520 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

522 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

523 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

525 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

526 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

528 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

529 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

531 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

532 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

534 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

535 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

537 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

538 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

540 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

541 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

543 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

544 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

546 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

547 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

549 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

550 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

553 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

554 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

556 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

557 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

559 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

560 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

563 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

564 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

566 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

567 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

569 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

570 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

572 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

573 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

575 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

576 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

579 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

580 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

582 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

583 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

585 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

586 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

588 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

589 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

591 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

592 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

594 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

595 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

598 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

599 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

601 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

602 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

604 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

605 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

607 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

608 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

610 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

611 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

613 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

614 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

617 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

618 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

620 
	#SCB_HFSR_FORCED_Pos
 30U

	)

621 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

623 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

624 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

627 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

628 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

630 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

631 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

633 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

634 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

636 
	#SCB_DFSR_BKPT_Pos
 1U

	)

637 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

639 
	#SCB_DFSR_HALTED_Pos
 0U

	)

640 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

657 
uöt32_t
 
RESERVED0
[1U];

658 
__IM
 
uöt32_t
 
ICTR
;

659 #i‡
deföed
 (
__CM3_REV
) && (__CM3_REV >= 0x200U)

660 
__IOM
 
uöt32_t
 
ACTLR
;

662 
uöt32_t
 
RESERVED1
[1U];

664 } 
	tSCnSCB_Ty≥
;

667 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

668 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

672 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

673 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

675 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

676 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

678 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

679 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

696 
__IOM
 
uöt32_t
 
CTRL
;

697 
__IOM
 
uöt32_t
 
LOAD
;

698 
__IOM
 
uöt32_t
 
VAL
;

699 
__IM
 
uöt32_t
 
CALIB
;

700 } 
	tSysTick_Ty≥
;

703 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

704 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

706 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

707 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

709 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

710 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

712 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

713 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

716 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

717 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

720 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

721 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

724 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

725 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

727 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

728 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

730 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

731 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

748 
__OM
 union

750 
__OM
 
uöt8_t
 
u8
;

751 
__OM
 
uöt16_t
 
u16
;

752 
__OM
 
uöt32_t
 
u32
;

753 } 
PORT
 [32U];

754 
uöt32_t
 
RESERVED0
[864U];

755 
__IOM
 
uöt32_t
 
TER
;

756 
uöt32_t
 
RESERVED1
[15U];

757 
__IOM
 
uöt32_t
 
TPR
;

758 
uöt32_t
 
RESERVED2
[15U];

759 
__IOM
 
uöt32_t
 
TCR
;

760 
uöt32_t
 
RESERVED3
[29U];

761 
__OM
 
uöt32_t
 
IWR
;

762 
__IM
 
uöt32_t
 
IRR
;

763 
__IOM
 
uöt32_t
 
IMCR
;

764 
uöt32_t
 
RESERVED4
[43U];

765 
__OM
 
uöt32_t
 
LAR
;

766 
__IM
 
uöt32_t
 
LSR
;

767 
uöt32_t
 
RESERVED5
[6U];

768 
__IM
 
uöt32_t
 
PID4
;

769 
__IM
 
uöt32_t
 
PID5
;

770 
__IM
 
uöt32_t
 
PID6
;

771 
__IM
 
uöt32_t
 
PID7
;

772 
__IM
 
uöt32_t
 
PID0
;

773 
__IM
 
uöt32_t
 
PID1
;

774 
__IM
 
uöt32_t
 
PID2
;

775 
__IM
 
uöt32_t
 
PID3
;

776 
__IM
 
uöt32_t
 
CID0
;

777 
__IM
 
uöt32_t
 
CID1
;

778 
__IM
 
uöt32_t
 
CID2
;

779 
__IM
 
uöt32_t
 
CID3
;

780 } 
	tITM_Ty≥
;

783 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

784 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

787 
	#ITM_TCR_BUSY_Pos
 23U

	)

788 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

790 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

791 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

793 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

794 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

796 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

797 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

799 
	#ITM_TCR_SWOENA_Pos
 4U

	)

800 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

802 
	#ITM_TCR_DWTENA_Pos
 3U

	)

803 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

805 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

806 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

808 
	#ITM_TCR_TSENA_Pos
 1U

	)

809 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

811 
	#ITM_TCR_ITMENA_Pos
 0U

	)

812 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

815 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

816 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

819 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

820 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

823 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

824 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

827 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

828 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

830 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

831 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

833 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

834 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

851 
__IOM
 
uöt32_t
 
CTRL
;

852 
__IOM
 
uöt32_t
 
CYCCNT
;

853 
__IOM
 
uöt32_t
 
CPICNT
;

854 
__IOM
 
uöt32_t
 
EXCCNT
;

855 
__IOM
 
uöt32_t
 
SLEEPCNT
;

856 
__IOM
 
uöt32_t
 
LSUCNT
;

857 
__IOM
 
uöt32_t
 
FOLDCNT
;

858 
__IM
 
uöt32_t
 
PCSR
;

859 
__IOM
 
uöt32_t
 
COMP0
;

860 
__IOM
 
uöt32_t
 
MASK0
;

861 
__IOM
 
uöt32_t
 
FUNCTION0
;

862 
uöt32_t
 
RESERVED0
[1U];

863 
__IOM
 
uöt32_t
 
COMP1
;

864 
__IOM
 
uöt32_t
 
MASK1
;

865 
__IOM
 
uöt32_t
 
FUNCTION1
;

866 
uöt32_t
 
RESERVED1
[1U];

867 
__IOM
 
uöt32_t
 
COMP2
;

868 
__IOM
 
uöt32_t
 
MASK2
;

869 
__IOM
 
uöt32_t
 
FUNCTION2
;

870 
uöt32_t
 
RESERVED2
[1U];

871 
__IOM
 
uöt32_t
 
COMP3
;

872 
__IOM
 
uöt32_t
 
MASK3
;

873 
__IOM
 
uöt32_t
 
FUNCTION3
;

874 } 
	tDWT_Ty≥
;

877 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

878 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

880 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

881 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

883 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

884 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

886 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

887 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

889 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

890 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

892 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

893 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

895 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

896 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

898 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

899 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

901 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

902 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

904 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

905 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

907 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

908 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

910 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

911 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

913 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

914 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

916 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

917 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

919 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

920 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

922 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

923 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

925 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

926 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

928 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

929 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

932 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

933 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

936 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

937 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

940 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

941 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

944 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

945 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

948 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

949 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

952 
	#DWT_MASK_MASK_Pos
 0U

	)

953 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

956 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

957 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

959 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

960 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

962 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

963 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

965 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

966 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

968 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

969 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

971 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

972 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

974 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

975 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

977 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

978 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

980 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

981 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

998 
__IM
 
uöt32_t
 
SSPSR
;

999 
__IOM
 
uöt32_t
 
CSPSR
;

1000 
uöt32_t
 
RESERVED0
[2U];

1001 
__IOM
 
uöt32_t
 
ACPR
;

1002 
uöt32_t
 
RESERVED1
[55U];

1003 
__IOM
 
uöt32_t
 
SPPR
;

1004 
uöt32_t
 
RESERVED2
[131U];

1005 
__IM
 
uöt32_t
 
FFSR
;

1006 
__IOM
 
uöt32_t
 
FFCR
;

1007 
__IM
 
uöt32_t
 
FSCR
;

1008 
uöt32_t
 
RESERVED3
[759U];

1009 
__IM
 
uöt32_t
 
TRIGGER
;

1010 
__IM
 
uöt32_t
 
FIFO0
;

1011 
__IM
 
uöt32_t
 
ITATBCTR2
;

1012 
uöt32_t
 
RESERVED4
[1U];

1013 
__IM
 
uöt32_t
 
ITATBCTR0
;

1014 
__IM
 
uöt32_t
 
FIFO1
;

1015 
__IOM
 
uöt32_t
 
ITCTRL
;

1016 
uöt32_t
 
RESERVED5
[39U];

1017 
__IOM
 
uöt32_t
 
CLAIMSET
;

1018 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1019 
uöt32_t
 
RESERVED7
[8U];

1020 
__IM
 
uöt32_t
 
DEVID
;

1021 
__IM
 
uöt32_t
 
DEVTYPE
;

1022 } 
	tTPI_Ty≥
;

1025 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1026 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1029 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1030 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1033 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1034 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1036 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1037 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1039 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1040 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1042 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1043 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1046 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1047 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1049 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1050 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1053 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1054 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1057 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1058 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1060 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1061 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1063 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1064 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1066 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1067 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1069 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1070 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1072 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1073 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1075 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1076 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1079 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1080 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1082 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1083 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1086 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1087 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1089 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1090 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1092 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1093 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1095 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1096 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1098 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1099 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1101 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1102 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1104 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1105 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1108 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1109 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1111 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1112 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1115 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1116 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1119 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1120 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1122 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1123 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1125 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1126 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1128 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1129 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1131 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1132 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1134 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1135 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1138 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1139 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1141 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1142 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1147 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1160 
__IM
 
uöt32_t
 
TYPE
;

1161 
__IOM
 
uöt32_t
 
CTRL
;

1162 
__IOM
 
uöt32_t
 
RNR
;

1163 
__IOM
 
uöt32_t
 
RBAR
;

1164 
__IOM
 
uöt32_t
 
RASR
;

1165 
__IOM
 
uöt32_t
 
RBAR_A1
;

1166 
__IOM
 
uöt32_t
 
RASR_A1
;

1167 
__IOM
 
uöt32_t
 
RBAR_A2
;

1168 
__IOM
 
uöt32_t
 
RASR_A2
;

1169 
__IOM
 
uöt32_t
 
RBAR_A3
;

1170 
__IOM
 
uöt32_t
 
RASR_A3
;

1171 } 
	tMPU_Ty≥
;

1173 
	#MPU_TYPE_RALIASES
 4U

	)

1176 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1177 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1179 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1180 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1182 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1183 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1186 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1187 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1189 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1190 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1192 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1193 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1196 
	#MPU_RNR_REGION_Pos
 0U

	)

1197 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1200 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1201 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1203 
	#MPU_RBAR_VALID_Pos
 4U

	)

1204 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1206 
	#MPU_RBAR_REGION_Pos
 0U

	)

1207 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1210 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1211 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1213 
	#MPU_RASR_XN_Pos
 28U

	)

1214 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1216 
	#MPU_RASR_AP_Pos
 24U

	)

1217 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1219 
	#MPU_RASR_TEX_Pos
 19U

	)

1220 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1222 
	#MPU_RASR_S_Pos
 18U

	)

1223 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1225 
	#MPU_RASR_C_Pos
 17U

	)

1226 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1228 
	#MPU_RASR_B_Pos
 16U

	)

1229 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1231 
	#MPU_RASR_SRD_Pos
 8U

	)

1232 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1234 
	#MPU_RASR_SIZE_Pos
 1U

	)

1235 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1237 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1238 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1256 
__IOM
 
uöt32_t
 
DHCSR
;

1257 
__OM
 
uöt32_t
 
DCRSR
;

1258 
__IOM
 
uöt32_t
 
DCRDR
;

1259 
__IOM
 
uöt32_t
 
DEMCR
;

1260 } 
	tC‹eDebug_Ty≥
;

1263 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1264 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1266 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1267 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1269 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1270 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1272 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1273 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1275 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1276 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1278 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1279 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1281 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1282 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1284 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1285 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1287 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1288 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1290 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1291 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1293 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1294 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1296 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1297 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1300 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1301 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1303 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1304 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1307 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1308 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1310 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1311 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1313 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1314 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1316 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1317 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1319 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1320 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1322 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1323 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1325 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1326 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1328 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1329 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1331 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1332 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1334 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1335 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1337 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1338 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1340 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1341 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1343 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1344 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1362 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1370 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1383 
	#SCS_BASE
 (0xE000E000ULË

	)

1384 
	#ITM_BASE
 (0xE0000000ULË

	)

1385 
	#DWT_BASE
 (0xE0001000ULË

	)

1386 
	#TPI_BASE
 (0xE0040000ULË

	)

1387 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1388 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1389 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1390 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1392 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1393 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1394 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1395 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1396 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1397 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1398 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1399 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1401 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1402 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1403 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1432 #ifde‡
CMSIS_NVIC_VIRTUAL


1433 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1434 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1436 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1438 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1439 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1440 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1441 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1442 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1443 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1444 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1445 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1446 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1447 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1448 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1449 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1452 #ifde‡
CMSIS_VECTAB_VIRTUAL


1453 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1454 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1456 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1458 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1459 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1462 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1466 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1467 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1468 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1480 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1482 
uöt32_t
 
ªg_vÆue
;

1483 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1485 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1486 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1487 
ªg_vÆue
 = (reg_value |

1488 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1489 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

1490 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1499 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1501  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1511 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1513 i‡((
öt32_t
)(
IRQn
) >= 0)

1515 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1528 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1530 i‡((
öt32_t
)(
IRQn
) >= 0)

1532 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1547 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) >= 0)

1551 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1552 
__DSB
();

1553 
__ISB
();

1566 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1568 i‡((
öt32_t
)(
IRQn
) >= 0)

1570 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1585 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1587 i‡((
öt32_t
)(
IRQn
) >= 0)

1589 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1600 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1602 i‡((
öt32_t
)(
IRQn
) >= 0)

1604 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1617 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1619 i‡((
öt32_t
)(
IRQn
) >= 0)

1621 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1639 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1641 i‡((
öt32_t
)(
IRQn
) >= 0)

1643 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1647 
SCB
->
SHP
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1661 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1664 i‡((
öt32_t
)(
IRQn
) >= 0)

1666 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1670 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1686 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1688 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1689 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1690 
uöt32_t
 
SubPri‹ôyBôs
;

1692 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1693 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1696 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1697 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1713 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1715 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1716 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1717 
uöt32_t
 
SubPri‹ôyBôs
;

1719 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1720 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1722 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1723 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1736 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1738 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1739 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1751 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1753 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1754  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1762 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1764 
__DSB
();

1766 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1767 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1768 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1769 
__DSB
();

1773 
__NOP
();

1781 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1783 
	~"mpu_¨mv7.h
"

1803 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1821 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1834 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1836 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1841 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1842 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1843 
SysTick
->
VAL
 = 0UL;

1844 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1845 
SysTick_CTRL_TICKINT_Msk
 |

1846 
SysTick_CTRL_ENABLE_Msk
;

1864 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1865 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

1876 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1878 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1879 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1881 
ITM
->
PORT
[0U].
u32
 == 0UL)

1883 
__NOP
();

1885 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1887  (
	gch
);

1897 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1899 
öt32_t
 
	gch
 = -1;

1901 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1903 
ch
 = 
ITM_RxBuf„r
;

1904 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1907  (
	gch
);

1917 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1920 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1935 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm33.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM33_H_GENERIC


32 
	#__CORE_CM33_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM33_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM33_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM33_CMSIS_VERSION
 ((
__CM33_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM33_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (33UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 (
__TARGET_FPU_VFP
)

78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

89 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

90 
	#__DSP_USED
 1U

	)

93 
	#__DSP_USED
 0U

	)

96 
	#__DSP_USED
 0U

	)

99 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

100 #i‡
deföed
 (
__ARM_PCS_VFP
)

101 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

102 
	#__FPU_USED
 1U

	)

105 
	#__FPU_USED
 0U

	)

108 
	#__FPU_USED
 0U

	)

111 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

112 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

113 
	#__DSP_USED
 1U

	)

116 
	#__DSP_USED
 0U

	)

119 
	#__DSP_USED
 0U

	)

122 #ñi‡
deföed
 ( 
__GNUC__
 )

123 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

124 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

125 
	#__FPU_USED
 1U

	)

128 
	#__FPU_USED
 0U

	)

131 
	#__FPU_USED
 0U

	)

134 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

135 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

136 
	#__DSP_USED
 1U

	)

139 
	#__DSP_USED
 0U

	)

142 
	#__DSP_USED
 0U

	)

145 #ñi‡
deföed
 ( 
__ICCARM__
 )

146 #i‡
deföed
 (
__ARMVFP__
)

147 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

148 
	#__FPU_USED
 1U

	)

151 
	#__FPU_USED
 0U

	)

154 
	#__FPU_USED
 0U

	)

157 #i‡
deföed
 (
__ARM_FEATURE_DSP
) && (__ARM_FEATURE_DSP == 1U)

158 #i‡
deföed
 (
__DSP_PRESENT
) && (__DSP_PRESENT == 1U)

159 
	#__DSP_USED
 1U

	)

162 
	#__DSP_USED
 0U

	)

165 
	#__DSP_USED
 0U

	)

168 #ñi‡
deföed
 ( 
__TI_ARM__
 )

169 #i‡
deföed
 (
__TI_VFP_SUPPORT__
)

170 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

171 
	#__FPU_USED
 1U

	)

174 
	#__FPU_USED
 0U

	)

177 
	#__FPU_USED
 0U

	)

180 #ñi‡
deföed
 ( 
__TASKING__
 )

181 #i‡
deföed
 (
__FPU_VFP__
)

182 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

183 
	#__FPU_USED
 1U

	)

186 
	#__FPU_USED
 0U

	)

189 
	#__FPU_USED
 0U

	)

192 #ñi‡
deföed
 ( 
__CSMC__
 )

193 #i‡–
__CSMC__
 & 0x400U)

194 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

195 
	#__FPU_USED
 1U

	)

198 
	#__FPU_USED
 0U

	)

201 
	#__FPU_USED
 0U

	)

206 
	~"cmsis_compûî.h
"

209 #ifde‡
__˝lu•lus


215 #i‚de‡
__CMSIS_GENERIC


217 #i‚de‡
__CORE_CM33_H_DEPENDANT


218 
	#__CORE_CM33_H_DEPENDANT


	)

220 #ifde‡
__˝lu•lus


225 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


226 #i‚de‡
__CM33_REV


227 
	#__CM33_REV
 0x0000U

	)

231 #i‚de‡
__FPU_PRESENT


232 
	#__FPU_PRESENT
 0U

	)

236 #i‚de‡
__MPU_PRESENT


237 
	#__MPU_PRESENT
 0U

	)

241 #i‚de‡
__SAUREGION_PRESENT


242 
	#__SAUREGION_PRESENT
 0U

	)

246 #i‚de‡
__DSP_PRESENT


247 
	#__DSP_PRESENT
 0U

	)

251 #i‚de‡
__NVIC_PRIO_BITS


252 
	#__NVIC_PRIO_BITS
 3U

	)

256 #i‚de‡
__Víd‹_SysTickC⁄fig


257 
	#__Víd‹_SysTickC⁄fig
 0U

	)

270 #ifde‡
__˝lu•lus


271 
	#__I
 vﬁ©ûê

	)

273 
	#__I
 vﬁ©ûêc⁄°

	)

275 
	#__O
 vﬁ©ûê

	)

276 
	#__IO
 vﬁ©ûê

	)

279 
	#__IM
 vﬁ©ûêc⁄°

	)

280 
	#__OM
 vﬁ©ûê

	)

281 
	#__IOM
 vﬁ©ûê

	)

318 
uöt32_t
 
_ª£rved0
:16;

319 
uöt32_t
 
GE
:4;

320 
uöt32_t
 
_ª£rved1
:7;

321 
uöt32_t
 
Q
:1;

322 
uöt32_t
 
V
:1;

323 
uöt32_t
 
C
:1;

324 
uöt32_t
 
Z
:1;

325 
uöt32_t
 
N
:1;

326 } 
b
;

327 
uöt32_t
 
w
;

328 } 
	tAPSR_Ty≥
;

331 
	#APSR_N_Pos
 31U

	)

332 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

334 
	#APSR_Z_Pos
 30U

	)

335 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

337 
	#APSR_C_Pos
 29U

	)

338 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

340 
	#APSR_V_Pos
 28U

	)

341 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

343 
	#APSR_Q_Pos
 27U

	)

344 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

346 
	#APSR_GE_Pos
 16U

	)

347 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

357 
uöt32_t
 
ISR
:9;

358 
uöt32_t
 
_ª£rved0
:23;

359 } 
b
;

360 
uöt32_t
 
w
;

361 } 
	tIPSR_Ty≥
;

364 
	#IPSR_ISR_Pos
 0U

	)

365 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

375 
uöt32_t
 
ISR
:9;

376 
uöt32_t
 
_ª£rved0
:7;

377 
uöt32_t
 
GE
:4;

378 
uöt32_t
 
_ª£rved1
:4;

379 
uöt32_t
 
T
:1;

380 
uöt32_t
 
IT
:2;

381 
uöt32_t
 
Q
:1;

382 
uöt32_t
 
V
:1;

383 
uöt32_t
 
C
:1;

384 
uöt32_t
 
Z
:1;

385 
uöt32_t
 
N
:1;

386 } 
b
;

387 
uöt32_t
 
w
;

388 } 
	txPSR_Ty≥
;

391 
	#xPSR_N_Pos
 31U

	)

392 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

394 
	#xPSR_Z_Pos
 30U

	)

395 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

397 
	#xPSR_C_Pos
 29U

	)

398 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

400 
	#xPSR_V_Pos
 28U

	)

401 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

403 
	#xPSR_Q_Pos
 27U

	)

404 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

406 
	#xPSR_IT_Pos
 25U

	)

407 
	#xPSR_IT_Msk
 (3UL << 
xPSR_IT_Pos
Ë

	)

409 
	#xPSR_T_Pos
 24U

	)

410 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

412 
	#xPSR_GE_Pos
 16U

	)

413 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

415 
	#xPSR_ISR_Pos
 0U

	)

416 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

426 
uöt32_t
 
nPRIV
:1;

427 
uöt32_t
 
SPSEL
:1;

428 
uöt32_t
 
FPCA
:1;

429 
uöt32_t
 
SFPA
:1;

430 
uöt32_t
 
_ª£rved1
:28;

431 } 
b
;

432 
uöt32_t
 
w
;

433 } 
	tCONTROL_Ty≥
;

436 
	#CONTROL_SFPA_Pos
 3U

	)

437 
	#CONTROL_SFPA_Msk
 (1UL << 
CONTROL_SFPA_Pos
Ë

	)

439 
	#CONTROL_FPCA_Pos
 2U

	)

440 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

442 
	#CONTROL_SPSEL_Pos
 1U

	)

443 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

445 
	#CONTROL_nPRIV_Pos
 0U

	)

446 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

463 
__IOM
 
uöt32_t
 
ISER
[16U];

464 
uöt32_t
 
RESERVED0
[16U];

465 
__IOM
 
uöt32_t
 
ICER
[16U];

466 
uöt32_t
 
RSERVED1
[16U];

467 
__IOM
 
uöt32_t
 
ISPR
[16U];

468 
uöt32_t
 
RESERVED2
[16U];

469 
__IOM
 
uöt32_t
 
ICPR
[16U];

470 
uöt32_t
 
RESERVED3
[16U];

471 
__IOM
 
uöt32_t
 
IABR
[16U];

472 
uöt32_t
 
RESERVED4
[16U];

473 
__IOM
 
uöt32_t
 
ITNS
[16U];

474 
uöt32_t
 
RESERVED5
[16U];

475 
__IOM
 
uöt8_t
 
IPR
[496U];

476 
uöt32_t
 
RESERVED6
[580U];

477 
__OM
 
uöt32_t
 
STIR
;

478 } 
	tNVIC_Ty≥
;

481 
	#NVIC_STIR_INTID_Pos
 0U

	)

482 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

499 
__IM
 
uöt32_t
 
CPUID
;

500 
__IOM
 
uöt32_t
 
ICSR
;

501 
__IOM
 
uöt32_t
 
VTOR
;

502 
__IOM
 
uöt32_t
 
AIRCR
;

503 
__IOM
 
uöt32_t
 
SCR
;

504 
__IOM
 
uöt32_t
 
CCR
;

505 
__IOM
 
uöt8_t
 
SHPR
[12U];

506 
__IOM
 
uöt32_t
 
SHCSR
;

507 
__IOM
 
uöt32_t
 
CFSR
;

508 
__IOM
 
uöt32_t
 
HFSR
;

509 
__IOM
 
uöt32_t
 
DFSR
;

510 
__IOM
 
uöt32_t
 
MMFAR
;

511 
__IOM
 
uöt32_t
 
BFAR
;

512 
__IOM
 
uöt32_t
 
AFSR
;

513 
__IM
 
uöt32_t
 
ID_PFR
[2U];

514 
__IM
 
uöt32_t
 
ID_DFR
;

515 
__IM
 
uöt32_t
 
ID_ADR
;

516 
__IM
 
uöt32_t
 
ID_MMFR
[4U];

517 
__IM
 
uöt32_t
 
ID_ISAR
[6U];

518 
__IM
 
uöt32_t
 
CLIDR
;

519 
__IM
 
uöt32_t
 
CTR
;

520 
__IM
 
uöt32_t
 
CCSIDR
;

521 
__IOM
 
uöt32_t
 
CSSELR
;

522 
__IOM
 
uöt32_t
 
CPACR
;

523 
__IOM
 
uöt32_t
 
NSACR
;

524 
uöt32_t
 
RESERVED3
[92U];

525 
__OM
 
uöt32_t
 
STIR
;

526 
uöt32_t
 
RESERVED4
[15U];

527 
__IM
 
uöt32_t
 
MVFR0
;

528 
__IM
 
uöt32_t
 
MVFR1
;

529 
__IM
 
uöt32_t
 
MVFR2
;

530 
uöt32_t
 
RESERVED5
[1U];

531 
__OM
 
uöt32_t
 
ICIALLU
;

532 
uöt32_t
 
RESERVED6
[1U];

533 
__OM
 
uöt32_t
 
ICIMVAU
;

534 
__OM
 
uöt32_t
 
DCIMVAC
;

535 
__OM
 
uöt32_t
 
DCISW
;

536 
__OM
 
uöt32_t
 
DCCMVAU
;

537 
__OM
 
uöt32_t
 
DCCMVAC
;

538 
__OM
 
uöt32_t
 
DCCSW
;

539 
__OM
 
uöt32_t
 
DCCIMVAC
;

540 
__OM
 
uöt32_t
 
DCCISW
;

541 
uöt32_t
 
RESERVED7
[6U];

542 
__IOM
 
uöt32_t
 
ITCMCR
;

543 
__IOM
 
uöt32_t
 
DTCMCR
;

544 
__IOM
 
uöt32_t
 
AHBPCR
;

545 
__IOM
 
uöt32_t
 
CACR
;

546 
__IOM
 
uöt32_t
 
AHBSCR
;

547 
uöt32_t
 
RESERVED8
[1U];

548 
__IOM
 
uöt32_t
 
ABFSR
;

549 } 
	tSCB_Ty≥
;

552 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

553 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

555 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

556 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

558 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

559 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

561 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

562 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

564 
	#SCB_CPUID_REVISION_Pos
 0U

	)

565 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

568 
	#SCB_ICSR_PENDNMISET_Pos
 31U

	)

569 
	#SCB_ICSR_PENDNMISET_Msk
 (1UL << 
SCB_ICSR_PENDNMISET_Pos
Ë

	)

571 
	#SCB_ICSR_NMIPENDSET_Pos
 
SCB_ICSR_PENDNMISET_Pos


	)

572 
	#SCB_ICSR_NMIPENDSET_Msk
 
SCB_ICSR_PENDNMISET_Msk


	)

574 
	#SCB_ICSR_PENDNMICLR_Pos
 30U

	)

575 
	#SCB_ICSR_PENDNMICLR_Msk
 (1UL << 
SCB_ICSR_PENDNMICLR_Pos
Ë

	)

577 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

578 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

580 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

581 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

583 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

584 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

586 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

587 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

589 
	#SCB_ICSR_STTNS_Pos
 24U

	)

590 
	#SCB_ICSR_STTNS_Msk
 (1UL << 
SCB_ICSR_STTNS_Pos
Ë

	)

592 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

593 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

595 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

596 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

598 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

599 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

601 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

602 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

604 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

605 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

608 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

609 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

612 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

613 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

615 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

616 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

618 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

619 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

621 
	#SCB_AIRCR_PRIS_Pos
 14U

	)

622 
	#SCB_AIRCR_PRIS_Msk
 (1UL << 
SCB_AIRCR_PRIS_Pos
Ë

	)

624 
	#SCB_AIRCR_BFHFNMINS_Pos
 13U

	)

625 
	#SCB_AIRCR_BFHFNMINS_Msk
 (1UL << 
SCB_AIRCR_BFHFNMINS_Pos
Ë

	)

627 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

628 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

630 
	#SCB_AIRCR_SYSRESETREQS_Pos
 3U

	)

631 
	#SCB_AIRCR_SYSRESETREQS_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQS_Pos
Ë

	)

633 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

634 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

636 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

637 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

640 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

641 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

643 
	#SCB_SCR_SLEEPDEEPS_Pos
 3U

	)

644 
	#SCB_SCR_SLEEPDEEPS_Msk
 (1UL << 
SCB_SCR_SLEEPDEEPS_Pos
Ë

	)

646 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

647 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

649 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

650 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

653 
	#SCB_CCR_BP_Pos
 18U

	)

654 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

656 
	#SCB_CCR_IC_Pos
 17U

	)

657 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

659 
	#SCB_CCR_DC_Pos
 16U

	)

660 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

662 
	#SCB_CCR_STKOFHFNMIGN_Pos
 10U

	)

663 
	#SCB_CCR_STKOFHFNMIGN_Msk
 (1UL << 
SCB_CCR_STKOFHFNMIGN_Pos
Ë

	)

665 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

666 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

668 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

669 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

671 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

672 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

674 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

675 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

678 
	#SCB_SHCSR_HARDFAULTPENDED_Pos
 21U

	)

679 
	#SCB_SHCSR_HARDFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTPENDED_Pos
Ë

	)

681 
	#SCB_SHCSR_SECUREFAULTPENDED_Pos
 20U

	)

682 
	#SCB_SHCSR_SECUREFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTPENDED_Pos
Ë

	)

684 
	#SCB_SHCSR_SECUREFAULTENA_Pos
 19U

	)

685 
	#SCB_SHCSR_SECUREFAULTENA_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTENA_Pos
Ë

	)

687 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

688 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

690 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

691 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

693 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

694 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

696 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

697 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

699 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

700 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

702 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

703 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

705 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

706 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

708 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

709 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

711 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

712 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

714 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

715 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

717 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

718 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

720 
	#SCB_SHCSR_NMIACT_Pos
 5U

	)

721 
	#SCB_SHCSR_NMIACT_Msk
 (1UL << 
SCB_SHCSR_NMIACT_Pos
Ë

	)

723 
	#SCB_SHCSR_SECUREFAULTACT_Pos
 4U

	)

724 
	#SCB_SHCSR_SECUREFAULTACT_Msk
 (1UL << 
SCB_SHCSR_SECUREFAULTACT_Pos
Ë

	)

726 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

727 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

729 
	#SCB_SHCSR_HARDFAULTACT_Pos
 2U

	)

730 
	#SCB_SHCSR_HARDFAULTACT_Msk
 (1UL << 
SCB_SHCSR_HARDFAULTACT_Pos
Ë

	)

732 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

733 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

735 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

736 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

739 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

740 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

742 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

743 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

745 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

746 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

749 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

750 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

752 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

753 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

755 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

756 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

758 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

759 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

761 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

762 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

764 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

765 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

768 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

769 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

771 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

772 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

774 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

775 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

777 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

778 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

780 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

781 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

783 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

784 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

786 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

787 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

790 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

791 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

793 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

794 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

796 
	#SCB_CFSR_STKOF_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 4UË

	)

797 
	#SCB_CFSR_STKOF_Msk
 (1UL << 
SCB_CFSR_STKOF_Pos
Ë

	)

799 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

800 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

802 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

803 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

805 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

806 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

808 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

809 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

812 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

813 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

815 
	#SCB_HFSR_FORCED_Pos
 30U

	)

816 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

818 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

819 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

822 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

823 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

825 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

826 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

828 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

829 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

831 
	#SCB_DFSR_BKPT_Pos
 1U

	)

832 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

834 
	#SCB_DFSR_HALTED_Pos
 0U

	)

835 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

838 
	#SCB_NSACR_CP11_Pos
 11U

	)

839 
	#SCB_NSACR_CP11_Msk
 (1UL << 
SCB_NSACR_CP11_Pos
Ë

	)

841 
	#SCB_NSACR_CP10_Pos
 10U

	)

842 
	#SCB_NSACR_CP10_Msk
 (1UL << 
SCB_NSACR_CP10_Pos
Ë

	)

844 
	#SCB_NSACR_CPn_Pos
 0U

	)

845 
	#SCB_NSACR_CPn_Msk
 (1UL )

	)

848 
	#SCB_CLIDR_LOUU_Pos
 27U

	)

849 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

851 
	#SCB_CLIDR_LOC_Pos
 24U

	)

852 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_LOC_Pos
Ë

	)

855 
	#SCB_CTR_FORMAT_Pos
 29U

	)

856 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

858 
	#SCB_CTR_CWG_Pos
 24U

	)

859 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

861 
	#SCB_CTR_ERG_Pos
 20U

	)

862 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

864 
	#SCB_CTR_DMINLINE_Pos
 16U

	)

865 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

867 
	#SCB_CTR_IMINLINE_Pos
 0U

	)

868 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL )

	)

871 
	#SCB_CCSIDR_WT_Pos
 31U

	)

872 
	#SCB_CCSIDR_WT_Msk
 (1UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

874 
	#SCB_CCSIDR_WB_Pos
 30U

	)

875 
	#SCB_CCSIDR_WB_Msk
 (1UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

877 
	#SCB_CCSIDR_RA_Pos
 29U

	)

878 
	#SCB_CCSIDR_RA_Msk
 (1UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

880 
	#SCB_CCSIDR_WA_Pos
 28U

	)

881 
	#SCB_CCSIDR_WA_Msk
 (1UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

883 
	#SCB_CCSIDR_NUMSETS_Pos
 13U

	)

884 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

886 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3U

	)

887 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

889 
	#SCB_CCSIDR_LINESIZE_Pos
 0U

	)

890 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL )

	)

893 
	#SCB_CSSELR_LEVEL_Pos
 1U

	)

894 
	#SCB_CSSELR_LEVEL_Msk
 (7UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

896 
	#SCB_CSSELR_IND_Pos
 0U

	)

897 
	#SCB_CSSELR_IND_Msk
 (1UL )

	)

900 
	#SCB_STIR_INTID_Pos
 0U

	)

901 
	#SCB_STIR_INTID_Msk
 (0x1FFUL )

	)

904 
	#SCB_DCISW_WAY_Pos
 30U

	)

905 
	#SCB_DCISW_WAY_Msk
 (3UL << 
SCB_DCISW_WAY_Pos
Ë

	)

907 
	#SCB_DCISW_SET_Pos
 5U

	)

908 
	#SCB_DCISW_SET_Msk
 (0x1FFUL << 
SCB_DCISW_SET_Pos
Ë

	)

911 
	#SCB_DCCSW_WAY_Pos
 30U

	)

912 
	#SCB_DCCSW_WAY_Msk
 (3UL << 
SCB_DCCSW_WAY_Pos
Ë

	)

914 
	#SCB_DCCSW_SET_Pos
 5U

	)

915 
	#SCB_DCCSW_SET_Msk
 (0x1FFUL << 
SCB_DCCSW_SET_Pos
Ë

	)

918 
	#SCB_DCCISW_WAY_Pos
 30U

	)

919 
	#SCB_DCCISW_WAY_Msk
 (3UL << 
SCB_DCCISW_WAY_Pos
Ë

	)

921 
	#SCB_DCCISW_SET_Pos
 5U

	)

922 
	#SCB_DCCISW_SET_Msk
 (0x1FFUL << 
SCB_DCCISW_SET_Pos
Ë

	)

925 
	#SCB_ITCMCR_SZ_Pos
 3U

	)

926 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

928 
	#SCB_ITCMCR_RETEN_Pos
 2U

	)

929 
	#SCB_ITCMCR_RETEN_Msk
 (1UL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

931 
	#SCB_ITCMCR_RMW_Pos
 1U

	)

932 
	#SCB_ITCMCR_RMW_Msk
 (1UL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

934 
	#SCB_ITCMCR_EN_Pos
 0U

	)

935 
	#SCB_ITCMCR_EN_Msk
 (1UL )

	)

938 
	#SCB_DTCMCR_SZ_Pos
 3U

	)

939 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

941 
	#SCB_DTCMCR_RETEN_Pos
 2U

	)

942 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

944 
	#SCB_DTCMCR_RMW_Pos
 1U

	)

945 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

947 
	#SCB_DTCMCR_EN_Pos
 0U

	)

948 
	#SCB_DTCMCR_EN_Msk
 (1UL )

	)

951 
	#SCB_AHBPCR_SZ_Pos
 1U

	)

952 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

954 
	#SCB_AHBPCR_EN_Pos
 0U

	)

955 
	#SCB_AHBPCR_EN_Msk
 (1UL )

	)

958 
	#SCB_CACR_FORCEWT_Pos
 2U

	)

959 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

961 
	#SCB_CACR_ECCEN_Pos
 1U

	)

962 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

964 
	#SCB_CACR_SIWT_Pos
 0U

	)

965 
	#SCB_CACR_SIWT_Msk
 (1UL )

	)

968 
	#SCB_AHBSCR_INITCOUNT_Pos
 11U

	)

969 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

971 
	#SCB_AHBSCR_TPRI_Pos
 2U

	)

972 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

974 
	#SCB_AHBSCR_CTL_Pos
 0U

	)

975 
	#SCB_AHBSCR_CTL_Msk
 (3UL )

	)

978 
	#SCB_ABFSR_AXIMTYPE_Pos
 8U

	)

979 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

981 
	#SCB_ABFSR_EPPB_Pos
 4U

	)

982 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

984 
	#SCB_ABFSR_AXIM_Pos
 3U

	)

985 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

987 
	#SCB_ABFSR_AHBP_Pos
 2U

	)

988 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

990 
	#SCB_ABFSR_DTCM_Pos
 1U

	)

991 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

993 
	#SCB_ABFSR_ITCM_Pos
 0U

	)

994 
	#SCB_ABFSR_ITCM_Msk
 (1UL )

	)

1011 
uöt32_t
 
RESERVED0
[1U];

1012 
__IM
 
uöt32_t
 
ICTR
;

1013 
__IOM
 
uöt32_t
 
ACTLR
;

1014 
__IOM
 
uöt32_t
 
CPPWR
;

1015 } 
	tSCnSCB_Ty≥
;

1018 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

1019 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

1036 
__IOM
 
uöt32_t
 
CTRL
;

1037 
__IOM
 
uöt32_t
 
LOAD
;

1038 
__IOM
 
uöt32_t
 
VAL
;

1039 
__IM
 
uöt32_t
 
CALIB
;

1040 } 
	tSysTick_Ty≥
;

1043 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

1044 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

1046 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

1047 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

1049 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

1050 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

1052 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

1053 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

1056 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

1057 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

1060 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

1061 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

1064 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

1065 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

1067 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

1068 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

1070 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

1071 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

1088 
__OM
 union

1090 
__OM
 
uöt8_t
 
u8
;

1091 
__OM
 
uöt16_t
 
u16
;

1092 
__OM
 
uöt32_t
 
u32
;

1093 } 
PORT
 [32U];

1094 
uöt32_t
 
RESERVED0
[864U];

1095 
__IOM
 
uöt32_t
 
TER
;

1096 
uöt32_t
 
RESERVED1
[15U];

1097 
__IOM
 
uöt32_t
 
TPR
;

1098 
uöt32_t
 
RESERVED2
[15U];

1099 
__IOM
 
uöt32_t
 
TCR
;

1100 
uöt32_t
 
RESERVED3
[29U];

1101 
__OM
 
uöt32_t
 
IWR
;

1102 
__IM
 
uöt32_t
 
IRR
;

1103 
__IOM
 
uöt32_t
 
IMCR
;

1104 
uöt32_t
 
RESERVED4
[43U];

1105 
__OM
 
uöt32_t
 
LAR
;

1106 
__IM
 
uöt32_t
 
LSR
;

1107 
uöt32_t
 
RESERVED5
[1U];

1108 
__IM
 
uöt32_t
 
DEVARCH
;

1109 
uöt32_t
 
RESERVED6
[4U];

1110 
__IM
 
uöt32_t
 
PID4
;

1111 
__IM
 
uöt32_t
 
PID5
;

1112 
__IM
 
uöt32_t
 
PID6
;

1113 
__IM
 
uöt32_t
 
PID7
;

1114 
__IM
 
uöt32_t
 
PID0
;

1115 
__IM
 
uöt32_t
 
PID1
;

1116 
__IM
 
uöt32_t
 
PID2
;

1117 
__IM
 
uöt32_t
 
PID3
;

1118 
__IM
 
uöt32_t
 
CID0
;

1119 
__IM
 
uöt32_t
 
CID1
;

1120 
__IM
 
uöt32_t
 
CID2
;

1121 
__IM
 
uöt32_t
 
CID3
;

1122 } 
	tITM_Ty≥
;

1125 
	#ITM_STIM_DISABLED_Pos
 1U

	)

1126 
	#ITM_STIM_DISABLED_Msk
 (0x1UL << 
ITM_STIM_DISABLED_Pos
Ë

	)

1128 
	#ITM_STIM_FIFOREADY_Pos
 0U

	)

1129 
	#ITM_STIM_FIFOREADY_Msk
 (0x1UL )

	)

1132 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

1133 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

1136 
	#ITM_TCR_BUSY_Pos
 23U

	)

1137 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

1139 
	#ITM_TCR_TRACEBUSID_Pos
 16U

	)

1140 
	#ITM_TCR_TRACEBUSID_Msk
 (0x7FUL << 
ITM_TCR_TRACEBUSID_Pos
Ë

	)

1142 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

1143 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

1145 
	#ITM_TCR_TSPRESCALE_Pos
 8U

	)

1146 
	#ITM_TCR_TSPRESCALE_Msk
 (3UL << 
ITM_TCR_TSPRESCALE_Pos
Ë

	)

1148 
	#ITM_TCR_STALLENA_Pos
 5U

	)

1149 
	#ITM_TCR_STALLENA_Msk
 (1UL << 
ITM_TCR_STALLENA_Pos
Ë

	)

1151 
	#ITM_TCR_SWOENA_Pos
 4U

	)

1152 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

1154 
	#ITM_TCR_DWTENA_Pos
 3U

	)

1155 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

1157 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

1158 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

1160 
	#ITM_TCR_TSENA_Pos
 1U

	)

1161 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

1163 
	#ITM_TCR_ITMENA_Pos
 0U

	)

1164 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

1167 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

1168 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

1171 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

1172 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

1175 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

1176 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

1179 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

1180 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

1182 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

1183 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

1185 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

1186 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

1203 
__IOM
 
uöt32_t
 
CTRL
;

1204 
__IOM
 
uöt32_t
 
CYCCNT
;

1205 
__IOM
 
uöt32_t
 
CPICNT
;

1206 
__IOM
 
uöt32_t
 
EXCCNT
;

1207 
__IOM
 
uöt32_t
 
SLEEPCNT
;

1208 
__IOM
 
uöt32_t
 
LSUCNT
;

1209 
__IOM
 
uöt32_t
 
FOLDCNT
;

1210 
__IM
 
uöt32_t
 
PCSR
;

1211 
__IOM
 
uöt32_t
 
COMP0
;

1212 
uöt32_t
 
RESERVED1
[1U];

1213 
__IOM
 
uöt32_t
 
FUNCTION0
;

1214 
uöt32_t
 
RESERVED2
[1U];

1215 
__IOM
 
uöt32_t
 
COMP1
;

1216 
uöt32_t
 
RESERVED3
[1U];

1217 
__IOM
 
uöt32_t
 
FUNCTION1
;

1218 
uöt32_t
 
RESERVED4
[1U];

1219 
__IOM
 
uöt32_t
 
COMP2
;

1220 
uöt32_t
 
RESERVED5
[1U];

1221 
__IOM
 
uöt32_t
 
FUNCTION2
;

1222 
uöt32_t
 
RESERVED6
[1U];

1223 
__IOM
 
uöt32_t
 
COMP3
;

1224 
uöt32_t
 
RESERVED7
[1U];

1225 
__IOM
 
uöt32_t
 
FUNCTION3
;

1226 
uöt32_t
 
RESERVED8
[1U];

1227 
__IOM
 
uöt32_t
 
COMP4
;

1228 
uöt32_t
 
RESERVED9
[1U];

1229 
__IOM
 
uöt32_t
 
FUNCTION4
;

1230 
uöt32_t
 
RESERVED10
[1U];

1231 
__IOM
 
uöt32_t
 
COMP5
;

1232 
uöt32_t
 
RESERVED11
[1U];

1233 
__IOM
 
uöt32_t
 
FUNCTION5
;

1234 
uöt32_t
 
RESERVED12
[1U];

1235 
__IOM
 
uöt32_t
 
COMP6
;

1236 
uöt32_t
 
RESERVED13
[1U];

1237 
__IOM
 
uöt32_t
 
FUNCTION6
;

1238 
uöt32_t
 
RESERVED14
[1U];

1239 
__IOM
 
uöt32_t
 
COMP7
;

1240 
uöt32_t
 
RESERVED15
[1U];

1241 
__IOM
 
uöt32_t
 
FUNCTION7
;

1242 
uöt32_t
 
RESERVED16
[1U];

1243 
__IOM
 
uöt32_t
 
COMP8
;

1244 
uöt32_t
 
RESERVED17
[1U];

1245 
__IOM
 
uöt32_t
 
FUNCTION8
;

1246 
uöt32_t
 
RESERVED18
[1U];

1247 
__IOM
 
uöt32_t
 
COMP9
;

1248 
uöt32_t
 
RESERVED19
[1U];

1249 
__IOM
 
uöt32_t
 
FUNCTION9
;

1250 
uöt32_t
 
RESERVED20
[1U];

1251 
__IOM
 
uöt32_t
 
COMP10
;

1252 
uöt32_t
 
RESERVED21
[1U];

1253 
__IOM
 
uöt32_t
 
FUNCTION10
;

1254 
uöt32_t
 
RESERVED22
[1U];

1255 
__IOM
 
uöt32_t
 
COMP11
;

1256 
uöt32_t
 
RESERVED23
[1U];

1257 
__IOM
 
uöt32_t
 
FUNCTION11
;

1258 
uöt32_t
 
RESERVED24
[1U];

1259 
__IOM
 
uöt32_t
 
COMP12
;

1260 
uöt32_t
 
RESERVED25
[1U];

1261 
__IOM
 
uöt32_t
 
FUNCTION12
;

1262 
uöt32_t
 
RESERVED26
[1U];

1263 
__IOM
 
uöt32_t
 
COMP13
;

1264 
uöt32_t
 
RESERVED27
[1U];

1265 
__IOM
 
uöt32_t
 
FUNCTION13
;

1266 
uöt32_t
 
RESERVED28
[1U];

1267 
__IOM
 
uöt32_t
 
COMP14
;

1268 
uöt32_t
 
RESERVED29
[1U];

1269 
__IOM
 
uöt32_t
 
FUNCTION14
;

1270 
uöt32_t
 
RESERVED30
[1U];

1271 
__IOM
 
uöt32_t
 
COMP15
;

1272 
uöt32_t
 
RESERVED31
[1U];

1273 
__IOM
 
uöt32_t
 
FUNCTION15
;

1274 
uöt32_t
 
RESERVED32
[934U];

1275 
__IM
 
uöt32_t
 
LSR
;

1276 
uöt32_t
 
RESERVED33
[1U];

1277 
__IM
 
uöt32_t
 
DEVARCH
;

1278 } 
	tDWT_Ty≥
;

1281 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

1282 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1284 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

1285 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1287 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

1288 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1290 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

1291 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1293 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

1294 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1296 
	#DWT_CTRL_CYCDISS_Pos
 23U

	)

1297 
	#DWT_CTRL_CYCDISS_Msk
 (0x1UL << 
DWT_CTRL_CYCDISS_Pos
Ë

	)

1299 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

1300 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1302 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

1303 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1305 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

1306 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1308 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

1309 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1311 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

1312 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1314 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

1315 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1317 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

1318 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1320 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

1321 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1323 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

1324 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1326 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

1327 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1329 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

1330 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1332 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

1333 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1335 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

1336 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

1339 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

1340 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1343 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1344 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1347 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1348 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1351 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1352 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1355 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1356 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1359 
	#DWT_FUNCTION_ID_Pos
 27U

	)

1360 
	#DWT_FUNCTION_ID_Msk
 (0x1FUL << 
DWT_FUNCTION_ID_Pos
Ë

	)

1362 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1363 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1365 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1366 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1368 
	#DWT_FUNCTION_ACTION_Pos
 4U

	)

1369 
	#DWT_FUNCTION_ACTION_Msk
 (0x1UL << 
DWT_FUNCTION_ACTION_Pos
Ë

	)

1371 
	#DWT_FUNCTION_MATCH_Pos
 0U

	)

1372 
	#DWT_FUNCTION_MATCH_Msk
 (0xFUL )

	)

1389 
__IM
 
uöt32_t
 
SSPSR
;

1390 
__IOM
 
uöt32_t
 
CSPSR
;

1391 
uöt32_t
 
RESERVED0
[2U];

1392 
__IOM
 
uöt32_t
 
ACPR
;

1393 
uöt32_t
 
RESERVED1
[55U];

1394 
__IOM
 
uöt32_t
 
SPPR
;

1395 
uöt32_t
 
RESERVED2
[131U];

1396 
__IM
 
uöt32_t
 
FFSR
;

1397 
__IOM
 
uöt32_t
 
FFCR
;

1398 
__IOM
 
uöt32_t
 
PSCR
;

1399 
uöt32_t
 
RESERVED3
[759U];

1400 
__IM
 
uöt32_t
 
TRIGGER
;

1401 
__IM
 
uöt32_t
 
ITFTTD0
;

1402 
__IOM
 
uöt32_t
 
ITATBCTR2
;

1403 
uöt32_t
 
RESERVED4
[1U];

1404 
__IM
 
uöt32_t
 
ITATBCTR0
;

1405 
__IM
 
uöt32_t
 
ITFTTD1
;

1406 
__IOM
 
uöt32_t
 
ITCTRL
;

1407 
uöt32_t
 
RESERVED5
[39U];

1408 
__IOM
 
uöt32_t
 
CLAIMSET
;

1409 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1410 
uöt32_t
 
RESERVED7
[8U];

1411 
__IM
 
uöt32_t
 
DEVID
;

1412 
__IM
 
uöt32_t
 
DEVTYPE
;

1413 } 
	tTPI_Ty≥
;

1416 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1417 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1420 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1421 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1424 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1425 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1427 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1428 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1430 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1431 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1433 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1434 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1437 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1438 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1440 
	#TPI_FFCR_FOnM™_Pos
 6U

	)

1441 
	#TPI_FFCR_FOnM™_Msk
 (0x1UL << 
TPI_FFCR_FOnM™_Pos
Ë

	)

1443 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1444 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1447 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1448 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1451 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
 29U

	)

1452 
	#TPI_ITFTTD0_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_ATVALID_Pos
Ë

	)

1454 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
 27U

	)

1455 
	#TPI_ITFTTD0_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF2_byãcou¡_Pos
Ë

	)

1457 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
 26U

	)

1458 
	#TPI_ITFTTD0_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_ATVALID_Pos
Ë

	)

1460 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
 24U

	)

1461 
	#TPI_ITFTTD0_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD0_ATB_IF1_byãcou¡_Pos
Ë

	)

1463 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Pos
 16U

	)

1464 
	#TPI_ITFTTD0_ATB_IF1_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

1466 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Pos
 8U

	)

1467 
	#TPI_ITFTTD0_ATB_IF1_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD0_ATB_IF1_d©a1_Pos
Ë

	)

1469 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Pos
 0U

	)

1470 
	#TPI_ITFTTD0_ATB_IF1_d©a0_Msk
 (0xFFUL )

	)

1473 
	#TPI_ITATBCTR2_AFVALID2S_Pos
 1U

	)

1474 
	#TPI_ITATBCTR2_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID2S_Pos
Ë

	)

1476 
	#TPI_ITATBCTR2_AFVALID1S_Pos
 1U

	)

1477 
	#TPI_ITATBCTR2_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR2_AFVALID1S_Pos
Ë

	)

1479 
	#TPI_ITATBCTR2_ATREADY2S_Pos
 0U

	)

1480 
	#TPI_ITATBCTR2_ATREADY2S_Msk
 (0x1UL )

	)

1482 
	#TPI_ITATBCTR2_ATREADY1S_Pos
 0U

	)

1483 
	#TPI_ITATBCTR2_ATREADY1S_Msk
 (0x1UL )

	)

1486 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
 29U

	)

1487 
	#TPI_ITFTTD1_ATB_IF2_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_ATVALID_Pos
Ë

	)

1489 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
 27U

	)

1490 
	#TPI_ITFTTD1_ATB_IF2_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF2_byãcou¡_Pos
Ë

	)

1492 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
 26U

	)

1493 
	#TPI_ITFTTD1_ATB_IF1_ATVALID_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_ATVALID_Pos
Ë

	)

1495 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
 24U

	)

1496 
	#TPI_ITFTTD1_ATB_IF1_byãcou¡_Msk
 (0x3UL << 
TPI_ITFTTD1_ATB_IF1_byãcou¡_Pos
Ë

	)

1498 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Pos
 16U

	)

1499 
	#TPI_ITFTTD1_ATB_IF2_d©a2_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

1501 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Pos
 8U

	)

1502 
	#TPI_ITFTTD1_ATB_IF2_d©a1_Msk
 (0xFFUL << 
TPI_ITFTTD1_ATB_IF2_d©a1_Pos
Ë

	)

1504 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Pos
 0U

	)

1505 
	#TPI_ITFTTD1_ATB_IF2_d©a0_Msk
 (0xFFUL )

	)

1508 
	#TPI_ITATBCTR0_AFVALID2S_Pos
 1U

	)

1509 
	#TPI_ITATBCTR0_AFVALID2S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID2S_Pos
Ë

	)

1511 
	#TPI_ITATBCTR0_AFVALID1S_Pos
 1U

	)

1512 
	#TPI_ITATBCTR0_AFVALID1S_Msk
 (0x1UL << 
TPI_ITATBCTR0_AFVALID1S_Pos
Ë

	)

1514 
	#TPI_ITATBCTR0_ATREADY2S_Pos
 0U

	)

1515 
	#TPI_ITATBCTR0_ATREADY2S_Msk
 (0x1UL )

	)

1517 
	#TPI_ITATBCTR0_ATREADY1S_Pos
 0U

	)

1518 
	#TPI_ITATBCTR0_ATREADY1S_Msk
 (0x1UL )

	)

1521 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1522 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1525 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1526 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1528 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1529 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1531 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1532 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1534 
	#TPI_DEVID_FIFOSZ_Pos
 6U

	)

1535 
	#TPI_DEVID_FIFOSZ_Msk
 (0x7UL << 
TPI_DEVID_FIFOSZ_Pos
Ë

	)

1537 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1538 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x3FUL )

	)

1541 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1542 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1544 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1545 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1550 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1563 
__IM
 
uöt32_t
 
TYPE
;

1564 
__IOM
 
uöt32_t
 
CTRL
;

1565 
__IOM
 
uöt32_t
 
RNR
;

1566 
__IOM
 
uöt32_t
 
RBAR
;

1567 
__IOM
 
uöt32_t
 
RLAR
;

1568 
__IOM
 
uöt32_t
 
RBAR_A1
;

1569 
__IOM
 
uöt32_t
 
RLAR_A1
;

1570 
__IOM
 
uöt32_t
 
RBAR_A2
;

1571 
__IOM
 
uöt32_t
 
RLAR_A2
;

1572 
__IOM
 
uöt32_t
 
RBAR_A3
;

1573 
__IOM
 
uöt32_t
 
RLAR_A3
;

1574 
uöt32_t
 
RESERVED0
[1];

1576 
__IOM
 
uöt32_t
 
MAIR
[2];

1578 
__IOM
 
uöt32_t
 
MAIR0
;

1579 
__IOM
 
uöt32_t
 
MAIR1
;

1582 } 
	tMPU_Ty≥
;

1584 
	#MPU_TYPE_RALIASES
 4U

	)

1587 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1588 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1590 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1591 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1593 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1594 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1597 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1598 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1600 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1601 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1603 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1604 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1607 
	#MPU_RNR_REGION_Pos
 0U

	)

1608 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1611 
	#MPU_RBAR_BASE_Pos
 5U

	)

1612 
	#MPU_RBAR_BASE_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_BASE_Pos
Ë

	)

1614 
	#MPU_RBAR_SH_Pos
 3U

	)

1615 
	#MPU_RBAR_SH_Msk
 (0x3UL << 
MPU_RBAR_SH_Pos
Ë

	)

1617 
	#MPU_RBAR_AP_Pos
 1U

	)

1618 
	#MPU_RBAR_AP_Msk
 (0x3UL << 
MPU_RBAR_AP_Pos
Ë

	)

1620 
	#MPU_RBAR_XN_Pos
 0U

	)

1621 
	#MPU_RBAR_XN_Msk
 (01UL )

	)

1624 
	#MPU_RLAR_LIMIT_Pos
 5U

	)

1625 
	#MPU_RLAR_LIMIT_Msk
 (0x7FFFFFFUL << 
MPU_RLAR_LIMIT_Pos
Ë

	)

1627 
	#MPU_RLAR_AârIndx_Pos
 1U

	)

1628 
	#MPU_RLAR_AârIndx_Msk
 (0x7UL << 
MPU_RLAR_AârIndx_Pos
Ë

	)

1630 
	#MPU_RLAR_EN_Pos
 0U

	)

1631 
	#MPU_RLAR_EN_Msk
 (1UL )

	)

1634 
	#MPU_MAIR0_Aâr3_Pos
 24U

	)

1635 
	#MPU_MAIR0_Aâr3_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr3_Pos
Ë

	)

1637 
	#MPU_MAIR0_Aâr2_Pos
 16U

	)

1638 
	#MPU_MAIR0_Aâr2_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr2_Pos
Ë

	)

1640 
	#MPU_MAIR0_Aâr1_Pos
 8U

	)

1641 
	#MPU_MAIR0_Aâr1_Msk
 (0xFFUL << 
MPU_MAIR0_Aâr1_Pos
Ë

	)

1643 
	#MPU_MAIR0_Aâr0_Pos
 0U

	)

1644 
	#MPU_MAIR0_Aâr0_Msk
 (0xFFUL )

	)

1647 
	#MPU_MAIR1_Aâr7_Pos
 24U

	)

1648 
	#MPU_MAIR1_Aâr7_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr7_Pos
Ë

	)

1650 
	#MPU_MAIR1_Aâr6_Pos
 16U

	)

1651 
	#MPU_MAIR1_Aâr6_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr6_Pos
Ë

	)

1653 
	#MPU_MAIR1_Aâr5_Pos
 8U

	)

1654 
	#MPU_MAIR1_Aâr5_Msk
 (0xFFUL << 
MPU_MAIR1_Aâr5_Pos
Ë

	)

1656 
	#MPU_MAIR1_Aâr4_Pos
 0U

	)

1657 
	#MPU_MAIR1_Aâr4_Msk
 (0xFFUL )

	)

1663 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

1676 
__IOM
 
uöt32_t
 
CTRL
;

1677 
__IM
 
uöt32_t
 
TYPE
;

1678 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1679 
__IOM
 
uöt32_t
 
RNR
;

1680 
__IOM
 
uöt32_t
 
RBAR
;

1681 
__IOM
 
uöt32_t
 
RLAR
;

1683 
uöt32_t
 
RESERVED0
[3];

1685 
__IOM
 
uöt32_t
 
SFSR
;

1686 
__IOM
 
uöt32_t
 
SFAR
;

1687 } 
	tSAU_Ty≥
;

1690 
	#SAU_CTRL_ALLNS_Pos
 1U

	)

1691 
	#SAU_CTRL_ALLNS_Msk
 (1UL << 
SAU_CTRL_ALLNS_Pos
Ë

	)

1693 
	#SAU_CTRL_ENABLE_Pos
 0U

	)

1694 
	#SAU_CTRL_ENABLE_Msk
 (1UL )

	)

1697 
	#SAU_TYPE_SREGION_Pos
 0U

	)

1698 
	#SAU_TYPE_SREGION_Msk
 (0xFFUL )

	)

1700 #i‡
deföed
 (
__SAUREGION_PRESENT
) && (__SAUREGION_PRESENT == 1U)

1702 
	#SAU_RNR_REGION_Pos
 0U

	)

1703 
	#SAU_RNR_REGION_Msk
 (0xFFUL )

	)

1706 
	#SAU_RBAR_BADDR_Pos
 5U

	)

1707 
	#SAU_RBAR_BADDR_Msk
 (0x7FFFFFFUL << 
SAU_RBAR_BADDR_Pos
Ë

	)

1710 
	#SAU_RLAR_LADDR_Pos
 5U

	)

1711 
	#SAU_RLAR_LADDR_Msk
 (0x7FFFFFFUL << 
SAU_RLAR_LADDR_Pos
Ë

	)

1713 
	#SAU_RLAR_NSC_Pos
 1U

	)

1714 
	#SAU_RLAR_NSC_Msk
 (1UL << 
SAU_RLAR_NSC_Pos
Ë

	)

1716 
	#SAU_RLAR_ENABLE_Pos
 0U

	)

1717 
	#SAU_RLAR_ENABLE_Msk
 (1UL )

	)

1722 
	#SAU_SFSR_LSERR_Pos
 7U

	)

1723 
	#SAU_SFSR_LSERR_Msk
 (1UL << 
SAU_SFSR_LSERR_Pos
Ë

	)

1725 
	#SAU_SFSR_SFARVALID_Pos
 6U

	)

1726 
	#SAU_SFSR_SFARVALID_Msk
 (1UL << 
SAU_SFSR_SFARVALID_Pos
Ë

	)

1728 
	#SAU_SFSR_LSPERR_Pos
 5U

	)

1729 
	#SAU_SFSR_LSPERR_Msk
 (1UL << 
SAU_SFSR_LSPERR_Pos
Ë

	)

1731 
	#SAU_SFSR_INVTRAN_Pos
 4U

	)

1732 
	#SAU_SFSR_INVTRAN_Msk
 (1UL << 
SAU_SFSR_INVTRAN_Pos
Ë

	)

1734 
	#SAU_SFSR_AUVIOL_Pos
 3U

	)

1735 
	#SAU_SFSR_AUVIOL_Msk
 (1UL << 
SAU_SFSR_AUVIOL_Pos
Ë

	)

1737 
	#SAU_SFSR_INVER_Pos
 2U

	)

1738 
	#SAU_SFSR_INVER_Msk
 (1UL << 
SAU_SFSR_INVER_Pos
Ë

	)

1740 
	#SAU_SFSR_INVIS_Pos
 1U

	)

1741 
	#SAU_SFSR_INVIS_Msk
 (1UL << 
SAU_SFSR_INVIS_Pos
Ë

	)

1743 
	#SAU_SFSR_INVEP_Pos
 0U

	)

1744 
	#SAU_SFSR_INVEP_Msk
 (1UL )

	)

1762 
uöt32_t
 
RESERVED0
[1U];

1763 
__IOM
 
uöt32_t
 
FPCCR
;

1764 
__IOM
 
uöt32_t
 
FPCAR
;

1765 
__IOM
 
uöt32_t
 
FPDSCR
;

1766 
__IM
 
uöt32_t
 
MVFR0
;

1767 
__IM
 
uöt32_t
 
MVFR1
;

1768 } 
	tFPU_Ty≥
;

1771 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1772 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1774 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1775 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1777 
	#FPU_FPCCR_LSPENS_Pos
 29U

	)

1778 
	#FPU_FPCCR_LSPENS_Msk
 (1UL << 
FPU_FPCCR_LSPENS_Pos
Ë

	)

1780 
	#FPU_FPCCR_CLRONRET_Pos
 28U

	)

1781 
	#FPU_FPCCR_CLRONRET_Msk
 (1UL << 
FPU_FPCCR_CLRONRET_Pos
Ë

	)

1783 
	#FPU_FPCCR_CLRONRETS_Pos
 27U

	)

1784 
	#FPU_FPCCR_CLRONRETS_Msk
 (1UL << 
FPU_FPCCR_CLRONRETS_Pos
Ë

	)

1786 
	#FPU_FPCCR_TS_Pos
 26U

	)

1787 
	#FPU_FPCCR_TS_Msk
 (1UL << 
FPU_FPCCR_TS_Pos
Ë

	)

1789 
	#FPU_FPCCR_UFRDY_Pos
 10U

	)

1790 
	#FPU_FPCCR_UFRDY_Msk
 (1UL << 
FPU_FPCCR_UFRDY_Pos
Ë

	)

1792 
	#FPU_FPCCR_SPLIMVIOL_Pos
 9U

	)

1793 
	#FPU_FPCCR_SPLIMVIOL_Msk
 (1UL << 
FPU_FPCCR_SPLIMVIOL_Pos
Ë

	)

1795 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1796 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1798 
	#FPU_FPCCR_SFRDY_Pos
 7U

	)

1799 
	#FPU_FPCCR_SFRDY_Msk
 (1UL << 
FPU_FPCCR_SFRDY_Pos
Ë

	)

1801 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1802 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1804 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1805 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1807 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1808 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1810 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1811 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1813 
	#FPU_FPCCR_S_Pos
 2U

	)

1814 
	#FPU_FPCCR_S_Msk
 (1UL << 
FPU_FPCCR_S_Pos
Ë

	)

1816 
	#FPU_FPCCR_USER_Pos
 1U

	)

1817 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1819 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1820 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1823 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1824 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1827 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1828 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1830 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1831 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1833 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1834 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1836 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1837 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1840 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1841 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1843 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1844 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1846 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1847 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1849 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1850 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1852 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1853 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1855 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1856 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1858 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1859 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1861 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1862 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1865 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1866 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1868 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1869 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1871 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1872 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1874 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1875 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1892 
__IOM
 
uöt32_t
 
DHCSR
;

1893 
__OM
 
uöt32_t
 
DCRSR
;

1894 
__IOM
 
uöt32_t
 
DCRDR
;

1895 
__IOM
 
uöt32_t
 
DEMCR
;

1896 
uöt32_t
 
RESERVED4
[1U];

1897 
__IOM
 
uöt32_t
 
DAUTHCTRL
;

1898 
__IOM
 
uöt32_t
 
DSCSR
;

1899 } 
	tC‹eDebug_Ty≥
;

1902 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1903 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1905 
	#C‹eDebug_DHCSR_S_RESTART_ST_Pos
 26U

	)

1906 
	#C‹eDebug_DHCSR_S_RESTART_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESTART_ST_Pos
Ë

	)

1908 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1909 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1911 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1912 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1914 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1915 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1917 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1918 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1920 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1921 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1923 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1924 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1926 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1927 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1929 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1930 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1932 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1933 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1935 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1936 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1938 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1939 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1942 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1943 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1945 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1946 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1949 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1950 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1952 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1953 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1955 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1956 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1958 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1959 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1961 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1962 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1964 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1965 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1967 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1968 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1970 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1971 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1973 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1974 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1976 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1977 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1979 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1980 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1982 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1983 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1985 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1986 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1989 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
 3U

	)

1990 
	#C‹eDebug_DAUTHCTRL_INTSPNIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPNIDEN_Pos
Ë

	)

1992 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
 2U

	)

1993 
	#C‹eDebug_DAUTHCTRL_SPNIDENSEL_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_SPNIDENSEL_Pos
Ë

	)

1995 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
 1U

	)

1996 
	#C‹eDebug_DAUTHCTRL_INTSPIDEN_Msk
 (1UL << 
C‹eDebug_DAUTHCTRL_INTSPIDEN_Pos
Ë

	)

1998 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Pos
 0U

	)

1999 
	#C‹eDebug_DAUTHCTRL_SPIDENSEL_Msk
 (1UL )

	)

2002 
	#C‹eDebug_DSCSR_CDS_Pos
 16U

	)

2003 
	#C‹eDebug_DSCSR_CDS_Msk
 (1UL << 
C‹eDebug_DSCSR_CDS_Pos
Ë

	)

2005 
	#C‹eDebug_DSCSR_SBRSEL_Pos
 1U

	)

2006 
	#C‹eDebug_DSCSR_SBRSEL_Msk
 (1UL << 
C‹eDebug_DSCSR_SBRSEL_Pos
Ë

	)

2008 
	#C‹eDebug_DSCSR_SBRSELEN_Pos
 0U

	)

2009 
	#C‹eDebug_DSCSR_SBRSELEN_Msk
 (1UL )

	)

2027 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

2035 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

2048 
	#SCS_BASE
 (0xE000E000ULË

	)

2049 
	#ITM_BASE
 (0xE0000000ULË

	)

2050 
	#DWT_BASE
 (0xE0001000ULË

	)

2051 
	#TPI_BASE
 (0xE0040000ULË

	)

2052 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

2053 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

2054 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

2055 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

2057 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

2058 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

2059 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

2060 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

2061 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

2062 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

2063 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

2064 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
 )

	)

2066 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2067 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

2068 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

2071 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2072 
	#SAU_BASE
 (
SCS_BASE
 + 0x0DD0ULË

	)

2073 
	#SAU
 ((
SAU_Ty≥
 *Ë
SAU_BASE
 )

	)

2076 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

2077 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

2079 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2080 
	#SCS_BASE_NS
 (0xE002E000ULË

	)

2081 
	#C‹eDebug_BASE_NS
 (0xE002EDF0ULË

	)

2082 
	#SysTick_BASE_NS
 (
SCS_BASE_NS
 + 0x0010ULË

	)

2083 
	#NVIC_BASE_NS
 (
SCS_BASE_NS
 + 0x0100ULË

	)

2084 
	#SCB_BASE_NS
 (
SCS_BASE_NS
 + 0x0D00ULË

	)

2086 
	#SCnSCB_NS
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE_NS
 )

	)

2087 
	#SCB_NS
 ((
SCB_Ty≥
 *Ë
SCB_BASE_NS
 )

	)

2088 
	#SysTick_NS
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE_NS
 )

	)

2089 
	#NVIC_NS
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE_NS
 )

	)

2090 
	#C‹eDebug_NS
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE_NS
Ë

	)

2092 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2093 
	#MPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0D90ULË

	)

2094 
	#MPU_NS
 ((
MPU_Ty≥
 *Ë
MPU_BASE_NS
 )

	)

2097 
	#FPU_BASE_NS
 (
SCS_BASE_NS
 + 0x0F30ULË

	)

2098 
	#FPU_NS
 ((
FPU_Ty≥
 *Ë
FPU_BASE_NS
 )

	)

2127 #ifde‡
CMSIS_NVIC_VIRTUAL


2128 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2129 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

2131 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


2133 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

2134 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

2135 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

2136 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

2137 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

2138 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

2139 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

2140 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

2141 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

2142 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

2143 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

2144 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

2147 #ifde‡
CMSIS_VECTAB_VIRTUAL


2148 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2149 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

2151 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


2153 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

2154 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

2157 
	#NVIC_USER_IRQ_OFFSET
 16

	)

2163 
	#FNC_RETURN
 (0xFEFFFFFFULË

	)

2166 
	#EXC_RETURN_PREFIX
 (0xFF000000ULË

	)

2167 
	#EXC_RETURN_S
 (0x00000040ULË

	)

2168 
	#EXC_RETURN_DCRS
 (0x00000020ULË

	)

2169 
	#EXC_RETURN_FTYPE
 (0x00000010ULË

	)

2170 
	#EXC_RETURN_MODE
 (0x00000008ULË

	)

2171 
	#EXC_RETURN_SPSEL
 (0x00000002ULË

	)

2172 
	#EXC_RETURN_ES
 (0x00000001ULË

	)

2175 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

2176 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125AULË

	)

2178 
	#EXC_INTEGRITY_SIGNATURE
 (0xFEFA125BULË

	)

2191 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

2193 
uöt32_t
 
ªg_vÆue
;

2194 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2196 
ªg_vÆue
 = 
SCB
->
AIRCR
;

2197 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2198 
ªg_vÆue
 = (reg_value |

2199 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2200 (
Pri‹ôyGroupTmp
 << 8U) );

2201 
SCB
->
AIRCR
 = 
ªg_vÆue
;

2210 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

2212  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2222 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2224 i‡((
öt32_t
)(
IRQn
) >= 0)

2226 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2239 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2241 i‡((
öt32_t
)(
IRQn
) >= 0)

2243 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2258 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

2260 i‡((
öt32_t
)(
IRQn
) >= 0)

2262 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2263 
__DSB
();

2264 
__ISB
();

2277 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2279 i‡((
öt32_t
)(
IRQn
) >= 0)

2281 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2296 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2298 i‡((
öt32_t
)(
IRQn
) >= 0)

2300 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2311 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

2313 i‡((
öt32_t
)(
IRQn
) >= 0)

2315 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2328 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

2330 i‡((
öt32_t
)(
IRQn
) >= 0)

2332 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2341 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2350 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2352 i‡((
öt32_t
)(
IRQn
) >= 0)

2354 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2371 
__STATIC_INLINE
 
uöt32_t
 
NVIC_SëT¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2373 i‡((
öt32_t
)(
IRQn
) >= 0)

2375 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] |= ((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2376 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2393 
__STATIC_INLINE
 
uöt32_t
 
NVIC_CÀ¨T¨gëSèã
(
IRQn_Ty≥
 
IRQn
)

2395 i‡((
öt32_t
)(
IRQn
) >= 0)

2397 
NVIC
->
ITNS
[(((
uöt32_t
)
IRQn
) >> 5UL)] &= ~((uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL)));

2398 ((
uöt32_t
)(((
NVIC
->
ITNS
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2417 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2419 i‡((
öt32_t
)(
IRQn
) >= 0)

2421 
NVIC
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2425 
SCB
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2439 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

2442 i‡((
öt32_t
)(
IRQn
) >= 0)

2444 (((
uöt32_t
)
NVIC
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2448 (((
uöt32_t
)
SCB
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2464 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

2466 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2467 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2468 
uöt32_t
 
SubPri‹ôyBôs
;

2470 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2471 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2474 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

2475 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

2491 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

2493 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2494 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2495 
uöt32_t
 
SubPri‹ôyBôs
;

2497 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2498 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2500 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

2501 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

2514 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

2516 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2517 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

2529 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

2531 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2532  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

2540 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

2542 
__DSB
();

2544 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2545 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

2546 
SCB_AIRCR_SYSRESETREQ_Msk
 );

2547 
__DSB
();

2551 
__NOP
();

2555 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2565 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôyGroupög_NS
(
uöt32_t
 
Pri‹ôyGroup
)

2567 
uöt32_t
 
ªg_vÆue
;

2568 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2570 
ªg_vÆue
 = 
SCB_NS
->
AIRCR
;

2571 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

2572 
ªg_vÆue
 = (reg_value |

2573 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2574 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

2575 
SCB_NS
->
AIRCR
 = 
ªg_vÆue
;

2584 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôyGroupög_NS
()

2586  ((
uöt32_t
)((
SCB_NS
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

2596 
__STATIC_INLINE
 
TZ_NVIC_E«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2598 i‡((
öt32_t
)(
IRQn
) >= 0)

2600 
NVIC_NS
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2613 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëE«bÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2615 i‡((
öt32_t
)(
IRQn
) >= 0)

2617 ((
uöt32_t
)(((
NVIC_NS
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2632 
__STATIC_INLINE
 
TZ_NVIC_DißbÀIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2634 i‡((
öt32_t
)(
IRQn
) >= 0)

2636 
NVIC_NS
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2649 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2651 i‡((
öt32_t
)(
IRQn
) >= 0)

2653 ((
uöt32_t
)(((
NVIC_NS
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2668 
__STATIC_INLINE
 
TZ_NVIC_SëPídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2670 i‡((
öt32_t
)(
IRQn
) >= 0)

2672 
NVIC_NS
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2683 
__STATIC_INLINE
 
TZ_NVIC_CÀ¨PídögIRQ_NS
(
IRQn_Ty≥
 
IRQn
)

2685 i‡((
öt32_t
)(
IRQn
) >= 0)

2687 
NVIC_NS
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2700 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëA˘ive_NS
(
IRQn_Ty≥
 
IRQn
)

2702 i‡((
öt32_t
)(
IRQn
) >= 0)

2704 ((
uöt32_t
)(((
NVIC_NS
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2722 
__STATIC_INLINE
 
TZ_NVIC_SëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2724 i‡((
öt32_t
)(
IRQn
) >= 0)

2726 
NVIC_NS
->
IPR
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2730 
SCB_NS
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2743 
__STATIC_INLINE
 
uöt32_t
 
TZ_NVIC_GëPri‹ôy_NS
(
IRQn_Ty≥
 
IRQn
)

2746 i‡((
öt32_t
)(
IRQn
) >= 0)

2748 (((
uöt32_t
)
NVIC_NS
->
IPR
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2752 (((
uöt32_t
)
SCB_NS
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2761 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2763 
	~"mpu_¨mv8.h
"

2783 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

2785 
uöt32_t
 
mv‰0
;

2787 
mv‰0
 = 
FPU
->
MVFR0
;

2788 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x220U)

2792 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2815 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2821 
__STATIC_INLINE
 
TZ_SAU_E«bÀ
()

2823 
SAU
->
CTRL
 |(
SAU_CTRL_ENABLE_Msk
);

2832 
__STATIC_INLINE
 
TZ_SAU_DißbÀ
()

2834 
SAU
->
CTRL
 &~(
SAU_CTRL_ENABLE_Msk
);

2852 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2865 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2867 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2872 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2873 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2874 
SysTick
->
VAL
 = 0UL;

2875 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2876 
SysTick_CTRL_TICKINT_Msk
 |

2877 
SysTick_CTRL_ENABLE_Msk
;

2881 #i‡
deföed
 (
__ARM_FEATURE_CMSE
) && (__ARM_FEATURE_CMSE == 3U)

2894 
__STATIC_INLINE
 
uöt32_t
 
TZ_SysTick_C⁄fig_NS
(uöt32_à
ticks
)

2896 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2901 
SysTick_NS
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2902 
TZ_NVIC_SëPri‹ôy_NS
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2903 
SysTick_NS
->
VAL
 = 0UL;

2904 
SysTick_NS
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2905 
SysTick_CTRL_TICKINT_Msk
 |

2906 
SysTick_CTRL_ENABLE_Msk
;

2925 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2926 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2937 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2939 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2940 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2942 
ITM
->
PORT
[0U].
u32
 == 0UL)

2944 
__NOP
();

2946 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2948  (
	gch
);

2958 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2960 
öt32_t
 
	gch
 = -1;

2962 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2964 
ch
 = 
ITM_RxBuf„r
;

2965 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2968  (
	gch
);

2978 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2981 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2996 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm4.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM4_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM4_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM4_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (4UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 
__TARGET_FPU_VFP


78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

89 #i‡
deföed
 
__ARM_PCS_VFP


90 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

91 
	#__FPU_USED
 1U

	)

94 
	#__FPU_USED
 0U

	)

97 
	#__FPU_USED
 0U

	)

100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

102 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

103 
	#__FPU_USED
 1U

	)

106 
	#__FPU_USED
 0U

	)

109 
	#__FPU_USED
 0U

	)

112 #ñi‡
deföed
 ( 
__ICCARM__
 )

113 #i‡
deföed
 
__ARMVFP__


114 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

115 
	#__FPU_USED
 1U

	)

118 
	#__FPU_USED
 0U

	)

121 
	#__FPU_USED
 0U

	)

124 #ñi‡
deföed
 ( 
__TI_ARM__
 )

125 #i‡
deföed
 
__TI_VFP_SUPPORT__


126 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

127 
	#__FPU_USED
 1U

	)

130 
	#__FPU_USED
 0U

	)

133 
	#__FPU_USED
 0U

	)

136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


138 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

139 
	#__FPU_USED
 1U

	)

142 
	#__FPU_USED
 0U

	)

145 
	#__FPU_USED
 0U

	)

148 #ñi‡
deföed
 ( 
__CSMC__
 )

149 #i‡–
__CSMC__
 & 0x400U)

150 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

151 
	#__FPU_USED
 1U

	)

154 
	#__FPU_USED
 0U

	)

157 
	#__FPU_USED
 0U

	)

162 
	~"cmsis_compûî.h
"

165 #ifde‡
__˝lu•lus


171 #i‚de‡
__CMSIS_GENERIC


173 #i‚de‡
__CORE_CM4_H_DEPENDANT


174 
	#__CORE_CM4_H_DEPENDANT


	)

176 #ifde‡
__˝lu•lus


181 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


182 #i‚de‡
__CM4_REV


183 
	#__CM4_REV
 0x0000U

	)

187 #i‚de‡
__FPU_PRESENT


188 
	#__FPU_PRESENT
 0U

	)

192 #i‚de‡
__MPU_PRESENT


193 
	#__MPU_PRESENT
 0U

	)

197 #i‚de‡
__NVIC_PRIO_BITS


198 
	#__NVIC_PRIO_BITS
 3U

	)

202 #i‚de‡
__Víd‹_SysTickC⁄fig


203 
	#__Víd‹_SysTickC⁄fig
 0U

	)

216 #ifde‡
__˝lu•lus


217 
	#__I
 vﬁ©ûê

	)

219 
	#__I
 vﬁ©ûêc⁄°

	)

221 
	#__O
 vﬁ©ûê

	)

222 
	#__IO
 vﬁ©ûê

	)

225 
	#__IM
 vﬁ©ûêc⁄°

	)

226 
	#__OM
 vﬁ©ûê

	)

227 
	#__IOM
 vﬁ©ûê

	)

263 
uöt32_t
 
_ª£rved0
:16;

264 
uöt32_t
 
GE
:4;

265 
uöt32_t
 
_ª£rved1
:7;

266 
uöt32_t
 
Q
:1;

267 
uöt32_t
 
V
:1;

268 
uöt32_t
 
C
:1;

269 
uöt32_t
 
Z
:1;

270 
uöt32_t
 
N
:1;

271 } 
b
;

272 
uöt32_t
 
w
;

273 } 
	tAPSR_Ty≥
;

276 
	#APSR_N_Pos
 31U

	)

277 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

279 
	#APSR_Z_Pos
 30U

	)

280 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

282 
	#APSR_C_Pos
 29U

	)

283 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

285 
	#APSR_V_Pos
 28U

	)

286 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

288 
	#APSR_Q_Pos
 27U

	)

289 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

291 
	#APSR_GE_Pos
 16U

	)

292 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

302 
uöt32_t
 
ISR
:9;

303 
uöt32_t
 
_ª£rved0
:23;

304 } 
b
;

305 
uöt32_t
 
w
;

306 } 
	tIPSR_Ty≥
;

309 
	#IPSR_ISR_Pos
 0U

	)

310 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

320 
uöt32_t
 
ISR
:9;

321 
uöt32_t
 
_ª£rved0
:1;

322 
uöt32_t
 
ICI_IT_1
:6;

323 
uöt32_t
 
GE
:4;

324 
uöt32_t
 
_ª£rved1
:4;

325 
uöt32_t
 
T
:1;

326 
uöt32_t
 
ICI_IT_2
:2;

327 
uöt32_t
 
Q
:1;

328 
uöt32_t
 
V
:1;

329 
uöt32_t
 
C
:1;

330 
uöt32_t
 
Z
:1;

331 
uöt32_t
 
N
:1;

332 } 
b
;

333 
uöt32_t
 
w
;

334 } 
	txPSR_Ty≥
;

337 
	#xPSR_N_Pos
 31U

	)

338 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

340 
	#xPSR_Z_Pos
 30U

	)

341 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

343 
	#xPSR_C_Pos
 29U

	)

344 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

346 
	#xPSR_V_Pos
 28U

	)

347 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

349 
	#xPSR_Q_Pos
 27U

	)

350 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

352 
	#xPSR_ICI_IT_2_Pos
 25U

	)

353 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

355 
	#xPSR_T_Pos
 24U

	)

356 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

358 
	#xPSR_GE_Pos
 16U

	)

359 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

361 
	#xPSR_ICI_IT_1_Pos
 10U

	)

362 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

364 
	#xPSR_ISR_Pos
 0U

	)

365 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

375 
uöt32_t
 
nPRIV
:1;

376 
uöt32_t
 
SPSEL
:1;

377 
uöt32_t
 
FPCA
:1;

378 
uöt32_t
 
_ª£rved0
:29;

379 } 
b
;

380 
uöt32_t
 
w
;

381 } 
	tCONTROL_Ty≥
;

384 
	#CONTROL_FPCA_Pos
 2U

	)

385 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

387 
	#CONTROL_SPSEL_Pos
 1U

	)

388 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

390 
	#CONTROL_nPRIV_Pos
 0U

	)

391 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

408 
__IOM
 
uöt32_t
 
ISER
[8U];

409 
uöt32_t
 
RESERVED0
[24U];

410 
__IOM
 
uöt32_t
 
ICER
[8U];

411 
uöt32_t
 
RSERVED1
[24U];

412 
__IOM
 
uöt32_t
 
ISPR
[8U];

413 
uöt32_t
 
RESERVED2
[24U];

414 
__IOM
 
uöt32_t
 
ICPR
[8U];

415 
uöt32_t
 
RESERVED3
[24U];

416 
__IOM
 
uöt32_t
 
IABR
[8U];

417 
uöt32_t
 
RESERVED4
[56U];

418 
__IOM
 
uöt8_t
 
IP
[240U];

419 
uöt32_t
 
RESERVED5
[644U];

420 
__OM
 
uöt32_t
 
STIR
;

421 } 
	tNVIC_Ty≥
;

424 
	#NVIC_STIR_INTID_Pos
 0U

	)

425 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

442 
__IM
 
uöt32_t
 
CPUID
;

443 
__IOM
 
uöt32_t
 
ICSR
;

444 
__IOM
 
uöt32_t
 
VTOR
;

445 
__IOM
 
uöt32_t
 
AIRCR
;

446 
__IOM
 
uöt32_t
 
SCR
;

447 
__IOM
 
uöt32_t
 
CCR
;

448 
__IOM
 
uöt8_t
 
SHP
[12U];

449 
__IOM
 
uöt32_t
 
SHCSR
;

450 
__IOM
 
uöt32_t
 
CFSR
;

451 
__IOM
 
uöt32_t
 
HFSR
;

452 
__IOM
 
uöt32_t
 
DFSR
;

453 
__IOM
 
uöt32_t
 
MMFAR
;

454 
__IOM
 
uöt32_t
 
BFAR
;

455 
__IOM
 
uöt32_t
 
AFSR
;

456 
__IM
 
uöt32_t
 
PFR
[2U];

457 
__IM
 
uöt32_t
 
DFR
;

458 
__IM
 
uöt32_t
 
ADR
;

459 
__IM
 
uöt32_t
 
MMFR
[4U];

460 
__IM
 
uöt32_t
 
ISAR
[5U];

461 
uöt32_t
 
RESERVED0
[5U];

462 
__IOM
 
uöt32_t
 
CPACR
;

463 } 
	tSCB_Ty≥
;

466 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

467 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

469 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

470 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

472 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

473 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

475 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

476 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

478 
	#SCB_CPUID_REVISION_Pos
 0U

	)

479 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

482 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

483 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

485 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

486 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

488 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

489 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

491 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

492 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

494 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

495 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

497 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

498 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

500 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

501 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

503 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

504 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

506 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

507 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

509 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

510 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

513 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

514 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

517 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

518 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

520 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

521 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

523 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

524 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

526 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

527 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

529 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

530 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

532 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

533 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

535 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

536 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

539 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

540 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

542 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

543 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

545 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

546 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

549 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

550 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

552 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

553 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

555 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

556 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

558 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

559 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

561 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

562 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

564 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

565 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

568 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

569 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

571 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

572 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

574 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

575 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

577 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

578 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

580 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

581 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

583 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

584 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

586 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

587 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

589 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

590 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

592 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

593 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

595 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

596 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

598 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

599 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

601 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

602 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

604 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

605 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

607 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

608 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

611 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

612 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

614 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

615 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

617 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

618 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

621 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

622 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

624 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

625 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

627 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

628 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

630 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

631 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

633 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

634 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

636 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

637 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

640 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

641 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

643 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

644 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

646 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

647 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

649 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

650 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

652 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

653 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

655 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

656 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

658 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

659 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

662 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

663 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

665 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

666 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

668 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

669 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

671 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

672 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

674 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

675 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

677 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

678 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

681 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

682 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

684 
	#SCB_HFSR_FORCED_Pos
 30U

	)

685 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

687 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

688 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

691 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

692 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

694 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

695 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

697 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

698 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

700 
	#SCB_DFSR_BKPT_Pos
 1U

	)

701 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

703 
	#SCB_DFSR_HALTED_Pos
 0U

	)

704 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

721 
uöt32_t
 
RESERVED0
[1U];

722 
__IM
 
uöt32_t
 
ICTR
;

723 
__IOM
 
uöt32_t
 
ACTLR
;

724 } 
	tSCnSCB_Ty≥
;

727 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

728 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

731 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9U

	)

732 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

734 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8U

	)

735 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

737 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

738 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

740 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1U

	)

741 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

743 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

744 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

761 
__IOM
 
uöt32_t
 
CTRL
;

762 
__IOM
 
uöt32_t
 
LOAD
;

763 
__IOM
 
uöt32_t
 
VAL
;

764 
__IM
 
uöt32_t
 
CALIB
;

765 } 
	tSysTick_Ty≥
;

768 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

769 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

771 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

772 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

774 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

775 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

777 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

778 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

781 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

782 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

785 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

786 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

789 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

790 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

792 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

793 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

795 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

796 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

813 
__OM
 union

815 
__OM
 
uöt8_t
 
u8
;

816 
__OM
 
uöt16_t
 
u16
;

817 
__OM
 
uöt32_t
 
u32
;

818 } 
PORT
 [32U];

819 
uöt32_t
 
RESERVED0
[864U];

820 
__IOM
 
uöt32_t
 
TER
;

821 
uöt32_t
 
RESERVED1
[15U];

822 
__IOM
 
uöt32_t
 
TPR
;

823 
uöt32_t
 
RESERVED2
[15U];

824 
__IOM
 
uöt32_t
 
TCR
;

825 
uöt32_t
 
RESERVED3
[29U];

826 
__OM
 
uöt32_t
 
IWR
;

827 
__IM
 
uöt32_t
 
IRR
;

828 
__IOM
 
uöt32_t
 
IMCR
;

829 
uöt32_t
 
RESERVED4
[43U];

830 
__OM
 
uöt32_t
 
LAR
;

831 
__IM
 
uöt32_t
 
LSR
;

832 
uöt32_t
 
RESERVED5
[6U];

833 
__IM
 
uöt32_t
 
PID4
;

834 
__IM
 
uöt32_t
 
PID5
;

835 
__IM
 
uöt32_t
 
PID6
;

836 
__IM
 
uöt32_t
 
PID7
;

837 
__IM
 
uöt32_t
 
PID0
;

838 
__IM
 
uöt32_t
 
PID1
;

839 
__IM
 
uöt32_t
 
PID2
;

840 
__IM
 
uöt32_t
 
PID3
;

841 
__IM
 
uöt32_t
 
CID0
;

842 
__IM
 
uöt32_t
 
CID1
;

843 
__IM
 
uöt32_t
 
CID2
;

844 
__IM
 
uöt32_t
 
CID3
;

845 } 
	tITM_Ty≥
;

848 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

849 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

852 
	#ITM_TCR_BUSY_Pos
 23U

	)

853 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

855 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

856 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

858 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

859 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

861 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

862 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

864 
	#ITM_TCR_SWOENA_Pos
 4U

	)

865 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

867 
	#ITM_TCR_DWTENA_Pos
 3U

	)

868 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

870 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

871 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

873 
	#ITM_TCR_TSENA_Pos
 1U

	)

874 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

876 
	#ITM_TCR_ITMENA_Pos
 0U

	)

877 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

880 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

881 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

884 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

885 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

888 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

889 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

892 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

893 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

895 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

896 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

898 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

899 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

916 
__IOM
 
uöt32_t
 
CTRL
;

917 
__IOM
 
uöt32_t
 
CYCCNT
;

918 
__IOM
 
uöt32_t
 
CPICNT
;

919 
__IOM
 
uöt32_t
 
EXCCNT
;

920 
__IOM
 
uöt32_t
 
SLEEPCNT
;

921 
__IOM
 
uöt32_t
 
LSUCNT
;

922 
__IOM
 
uöt32_t
 
FOLDCNT
;

923 
__IM
 
uöt32_t
 
PCSR
;

924 
__IOM
 
uöt32_t
 
COMP0
;

925 
__IOM
 
uöt32_t
 
MASK0
;

926 
__IOM
 
uöt32_t
 
FUNCTION0
;

927 
uöt32_t
 
RESERVED0
[1U];

928 
__IOM
 
uöt32_t
 
COMP1
;

929 
__IOM
 
uöt32_t
 
MASK1
;

930 
__IOM
 
uöt32_t
 
FUNCTION1
;

931 
uöt32_t
 
RESERVED1
[1U];

932 
__IOM
 
uöt32_t
 
COMP2
;

933 
__IOM
 
uöt32_t
 
MASK2
;

934 
__IOM
 
uöt32_t
 
FUNCTION2
;

935 
uöt32_t
 
RESERVED2
[1U];

936 
__IOM
 
uöt32_t
 
COMP3
;

937 
__IOM
 
uöt32_t
 
MASK3
;

938 
__IOM
 
uöt32_t
 
FUNCTION3
;

939 } 
	tDWT_Ty≥
;

942 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

943 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

945 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

946 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

948 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

949 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

951 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

952 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

954 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

955 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

957 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

958 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

960 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

961 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

963 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

964 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

966 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

967 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

969 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

970 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

972 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

973 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

975 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

976 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

978 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

979 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

981 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

982 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

984 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

985 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

987 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

988 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

990 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

991 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

993 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

994 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

997 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

998 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1001 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1002 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1005 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1006 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1009 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1010 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1013 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1014 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1017 
	#DWT_MASK_MASK_Pos
 0U

	)

1018 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

1021 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1022 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1024 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

1025 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1027 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

1028 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1030 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1031 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1033 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

1034 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1036 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

1037 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1039 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

1040 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1042 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

1043 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1045 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

1046 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

1063 
__IM
 
uöt32_t
 
SSPSR
;

1064 
__IOM
 
uöt32_t
 
CSPSR
;

1065 
uöt32_t
 
RESERVED0
[2U];

1066 
__IOM
 
uöt32_t
 
ACPR
;

1067 
uöt32_t
 
RESERVED1
[55U];

1068 
__IOM
 
uöt32_t
 
SPPR
;

1069 
uöt32_t
 
RESERVED2
[131U];

1070 
__IM
 
uöt32_t
 
FFSR
;

1071 
__IOM
 
uöt32_t
 
FFCR
;

1072 
__IM
 
uöt32_t
 
FSCR
;

1073 
uöt32_t
 
RESERVED3
[759U];

1074 
__IM
 
uöt32_t
 
TRIGGER
;

1075 
__IM
 
uöt32_t
 
FIFO0
;

1076 
__IM
 
uöt32_t
 
ITATBCTR2
;

1077 
uöt32_t
 
RESERVED4
[1U];

1078 
__IM
 
uöt32_t
 
ITATBCTR0
;

1079 
__IM
 
uöt32_t
 
FIFO1
;

1080 
__IOM
 
uöt32_t
 
ITCTRL
;

1081 
uöt32_t
 
RESERVED5
[39U];

1082 
__IOM
 
uöt32_t
 
CLAIMSET
;

1083 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1084 
uöt32_t
 
RESERVED7
[8U];

1085 
__IM
 
uöt32_t
 
DEVID
;

1086 
__IM
 
uöt32_t
 
DEVTYPE
;

1087 } 
	tTPI_Ty≥
;

1090 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1091 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1094 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1095 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1098 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1099 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1101 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1102 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1104 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1105 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1107 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1108 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1111 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1112 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1114 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1115 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1118 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1119 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1122 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1123 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1125 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1126 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1128 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1129 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1131 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1132 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1134 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1135 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1137 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1138 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1140 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1141 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1144 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1145 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1147 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1148 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1151 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1152 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1154 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1155 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1157 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1158 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1160 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1161 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1163 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1164 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1166 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1167 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1169 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1170 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1173 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1174 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1176 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1177 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1180 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1181 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1184 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1185 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1187 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1188 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1190 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1191 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1193 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1194 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1196 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1197 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1199 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1200 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1203 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1204 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1206 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1207 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1212 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1225 
__IM
 
uöt32_t
 
TYPE
;

1226 
__IOM
 
uöt32_t
 
CTRL
;

1227 
__IOM
 
uöt32_t
 
RNR
;

1228 
__IOM
 
uöt32_t
 
RBAR
;

1229 
__IOM
 
uöt32_t
 
RASR
;

1230 
__IOM
 
uöt32_t
 
RBAR_A1
;

1231 
__IOM
 
uöt32_t
 
RASR_A1
;

1232 
__IOM
 
uöt32_t
 
RBAR_A2
;

1233 
__IOM
 
uöt32_t
 
RASR_A2
;

1234 
__IOM
 
uöt32_t
 
RBAR_A3
;

1235 
__IOM
 
uöt32_t
 
RASR_A3
;

1236 } 
	tMPU_Ty≥
;

1238 
	#MPU_TYPE_RALIASES
 4U

	)

1241 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1242 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1244 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1245 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1247 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1248 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1251 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1252 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1254 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1255 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1257 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1258 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1261 
	#MPU_RNR_REGION_Pos
 0U

	)

1262 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1265 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1266 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1268 
	#MPU_RBAR_VALID_Pos
 4U

	)

1269 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1271 
	#MPU_RBAR_REGION_Pos
 0U

	)

1272 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1275 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1276 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1278 
	#MPU_RASR_XN_Pos
 28U

	)

1279 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1281 
	#MPU_RASR_AP_Pos
 24U

	)

1282 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1284 
	#MPU_RASR_TEX_Pos
 19U

	)

1285 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1287 
	#MPU_RASR_S_Pos
 18U

	)

1288 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1290 
	#MPU_RASR_C_Pos
 17U

	)

1291 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1293 
	#MPU_RASR_B_Pos
 16U

	)

1294 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1296 
	#MPU_RASR_SRD_Pos
 8U

	)

1297 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1299 
	#MPU_RASR_SIZE_Pos
 1U

	)

1300 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1302 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1303 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1321 
uöt32_t
 
RESERVED0
[1U];

1322 
__IOM
 
uöt32_t
 
FPCCR
;

1323 
__IOM
 
uöt32_t
 
FPCAR
;

1324 
__IOM
 
uöt32_t
 
FPDSCR
;

1325 
__IM
 
uöt32_t
 
MVFR0
;

1326 
__IM
 
uöt32_t
 
MVFR1
;

1327 } 
	tFPU_Ty≥
;

1330 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1331 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1333 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1334 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1336 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1337 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1339 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1340 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1342 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1343 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1345 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1346 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1348 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1349 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1351 
	#FPU_FPCCR_USER_Pos
 1U

	)

1352 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1354 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1355 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1358 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1359 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1362 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1363 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1365 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1366 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1368 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1369 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1371 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1372 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1375 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1376 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1378 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1379 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1381 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1382 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1384 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1385 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1387 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1388 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1390 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1391 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1393 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1394 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1396 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1397 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1400 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1401 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1403 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1404 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1406 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1407 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1409 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1410 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1427 
__IOM
 
uöt32_t
 
DHCSR
;

1428 
__OM
 
uöt32_t
 
DCRSR
;

1429 
__IOM
 
uöt32_t
 
DCRDR
;

1430 
__IOM
 
uöt32_t
 
DEMCR
;

1431 } 
	tC‹eDebug_Ty≥
;

1434 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1435 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1437 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1438 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1440 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1441 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1443 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1444 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1446 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1447 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1449 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1450 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1452 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1453 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1455 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1456 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1458 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1459 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1461 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1462 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1464 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1465 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1467 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1468 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1471 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1472 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1474 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1475 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1478 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1479 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1481 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1482 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1484 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1485 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1487 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1488 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1490 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1491 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1493 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1494 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1496 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1497 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1499 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1500 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1502 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1503 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1505 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1506 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1508 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1509 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1511 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1512 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1514 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1515 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1533 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1541 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1554 
	#SCS_BASE
 (0xE000E000ULË

	)

1555 
	#ITM_BASE
 (0xE0000000ULË

	)

1556 
	#DWT_BASE
 (0xE0001000ULË

	)

1557 
	#TPI_BASE
 (0xE0040000ULË

	)

1558 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1559 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1560 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1561 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1563 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1564 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1565 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1566 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1567 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1568 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1569 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1570 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1572 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1573 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1574 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1577 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1578 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1606 #ifde‡
CMSIS_NVIC_VIRTUAL


1607 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1608 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1610 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1612 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1613 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1614 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1615 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1616 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1617 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1618 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1619 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1620 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1621 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1622 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1623 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1626 #ifde‡
CMSIS_VECTAB_VIRTUAL


1627 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1628 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1630 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1632 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1633 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1636 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1640 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1641 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1642 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1643 
	#EXC_RETURN_HANDLER_FPU
 (0xFFFFFFE1ULË

	)

1644 
	#EXC_RETURN_THREAD_MSP_FPU
 (0xFFFFFFE9ULË

	)

1645 
	#EXC_RETURN_THREAD_PSP_FPU
 (0xFFFFFFEDULË

	)

1657 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1659 
uöt32_t
 
ªg_vÆue
;

1660 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1662 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1663 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1664 
ªg_vÆue
 = (reg_value |

1665 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1666 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

1667 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1676 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1678  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1688 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1690 i‡((
öt32_t
)(
IRQn
) >= 0)

1692 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1705 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1707 i‡((
öt32_t
)(
IRQn
) >= 0)

1709 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1724 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1726 i‡((
öt32_t
)(
IRQn
) >= 0)

1728 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1729 
__DSB
();

1730 
__ISB
();

1743 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1745 i‡((
öt32_t
)(
IRQn
) >= 0)

1747 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1762 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1764 i‡((
öt32_t
)(
IRQn
) >= 0)

1766 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1777 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1779 i‡((
öt32_t
)(
IRQn
) >= 0)

1781 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1794 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1796 i‡((
öt32_t
)(
IRQn
) >= 0)

1798 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1816 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1818 i‡((
öt32_t
)(
IRQn
) >= 0)

1820 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1824 
SCB
->
SHP
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1838 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1841 i‡((
öt32_t
)(
IRQn
) >= 0)

1843 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1847 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1863 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1865 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1866 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1867 
uöt32_t
 
SubPri‹ôyBôs
;

1869 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1870 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1873 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1874 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1890 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1892 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1893 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1894 
uöt32_t
 
SubPri‹ôyBôs
;

1896 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1897 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1899 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1900 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1913 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1915 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1916 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1928 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1930 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1931  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1939 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1941 
__DSB
();

1943 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1944 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1945 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1946 
__DSB
();

1950 
__NOP
();

1958 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1960 
	~"mpu_¨mv7.h
"

1981 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1983 
uöt32_t
 
mv‰0
;

1985 
mv‰0
 = 
FPU
->
MVFR0
;

1986 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2009 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2022 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2024 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2029 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2030 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2031 
SysTick
->
VAL
 = 0UL;

2032 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2033 
SysTick_CTRL_TICKINT_Msk
 |

2034 
SysTick_CTRL_ENABLE_Msk
;

2052 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2053 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2064 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2066 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2067 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2069 
ITM
->
PORT
[0U].
u32
 == 0UL)

2071 
__NOP
();

2073 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2075  (
	gch
);

2085 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2087 
öt32_t
 
	gch
 = -1;

2089 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2091 
ch
 = 
ITM_RxBuf„r
;

2092 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2095  (
	gch
);

2105 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2108 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2123 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm7.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_CM7_H_GENERIC


32 
	#__CORE_CM7_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__CM7_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__CM7_CMSIS_VERSION_SUB
 ( 
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__CM7_CMSIS_VERSION
 ((
__CM7_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__CM7_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_M
 (7UË

	)

76 #i‡
deföed
 ( 
__CC_ARM
 )

77 #i‡
deföed
 
__TARGET_FPU_VFP


78 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

79 
	#__FPU_USED
 1U

	)

82 
	#__FPU_USED
 0U

	)

85 
	#__FPU_USED
 0U

	)

88 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

89 #i‡
deföed
 
__ARM_PCS_VFP


90 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

91 
	#__FPU_USED
 1U

	)

94 
	#__FPU_USED
 0U

	)

97 
	#__FPU_USED
 0U

	)

100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

102 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

103 
	#__FPU_USED
 1U

	)

106 
	#__FPU_USED
 0U

	)

109 
	#__FPU_USED
 0U

	)

112 #ñi‡
deföed
 ( 
__ICCARM__
 )

113 #i‡
deföed
 
__ARMVFP__


114 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

115 
	#__FPU_USED
 1U

	)

118 
	#__FPU_USED
 0U

	)

121 
	#__FPU_USED
 0U

	)

124 #ñi‡
deföed
 ( 
__TI_ARM__
 )

125 #i‡
deföed
 
__TI_VFP_SUPPORT__


126 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

127 
	#__FPU_USED
 1U

	)

130 
	#__FPU_USED
 0U

	)

133 
	#__FPU_USED
 0U

	)

136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


138 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

139 
	#__FPU_USED
 1U

	)

142 
	#__FPU_USED
 0U

	)

145 
	#__FPU_USED
 0U

	)

148 #ñi‡
deföed
 ( 
__CSMC__
 )

149 #i‡–
__CSMC__
 & 0x400U)

150 #i‡
deföed
 (
__FPU_PRESENT
) && (__FPU_PRESENT == 1U)

151 
	#__FPU_USED
 1U

	)

154 
	#__FPU_USED
 0U

	)

157 
	#__FPU_USED
 0U

	)

162 
	~"cmsis_compûî.h
"

165 #ifde‡
__˝lu•lus


171 #i‚de‡
__CMSIS_GENERIC


173 #i‚de‡
__CORE_CM7_H_DEPENDANT


174 
	#__CORE_CM7_H_DEPENDANT


	)

176 #ifde‡
__˝lu•lus


181 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


182 #i‚de‡
__CM7_REV


183 
	#__CM7_REV
 0x0000U

	)

187 #i‚de‡
__FPU_PRESENT


188 
	#__FPU_PRESENT
 0U

	)

192 #i‚de‡
__MPU_PRESENT


193 
	#__MPU_PRESENT
 0U

	)

197 #i‚de‡
__ICACHE_PRESENT


198 
	#__ICACHE_PRESENT
 0U

	)

202 #i‚de‡
__DCACHE_PRESENT


203 
	#__DCACHE_PRESENT
 0U

	)

207 #i‚de‡
__DTCM_PRESENT


208 
	#__DTCM_PRESENT
 0U

	)

212 #i‚de‡
__NVIC_PRIO_BITS


213 
	#__NVIC_PRIO_BITS
 3U

	)

217 #i‚de‡
__Víd‹_SysTickC⁄fig


218 
	#__Víd‹_SysTickC⁄fig
 0U

	)

231 #ifde‡
__˝lu•lus


232 
	#__I
 vﬁ©ûê

	)

234 
	#__I
 vﬁ©ûêc⁄°

	)

236 
	#__O
 vﬁ©ûê

	)

237 
	#__IO
 vﬁ©ûê

	)

240 
	#__IM
 vﬁ©ûêc⁄°

	)

241 
	#__OM
 vﬁ©ûê

	)

242 
	#__IOM
 vﬁ©ûê

	)

278 
uöt32_t
 
_ª£rved0
:16;

279 
uöt32_t
 
GE
:4;

280 
uöt32_t
 
_ª£rved1
:7;

281 
uöt32_t
 
Q
:1;

282 
uöt32_t
 
V
:1;

283 
uöt32_t
 
C
:1;

284 
uöt32_t
 
Z
:1;

285 
uöt32_t
 
N
:1;

286 } 
b
;

287 
uöt32_t
 
w
;

288 } 
	tAPSR_Ty≥
;

291 
	#APSR_N_Pos
 31U

	)

292 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

294 
	#APSR_Z_Pos
 30U

	)

295 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

297 
	#APSR_C_Pos
 29U

	)

298 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

300 
	#APSR_V_Pos
 28U

	)

301 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

303 
	#APSR_Q_Pos
 27U

	)

304 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

306 
	#APSR_GE_Pos
 16U

	)

307 
	#APSR_GE_Msk
 (0xFUL << 
APSR_GE_Pos
Ë

	)

317 
uöt32_t
 
ISR
:9;

318 
uöt32_t
 
_ª£rved0
:23;

319 } 
b
;

320 
uöt32_t
 
w
;

321 } 
	tIPSR_Ty≥
;

324 
	#IPSR_ISR_Pos
 0U

	)

325 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

335 
uöt32_t
 
ISR
:9;

336 
uöt32_t
 
_ª£rved0
:1;

337 
uöt32_t
 
ICI_IT_1
:6;

338 
uöt32_t
 
GE
:4;

339 
uöt32_t
 
_ª£rved1
:4;

340 
uöt32_t
 
T
:1;

341 
uöt32_t
 
ICI_IT_2
:2;

342 
uöt32_t
 
Q
:1;

343 
uöt32_t
 
V
:1;

344 
uöt32_t
 
C
:1;

345 
uöt32_t
 
Z
:1;

346 
uöt32_t
 
N
:1;

347 } 
b
;

348 
uöt32_t
 
w
;

349 } 
	txPSR_Ty≥
;

352 
	#xPSR_N_Pos
 31U

	)

353 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

355 
	#xPSR_Z_Pos
 30U

	)

356 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

358 
	#xPSR_C_Pos
 29U

	)

359 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

361 
	#xPSR_V_Pos
 28U

	)

362 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

364 
	#xPSR_Q_Pos
 27U

	)

365 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

367 
	#xPSR_ICI_IT_2_Pos
 25U

	)

368 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

370 
	#xPSR_T_Pos
 24U

	)

371 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

373 
	#xPSR_GE_Pos
 16U

	)

374 
	#xPSR_GE_Msk
 (0xFUL << 
xPSR_GE_Pos
Ë

	)

376 
	#xPSR_ICI_IT_1_Pos
 10U

	)

377 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

379 
	#xPSR_ISR_Pos
 0U

	)

380 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

390 
uöt32_t
 
nPRIV
:1;

391 
uöt32_t
 
SPSEL
:1;

392 
uöt32_t
 
FPCA
:1;

393 
uöt32_t
 
_ª£rved0
:29;

394 } 
b
;

395 
uöt32_t
 
w
;

396 } 
	tCONTROL_Ty≥
;

399 
	#CONTROL_FPCA_Pos
 2U

	)

400 
	#CONTROL_FPCA_Msk
 (1UL << 
CONTROL_FPCA_Pos
Ë

	)

402 
	#CONTROL_SPSEL_Pos
 1U

	)

403 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

405 
	#CONTROL_nPRIV_Pos
 0U

	)

406 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

423 
__IOM
 
uöt32_t
 
ISER
[8U];

424 
uöt32_t
 
RESERVED0
[24U];

425 
__IOM
 
uöt32_t
 
ICER
[8U];

426 
uöt32_t
 
RSERVED1
[24U];

427 
__IOM
 
uöt32_t
 
ISPR
[8U];

428 
uöt32_t
 
RESERVED2
[24U];

429 
__IOM
 
uöt32_t
 
ICPR
[8U];

430 
uöt32_t
 
RESERVED3
[24U];

431 
__IOM
 
uöt32_t
 
IABR
[8U];

432 
uöt32_t
 
RESERVED4
[56U];

433 
__IOM
 
uöt8_t
 
IP
[240U];

434 
uöt32_t
 
RESERVED5
[644U];

435 
__OM
 
uöt32_t
 
STIR
;

436 } 
	tNVIC_Ty≥
;

439 
	#NVIC_STIR_INTID_Pos
 0U

	)

440 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

457 
__IM
 
uöt32_t
 
CPUID
;

458 
__IOM
 
uöt32_t
 
ICSR
;

459 
__IOM
 
uöt32_t
 
VTOR
;

460 
__IOM
 
uöt32_t
 
AIRCR
;

461 
__IOM
 
uöt32_t
 
SCR
;

462 
__IOM
 
uöt32_t
 
CCR
;

463 
__IOM
 
uöt8_t
 
SHPR
[12U];

464 
__IOM
 
uöt32_t
 
SHCSR
;

465 
__IOM
 
uöt32_t
 
CFSR
;

466 
__IOM
 
uöt32_t
 
HFSR
;

467 
__IOM
 
uöt32_t
 
DFSR
;

468 
__IOM
 
uöt32_t
 
MMFAR
;

469 
__IOM
 
uöt32_t
 
BFAR
;

470 
__IOM
 
uöt32_t
 
AFSR
;

471 
__IM
 
uöt32_t
 
ID_PFR
[2U];

472 
__IM
 
uöt32_t
 
ID_DFR
;

473 
__IM
 
uöt32_t
 
ID_AFR
;

474 
__IM
 
uöt32_t
 
ID_MFR
[4U];

475 
__IM
 
uöt32_t
 
ID_ISAR
[5U];

476 
uöt32_t
 
RESERVED0
[1U];

477 
__IM
 
uöt32_t
 
CLIDR
;

478 
__IM
 
uöt32_t
 
CTR
;

479 
__IM
 
uöt32_t
 
CCSIDR
;

480 
__IOM
 
uöt32_t
 
CSSELR
;

481 
__IOM
 
uöt32_t
 
CPACR
;

482 
uöt32_t
 
RESERVED3
[93U];

483 
__OM
 
uöt32_t
 
STIR
;

484 
uöt32_t
 
RESERVED4
[15U];

485 
__IM
 
uöt32_t
 
MVFR0
;

486 
__IM
 
uöt32_t
 
MVFR1
;

487 
__IM
 
uöt32_t
 
MVFR2
;

488 
uöt32_t
 
RESERVED5
[1U];

489 
__OM
 
uöt32_t
 
ICIALLU
;

490 
uöt32_t
 
RESERVED6
[1U];

491 
__OM
 
uöt32_t
 
ICIMVAU
;

492 
__OM
 
uöt32_t
 
DCIMVAC
;

493 
__OM
 
uöt32_t
 
DCISW
;

494 
__OM
 
uöt32_t
 
DCCMVAU
;

495 
__OM
 
uöt32_t
 
DCCMVAC
;

496 
__OM
 
uöt32_t
 
DCCSW
;

497 
__OM
 
uöt32_t
 
DCCIMVAC
;

498 
__OM
 
uöt32_t
 
DCCISW
;

499 
uöt32_t
 
RESERVED7
[6U];

500 
__IOM
 
uöt32_t
 
ITCMCR
;

501 
__IOM
 
uöt32_t
 
DTCMCR
;

502 
__IOM
 
uöt32_t
 
AHBPCR
;

503 
__IOM
 
uöt32_t
 
CACR
;

504 
__IOM
 
uöt32_t
 
AHBSCR
;

505 
uöt32_t
 
RESERVED8
[1U];

506 
__IOM
 
uöt32_t
 
ABFSR
;

507 } 
	tSCB_Ty≥
;

510 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

511 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

513 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

514 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

516 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

517 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

519 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

520 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

522 
	#SCB_CPUID_REVISION_Pos
 0U

	)

523 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

526 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

527 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

529 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

530 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

532 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

533 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

535 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

536 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

538 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

539 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

541 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

542 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

544 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

545 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

547 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

548 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

550 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

551 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

553 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

554 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

557 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

558 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

561 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

562 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

564 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

565 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

567 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

568 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

570 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

571 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

573 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

574 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

576 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

577 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

579 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

580 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

583 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

584 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

586 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

587 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

589 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

590 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

593 
	#SCB_CCR_BP_Pos
 18U

	)

594 
	#SCB_CCR_BP_Msk
 (1UL << 
SCB_CCR_BP_Pos
Ë

	)

596 
	#SCB_CCR_IC_Pos
 17U

	)

597 
	#SCB_CCR_IC_Msk
 (1UL << 
SCB_CCR_IC_Pos
Ë

	)

599 
	#SCB_CCR_DC_Pos
 16U

	)

600 
	#SCB_CCR_DC_Msk
 (1UL << 
SCB_CCR_DC_Pos
Ë

	)

602 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

603 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

605 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

606 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

608 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

609 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

611 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

612 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

614 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

615 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

617 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

618 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

621 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

622 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

624 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

625 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

627 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

628 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

630 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

631 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

633 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

634 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

636 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

637 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

639 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

640 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

642 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

643 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

645 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

646 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

648 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

649 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

651 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

652 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

654 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

655 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

657 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

658 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

660 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

661 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

664 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

665 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

667 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

668 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

670 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

671 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

674 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

675 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

677 
	#SCB_CFSR_MLSPERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 5UË

	)

678 
	#SCB_CFSR_MLSPERR_Msk
 (1UL << 
SCB_CFSR_MLSPERR_Pos
Ë

	)

680 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

681 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

683 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

684 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

686 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

687 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

689 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

690 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

693 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

694 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

696 
	#SCB_CFSR_LSPERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 5UË

	)

697 
	#SCB_CFSR_LSPERR_Msk
 (1UL << 
SCB_CFSR_LSPERR_Pos
Ë

	)

699 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

700 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

702 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

703 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

705 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

706 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

708 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

709 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

711 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

712 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

715 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

716 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

718 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

719 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

721 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

722 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

724 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

725 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

727 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

728 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

730 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

731 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

734 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

735 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

737 
	#SCB_HFSR_FORCED_Pos
 30U

	)

738 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

740 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

741 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

744 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

745 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

747 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

748 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

750 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

751 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

753 
	#SCB_DFSR_BKPT_Pos
 1U

	)

754 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

756 
	#SCB_DFSR_HALTED_Pos
 0U

	)

757 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

760 
	#SCB_CLIDR_LOUU_Pos
 27U

	)

761 
	#SCB_CLIDR_LOUU_Msk
 (7UL << 
SCB_CLIDR_LOUU_Pos
Ë

	)

763 
	#SCB_CLIDR_LOC_Pos
 24U

	)

764 
	#SCB_CLIDR_LOC_Msk
 (7UL << 
SCB_CLIDR_LOC_Pos
Ë

	)

767 
	#SCB_CTR_FORMAT_Pos
 29U

	)

768 
	#SCB_CTR_FORMAT_Msk
 (7UL << 
SCB_CTR_FORMAT_Pos
Ë

	)

770 
	#SCB_CTR_CWG_Pos
 24U

	)

771 
	#SCB_CTR_CWG_Msk
 (0xFUL << 
SCB_CTR_CWG_Pos
Ë

	)

773 
	#SCB_CTR_ERG_Pos
 20U

	)

774 
	#SCB_CTR_ERG_Msk
 (0xFUL << 
SCB_CTR_ERG_Pos
Ë

	)

776 
	#SCB_CTR_DMINLINE_Pos
 16U

	)

777 
	#SCB_CTR_DMINLINE_Msk
 (0xFUL << 
SCB_CTR_DMINLINE_Pos
Ë

	)

779 
	#SCB_CTR_IMINLINE_Pos
 0U

	)

780 
	#SCB_CTR_IMINLINE_Msk
 (0xFUL )

	)

783 
	#SCB_CCSIDR_WT_Pos
 31U

	)

784 
	#SCB_CCSIDR_WT_Msk
 (1UL << 
SCB_CCSIDR_WT_Pos
Ë

	)

786 
	#SCB_CCSIDR_WB_Pos
 30U

	)

787 
	#SCB_CCSIDR_WB_Msk
 (1UL << 
SCB_CCSIDR_WB_Pos
Ë

	)

789 
	#SCB_CCSIDR_RA_Pos
 29U

	)

790 
	#SCB_CCSIDR_RA_Msk
 (1UL << 
SCB_CCSIDR_RA_Pos
Ë

	)

792 
	#SCB_CCSIDR_WA_Pos
 28U

	)

793 
	#SCB_CCSIDR_WA_Msk
 (1UL << 
SCB_CCSIDR_WA_Pos
Ë

	)

795 
	#SCB_CCSIDR_NUMSETS_Pos
 13U

	)

796 
	#SCB_CCSIDR_NUMSETS_Msk
 (0x7FFFUL << 
SCB_CCSIDR_NUMSETS_Pos
Ë

	)

798 
	#SCB_CCSIDR_ASSOCIATIVITY_Pos
 3U

	)

799 
	#SCB_CCSIDR_ASSOCIATIVITY_Msk
 (0x3FFUL << 
SCB_CCSIDR_ASSOCIATIVITY_Pos
Ë

	)

801 
	#SCB_CCSIDR_LINESIZE_Pos
 0U

	)

802 
	#SCB_CCSIDR_LINESIZE_Msk
 (7UL )

	)

805 
	#SCB_CSSELR_LEVEL_Pos
 1U

	)

806 
	#SCB_CSSELR_LEVEL_Msk
 (7UL << 
SCB_CSSELR_LEVEL_Pos
Ë

	)

808 
	#SCB_CSSELR_IND_Pos
 0U

	)

809 
	#SCB_CSSELR_IND_Msk
 (1UL )

	)

812 
	#SCB_STIR_INTID_Pos
 0U

	)

813 
	#SCB_STIR_INTID_Msk
 (0x1FFUL )

	)

816 
	#SCB_DCISW_WAY_Pos
 30U

	)

817 
	#SCB_DCISW_WAY_Msk
 (3UL << 
SCB_DCISW_WAY_Pos
Ë

	)

819 
	#SCB_DCISW_SET_Pos
 5U

	)

820 
	#SCB_DCISW_SET_Msk
 (0x1FFUL << 
SCB_DCISW_SET_Pos
Ë

	)

823 
	#SCB_DCCSW_WAY_Pos
 30U

	)

824 
	#SCB_DCCSW_WAY_Msk
 (3UL << 
SCB_DCCSW_WAY_Pos
Ë

	)

826 
	#SCB_DCCSW_SET_Pos
 5U

	)

827 
	#SCB_DCCSW_SET_Msk
 (0x1FFUL << 
SCB_DCCSW_SET_Pos
Ë

	)

830 
	#SCB_DCCISW_WAY_Pos
 30U

	)

831 
	#SCB_DCCISW_WAY_Msk
 (3UL << 
SCB_DCCISW_WAY_Pos
Ë

	)

833 
	#SCB_DCCISW_SET_Pos
 5U

	)

834 
	#SCB_DCCISW_SET_Msk
 (0x1FFUL << 
SCB_DCCISW_SET_Pos
Ë

	)

837 
	#SCB_ITCMCR_SZ_Pos
 3U

	)

838 
	#SCB_ITCMCR_SZ_Msk
 (0xFUL << 
SCB_ITCMCR_SZ_Pos
Ë

	)

840 
	#SCB_ITCMCR_RETEN_Pos
 2U

	)

841 
	#SCB_ITCMCR_RETEN_Msk
 (1UL << 
SCB_ITCMCR_RETEN_Pos
Ë

	)

843 
	#SCB_ITCMCR_RMW_Pos
 1U

	)

844 
	#SCB_ITCMCR_RMW_Msk
 (1UL << 
SCB_ITCMCR_RMW_Pos
Ë

	)

846 
	#SCB_ITCMCR_EN_Pos
 0U

	)

847 
	#SCB_ITCMCR_EN_Msk
 (1UL )

	)

850 
	#SCB_DTCMCR_SZ_Pos
 3U

	)

851 
	#SCB_DTCMCR_SZ_Msk
 (0xFUL << 
SCB_DTCMCR_SZ_Pos
Ë

	)

853 
	#SCB_DTCMCR_RETEN_Pos
 2U

	)

854 
	#SCB_DTCMCR_RETEN_Msk
 (1UL << 
SCB_DTCMCR_RETEN_Pos
Ë

	)

856 
	#SCB_DTCMCR_RMW_Pos
 1U

	)

857 
	#SCB_DTCMCR_RMW_Msk
 (1UL << 
SCB_DTCMCR_RMW_Pos
Ë

	)

859 
	#SCB_DTCMCR_EN_Pos
 0U

	)

860 
	#SCB_DTCMCR_EN_Msk
 (1UL )

	)

863 
	#SCB_AHBPCR_SZ_Pos
 1U

	)

864 
	#SCB_AHBPCR_SZ_Msk
 (7UL << 
SCB_AHBPCR_SZ_Pos
Ë

	)

866 
	#SCB_AHBPCR_EN_Pos
 0U

	)

867 
	#SCB_AHBPCR_EN_Msk
 (1UL )

	)

870 
	#SCB_CACR_FORCEWT_Pos
 2U

	)

871 
	#SCB_CACR_FORCEWT_Msk
 (1UL << 
SCB_CACR_FORCEWT_Pos
Ë

	)

873 
	#SCB_CACR_ECCEN_Pos
 1U

	)

874 
	#SCB_CACR_ECCEN_Msk
 (1UL << 
SCB_CACR_ECCEN_Pos
Ë

	)

876 
	#SCB_CACR_SIWT_Pos
 0U

	)

877 
	#SCB_CACR_SIWT_Msk
 (1UL )

	)

880 
	#SCB_AHBSCR_INITCOUNT_Pos
 11U

	)

881 
	#SCB_AHBSCR_INITCOUNT_Msk
 (0x1FUL << 
SCB_AHBPCR_INITCOUNT_Pos
Ë

	)

883 
	#SCB_AHBSCR_TPRI_Pos
 2U

	)

884 
	#SCB_AHBSCR_TPRI_Msk
 (0x1FFUL << 
SCB_AHBPCR_TPRI_Pos
Ë

	)

886 
	#SCB_AHBSCR_CTL_Pos
 0U

	)

887 
	#SCB_AHBSCR_CTL_Msk
 (3UL )

	)

890 
	#SCB_ABFSR_AXIMTYPE_Pos
 8U

	)

891 
	#SCB_ABFSR_AXIMTYPE_Msk
 (3UL << 
SCB_ABFSR_AXIMTYPE_Pos
Ë

	)

893 
	#SCB_ABFSR_EPPB_Pos
 4U

	)

894 
	#SCB_ABFSR_EPPB_Msk
 (1UL << 
SCB_ABFSR_EPPB_Pos
Ë

	)

896 
	#SCB_ABFSR_AXIM_Pos
 3U

	)

897 
	#SCB_ABFSR_AXIM_Msk
 (1UL << 
SCB_ABFSR_AXIM_Pos
Ë

	)

899 
	#SCB_ABFSR_AHBP_Pos
 2U

	)

900 
	#SCB_ABFSR_AHBP_Msk
 (1UL << 
SCB_ABFSR_AHBP_Pos
Ë

	)

902 
	#SCB_ABFSR_DTCM_Pos
 1U

	)

903 
	#SCB_ABFSR_DTCM_Msk
 (1UL << 
SCB_ABFSR_DTCM_Pos
Ë

	)

905 
	#SCB_ABFSR_ITCM_Pos
 0U

	)

906 
	#SCB_ABFSR_ITCM_Msk
 (1UL )

	)

923 
uöt32_t
 
RESERVED0
[1U];

924 
__IM
 
uöt32_t
 
ICTR
;

925 
__IOM
 
uöt32_t
 
ACTLR
;

926 } 
	tSCnSCB_Ty≥
;

929 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

930 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

933 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Pos
 12U

	)

934 
	#SCnSCB_ACTLR_DISITMATBFLUSH_Msk
 (1UL << 
SCnSCB_ACTLR_DISITMATBFLUSH_Pos
Ë

	)

936 
	#SCnSCB_ACTLR_DISRAMODE_Pos
 11U

	)

937 
	#SCnSCB_ACTLR_DISRAMODE_Msk
 (1UL << 
SCnSCB_ACTLR_DISRAMODE_Pos
Ë

	)

939 
	#SCnSCB_ACTLR_FPEXCODIS_Pos
 10U

	)

940 
	#SCnSCB_ACTLR_FPEXCODIS_Msk
 (1UL << 
SCnSCB_ACTLR_FPEXCODIS_Pos
Ë

	)

942 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2U

	)

943 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

945 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

946 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

963 
__IOM
 
uöt32_t
 
CTRL
;

964 
__IOM
 
uöt32_t
 
LOAD
;

965 
__IOM
 
uöt32_t
 
VAL
;

966 
__IM
 
uöt32_t
 
CALIB
;

967 } 
	tSysTick_Ty≥
;

970 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

971 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

973 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

974 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

976 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

977 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

979 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

980 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

983 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

984 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

987 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

988 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

991 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

992 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

994 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

995 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

997 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

998 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

1015 
__OM
 union

1017 
__OM
 
uöt8_t
 
u8
;

1018 
__OM
 
uöt16_t
 
u16
;

1019 
__OM
 
uöt32_t
 
u32
;

1020 } 
PORT
 [32U];

1021 
uöt32_t
 
RESERVED0
[864U];

1022 
__IOM
 
uöt32_t
 
TER
;

1023 
uöt32_t
 
RESERVED1
[15U];

1024 
__IOM
 
uöt32_t
 
TPR
;

1025 
uöt32_t
 
RESERVED2
[15U];

1026 
__IOM
 
uöt32_t
 
TCR
;

1027 
uöt32_t
 
RESERVED3
[29U];

1028 
__OM
 
uöt32_t
 
IWR
;

1029 
__IM
 
uöt32_t
 
IRR
;

1030 
__IOM
 
uöt32_t
 
IMCR
;

1031 
uöt32_t
 
RESERVED4
[43U];

1032 
__OM
 
uöt32_t
 
LAR
;

1033 
__IM
 
uöt32_t
 
LSR
;

1034 
uöt32_t
 
RESERVED5
[6U];

1035 
__IM
 
uöt32_t
 
PID4
;

1036 
__IM
 
uöt32_t
 
PID5
;

1037 
__IM
 
uöt32_t
 
PID6
;

1038 
__IM
 
uöt32_t
 
PID7
;

1039 
__IM
 
uöt32_t
 
PID0
;

1040 
__IM
 
uöt32_t
 
PID1
;

1041 
__IM
 
uöt32_t
 
PID2
;

1042 
__IM
 
uöt32_t
 
PID3
;

1043 
__IM
 
uöt32_t
 
CID0
;

1044 
__IM
 
uöt32_t
 
CID1
;

1045 
__IM
 
uöt32_t
 
CID2
;

1046 
__IM
 
uöt32_t
 
CID3
;

1047 } 
	tITM_Ty≥
;

1050 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

1051 
	#ITM_TPR_PRIVMASK_Msk
 (0xFFFFFFFFUL )

	)

1054 
	#ITM_TCR_BUSY_Pos
 23U

	)

1055 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

1057 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

1058 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

1060 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

1061 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

1063 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

1064 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

1066 
	#ITM_TCR_SWOENA_Pos
 4U

	)

1067 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

1069 
	#ITM_TCR_DWTENA_Pos
 3U

	)

1070 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

1072 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

1073 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

1075 
	#ITM_TCR_TSENA_Pos
 1U

	)

1076 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

1078 
	#ITM_TCR_ITMENA_Pos
 0U

	)

1079 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

1082 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

1083 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

1086 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

1087 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

1090 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

1091 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

1094 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

1095 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

1097 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

1098 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

1100 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

1101 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

1118 
__IOM
 
uöt32_t
 
CTRL
;

1119 
__IOM
 
uöt32_t
 
CYCCNT
;

1120 
__IOM
 
uöt32_t
 
CPICNT
;

1121 
__IOM
 
uöt32_t
 
EXCCNT
;

1122 
__IOM
 
uöt32_t
 
SLEEPCNT
;

1123 
__IOM
 
uöt32_t
 
LSUCNT
;

1124 
__IOM
 
uöt32_t
 
FOLDCNT
;

1125 
__IM
 
uöt32_t
 
PCSR
;

1126 
__IOM
 
uöt32_t
 
COMP0
;

1127 
__IOM
 
uöt32_t
 
MASK0
;

1128 
__IOM
 
uöt32_t
 
FUNCTION0
;

1129 
uöt32_t
 
RESERVED0
[1U];

1130 
__IOM
 
uöt32_t
 
COMP1
;

1131 
__IOM
 
uöt32_t
 
MASK1
;

1132 
__IOM
 
uöt32_t
 
FUNCTION1
;

1133 
uöt32_t
 
RESERVED1
[1U];

1134 
__IOM
 
uöt32_t
 
COMP2
;

1135 
__IOM
 
uöt32_t
 
MASK2
;

1136 
__IOM
 
uöt32_t
 
FUNCTION2
;

1137 
uöt32_t
 
RESERVED2
[1U];

1138 
__IOM
 
uöt32_t
 
COMP3
;

1139 
__IOM
 
uöt32_t
 
MASK3
;

1140 
__IOM
 
uöt32_t
 
FUNCTION3
;

1141 
uöt32_t
 
RESERVED3
[981U];

1142 
__OM
 
uöt32_t
 
LAR
;

1143 
__IM
 
uöt32_t
 
LSR
;

1144 } 
	tDWT_Ty≥
;

1147 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

1148 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

1150 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

1151 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

1153 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

1154 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

1156 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

1157 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

1159 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

1160 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

1162 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

1163 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

1165 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

1166 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

1168 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

1169 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

1171 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

1172 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

1174 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

1175 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

1177 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

1178 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

1180 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

1181 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

1183 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

1184 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

1186 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

1187 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

1189 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

1190 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

1192 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

1193 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

1195 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

1196 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

1198 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

1199 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

1202 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

1203 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

1206 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

1207 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

1210 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

1211 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

1214 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

1215 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

1218 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

1219 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

1222 
	#DWT_MASK_MASK_Pos
 0U

	)

1223 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

1226 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

1227 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

1229 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

1230 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

1232 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

1233 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

1235 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

1236 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

1238 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

1239 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

1241 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

1242 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

1244 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

1245 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

1247 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

1248 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

1250 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

1251 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

1268 
__IM
 
uöt32_t
 
SSPSR
;

1269 
__IOM
 
uöt32_t
 
CSPSR
;

1270 
uöt32_t
 
RESERVED0
[2U];

1271 
__IOM
 
uöt32_t
 
ACPR
;

1272 
uöt32_t
 
RESERVED1
[55U];

1273 
__IOM
 
uöt32_t
 
SPPR
;

1274 
uöt32_t
 
RESERVED2
[131U];

1275 
__IM
 
uöt32_t
 
FFSR
;

1276 
__IOM
 
uöt32_t
 
FFCR
;

1277 
__IM
 
uöt32_t
 
FSCR
;

1278 
uöt32_t
 
RESERVED3
[759U];

1279 
__IM
 
uöt32_t
 
TRIGGER
;

1280 
__IM
 
uöt32_t
 
FIFO0
;

1281 
__IM
 
uöt32_t
 
ITATBCTR2
;

1282 
uöt32_t
 
RESERVED4
[1U];

1283 
__IM
 
uöt32_t
 
ITATBCTR0
;

1284 
__IM
 
uöt32_t
 
FIFO1
;

1285 
__IOM
 
uöt32_t
 
ITCTRL
;

1286 
uöt32_t
 
RESERVED5
[39U];

1287 
__IOM
 
uöt32_t
 
CLAIMSET
;

1288 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1289 
uöt32_t
 
RESERVED7
[8U];

1290 
__IM
 
uöt32_t
 
DEVID
;

1291 
__IM
 
uöt32_t
 
DEVTYPE
;

1292 } 
	tTPI_Ty≥
;

1295 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1296 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1299 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1300 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1303 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1304 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1306 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1307 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1309 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1310 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1312 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1313 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1316 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1317 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1319 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1320 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1323 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1324 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1327 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1328 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1330 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1331 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1333 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1334 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1336 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1337 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1339 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1340 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1342 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1343 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1345 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1346 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1349 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1350 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1352 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1353 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1356 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1357 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1359 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1360 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1362 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1363 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1365 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1366 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1368 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1369 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1371 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1372 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1374 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1375 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1378 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1379 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1381 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1382 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1385 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1386 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1389 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1390 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1392 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1393 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1395 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1396 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1398 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1399 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1401 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1402 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1404 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1405 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1408 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1409 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1411 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1412 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1417 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1430 
__IM
 
uöt32_t
 
TYPE
;

1431 
__IOM
 
uöt32_t
 
CTRL
;

1432 
__IOM
 
uöt32_t
 
RNR
;

1433 
__IOM
 
uöt32_t
 
RBAR
;

1434 
__IOM
 
uöt32_t
 
RASR
;

1435 
__IOM
 
uöt32_t
 
RBAR_A1
;

1436 
__IOM
 
uöt32_t
 
RASR_A1
;

1437 
__IOM
 
uöt32_t
 
RBAR_A2
;

1438 
__IOM
 
uöt32_t
 
RASR_A2
;

1439 
__IOM
 
uöt32_t
 
RBAR_A3
;

1440 
__IOM
 
uöt32_t
 
RASR_A3
;

1441 } 
	tMPU_Ty≥
;

1443 
	#MPU_TYPE_RALIASES
 4U

	)

1446 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1447 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1449 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1450 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1452 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1453 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1456 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1457 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1459 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1460 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1462 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1463 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1466 
	#MPU_RNR_REGION_Pos
 0U

	)

1467 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1470 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1471 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1473 
	#MPU_RBAR_VALID_Pos
 4U

	)

1474 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1476 
	#MPU_RBAR_REGION_Pos
 0U

	)

1477 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1480 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1481 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1483 
	#MPU_RASR_XN_Pos
 28U

	)

1484 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1486 
	#MPU_RASR_AP_Pos
 24U

	)

1487 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1489 
	#MPU_RASR_TEX_Pos
 19U

	)

1490 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1492 
	#MPU_RASR_S_Pos
 18U

	)

1493 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1495 
	#MPU_RASR_C_Pos
 17U

	)

1496 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1498 
	#MPU_RASR_B_Pos
 16U

	)

1499 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1501 
	#MPU_RASR_SRD_Pos
 8U

	)

1502 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1504 
	#MPU_RASR_SIZE_Pos
 1U

	)

1505 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1507 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1508 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1526 
uöt32_t
 
RESERVED0
[1U];

1527 
__IOM
 
uöt32_t
 
FPCCR
;

1528 
__IOM
 
uöt32_t
 
FPCAR
;

1529 
__IOM
 
uöt32_t
 
FPDSCR
;

1530 
__IM
 
uöt32_t
 
MVFR0
;

1531 
__IM
 
uöt32_t
 
MVFR1
;

1532 
__IM
 
uöt32_t
 
MVFR2
;

1533 } 
	tFPU_Ty≥
;

1536 
	#FPU_FPCCR_ASPEN_Pos
 31U

	)

1537 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1539 
	#FPU_FPCCR_LSPEN_Pos
 30U

	)

1540 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1542 
	#FPU_FPCCR_MONRDY_Pos
 8U

	)

1543 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1545 
	#FPU_FPCCR_BFRDY_Pos
 6U

	)

1546 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1548 
	#FPU_FPCCR_MMRDY_Pos
 5U

	)

1549 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1551 
	#FPU_FPCCR_HFRDY_Pos
 4U

	)

1552 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1554 
	#FPU_FPCCR_THREAD_Pos
 3U

	)

1555 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1557 
	#FPU_FPCCR_USER_Pos
 1U

	)

1558 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1560 
	#FPU_FPCCR_LSPACT_Pos
 0U

	)

1561 
	#FPU_FPCCR_LSPACT_Msk
 (1UL )

	)

1564 
	#FPU_FPCAR_ADDRESS_Pos
 3U

	)

1565 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1568 
	#FPU_FPDSCR_AHP_Pos
 26U

	)

1569 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1571 
	#FPU_FPDSCR_DN_Pos
 25U

	)

1572 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1574 
	#FPU_FPDSCR_FZ_Pos
 24U

	)

1575 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1577 
	#FPU_FPDSCR_RMode_Pos
 22U

	)

1578 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1581 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28U

	)

1582 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1584 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24U

	)

1585 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1587 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20U

	)

1588 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1590 
	#FPU_MVFR0_Divide_Pos
 16U

	)

1591 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1593 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12U

	)

1594 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1596 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8U

	)

1597 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1599 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4U

	)

1600 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1602 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0U

	)

1603 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL )

	)

1606 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28U

	)

1607 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1609 
	#FPU_MVFR1_FP_HPFP_Pos
 24U

	)

1610 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1612 
	#FPU_MVFR1_D_NaN_mode_Pos
 4U

	)

1613 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1615 
	#FPU_MVFR1_FtZ_mode_Pos
 0U

	)

1616 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL )

	)

1635 
__IOM
 
uöt32_t
 
DHCSR
;

1636 
__OM
 
uöt32_t
 
DCRSR
;

1637 
__IOM
 
uöt32_t
 
DCRDR
;

1638 
__IOM
 
uöt32_t
 
DEMCR
;

1639 } 
	tC‹eDebug_Ty≥
;

1642 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1643 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1645 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1646 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1648 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1649 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1651 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1652 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1654 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1655 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1657 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1658 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1660 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1661 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1663 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1664 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1666 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1667 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1669 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1670 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1672 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1673 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1675 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1676 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1679 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1680 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1682 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1683 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1686 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1687 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1689 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1690 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1692 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1693 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1695 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1696 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1698 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1699 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1701 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1702 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1704 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1705 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1707 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1708 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1710 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1711 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1713 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1714 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1716 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1717 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1719 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1720 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1722 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1723 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1741 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1749 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1762 
	#SCS_BASE
 (0xE000E000ULË

	)

1763 
	#ITM_BASE
 (0xE0000000ULË

	)

1764 
	#DWT_BASE
 (0xE0001000ULË

	)

1765 
	#TPI_BASE
 (0xE0040000ULË

	)

1766 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1767 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1768 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1769 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1771 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1772 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1773 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1774 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1775 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1776 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1777 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1778 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1780 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1781 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1782 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1785 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1786 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1814 #ifde‡
CMSIS_NVIC_VIRTUAL


1815 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1816 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1818 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1820 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1821 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1822 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1823 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1824 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1825 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1826 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1827 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1828 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1829 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1830 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1831 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1834 #ifde‡
CMSIS_VECTAB_VIRTUAL


1835 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1836 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1838 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1840 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1841 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1844 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1848 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1849 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1850 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1851 
	#EXC_RETURN_HANDLER_FPU
 (0xFFFFFFE1ULË

	)

1852 
	#EXC_RETURN_THREAD_MSP_FPU
 (0xFFFFFFE9ULË

	)

1853 
	#EXC_RETURN_THREAD_PSP_FPU
 (0xFFFFFFEDULË

	)

1865 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1867 
uöt32_t
 
ªg_vÆue
;

1868 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1870 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1871 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1872 
ªg_vÆue
 = (reg_value |

1873 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1874 (
Pri‹ôyGroupTmp
 << 
SCB_AIRCR_PRIGROUP_Pos
) );

1875 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1884 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1886  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1896 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1898 i‡((
öt32_t
)(
IRQn
) >= 0)

1900 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1913 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1915 i‡((
öt32_t
)(
IRQn
) >= 0)

1917 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1932 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1934 i‡((
öt32_t
)(
IRQn
) >= 0)

1936 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1937 
__DSB
();

1938 
__ISB
();

1951 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1953 i‡((
öt32_t
)(
IRQn
) >= 0)

1955 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1970 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1972 i‡((
öt32_t
)(
IRQn
) >= 0)

1974 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1985 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1987 i‡((
öt32_t
)(
IRQn
) >= 0)

1989 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

2002 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

2004 i‡((
öt32_t
)(
IRQn
) >= 0)

2006 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

2024 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

2026 i‡((
öt32_t
)(
IRQn
) >= 0)

2028 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2032 
SCB
->
SHPR
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

2046 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

2049 i‡((
öt32_t
)(
IRQn
) >= 0)

2051 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

2055 (((
uöt32_t
)
SCB
->
SHPR
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

2071 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

2073 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2074 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2075 
uöt32_t
 
SubPri‹ôyBôs
;

2077 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2078 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2081 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

2082 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

2098 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

2100 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

2101 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

2102 
uöt32_t
 
SubPri‹ôyBôs
;

2104 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

2105 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

2107 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

2108 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

2121 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

2123 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2124 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

2136 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

2138 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

2139  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

2147 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

2149 
__DSB
();

2151 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

2152 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

2153 
SCB_AIRCR_SYSRESETREQ_Msk
 );

2154 
__DSB
();

2158 
__NOP
();

2166 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

2168 
	~"mpu_¨mv7.h
"

2188 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

2190 
uöt32_t
 
mv‰0
;

2192 
mv‰0
 = 
SCB
->
MVFR0
;

2193 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x220U)

2197 i‡((
mv‰0
 & (
FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 | 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
)) == 0x020U)

2221 
	#CCSIDR_WAYS
(
x
Ë(((xË& 
SCB_CCSIDR_ASSOCIATIVITY_Msk
Ë>> 
SCB_CCSIDR_ASSOCIATIVITY_Pos
)

	)

2222 
	#CCSIDR_SETS
(
x
Ë(((xË& 
SCB_CCSIDR_NUMSETS_Msk
 ) >> 
SCB_CCSIDR_NUMSETS_Pos
 )

	)

2229 
__STATIC_INLINE
 
SCB_E«bÀICache
 ()

2231 #i‡
deföed
 (
__ICACHE_PRESENT
) && (__ICACHE_PRESENT == 1U)

2232 
__DSB
();

2233 
__ISB
();

2234 
SCB
->
ICIALLU
 = 0UL;

2235 
__DSB
();

2236 
__ISB
();

2237 
SCB
->
CCR
 |(
uöt32_t
)
SCB_CCR_IC_Msk
;

2238 
__DSB
();

2239 
__ISB
();

2248 
__STATIC_INLINE
 
SCB_DißbÀICache
 ()

2250 #i‡
deföed
 (
__ICACHE_PRESENT
) && (__ICACHE_PRESENT == 1U)

2251 
__DSB
();

2252 
__ISB
();

2253 
SCB
->
CCR
 &~(
uöt32_t
)
SCB_CCR_IC_Msk
;

2254 
SCB
->
ICIALLU
 = 0UL;

2255 
__DSB
();

2256 
__ISB
();

2265 
__STATIC_INLINE
 
SCB_InvÆid©eICache
 ()

2267 #i‡
deföed
 (
__ICACHE_PRESENT
) && (__ICACHE_PRESENT == 1U)

2268 
__DSB
();

2269 
__ISB
();

2270 
SCB
->
ICIALLU
 = 0UL;

2271 
__DSB
();

2272 
__ISB
();

2281 
__STATIC_INLINE
 
SCB_E«bÀDCache
 ()

2283 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2284 
uöt32_t
 
ccsidr
;

2285 
uöt32_t
 
£ts
;

2286 
uöt32_t
 
ways
;

2288 
SCB
->
CSSELR
 = 0U;

2289 
__DSB
();

2291 
ccsidr
 = 
SCB
->
CCSIDR
;

2294 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2296 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2298 
SCB
->
DCISW
 = (((
£ts
 << 
SCB_DCISW_SET_Pos
Ë& 
SCB_DCISW_SET_Msk
) |

2299 ((
ways
 << 
SCB_DCISW_WAY_Pos
Ë& 
SCB_DCISW_WAY_Msk
) );

2300 #i‡
deföed
 ( 
__CC_ARM
 )

2301 
__scheduÀ_b¨rõr
();

2303 } 
ways
-- != 0U);

2304 } 
£ts
-- != 0U);

2305 
__DSB
();

2307 
SCB
->
CCR
 |(
uöt32_t
)
SCB_CCR_DC_Msk
;

2309 
__DSB
();

2310 
__ISB
();

2319 
__STATIC_INLINE
 
SCB_DißbÀDCache
 ()

2321 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2322 
uöt32_t
 
ccsidr
;

2323 
uöt32_t
 
£ts
;

2324 
uöt32_t
 
ways
;

2326 
SCB
->
CSSELR
 = 0U;

2327 
__DSB
();

2329 
SCB
->
CCR
 &~(
uöt32_t
)
SCB_CCR_DC_Msk
;

2330 
__DSB
();

2332 
ccsidr
 = 
SCB
->
CCSIDR
;

2335 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2337 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2339 
SCB
->
DCCISW
 = (((
£ts
 << 
SCB_DCCISW_SET_Pos
Ë& 
SCB_DCCISW_SET_Msk
) |

2340 ((
ways
 << 
SCB_DCCISW_WAY_Pos
Ë& 
SCB_DCCISW_WAY_Msk
) );

2341 #i‡
deföed
 ( 
__CC_ARM
 )

2342 
__scheduÀ_b¨rõr
();

2344 } 
ways
-- != 0U);

2345 } 
£ts
-- != 0U);

2347 
__DSB
();

2348 
__ISB
();

2357 
__STATIC_INLINE
 
SCB_InvÆid©eDCache
 ()

2359 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2360 
uöt32_t
 
ccsidr
;

2361 
uöt32_t
 
£ts
;

2362 
uöt32_t
 
ways
;

2364 
SCB
->
CSSELR
 = 0U;

2365 
__DSB
();

2367 
ccsidr
 = 
SCB
->
CCSIDR
;

2370 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2372 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2374 
SCB
->
DCISW
 = (((
£ts
 << 
SCB_DCISW_SET_Pos
Ë& 
SCB_DCISW_SET_Msk
) |

2375 ((
ways
 << 
SCB_DCISW_WAY_Pos
Ë& 
SCB_DCISW_WAY_Msk
) );

2376 #i‡
deföed
 ( 
__CC_ARM
 )

2377 
__scheduÀ_b¨rõr
();

2379 } 
ways
-- != 0U);

2380 } 
£ts
-- != 0U);

2382 
__DSB
();

2383 
__ISB
();

2392 
__STATIC_INLINE
 
SCB_CÀ™DCache
 ()

2394 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2395 
uöt32_t
 
ccsidr
;

2396 
uöt32_t
 
£ts
;

2397 
uöt32_t
 
ways
;

2399 
SCB
->
CSSELR
 = 0U;

2400 
__DSB
();

2402 
ccsidr
 = 
SCB
->
CCSIDR
;

2405 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2407 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2409 
SCB
->
DCCSW
 = (((
£ts
 << 
SCB_DCCSW_SET_Pos
Ë& 
SCB_DCCSW_SET_Msk
) |

2410 ((
ways
 << 
SCB_DCCSW_WAY_Pos
Ë& 
SCB_DCCSW_WAY_Msk
) );

2411 #i‡
deföed
 ( 
__CC_ARM
 )

2412 
__scheduÀ_b¨rõr
();

2414 } 
ways
-- != 0U);

2415 } 
£ts
-- != 0U);

2417 
__DSB
();

2418 
__ISB
();

2427 
__STATIC_INLINE
 
SCB_CÀ™InvÆid©eDCache
 ()

2429 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2430 
uöt32_t
 
ccsidr
;

2431 
uöt32_t
 
£ts
;

2432 
uöt32_t
 
ways
;

2434 
SCB
->
CSSELR
 = 0U;

2435 
__DSB
();

2437 
ccsidr
 = 
SCB
->
CCSIDR
;

2440 
£ts
 = (
uöt32_t
)(
CCSIDR_SETS
(
ccsidr
));

2442 
ways
 = (
uöt32_t
)(
CCSIDR_WAYS
(
ccsidr
));

2444 
SCB
->
DCCISW
 = (((
£ts
 << 
SCB_DCCISW_SET_Pos
Ë& 
SCB_DCCISW_SET_Msk
) |

2445 ((
ways
 << 
SCB_DCCISW_WAY_Pos
Ë& 
SCB_DCCISW_WAY_Msk
) );

2446 #i‡
deföed
 ( 
__CC_ARM
 )

2447 
__scheduÀ_b¨rõr
();

2449 } 
ways
-- != 0U);

2450 } 
£ts
-- != 0U);

2452 
__DSB
();

2453 
__ISB
();

2464 
__STATIC_INLINE
 
SCB_InvÆid©eDCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2466 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2467 
öt32_t
 
›_size
 = 
dsize
;

2468 
uöt32_t
 
›_addr
 = (uöt32_t)
addr
;

2469 
öt32_t
 
löesize
 = 32;

2471 
__DSB
();

2473 
›_size
 > 0) {

2474 
SCB
->
DCIMVAC
 = 
›_addr
;

2475 
›_addr
 +(
uöt32_t
)
löesize
;

2476 
›_size
 -
löesize
;

2479 
__DSB
();

2480 
__ISB
();

2491 
__STATIC_INLINE
 
SCB_CÀ™DCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2493 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2494 
öt32_t
 
›_size
 = 
dsize
;

2495 
uöt32_t
 
›_addr
 = (uöt32_tË
addr
;

2496 
öt32_t
 
löesize
 = 32;

2498 
__DSB
();

2500 
›_size
 > 0) {

2501 
SCB
->
DCCMVAC
 = 
›_addr
;

2502 
›_addr
 +(
uöt32_t
)
löesize
;

2503 
›_size
 -
löesize
;

2506 
__DSB
();

2507 
__ISB
();

2518 
__STATIC_INLINE
 
SCB_CÀ™InvÆid©eDCache_by_Addr
 (
uöt32_t
 *
addr
, 
öt32_t
 
dsize
)

2520 #i‡
deföed
 (
__DCACHE_PRESENT
) && (__DCACHE_PRESENT == 1U)

2521 
öt32_t
 
›_size
 = 
dsize
;

2522 
uöt32_t
 
›_addr
 = (uöt32_tË
addr
;

2523 
öt32_t
 
löesize
 = 32;

2525 
__DSB
();

2527 
›_size
 > 0) {

2528 
SCB
->
DCCIMVAC
 = 
›_addr
;

2529 
›_addr
 +(
uöt32_t
)
löesize
;

2530 
›_size
 -
löesize
;

2533 
__DSB
();

2534 
__ISB
();

2551 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

2564 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

2566 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

2571 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

2572 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

2573 
SysTick
->
VAL
 = 0UL;

2574 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

2575 
SysTick_CTRL_TICKINT_Msk
 |

2576 
SysTick_CTRL_ENABLE_Msk
;

2594 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

2595 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

2606 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

2608 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

2609 ((
ITM
->
TER
 & 1UL ) != 0UL) )

2611 
ITM
->
PORT
[0U].
u32
 == 0UL)

2613 
__NOP
();

2615 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

2617  (
	gch
);

2627 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

2629 
öt32_t
 
	gch
 = -1;

2631 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

2633 
ch
 = 
ITM_RxBuf„r
;

2634 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

2637  (
	gch
);

2647 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

2650 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

2665 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_sc000.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_SC000_H_GENERIC


32 
	#__CORE_SC000_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__SC000_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__SC000_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__SC000_CMSIS_VERSION
 ((
__SC000_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__SC000_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_SC
 (000UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_SC000_H_DEPENDANT


127 
	#__CORE_SC000_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__SC000_REV


136 
	#__SC000_REV
 0x0000U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__NVIC_PRIO_BITS


146 
	#__NVIC_PRIO_BITS
 2U

	)

150 #i‚de‡
__Víd‹_SysTickC⁄fig


151 
	#__Víd‹_SysTickC⁄fig
 0U

	)

164 #ifde‡
__˝lu•lus


165 
	#__I
 vﬁ©ûê

	)

167 
	#__I
 vﬁ©ûêc⁄°

	)

169 
	#__O
 vﬁ©ûê

	)

170 
	#__IO
 vﬁ©ûê

	)

173 
	#__IM
 vﬁ©ûêc⁄°

	)

174 
	#__OM
 vﬁ©ûê

	)

175 
	#__IOM
 vﬁ©ûê

	)

209 
uöt32_t
 
_ª£rved0
:28;

210 
uöt32_t
 
V
:1;

211 
uöt32_t
 
C
:1;

212 
uöt32_t
 
Z
:1;

213 
uöt32_t
 
N
:1;

214 } 
b
;

215 
uöt32_t
 
w
;

216 } 
	tAPSR_Ty≥
;

219 
	#APSR_N_Pos
 31U

	)

220 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

222 
	#APSR_Z_Pos
 30U

	)

223 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

225 
	#APSR_C_Pos
 29U

	)

226 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

228 
	#APSR_V_Pos
 28U

	)

229 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

239 
uöt32_t
 
ISR
:9;

240 
uöt32_t
 
_ª£rved0
:23;

241 } 
b
;

242 
uöt32_t
 
w
;

243 } 
	tIPSR_Ty≥
;

246 
	#IPSR_ISR_Pos
 0U

	)

247 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

257 
uöt32_t
 
ISR
:9;

258 
uöt32_t
 
_ª£rved0
:15;

259 
uöt32_t
 
T
:1;

260 
uöt32_t
 
_ª£rved1
:3;

261 
uöt32_t
 
V
:1;

262 
uöt32_t
 
C
:1;

263 
uöt32_t
 
Z
:1;

264 
uöt32_t
 
N
:1;

265 } 
b
;

266 
uöt32_t
 
w
;

267 } 
	txPSR_Ty≥
;

270 
	#xPSR_N_Pos
 31U

	)

271 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

273 
	#xPSR_Z_Pos
 30U

	)

274 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

276 
	#xPSR_C_Pos
 29U

	)

277 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

279 
	#xPSR_V_Pos
 28U

	)

280 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

282 
	#xPSR_T_Pos
 24U

	)

283 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

285 
	#xPSR_ISR_Pos
 0U

	)

286 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

296 
uöt32_t
 
_ª£rved0
:1;

297 
uöt32_t
 
SPSEL
:1;

298 
uöt32_t
 
_ª£rved1
:30;

299 } 
b
;

300 
uöt32_t
 
w
;

301 } 
	tCONTROL_Ty≥
;

304 
	#CONTROL_SPSEL_Pos
 1U

	)

305 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

322 
__IOM
 
uöt32_t
 
ISER
[1U];

323 
uöt32_t
 
RESERVED0
[31U];

324 
__IOM
 
uöt32_t
 
ICER
[1U];

325 
uöt32_t
 
RSERVED1
[31U];

326 
__IOM
 
uöt32_t
 
ISPR
[1U];

327 
uöt32_t
 
RESERVED2
[31U];

328 
__IOM
 
uöt32_t
 
ICPR
[1U];

329 
uöt32_t
 
RESERVED3
[31U];

330 
uöt32_t
 
RESERVED4
[64U];

331 
__IOM
 
uöt32_t
 
IP
[8U];

332 } 
	tNVIC_Ty≥
;

349 
__IM
 
uöt32_t
 
CPUID
;

350 
__IOM
 
uöt32_t
 
ICSR
;

351 
__IOM
 
uöt32_t
 
VTOR
;

352 
__IOM
 
uöt32_t
 
AIRCR
;

353 
__IOM
 
uöt32_t
 
SCR
;

354 
__IOM
 
uöt32_t
 
CCR
;

355 
uöt32_t
 
RESERVED0
[1U];

356 
__IOM
 
uöt32_t
 
SHP
[2U];

357 
__IOM
 
uöt32_t
 
SHCSR
;

358 
uöt32_t
 
RESERVED1
[154U];

359 
__IOM
 
uöt32_t
 
SFCR
;

360 } 
	tSCB_Ty≥
;

363 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

364 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

366 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

367 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

369 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

370 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

372 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

373 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

375 
	#SCB_CPUID_REVISION_Pos
 0U

	)

376 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

379 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

380 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

382 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

383 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

385 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

386 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

388 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

389 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

391 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

392 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

394 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

395 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

397 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

398 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

400 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

401 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

403 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

404 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

407 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

408 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

412 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

414 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

417 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

418 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

420 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

421 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

423 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

424 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

427 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

428 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

430 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

431 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

433 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

434 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

437 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

438 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

440 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

441 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

444 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

445 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

462 
uöt32_t
 
RESERVED0
[2U];

463 
__IOM
 
uöt32_t
 
ACTLR
;

464 } 
	tSCnSCB_Ty≥
;

467 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0U

	)

468 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL )

	)

485 
__IOM
 
uöt32_t
 
CTRL
;

486 
__IOM
 
uöt32_t
 
LOAD
;

487 
__IOM
 
uöt32_t
 
VAL
;

488 
__IM
 
uöt32_t
 
CALIB
;

489 } 
	tSysTick_Ty≥
;

492 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

493 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

495 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

496 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

498 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

499 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

501 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

502 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

505 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

506 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

509 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

510 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

513 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

514 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

516 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

517 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

519 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

520 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

524 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

537 
__IM
 
uöt32_t
 
TYPE
;

538 
__IOM
 
uöt32_t
 
CTRL
;

539 
__IOM
 
uöt32_t
 
RNR
;

540 
__IOM
 
uöt32_t
 
RBAR
;

541 
__IOM
 
uöt32_t
 
RASR
;

542 } 
	tMPU_Ty≥
;

545 
	#MPU_TYPE_IREGION_Pos
 16U

	)

546 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

548 
	#MPU_TYPE_DREGION_Pos
 8U

	)

549 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

551 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

552 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

555 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

556 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

558 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

559 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

561 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

562 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

565 
	#MPU_RNR_REGION_Pos
 0U

	)

566 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

569 
	#MPU_RBAR_ADDR_Pos
 8U

	)

570 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

572 
	#MPU_RBAR_VALID_Pos
 4U

	)

573 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

575 
	#MPU_RBAR_REGION_Pos
 0U

	)

576 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

579 
	#MPU_RASR_ATTRS_Pos
 16U

	)

580 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

582 
	#MPU_RASR_XN_Pos
 28U

	)

583 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

585 
	#MPU_RASR_AP_Pos
 24U

	)

586 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

588 
	#MPU_RASR_TEX_Pos
 19U

	)

589 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

591 
	#MPU_RASR_S_Pos
 18U

	)

592 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

594 
	#MPU_RASR_C_Pos
 17U

	)

595 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

597 
	#MPU_RASR_B_Pos
 16U

	)

598 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

600 
	#MPU_RASR_SRD_Pos
 8U

	)

601 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

603 
	#MPU_RASR_SIZE_Pos
 1U

	)

604 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

606 
	#MPU_RASR_ENABLE_Pos
 0U

	)

607 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

636 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

644 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

657 
	#SCS_BASE
 (0xE000E000ULË

	)

658 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

659 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

660 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

662 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

663 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

664 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

665 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

667 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

668 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

669 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

697 #ifde‡
CMSIS_NVIC_VIRTUAL


698 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


699 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

701 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


705 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

706 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

707 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

708 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

709 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

710 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

712 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

713 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

714 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

717 #ifde‡
CMSIS_VECTAB_VIRTUAL


718 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


719 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

721 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


723 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

724 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

727 
	#NVIC_USER_IRQ_OFFSET
 16

	)

731 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

732 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

733 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

738 
	#_BIT_SHIFT
(
IRQn
Ë–((((
uöt32_t
)(
öt32_t
)(IRQn)ËË& 0x03ULË* 8UL)

	)

739 
	#_SHP_IDX
(
IRQn
Ë–(((((
uöt32_t
)(
öt32_t
)(IRQn)Ë& 0x0FUL)-8ULË>> 2ULË)

	)

740 
	#_IP_IDX
(
IRQn
Ë–(((
uöt32_t
)(
öt32_t
)(IRQn)Ë>> 2ULË)

	)

749 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

751 i‡((
öt32_t
)(
IRQn
) >= 0)

753 
NVIC
->
ISER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

766 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

768 i‡((
öt32_t
)(
IRQn
) >= 0)

770 ((
uöt32_t
)(((
NVIC
->
ISER
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

785 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

787 i‡((
öt32_t
)(
IRQn
) >= 0)

789 
NVIC
->
ICER
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

790 
__DSB
();

791 
__ISB
();

804 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

806 i‡((
öt32_t
)(
IRQn
) >= 0)

808 ((
uöt32_t
)(((
NVIC
->
ISPR
[0U] & (1UL << (((uöt32_t)
IRQn
) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

823 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

825 i‡((
öt32_t
)(
IRQn
) >= 0)

827 
NVIC
->
ISPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

838 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

840 i‡((
öt32_t
)(
IRQn
) >= 0)

842 
NVIC
->
ICPR
[0U] = (
uöt32_t
)(1UL << (((uöt32_t)
IRQn
) & 0x1FUL));

856 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

858 i‡((
öt32_t
)(
IRQn
) >= 0)

860 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = ((
uöt32_t
)(NVIC->IP[_IP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

861 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

865 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = ((
uöt32_t
)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << 
_BIT_SHIFT
(IRQn))) |

866 (((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)Ë& (
uöt32_t
)0xFFULË<< 
_BIT_SHIFT
(
IRQn
)));

880 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

883 i‡((
öt32_t
)(
IRQn
) >= 0)

885 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

889 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& (uöt32_t)0xFFULË>> (8U - 
__NVIC_PRIO_BITS
)));

903 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

905 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

906 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

918 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

920 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

921  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

929 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

931 
__DSB
();

933 
SCB
->
AIRCR
 = ((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

934 
SCB_AIRCR_SYSRESETREQ_Msk
);

935 
__DSB
();

939 
__NOP
();

962 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

980 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

993 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

995 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1000 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1001 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1002 
SysTick
->
VAL
 = 0UL;

1003 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1004 
SysTick_CTRL_TICKINT_Msk
 |

1005 
SysTick_CTRL_ENABLE_Msk
;

1016 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_sc300.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
__CORE_SC300_H_GENERIC


32 
	#__CORE_SC300_H_GENERIC


	)

34 
	~<°döt.h
>

36 #ifde‡
__˝lu•lus


63 
	~"cmsis_vîsi⁄.h
"

66 
	#__SC300_CMSIS_VERSION_MAIN
 (
__CM_CMSIS_VERSION_MAIN
Ë

	)

67 
	#__SC300_CMSIS_VERSION_SUB
 (
__CM_CMSIS_VERSION_SUB
Ë

	)

68 
	#__SC300_CMSIS_VERSION
 ((
__SC300_CMSIS_VERSION_MAIN
 << 16U) | \

69 
__SC300_CMSIS_VERSION_SUB
 )

	)

71 
	#__CORTEX_SC
 (300UË

	)

76 
	#__FPU_USED
 0U

	)

78 #i‡
deföed
 ( 
__CC_ARM
 )

79 #i‡
deföed
 
__TARGET_FPU_VFP


83 #ñi‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

84 #i‡
deföed
 
__ARM_PCS_VFP


88 #ñi‡
deföed
 ( 
__GNUC__
 )

89 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

93 #ñi‡
deföed
 ( 
__ICCARM__
 )

94 #i‡
deföed
 
__ARMVFP__


98 #ñi‡
deföed
 ( 
__TI_ARM__
 )

99 #i‡
deföed
 
__TI_VFP_SUPPORT__


103 #ñi‡
deföed
 ( 
__TASKING__
 )

104 #i‡
deföed
 
__FPU_VFP__


108 #ñi‡
deföed
 ( 
__CSMC__
 )

109 #i‡–
__CSMC__
 & 0x400U)

115 
	~"cmsis_compûî.h
"

118 #ifde‡
__˝lu•lus


124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_SC300_H_DEPENDANT


127 
	#__CORE_SC300_H_DEPENDANT


	)

129 #ifde‡
__˝lu•lus


134 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


135 #i‚de‡
__SC300_REV


136 
	#__SC300_REV
 0x0000U

	)

140 #i‚de‡
__MPU_PRESENT


141 
	#__MPU_PRESENT
 0U

	)

145 #i‚de‡
__NVIC_PRIO_BITS


146 
	#__NVIC_PRIO_BITS
 3U

	)

150 #i‚de‡
__Víd‹_SysTickC⁄fig


151 
	#__Víd‹_SysTickC⁄fig
 0U

	)

164 #ifde‡
__˝lu•lus


165 
	#__I
 vﬁ©ûê

	)

167 
	#__I
 vﬁ©ûêc⁄°

	)

169 
	#__O
 vﬁ©ûê

	)

170 
	#__IO
 vﬁ©ûê

	)

173 
	#__IM
 vﬁ©ûêc⁄°

	)

174 
	#__OM
 vﬁ©ûê

	)

175 
	#__IOM
 vﬁ©ûê

	)

210 
uöt32_t
 
_ª£rved0
:27;

211 
uöt32_t
 
Q
:1;

212 
uöt32_t
 
V
:1;

213 
uöt32_t
 
C
:1;

214 
uöt32_t
 
Z
:1;

215 
uöt32_t
 
N
:1;

216 } 
b
;

217 
uöt32_t
 
w
;

218 } 
	tAPSR_Ty≥
;

221 
	#APSR_N_Pos
 31U

	)

222 
	#APSR_N_Msk
 (1UL << 
APSR_N_Pos
Ë

	)

224 
	#APSR_Z_Pos
 30U

	)

225 
	#APSR_Z_Msk
 (1UL << 
APSR_Z_Pos
Ë

	)

227 
	#APSR_C_Pos
 29U

	)

228 
	#APSR_C_Msk
 (1UL << 
APSR_C_Pos
Ë

	)

230 
	#APSR_V_Pos
 28U

	)

231 
	#APSR_V_Msk
 (1UL << 
APSR_V_Pos
Ë

	)

233 
	#APSR_Q_Pos
 27U

	)

234 
	#APSR_Q_Msk
 (1UL << 
APSR_Q_Pos
Ë

	)

244 
uöt32_t
 
ISR
:9;

245 
uöt32_t
 
_ª£rved0
:23;

246 } 
b
;

247 
uöt32_t
 
w
;

248 } 
	tIPSR_Ty≥
;

251 
	#IPSR_ISR_Pos
 0U

	)

252 
	#IPSR_ISR_Msk
 (0x1FFUL )

	)

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:1;

264 
uöt32_t
 
ICI_IT_1
:6;

265 
uöt32_t
 
_ª£rved1
:8;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
ICI_IT_2
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

278 
	#xPSR_N_Pos
 31U

	)

279 
	#xPSR_N_Msk
 (1UL << 
xPSR_N_Pos
Ë

	)

281 
	#xPSR_Z_Pos
 30U

	)

282 
	#xPSR_Z_Msk
 (1UL << 
xPSR_Z_Pos
Ë

	)

284 
	#xPSR_C_Pos
 29U

	)

285 
	#xPSR_C_Msk
 (1UL << 
xPSR_C_Pos
Ë

	)

287 
	#xPSR_V_Pos
 28U

	)

288 
	#xPSR_V_Msk
 (1UL << 
xPSR_V_Pos
Ë

	)

290 
	#xPSR_Q_Pos
 27U

	)

291 
	#xPSR_Q_Msk
 (1UL << 
xPSR_Q_Pos
Ë

	)

293 
	#xPSR_ICI_IT_2_Pos
 25U

	)

294 
	#xPSR_ICI_IT_2_Msk
 (3UL << 
xPSR_ICI_IT_2_Pos
Ë

	)

296 
	#xPSR_T_Pos
 24U

	)

297 
	#xPSR_T_Msk
 (1UL << 
xPSR_T_Pos
Ë

	)

299 
	#xPSR_ICI_IT_1_Pos
 10U

	)

300 
	#xPSR_ICI_IT_1_Msk
 (0x3FUL << 
xPSR_ICI_IT_1_Pos
Ë

	)

302 
	#xPSR_ISR_Pos
 0U

	)

303 
	#xPSR_ISR_Msk
 (0x1FFUL )

	)

313 
uöt32_t
 
nPRIV
:1;

314 
uöt32_t
 
SPSEL
:1;

315 
uöt32_t
 
_ª£rved1
:30;

316 } 
b
;

317 
uöt32_t
 
w
;

318 } 
	tCONTROL_Ty≥
;

321 
	#CONTROL_SPSEL_Pos
 1U

	)

322 
	#CONTROL_SPSEL_Msk
 (1UL << 
CONTROL_SPSEL_Pos
Ë

	)

324 
	#CONTROL_nPRIV_Pos
 0U

	)

325 
	#CONTROL_nPRIV_Msk
 (1UL )

	)

342 
__IOM
 
uöt32_t
 
ISER
[8U];

343 
uöt32_t
 
RESERVED0
[24U];

344 
__IOM
 
uöt32_t
 
ICER
[8U];

345 
uöt32_t
 
RSERVED1
[24U];

346 
__IOM
 
uöt32_t
 
ISPR
[8U];

347 
uöt32_t
 
RESERVED2
[24U];

348 
__IOM
 
uöt32_t
 
ICPR
[8U];

349 
uöt32_t
 
RESERVED3
[24U];

350 
__IOM
 
uöt32_t
 
IABR
[8U];

351 
uöt32_t
 
RESERVED4
[56U];

352 
__IOM
 
uöt8_t
 
IP
[240U];

353 
uöt32_t
 
RESERVED5
[644U];

354 
__OM
 
uöt32_t
 
STIR
;

355 } 
	tNVIC_Ty≥
;

358 
	#NVIC_STIR_INTID_Pos
 0U

	)

359 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL )

	)

376 
__IM
 
uöt32_t
 
CPUID
;

377 
__IOM
 
uöt32_t
 
ICSR
;

378 
__IOM
 
uöt32_t
 
VTOR
;

379 
__IOM
 
uöt32_t
 
AIRCR
;

380 
__IOM
 
uöt32_t
 
SCR
;

381 
__IOM
 
uöt32_t
 
CCR
;

382 
__IOM
 
uöt8_t
 
SHP
[12U];

383 
__IOM
 
uöt32_t
 
SHCSR
;

384 
__IOM
 
uöt32_t
 
CFSR
;

385 
__IOM
 
uöt32_t
 
HFSR
;

386 
__IOM
 
uöt32_t
 
DFSR
;

387 
__IOM
 
uöt32_t
 
MMFAR
;

388 
__IOM
 
uöt32_t
 
BFAR
;

389 
__IOM
 
uöt32_t
 
AFSR
;

390 
__IM
 
uöt32_t
 
PFR
[2U];

391 
__IM
 
uöt32_t
 
DFR
;

392 
__IM
 
uöt32_t
 
ADR
;

393 
__IM
 
uöt32_t
 
MMFR
[4U];

394 
__IM
 
uöt32_t
 
ISAR
[5U];

395 
uöt32_t
 
RESERVED0
[5U];

396 
__IOM
 
uöt32_t
 
CPACR
;

397 
uöt32_t
 
RESERVED1
[129U];

398 
__IOM
 
uöt32_t
 
SFCR
;

399 } 
	tSCB_Ty≥
;

402 
	#SCB_CPUID_IMPLEMENTER_Pos
 24U

	)

403 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

405 
	#SCB_CPUID_VARIANT_Pos
 20U

	)

406 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

408 
	#SCB_CPUID_ARCHITECTURE_Pos
 16U

	)

409 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

411 
	#SCB_CPUID_PARTNO_Pos
 4U

	)

412 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

414 
	#SCB_CPUID_REVISION_Pos
 0U

	)

415 
	#SCB_CPUID_REVISION_Msk
 (0xFUL )

	)

418 
	#SCB_ICSR_NMIPENDSET_Pos
 31U

	)

419 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

421 
	#SCB_ICSR_PENDSVSET_Pos
 28U

	)

422 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

424 
	#SCB_ICSR_PENDSVCLR_Pos
 27U

	)

425 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

427 
	#SCB_ICSR_PENDSTSET_Pos
 26U

	)

428 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

430 
	#SCB_ICSR_PENDSTCLR_Pos
 25U

	)

431 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

433 
	#SCB_ICSR_ISRPREEMPT_Pos
 23U

	)

434 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

436 
	#SCB_ICSR_ISRPENDING_Pos
 22U

	)

437 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

439 
	#SCB_ICSR_VECTPENDING_Pos
 12U

	)

440 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

442 
	#SCB_ICSR_RETTOBASE_Pos
 11U

	)

443 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

445 
	#SCB_ICSR_VECTACTIVE_Pos
 0U

	)

446 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL )

	)

449 
	#SCB_VTOR_TBLBASE_Pos
 29U

	)

450 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

452 
	#SCB_VTOR_TBLOFF_Pos
 7U

	)

453 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

456 
	#SCB_AIRCR_VECTKEY_Pos
 16U

	)

457 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

459 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16U

	)

460 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

462 
	#SCB_AIRCR_ENDIANESS_Pos
 15U

	)

463 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

465 
	#SCB_AIRCR_PRIGROUP_Pos
 8U

	)

466 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

468 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2U

	)

469 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

471 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1U

	)

472 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

474 
	#SCB_AIRCR_VECTRESET_Pos
 0U

	)

475 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL )

	)

478 
	#SCB_SCR_SEVONPEND_Pos
 4U

	)

479 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

481 
	#SCB_SCR_SLEEPDEEP_Pos
 2U

	)

482 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

484 
	#SCB_SCR_SLEEPONEXIT_Pos
 1U

	)

485 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

488 
	#SCB_CCR_STKALIGN_Pos
 9U

	)

489 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

491 
	#SCB_CCR_BFHFNMIGN_Pos
 8U

	)

492 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

494 
	#SCB_CCR_DIV_0_TRP_Pos
 4U

	)

495 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

497 
	#SCB_CCR_UNALIGN_TRP_Pos
 3U

	)

498 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

500 
	#SCB_CCR_USERSETMPEND_Pos
 1U

	)

501 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

503 
	#SCB_CCR_NONBASETHRDENA_Pos
 0U

	)

504 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL )

	)

507 
	#SCB_SHCSR_USGFAULTENA_Pos
 18U

	)

508 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

510 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17U

	)

511 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

513 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16U

	)

514 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

516 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15U

	)

517 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

519 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14U

	)

520 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

522 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13U

	)

523 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

525 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12U

	)

526 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

528 
	#SCB_SHCSR_SYSTICKACT_Pos
 11U

	)

529 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

531 
	#SCB_SHCSR_PENDSVACT_Pos
 10U

	)

532 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

534 
	#SCB_SHCSR_MONITORACT_Pos
 8U

	)

535 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

537 
	#SCB_SHCSR_SVCALLACT_Pos
 7U

	)

538 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

540 
	#SCB_SHCSR_USGFAULTACT_Pos
 3U

	)

541 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

543 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1U

	)

544 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

546 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0U

	)

547 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL )

	)

550 
	#SCB_CFSR_USGFAULTSR_Pos
 16U

	)

551 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

553 
	#SCB_CFSR_BUSFAULTSR_Pos
 8U

	)

554 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

556 
	#SCB_CFSR_MEMFAULTSR_Pos
 0U

	)

557 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL )

	)

560 
	#SCB_CFSR_MMARVALID_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 7UË

	)

561 
	#SCB_CFSR_MMARVALID_Msk
 (1UL << 
SCB_CFSR_MMARVALID_Pos
Ë

	)

563 
	#SCB_CFSR_MSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 4UË

	)

564 
	#SCB_CFSR_MSTKERR_Msk
 (1UL << 
SCB_CFSR_MSTKERR_Pos
Ë

	)

566 
	#SCB_CFSR_MUNSTKERR_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 3UË

	)

567 
	#SCB_CFSR_MUNSTKERR_Msk
 (1UL << 
SCB_CFSR_MUNSTKERR_Pos
Ë

	)

569 
	#SCB_CFSR_DACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 1UË

	)

570 
	#SCB_CFSR_DACCVIOL_Msk
 (1UL << 
SCB_CFSR_DACCVIOL_Pos
Ë

	)

572 
	#SCB_CFSR_IACCVIOL_Pos
 (
SCB_SHCSR_MEMFAULTACT_Pos
 + 0UË

	)

573 
	#SCB_CFSR_IACCVIOL_Msk
 (1UL )

	)

576 
	#SCB_CFSR_BFARVALID_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 7UË

	)

577 
	#SCB_CFSR_BFARVALID_Msk
 (1UL << 
SCB_CFSR_BFARVALID_Pos
Ë

	)

579 
	#SCB_CFSR_STKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 4UË

	)

580 
	#SCB_CFSR_STKERR_Msk
 (1UL << 
SCB_CFSR_STKERR_Pos
Ë

	)

582 
	#SCB_CFSR_UNSTKERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 3UË

	)

583 
	#SCB_CFSR_UNSTKERR_Msk
 (1UL << 
SCB_CFSR_UNSTKERR_Pos
Ë

	)

585 
	#SCB_CFSR_IMPRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 2UË

	)

586 
	#SCB_CFSR_IMPRECISERR_Msk
 (1UL << 
SCB_CFSR_IMPRECISERR_Pos
Ë

	)

588 
	#SCB_CFSR_PRECISERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 1UË

	)

589 
	#SCB_CFSR_PRECISERR_Msk
 (1UL << 
SCB_CFSR_PRECISERR_Pos
Ë

	)

591 
	#SCB_CFSR_IBUSERR_Pos
 (
SCB_CFSR_BUSFAULTSR_Pos
 + 0UË

	)

592 
	#SCB_CFSR_IBUSERR_Msk
 (1UL << 
SCB_CFSR_IBUSERR_Pos
Ë

	)

595 
	#SCB_CFSR_DIVBYZERO_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 9UË

	)

596 
	#SCB_CFSR_DIVBYZERO_Msk
 (1UL << 
SCB_CFSR_DIVBYZERO_Pos
Ë

	)

598 
	#SCB_CFSR_UNALIGNED_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 8UË

	)

599 
	#SCB_CFSR_UNALIGNED_Msk
 (1UL << 
SCB_CFSR_UNALIGNED_Pos
Ë

	)

601 
	#SCB_CFSR_NOCP_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 3UË

	)

602 
	#SCB_CFSR_NOCP_Msk
 (1UL << 
SCB_CFSR_NOCP_Pos
Ë

	)

604 
	#SCB_CFSR_INVPC_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 2UË

	)

605 
	#SCB_CFSR_INVPC_Msk
 (1UL << 
SCB_CFSR_INVPC_Pos
Ë

	)

607 
	#SCB_CFSR_INVSTATE_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 1UË

	)

608 
	#SCB_CFSR_INVSTATE_Msk
 (1UL << 
SCB_CFSR_INVSTATE_Pos
Ë

	)

610 
	#SCB_CFSR_UNDEFINSTR_Pos
 (
SCB_CFSR_USGFAULTSR_Pos
 + 0UË

	)

611 
	#SCB_CFSR_UNDEFINSTR_Msk
 (1UL << 
SCB_CFSR_UNDEFINSTR_Pos
Ë

	)

614 
	#SCB_HFSR_DEBUGEVT_Pos
 31U

	)

615 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

617 
	#SCB_HFSR_FORCED_Pos
 30U

	)

618 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

620 
	#SCB_HFSR_VECTTBL_Pos
 1U

	)

621 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

624 
	#SCB_DFSR_EXTERNAL_Pos
 4U

	)

625 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

627 
	#SCB_DFSR_VCATCH_Pos
 3U

	)

628 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

630 
	#SCB_DFSR_DWTTRAP_Pos
 2U

	)

631 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

633 
	#SCB_DFSR_BKPT_Pos
 1U

	)

634 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

636 
	#SCB_DFSR_HALTED_Pos
 0U

	)

637 
	#SCB_DFSR_HALTED_Msk
 (1UL )

	)

654 
uöt32_t
 
RESERVED0
[1U];

655 
__IM
 
uöt32_t
 
ICTR
;

656 
uöt32_t
 
RESERVED1
[1U];

657 } 
	tSCnSCB_Ty≥
;

660 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0U

	)

661 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL )

	)

678 
__IOM
 
uöt32_t
 
CTRL
;

679 
__IOM
 
uöt32_t
 
LOAD
;

680 
__IOM
 
uöt32_t
 
VAL
;

681 
__IM
 
uöt32_t
 
CALIB
;

682 } 
	tSysTick_Ty≥
;

685 
	#SysTick_CTRL_COUNTFLAG_Pos
 16U

	)

686 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

688 
	#SysTick_CTRL_CLKSOURCE_Pos
 2U

	)

689 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

691 
	#SysTick_CTRL_TICKINT_Pos
 1U

	)

692 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

694 
	#SysTick_CTRL_ENABLE_Pos
 0U

	)

695 
	#SysTick_CTRL_ENABLE_Msk
 (1UL )

	)

698 
	#SysTick_LOAD_RELOAD_Pos
 0U

	)

699 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL )

	)

702 
	#SysTick_VAL_CURRENT_Pos
 0U

	)

703 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL )

	)

706 
	#SysTick_CALIB_NOREF_Pos
 31U

	)

707 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

709 
	#SysTick_CALIB_SKEW_Pos
 30U

	)

710 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

712 
	#SysTick_CALIB_TENMS_Pos
 0U

	)

713 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL )

	)

730 
__OM
 union

732 
__OM
 
uöt8_t
 
u8
;

733 
__OM
 
uöt16_t
 
u16
;

734 
__OM
 
uöt32_t
 
u32
;

735 } 
PORT
 [32U];

736 
uöt32_t
 
RESERVED0
[864U];

737 
__IOM
 
uöt32_t
 
TER
;

738 
uöt32_t
 
RESERVED1
[15U];

739 
__IOM
 
uöt32_t
 
TPR
;

740 
uöt32_t
 
RESERVED2
[15U];

741 
__IOM
 
uöt32_t
 
TCR
;

742 
uöt32_t
 
RESERVED3
[29U];

743 
__OM
 
uöt32_t
 
IWR
;

744 
__IM
 
uöt32_t
 
IRR
;

745 
__IOM
 
uöt32_t
 
IMCR
;

746 
uöt32_t
 
RESERVED4
[43U];

747 
__OM
 
uöt32_t
 
LAR
;

748 
__IM
 
uöt32_t
 
LSR
;

749 
uöt32_t
 
RESERVED5
[6U];

750 
__IM
 
uöt32_t
 
PID4
;

751 
__IM
 
uöt32_t
 
PID5
;

752 
__IM
 
uöt32_t
 
PID6
;

753 
__IM
 
uöt32_t
 
PID7
;

754 
__IM
 
uöt32_t
 
PID0
;

755 
__IM
 
uöt32_t
 
PID1
;

756 
__IM
 
uöt32_t
 
PID2
;

757 
__IM
 
uöt32_t
 
PID3
;

758 
__IM
 
uöt32_t
 
CID0
;

759 
__IM
 
uöt32_t
 
CID1
;

760 
__IM
 
uöt32_t
 
CID2
;

761 
__IM
 
uöt32_t
 
CID3
;

762 } 
	tITM_Ty≥
;

765 
	#ITM_TPR_PRIVMASK_Pos
 0U

	)

766 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL )

	)

769 
	#ITM_TCR_BUSY_Pos
 23U

	)

770 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

772 
	#ITM_TCR_Tø˚BusID_Pos
 16U

	)

773 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

775 
	#ITM_TCR_GTSFREQ_Pos
 10U

	)

776 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

778 
	#ITM_TCR_TSPªsˇÀ_Pos
 8U

	)

779 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

781 
	#ITM_TCR_SWOENA_Pos
 4U

	)

782 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

784 
	#ITM_TCR_DWTENA_Pos
 3U

	)

785 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

787 
	#ITM_TCR_SYNCENA_Pos
 2U

	)

788 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

790 
	#ITM_TCR_TSENA_Pos
 1U

	)

791 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

793 
	#ITM_TCR_ITMENA_Pos
 0U

	)

794 
	#ITM_TCR_ITMENA_Msk
 (1UL )

	)

797 
	#ITM_IWR_ATVALIDM_Pos
 0U

	)

798 
	#ITM_IWR_ATVALIDM_Msk
 (1UL )

	)

801 
	#ITM_IRR_ATREADYM_Pos
 0U

	)

802 
	#ITM_IRR_ATREADYM_Msk
 (1UL )

	)

805 
	#ITM_IMCR_INTEGRATION_Pos
 0U

	)

806 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL )

	)

809 
	#ITM_LSR_ByãAcc_Pos
 2U

	)

810 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

812 
	#ITM_LSR_Ac˚ss_Pos
 1U

	)

813 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

815 
	#ITM_LSR_Pª£¡_Pos
 0U

	)

816 
	#ITM_LSR_Pª£¡_Msk
 (1UL )

	)

833 
__IOM
 
uöt32_t
 
CTRL
;

834 
__IOM
 
uöt32_t
 
CYCCNT
;

835 
__IOM
 
uöt32_t
 
CPICNT
;

836 
__IOM
 
uöt32_t
 
EXCCNT
;

837 
__IOM
 
uöt32_t
 
SLEEPCNT
;

838 
__IOM
 
uöt32_t
 
LSUCNT
;

839 
__IOM
 
uöt32_t
 
FOLDCNT
;

840 
__IM
 
uöt32_t
 
PCSR
;

841 
__IOM
 
uöt32_t
 
COMP0
;

842 
__IOM
 
uöt32_t
 
MASK0
;

843 
__IOM
 
uöt32_t
 
FUNCTION0
;

844 
uöt32_t
 
RESERVED0
[1U];

845 
__IOM
 
uöt32_t
 
COMP1
;

846 
__IOM
 
uöt32_t
 
MASK1
;

847 
__IOM
 
uöt32_t
 
FUNCTION1
;

848 
uöt32_t
 
RESERVED1
[1U];

849 
__IOM
 
uöt32_t
 
COMP2
;

850 
__IOM
 
uöt32_t
 
MASK2
;

851 
__IOM
 
uöt32_t
 
FUNCTION2
;

852 
uöt32_t
 
RESERVED2
[1U];

853 
__IOM
 
uöt32_t
 
COMP3
;

854 
__IOM
 
uöt32_t
 
MASK3
;

855 
__IOM
 
uöt32_t
 
FUNCTION3
;

856 } 
	tDWT_Ty≥
;

859 
	#DWT_CTRL_NUMCOMP_Pos
 28U

	)

860 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

862 
	#DWT_CTRL_NOTRCPKT_Pos
 27U

	)

863 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

865 
	#DWT_CTRL_NOEXTTRIG_Pos
 26U

	)

866 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

868 
	#DWT_CTRL_NOCYCCNT_Pos
 25U

	)

869 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

871 
	#DWT_CTRL_NOPRFCNT_Pos
 24U

	)

872 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

874 
	#DWT_CTRL_CYCEVTENA_Pos
 22U

	)

875 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

877 
	#DWT_CTRL_FOLDEVTENA_Pos
 21U

	)

878 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

880 
	#DWT_CTRL_LSUEVTENA_Pos
 20U

	)

881 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

883 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19U

	)

884 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

886 
	#DWT_CTRL_EXCEVTENA_Pos
 18U

	)

887 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

889 
	#DWT_CTRL_CPIEVTENA_Pos
 17U

	)

890 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

892 
	#DWT_CTRL_EXCTRCENA_Pos
 16U

	)

893 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

895 
	#DWT_CTRL_PCSAMPLENA_Pos
 12U

	)

896 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

898 
	#DWT_CTRL_SYNCTAP_Pos
 10U

	)

899 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

901 
	#DWT_CTRL_CYCTAP_Pos
 9U

	)

902 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

904 
	#DWT_CTRL_POSTINIT_Pos
 5U

	)

905 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

907 
	#DWT_CTRL_POSTPRESET_Pos
 1U

	)

908 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

910 
	#DWT_CTRL_CYCCNTENA_Pos
 0U

	)

911 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL )

	)

914 
	#DWT_CPICNT_CPICNT_Pos
 0U

	)

915 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL )

	)

918 
	#DWT_EXCCNT_EXCCNT_Pos
 0U

	)

919 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL )

	)

922 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0U

	)

923 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL )

	)

926 
	#DWT_LSUCNT_LSUCNT_Pos
 0U

	)

927 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL )

	)

930 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0U

	)

931 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL )

	)

934 
	#DWT_MASK_MASK_Pos
 0U

	)

935 
	#DWT_MASK_MASK_Msk
 (0x1FUL )

	)

938 
	#DWT_FUNCTION_MATCHED_Pos
 24U

	)

939 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

941 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16U

	)

942 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

944 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12U

	)

945 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

947 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10U

	)

948 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

950 
	#DWT_FUNCTION_LNK1ENA_Pos
 9U

	)

951 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

953 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8U

	)

954 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

956 
	#DWT_FUNCTION_CYCMATCH_Pos
 7U

	)

957 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

959 
	#DWT_FUNCTION_EMITRANGE_Pos
 5U

	)

960 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

962 
	#DWT_FUNCTION_FUNCTION_Pos
 0U

	)

963 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL )

	)

980 
__IM
 
uöt32_t
 
SSPSR
;

981 
__IOM
 
uöt32_t
 
CSPSR
;

982 
uöt32_t
 
RESERVED0
[2U];

983 
__IOM
 
uöt32_t
 
ACPR
;

984 
uöt32_t
 
RESERVED1
[55U];

985 
__IOM
 
uöt32_t
 
SPPR
;

986 
uöt32_t
 
RESERVED2
[131U];

987 
__IM
 
uöt32_t
 
FFSR
;

988 
__IOM
 
uöt32_t
 
FFCR
;

989 
__IM
 
uöt32_t
 
FSCR
;

990 
uöt32_t
 
RESERVED3
[759U];

991 
__IM
 
uöt32_t
 
TRIGGER
;

992 
__IM
 
uöt32_t
 
FIFO0
;

993 
__IM
 
uöt32_t
 
ITATBCTR2
;

994 
uöt32_t
 
RESERVED4
[1U];

995 
__IM
 
uöt32_t
 
ITATBCTR0
;

996 
__IM
 
uöt32_t
 
FIFO1
;

997 
__IOM
 
uöt32_t
 
ITCTRL
;

998 
uöt32_t
 
RESERVED5
[39U];

999 
__IOM
 
uöt32_t
 
CLAIMSET
;

1000 
__IOM
 
uöt32_t
 
CLAIMCLR
;

1001 
uöt32_t
 
RESERVED7
[8U];

1002 
__IM
 
uöt32_t
 
DEVID
;

1003 
__IM
 
uöt32_t
 
DEVTYPE
;

1004 } 
	tTPI_Ty≥
;

1007 
	#TPI_ACPR_PRESCALER_Pos
 0U

	)

1008 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL )

	)

1011 
	#TPI_SPPR_TXMODE_Pos
 0U

	)

1012 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL )

	)

1015 
	#TPI_FFSR_FtN⁄St›_Pos
 3U

	)

1016 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

1018 
	#TPI_FFSR_TCPª£¡_Pos
 2U

	)

1019 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

1021 
	#TPI_FFSR_FtSt›≥d_Pos
 1U

	)

1022 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

1024 
	#TPI_FFSR_FlInProg_Pos
 0U

	)

1025 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL )

	)

1028 
	#TPI_FFCR_TrigIn_Pos
 8U

	)

1029 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

1031 
	#TPI_FFCR_EnFC⁄t_Pos
 1U

	)

1032 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1035 
	#TPI_TRIGGER_TRIGGER_Pos
 0U

	)

1036 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL )

	)

1039 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29U

	)

1040 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1042 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27U

	)

1043 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1045 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26U

	)

1046 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1048 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24U

	)

1049 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1051 
	#TPI_FIFO0_ETM2_Pos
 16U

	)

1052 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1054 
	#TPI_FIFO0_ETM1_Pos
 8U

	)

1055 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1057 
	#TPI_FIFO0_ETM0_Pos
 0U

	)

1058 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL )

	)

1061 
	#TPI_ITATBCTR2_ATREADY2_Pos
 0U

	)

1062 
	#TPI_ITATBCTR2_ATREADY2_Msk
 (0x1UL )

	)

1064 
	#TPI_ITATBCTR2_ATREADY1_Pos
 0U

	)

1065 
	#TPI_ITATBCTR2_ATREADY1_Msk
 (0x1UL )

	)

1068 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29U

	)

1069 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1071 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27U

	)

1072 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1074 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26U

	)

1075 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1077 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24U

	)

1078 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1080 
	#TPI_FIFO1_ITM2_Pos
 16U

	)

1081 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1083 
	#TPI_FIFO1_ITM1_Pos
 8U

	)

1084 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1086 
	#TPI_FIFO1_ITM0_Pos
 0U

	)

1087 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL )

	)

1090 
	#TPI_ITATBCTR0_ATREADY2_Pos
 0U

	)

1091 
	#TPI_ITATBCTR0_ATREADY2_Msk
 (0x1UL )

	)

1093 
	#TPI_ITATBCTR0_ATREADY1_Pos
 0U

	)

1094 
	#TPI_ITATBCTR0_ATREADY1_Msk
 (0x1UL )

	)

1097 
	#TPI_ITCTRL_Mode_Pos
 0U

	)

1098 
	#TPI_ITCTRL_Mode_Msk
 (0x3UL )

	)

1101 
	#TPI_DEVID_NRZVALID_Pos
 11U

	)

1102 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1104 
	#TPI_DEVID_MANCVALID_Pos
 10U

	)

1105 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1107 
	#TPI_DEVID_PTINVALID_Pos
 9U

	)

1108 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1110 
	#TPI_DEVID_MöBufSz_Pos
 6U

	)

1111 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1113 
	#TPI_DEVID_AsynClkIn_Pos
 5U

	)

1114 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1116 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0U

	)

1117 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL )

	)

1120 
	#TPI_DEVTYPE_SubTy≥_Pos
 4U

	)

1121 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL )

	)

1123 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 0U

	)

1124 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1129 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1142 
__IM
 
uöt32_t
 
TYPE
;

1143 
__IOM
 
uöt32_t
 
CTRL
;

1144 
__IOM
 
uöt32_t
 
RNR
;

1145 
__IOM
 
uöt32_t
 
RBAR
;

1146 
__IOM
 
uöt32_t
 
RASR
;

1147 
__IOM
 
uöt32_t
 
RBAR_A1
;

1148 
__IOM
 
uöt32_t
 
RASR_A1
;

1149 
__IOM
 
uöt32_t
 
RBAR_A2
;

1150 
__IOM
 
uöt32_t
 
RASR_A2
;

1151 
__IOM
 
uöt32_t
 
RBAR_A3
;

1152 
__IOM
 
uöt32_t
 
RASR_A3
;

1153 } 
	tMPU_Ty≥
;

1156 
	#MPU_TYPE_IREGION_Pos
 16U

	)

1157 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1159 
	#MPU_TYPE_DREGION_Pos
 8U

	)

1160 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1162 
	#MPU_TYPE_SEPARATE_Pos
 0U

	)

1163 
	#MPU_TYPE_SEPARATE_Msk
 (1UL )

	)

1166 
	#MPU_CTRL_PRIVDEFENA_Pos
 2U

	)

1167 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1169 
	#MPU_CTRL_HFNMIENA_Pos
 1U

	)

1170 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1172 
	#MPU_CTRL_ENABLE_Pos
 0U

	)

1173 
	#MPU_CTRL_ENABLE_Msk
 (1UL )

	)

1176 
	#MPU_RNR_REGION_Pos
 0U

	)

1177 
	#MPU_RNR_REGION_Msk
 (0xFFUL )

	)

1180 
	#MPU_RBAR_ADDR_Pos
 5U

	)

1181 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1183 
	#MPU_RBAR_VALID_Pos
 4U

	)

1184 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1186 
	#MPU_RBAR_REGION_Pos
 0U

	)

1187 
	#MPU_RBAR_REGION_Msk
 (0xFUL )

	)

1190 
	#MPU_RASR_ATTRS_Pos
 16U

	)

1191 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1193 
	#MPU_RASR_XN_Pos
 28U

	)

1194 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1196 
	#MPU_RASR_AP_Pos
 24U

	)

1197 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1199 
	#MPU_RASR_TEX_Pos
 19U

	)

1200 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1202 
	#MPU_RASR_S_Pos
 18U

	)

1203 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1205 
	#MPU_RASR_C_Pos
 17U

	)

1206 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1208 
	#MPU_RASR_B_Pos
 16U

	)

1209 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1211 
	#MPU_RASR_SRD_Pos
 8U

	)

1212 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1214 
	#MPU_RASR_SIZE_Pos
 1U

	)

1215 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1217 
	#MPU_RASR_ENABLE_Pos
 0U

	)

1218 
	#MPU_RASR_ENABLE_Msk
 (1UL )

	)

1236 
__IOM
 
uöt32_t
 
DHCSR
;

1237 
__OM
 
uöt32_t
 
DCRSR
;

1238 
__IOM
 
uöt32_t
 
DCRDR
;

1239 
__IOM
 
uöt32_t
 
DEMCR
;

1240 } 
	tC‹eDebug_Ty≥
;

1243 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16U

	)

1244 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1246 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25U

	)

1247 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1249 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24U

	)

1250 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1252 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19U

	)

1253 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1255 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18U

	)

1256 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1258 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17U

	)

1259 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1261 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16U

	)

1262 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1264 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5U

	)

1265 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1267 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3U

	)

1268 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1270 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2U

	)

1271 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1273 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1U

	)

1274 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1276 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0U

	)

1277 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL )

	)

1280 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16U

	)

1281 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1283 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0U

	)

1284 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL )

	)

1287 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24U

	)

1288 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1290 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19U

	)

1291 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1293 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18U

	)

1294 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1296 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17U

	)

1297 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1299 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16U

	)

1300 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1302 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10U

	)

1303 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1305 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9U

	)

1306 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1308 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8U

	)

1309 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1311 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7U

	)

1312 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1314 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6U

	)

1315 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1317 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5U

	)

1318 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1320 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4U

	)

1321 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1323 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0U

	)

1324 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL )

	)

1342 
	#_VAL2FLD
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË<< fõld ## 
_Pos
Ë& fõld ## 
_Msk
)

	)

1350 
	#_FLD2VAL
(
fõld
, 
vÆue
Ë(((
uöt32_t
)(vÆueË& fõld ## 
_Msk
Ë>> fõld ## 
_Pos
)

	)

1363 
	#SCS_BASE
 (0xE000E000ULË

	)

1364 
	#ITM_BASE
 (0xE0000000ULË

	)

1365 
	#DWT_BASE
 (0xE0001000ULË

	)

1366 
	#TPI_BASE
 (0xE0040000ULË

	)

1367 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1368 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1369 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1370 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1372 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1373 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1374 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1375 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1376 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1377 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1378 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1379 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1381 #i‡
deföed
 (
__MPU_PRESENT
) && (__MPU_PRESENT == 1U)

1382 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1383 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1412 #ifde‡
CMSIS_NVIC_VIRTUAL


1413 #i‚de‡
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1414 
	#CMSIS_NVIC_VIRTUAL_HEADER_FILE
 "cmsis_nvic_vútuÆ.h"

	)

1416 #ö˛udê
CMSIS_NVIC_VIRTUAL_HEADER_FILE


1418 
	#NVIC_SëPri‹ôyGroupög
 
__NVIC_SëPri‹ôyGroupög


	)

1419 
	#NVIC_GëPri‹ôyGroupög
 
__NVIC_GëPri‹ôyGroupög


	)

1420 
	#NVIC_E«bÀIRQ
 
__NVIC_E«bÀIRQ


	)

1421 
	#NVIC_GëE«bÀIRQ
 
__NVIC_GëE«bÀIRQ


	)

1422 
	#NVIC_DißbÀIRQ
 
__NVIC_DißbÀIRQ


	)

1423 
	#NVIC_GëPídögIRQ
 
__NVIC_GëPídögIRQ


	)

1424 
	#NVIC_SëPídögIRQ
 
__NVIC_SëPídögIRQ


	)

1425 
	#NVIC_CÀ¨PídögIRQ
 
__NVIC_CÀ¨PídögIRQ


	)

1426 
	#NVIC_GëA˘ive
 
__NVIC_GëA˘ive


	)

1427 
	#NVIC_SëPri‹ôy
 
__NVIC_SëPri‹ôy


	)

1428 
	#NVIC_GëPri‹ôy
 
__NVIC_GëPri‹ôy


	)

1429 
	#NVIC_Sy°emRe£t
 
__NVIC_Sy°emRe£t


	)

1432 #ifde‡
CMSIS_VECTAB_VIRTUAL


1433 #i‚de‡
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1434 
	#CMSIS_VECTAB_VIRTUAL_HEADER_FILE
 "cmsis_ve˘ab_vútuÆ.h"

	)

1436 #ö˛udê
CMSIS_VECTAB_VIRTUAL_HEADER_FILE


1438 
	#NVIC_SëVe˘‹
 
__NVIC_SëVe˘‹


	)

1439 
	#NVIC_GëVe˘‹
 
__NVIC_GëVe˘‹


	)

1442 
	#NVIC_USER_IRQ_OFFSET
 16

	)

1446 
	#EXC_RETURN_HANDLER
 (0xFFFFFFF1ULË

	)

1447 
	#EXC_RETURN_THREAD_MSP
 (0xFFFFFFF9ULË

	)

1448 
	#EXC_RETURN_THREAD_PSP
 (0xFFFFFFFDULË

	)

1461 
__STATIC_INLINE
 
__NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1463 
uöt32_t
 
ªg_vÆue
;

1464 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1466 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1467 
ªg_vÆue
 &~((
uöt32_t
)(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
));

1468 
ªg_vÆue
 = (reg_value |

1469 ((
uöt32_t
)0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1470 (
Pri‹ôyGroupTmp
 << 8U) );

1471 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1480 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôyGroupög
()

1482  ((
uöt32_t
)((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
));

1492 
__STATIC_INLINE
 
__NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1494 i‡((
öt32_t
)(
IRQn
) >= 0)

1496 
NVIC
->
ISER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1509 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëE«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1511 i‡((
öt32_t
)(
IRQn
) >= 0)

1513 ((
uöt32_t
)(((
NVIC
->
ISER
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1528 
__STATIC_INLINE
 
__NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1530 i‡((
öt32_t
)(
IRQn
) >= 0)

1532 
NVIC
->
ICER
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1533 
__DSB
();

1534 
__ISB
();

1547 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1549 i‡((
öt32_t
)(
IRQn
) >= 0)

1551 ((
uöt32_t
)(((
NVIC
->
ISPR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1566 
__STATIC_INLINE
 
__NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1568 i‡((
öt32_t
)(
IRQn
) >= 0)

1570 
NVIC
->
ISPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1581 
__STATIC_INLINE
 
__NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1583 i‡((
öt32_t
)(
IRQn
) >= 0)

1585 
NVIC
->
ICPR
[(((
uöt32_t
)
IRQn
) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));

1598 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1600 i‡((
öt32_t
)(
IRQn
) >= 0)

1602 ((
uöt32_t
)(((
NVIC
->
IABR
[(((uöt32_t)
IRQn
) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));

1620 
__STATIC_INLINE
 
__NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1622 i‡((
öt32_t
)(
IRQn
) >= 0)

1624 
NVIC
->
IP
[((
uöt32_t
)
IRQn
)] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1628 
SCB
->
SHP
[(((
uöt32_t
)
IRQn
Ë& 0xFUL)-4UL] = (
uöt8_t
)((
¥i‹ôy
 << (8U - 
__NVIC_PRIO_BITS
)) & (uint32_t)0xFFUL);

1642 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1645 i‡((
öt32_t
)(
IRQn
) >= 0)

1647 (((
uöt32_t
)
NVIC
->
IP
[((uöt32_t)
IRQn
)] >> (8U - 
__NVIC_PRIO_BITS
)));

1651 (((
uöt32_t
)
SCB
->
SHP
[(((uöt32_t)
IRQn
Ë& 0xFUL)-4UL] >> (8U - 
__NVIC_PRIO_BITS
)));

1667 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1669 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1670 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1671 
uöt32_t
 
SubPri‹ôyBôs
;

1673 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1674 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1677 ((
Pªem±Pri‹ôy
 & (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)Ë- 1UL)Ë<< 
SubPri‹ôyBôs
) |

1678 ((
SubPri‹ôy
 & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL)))

1694 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* c⁄° 
pPªem±Pri‹ôy
, uöt32_t* c⁄° 
pSubPri‹ôy
)

1696 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07UL);

1697 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1698 
uöt32_t
 
SubPri‹ôyBôs
;

1700 
Pªem±Pri‹ôyBôs
 = ((7UL - 
Pri‹ôyGroupTmp
Ë> (
uöt32_t
)(
__NVIC_PRIO_BITS
)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);

1701 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + (
uöt32_t
)(
__NVIC_PRIO_BITS
)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

1703 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& (
uöt32_t
)((1UL << (
Pªem±Pri‹ôyBôs
)) - 1UL);

1704 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & (
uöt32_t
)((1UL << (
SubPri‹ôyBôs
 )) - 1UL);

1717 
__STATIC_INLINE
 
__NVIC_SëVe˘‹
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
ve˘‹
)

1719 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1720 
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
] = 
ve˘‹
;

1732 
__STATIC_INLINE
 
uöt32_t
 
__NVIC_GëVe˘‹
(
IRQn_Ty≥
 
IRQn
)

1734 
uöt32_t
 *
ve˘‹s
 = (uöt32_à*)
SCB
->
VTOR
;

1735  
ve˘‹s
[(
öt32_t
)
IRQn
 + 
NVIC_USER_IRQ_OFFSET
];

1743 
__NO_RETURN
 
__STATIC_INLINE
 
__NVIC_Sy°emRe£t
()

1745 
__DSB
();

1747 
SCB
->
AIRCR
 = (
uöt32_t
)((0x5FAUL << 
SCB_AIRCR_VECTKEY_Pos
) |

1748 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1749 
SCB_AIRCR_SYSRESETREQ_Msk
 );

1750 
__DSB
();

1754 
__NOP
();

1777 
__STATIC_INLINE
 
uöt32_t
 
SCB_GëFPUTy≥
()

1795 #i‡
deföed
 (
__Víd‹_SysTickC⁄fig
) && (__Vendor_SysTickConfig == 0U)

1808 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1810 i‡((
ticks
 - 1ULË> 
SysTick_LOAD_RELOAD_Msk
)

1815 
SysTick
->
LOAD
 = (
uöt32_t
)(
ticks
 - 1UL);

1816 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1UL << 
__NVIC_PRIO_BITS
) - 1UL);

1817 
SysTick
->
VAL
 = 0UL;

1818 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1819 
SysTick_CTRL_TICKINT_Msk
 |

1820 
SysTick_CTRL_ENABLE_Msk
;

1838 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1839 
	#ITM_RXBUFFER_EMPTY
 ((
öt32_t
)0x5AA55AA5UË

	)

1850 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1852 i‡(((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) != 0UL) &&

1853 ((
ITM
->
TER
 & 1UL ) != 0UL) )

1855 
ITM
->
PORT
[0U].
u32
 == 0UL)

1857 
__NOP
();

1859 
	gITM
->
	gPORT
[0U].
	gu8
 = (
uöt8_t
)
ch
;

1861  (
	gch
);

1871 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 ()

1873 
öt32_t
 
	gch
 = -1;

1875 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
)

1877 
ch
 = 
ITM_RxBuf„r
;

1878 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1881  (
	gch
);

1891 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 ()

1894 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
)

1909 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\mpu_armv7.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
ARM_MPU_ARMV7_H


32 
	#ARM_MPU_ARMV7_H


	)

34 
	#ARM_MPU_REGION_SIZE_32B
 ((
uöt8_t
)0x04U)

35 
	#ARM_MPU_REGION_SIZE_64B
 ((
uöt8_t
)0x05U)

36 
	#ARM_MPU_REGION_SIZE_128B
 ((
uöt8_t
)0x06U)

37 
	#ARM_MPU_REGION_SIZE_256B
 ((
uöt8_t
)0x07U)

38 
	#ARM_MPU_REGION_SIZE_512B
 ((
uöt8_t
)0x08U)

39 
	#ARM_MPU_REGION_SIZE_1KB
 ((
uöt8_t
)0x09U)

40 
	#ARM_MPU_REGION_SIZE_2KB
 ((
uöt8_t
)0x0AU)

41 
	#ARM_MPU_REGION_SIZE_4KB
 ((
uöt8_t
)0x0BU)

42 
	#ARM_MPU_REGION_SIZE_8KB
 ((
uöt8_t
)0x0CU)

43 
	#ARM_MPU_REGION_SIZE_16KB
 ((
uöt8_t
)0x0DU)

44 
	#ARM_MPU_REGION_SIZE_32KB
 ((
uöt8_t
)0x0EU)

45 
	#ARM_MPU_REGION_SIZE_64KB
 ((
uöt8_t
)0x0FU)

46 
	#ARM_MPU_REGION_SIZE_128KB
 ((
uöt8_t
)0x10U)

47 
	#ARM_MPU_REGION_SIZE_256KB
 ((
uöt8_t
)0x11U)

48 
	#ARM_MPU_REGION_SIZE_512KB
 ((
uöt8_t
)0x12U)

49 
	#ARM_MPU_REGION_SIZE_1MB
 ((
uöt8_t
)0x13U)

50 
	#ARM_MPU_REGION_SIZE_2MB
 ((
uöt8_t
)0x14U)

51 
	#ARM_MPU_REGION_SIZE_4MB
 ((
uöt8_t
)0x15U)

52 
	#ARM_MPU_REGION_SIZE_8MB
 ((
uöt8_t
)0x16U)

53 
	#ARM_MPU_REGION_SIZE_16MB
 ((
uöt8_t
)0x17U)

54 
	#ARM_MPU_REGION_SIZE_32MB
 ((
uöt8_t
)0x18U)

55 
	#ARM_MPU_REGION_SIZE_64MB
 ((
uöt8_t
)0x19U)

56 
	#ARM_MPU_REGION_SIZE_128MB
 ((
uöt8_t
)0x1AU)

57 
	#ARM_MPU_REGION_SIZE_256MB
 ((
uöt8_t
)0x1BU)

58 
	#ARM_MPU_REGION_SIZE_512MB
 ((
uöt8_t
)0x1CU)

59 
	#ARM_MPU_REGION_SIZE_1GB
 ((
uöt8_t
)0x1DU)

60 
	#ARM_MPU_REGION_SIZE_2GB
 ((
uöt8_t
)0x1EU)

61 
	#ARM_MPU_REGION_SIZE_4GB
 ((
uöt8_t
)0x1FU)

62 

	)

63 
	#ARM_MPU_AP_NONE
 0U

64 
	#ARM_MPU_AP_PRIV
 1U

65 
	#ARM_MPU_AP_URO
 2U

66 
	#ARM_MPU_AP_FULL
 3U

67 
	#ARM_MPU_AP_PRO
 5U

68 
	#ARM_MPU_AP_RO
 6U

69 

	)

75 
	#ARM_MPU_RBAR
(
Regi⁄
, 
Ba£Addªss
) \

76 (((
Ba£Addªss
Ë& 
MPU_RBAR_ADDR_Msk
) | \

77 ((
Regi⁄
Ë& 
MPU_RBAR_REGION_Msk
) | \

78 (
MPU_RBAR_VALID_Msk
))

	)

88 
	#ARM_MPU_ACCESS_
(
Ty≥ExtFõld
, 
IsSh¨óbÀ
, 
IsCachóbÀ
, 
IsBuf„øbÀ
) \

89 ((((
Ty≥ExtFõld
 ) << 
MPU_RASR_TEX_Pos
Ë& 
MPU_RASR_TEX_Msk
) | \

90 (((
IsSh¨óbÀ
 ) << 
MPU_RASR_S_Pos
Ë& 
MPU_RASR_S_Msk
) | \

91 (((
IsCachóbÀ
 ) << 
MPU_RASR_C_Pos
Ë& 
MPU_RASR_C_Msk
) | \

92 (((
IsBuf„øbÀ
 ) << 
MPU_RASR_B_Pos
Ë& 
MPU_RASR_B_Msk
))

	)

103 
	#ARM_MPU_RASR_EX
(
DißbÀExec
, 
Ac˚ssPîmissi⁄
, 
Ac˚ssAâribuãs
, 
SubRegi⁄DißbÀ
, 
Size
) \

104 ((((
DißbÀExec
 ) << 
MPU_RASR_XN_Pos
Ë& 
MPU_RASR_XN_Msk
) | \

105 (((
Ac˚ssPîmissi⁄
Ë<< 
MPU_RASR_AP_Pos
Ë& 
MPU_RASR_AP_Msk
) | \

106 (((
Ac˚ssAâribuãs
ËË& (
MPU_RASR_TEX_Msk
 | 
MPU_RASR_S_Msk
 | 
MPU_RASR_C_Msk
 | 
MPU_RASR_B_Msk
)))

	)

120 
	#ARM_MPU_RASR
(
DißbÀExec
, 
Ac˚ssPîmissi⁄
, 
Ty≥ExtFõld
, 
IsSh¨óbÀ
, 
IsCachóbÀ
, 
IsBuf„øbÀ
, 
SubRegi⁄DißbÀ
, 
Size
) \

121 
	`ARM_MPU_RASR_EX
(
DißbÀExec
, 
Ac˚ssPîmissi⁄
, 
	`ARM_MPU_ACCESS_
(
Ty≥ExtFõld
, 
IsSh¨óbÀ
, 
IsCachóbÀ
, 
IsBuf„øbÀ
), 
SubRegi⁄DißbÀ
, 
Size
)

	)

130 
	#ARM_MPU_ACCESS_ORDERED
 
	`ARM_MPU_ACCESS_
(0U, 1U, 0U, 0U)

	)

141 
	#ARM_MPU_ACCESS_DEVICE
(
IsSh¨óbÀ
Ë((IsSh¨óbÀË? 
	`ARM_MPU_ACCESS_
(0U, 1U, 0U, 1UË: ARM_MPU_ACCESS_(2U, 0U, 0U, 0U))

	)

154 
	#ARM_MPU_ACCESS_NORMAL
(
OuãrCp
, 
I¬îCp
, 
IsSh¨óbÀ
Ë
	`ARM_MPU_ACCESS_
((4U | (OuãrCp)), IsSh¨óbÀ, ((I¬îCpË& 2U), ((I¬îCpË& 1U))

	)

159 
	#ARM_MPU_CACHEP_NOCACHE
 0U

	)

164 
	#ARM_MPU_CACHEP_WB_WRA
 1U

	)

169 
	#ARM_MPU_CACHEP_WT_NWA
 2U

	)

174 
	#ARM_MPU_CACHEP_WB_NWA
 3U

	)

181 
uöt32_t
 
	mRBAR
;

182 
uöt32_t
 
	mRASR
;

183 } 
	tARM_MPU_Regi⁄_t
;

188 
__STATIC_INLINE
 
	$ARM_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

190 
	`__DSB
();

191 
	`__ISB
();

192 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

193 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


194 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

196 
	}
}

200 
__STATIC_INLINE
 
	$ARM_MPU_DißbÀ
()

202 
	`__DSB
();

203 
	`__ISB
();

204 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


205 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

207 
MPU
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

208 
	}
}

213 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄
(
uöt32_t
 
∫r
)

215 
MPU
->
RNR
 = 
∫r
;

216 
MPU
->
RASR
 = 0U;

217 
	}
}

223 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄
(
uöt32_t
 
rb¨
, uöt32_à
ø§
)

225 
MPU
->
RBAR
 = 
rb¨
;

226 
MPU
->
RASR
 = 
ø§
;

227 
	}
}

234 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄Ex
(
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
ø§
)

236 
MPU
->
RNR
 = 
∫r
;

237 
MPU
->
RBAR
 = 
rb¨
;

238 
MPU
->
RASR
 = 
ø§
;

239 
	}
}

246 
__STATIC_INLINE
 
	$‹dîedCpy
(vﬁ©ûê
uöt32_t
* 
d°
, c⁄° uöt32_t* 
__RESTRICT
 
§c
, uöt32_à
Àn
)

248 
uöt32_t
 
i
;

249 
i
 = 0U; i < 
Àn
; ++i)

251 
d°
[
i
] = 
§c
[i];

253 
	}
}

259 
__STATIC_INLINE
 
	$ARM_MPU_Lﬂd
(
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, 
uöt32_t
 
˙t
)

261 c⁄° 
uöt32_t
 
rowW‹dSize
 = (
ARM_MPU_Regi⁄_t
)/4U;

262 
˙t
 > 
MPU_TYPE_RALIASES
) {

263 
	`‹dîedCpy
(&(
MPU
->
RBAR
), &(
èbÀ
->RBAR), 
MPU_TYPE_RALIASES
*
rowW‹dSize
);

264 
èbÀ
 +
MPU_TYPE_RALIASES
;

265 
˙t
 -
MPU_TYPE_RALIASES
;

267 
	`‹dîedCpy
(&(
MPU
->
RBAR
), &(
èbÀ
->RBAR), 
˙t
*
rowW‹dSize
);

268 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\mpu_armv8.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
ARM_MPU_ARMV8_H


32 
	#ARM_MPU_ARMV8_H


	)

35 
	#ARM_MPU_ATTR_DEVICE
 ( 0U )

	)

38 
	#ARM_MPU_ATTR_NON_CACHEABLE
 ( 4U )

	)

46 
	#ARM_MPU_ATTR_MEMORY_
(
NT
, 
WB
, 
RA
, 
WA
) \

47 (((
NT
 & 1UË<< 3UË| ((
WB
 & 1UË<< 2UË| ((
RA
 & 1UË<< 1UË| (
WA
 & 1U))

	)

50 
	#ARM_MPU_ATTR_DEVICE_nGnRnE
 (0U)

	)

53 
	#ARM_MPU_ATTR_DEVICE_nGnRE
 (1U)

	)

56 
	#ARM_MPU_ATTR_DEVICE_nGRE
 (2U)

	)

59 
	#ARM_MPU_ATTR_DEVICE_GRE
 (3U)

	)

65 
	#ARM_MPU_ATTR
(
O
, 
I
Ë(((O & 0xFUË<< 4UË| (((O & 0xFUË!0UË? (I & 0xFUË: ((I & 0x3UË<< 2U)))

	)

68 
	#ARM_MPU_SH_NON
 (0U)

	)

71 
	#ARM_MPU_SH_OUTER
 (2U)

	)

74 
	#ARM_MPU_SH_INNER
 (3U)

	)

80 
	#ARM_MPU_AP_
(
RO
, 
NP
Ë(((RO & 1UË<< 1UË| (NP & 1U))

	)

89 
	#ARM_MPU_RBAR
(
BASE
, 
SH
, 
RO
, 
NP
, 
XN
) \

90 ((
BASE
 & 
MPU_RBAR_BASE_Msk
) | \

91 ((
SH
 << 
MPU_RBAR_SH_Pos
Ë& 
MPU_RBAR_SH_Msk
) | \

92 ((
	`ARM_MPU_AP_
(
RO
, 
NP
Ë<< 
MPU_RBAR_AP_Pos
Ë& 
MPU_RBAR_AP_Msk
) | \

93 ((
XN
 << 
MPU_RBAR_XN_Pos
Ë& 
MPU_RBAR_XN_Msk
))

	)

99 
	#ARM_MPU_RLAR
(
LIMIT
, 
IDX
) \

100 ((
LIMIT
 & 
MPU_RLAR_LIMIT_Msk
) | \

101 ((
IDX
 << 
MPU_RLAR_AârIndx_Pos
Ë& 
MPU_RLAR_AârIndx_Msk
) | \

102 (
MPU_RLAR_EN_Msk
))

	)

108 
uöt32_t
 
	mRBAR
;

109 
uöt32_t
 
	mRLAR
;

110 } 
	tARM_MPU_Regi⁄_t
;

115 
__STATIC_INLINE
 
	$ARM_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

117 
	`__DSB
();

118 
	`__ISB
();

119 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

120 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


121 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

123 
	}
}

127 
__STATIC_INLINE
 
	$ARM_MPU_DißbÀ
()

129 
	`__DSB
();

130 
	`__ISB
();

131 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


132 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

134 
MPU
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

135 
	}
}

137 #ifde‡
MPU_NS


141 
__STATIC_INLINE
 
	$ARM_MPU_E«bÀ_NS
(
uöt32_t
 
MPU_C⁄åﬁ
)

143 
	`__DSB
();

144 
	`__ISB
();

145 
MPU_NS
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

146 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


147 
SCB_NS
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

149 
	}
}

153 
__STATIC_INLINE
 
	$ARM_MPU_DißbÀ_NS
()

155 
	`__DSB
();

156 
	`__ISB
();

157 #ifde‡
SCB_SHCSR_MEMFAULTENA_Msk


158 
SCB_NS
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

160 
MPU_NS
->
CTRL
 &~
MPU_CTRL_ENABLE_Msk
;

161 
	}
}

169 
__STATIC_INLINE
 
	$ARM_MPU_SëMemAârEx
(
MPU_Ty≥
* 
mpu
, 
uöt8_t
 
idx
, uöt8_à
©å
)

171 c⁄° 
uöt8_t
 
ªg
 = 
idx
 / 4U;

172 c⁄° 
uöt32_t
 
pos
 = ((
idx
 % 4U) * 8U);

173 c⁄° 
uöt32_t
 
mask
 = 0xFFU << 
pos
;

175 i‡(
ªg
 >((
mpu
->
MAIR
) / (mpu->MAIR[0]))) {

179 
mpu
->
MAIR
[
ªg
] = ((mpu->MAIR[ªg] & ~
mask
Ë| ((
©å
 << 
pos
) & mask));

180 
	}
}

186 
__STATIC_INLINE
 
	$ARM_MPU_SëMemAâr
(
uöt8_t
 
idx
, uöt8_à
©å
)

188 
	`ARM_MPU_SëMemAârEx
(
MPU
, 
idx
, 
©å
);

189 
	}
}

191 #ifde‡
MPU_NS


196 
__STATIC_INLINE
 
	$ARM_MPU_SëMemAâr_NS
(
uöt8_t
 
idx
, uöt8_à
©å
)

198 
	`ARM_MPU_SëMemAârEx
(
MPU_NS
, 
idx
, 
©å
);

199 
	}
}

206 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄Ex
(
MPU_Ty≥
* 
mpu
, 
uöt32_t
 
∫r
)

208 
mpu
->
RNR
 = 
∫r
;

209 
mpu
->
RLAR
 = 0U;

210 
	}
}

215 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄
(
uöt32_t
 
∫r
)

217 
	`ARM_MPU_CÃRegi⁄Ex
(
MPU
, 
∫r
);

218 
	}
}

220 #ifde‡
MPU_NS


224 
__STATIC_INLINE
 
	$ARM_MPU_CÃRegi⁄_NS
(
uöt32_t
 
∫r
)

226 
	`ARM_MPU_CÃRegi⁄Ex
(
MPU_NS
, 
∫r
);

227 
	}
}

236 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄Ex
(
MPU_Ty≥
* 
mpu
, 
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
æ¨
)

238 
mpu
->
RNR
 = 
∫r
;

239 
mpu
->
RBAR
 = 
rb¨
;

240 
mpu
->
RLAR
 = 
æ¨
;

241 
	}
}

248 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄
(
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
æ¨
)

250 
	`ARM_MPU_SëRegi⁄Ex
(
MPU
, 
∫r
, 
rb¨
, 
æ¨
);

251 
	}
}

253 #ifde‡
MPU_NS


259 
__STATIC_INLINE
 
	$ARM_MPU_SëRegi⁄_NS
(
uöt32_t
 
∫r
, uöt32_à
rb¨
, uöt32_à
æ¨
)

261 
	`ARM_MPU_SëRegi⁄Ex
(
MPU_NS
, 
∫r
, 
rb¨
, 
æ¨
);

262 
	}
}

270 
__STATIC_INLINE
 
	$‹dîedCpy
(vﬁ©ûê
uöt32_t
* 
d°
, c⁄° uöt32_t* 
__RESTRICT
 
§c
, uöt32_à
Àn
)

272 
uöt32_t
 
i
;

273 
i
 = 0U; i < 
Àn
; ++i)

275 
d°
[
i
] = 
§c
[i];

277 
	}
}

285 
__STATIC_INLINE
 
	$ARM_MPU_LﬂdEx
(
MPU_Ty≥
* 
mpu
, 
uöt32_t
 
∫r
, 
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, uöt32_à
˙t
)

287 c⁄° 
uöt32_t
 
rowW‹dSize
 = (
ARM_MPU_Regi⁄_t
)/4U;

288 i‡(
˙t
 == 1U) {

289 
mpu
->
RNR
 = 
∫r
;

290 
	`‹dîedCpy
(&(
mpu
->
RBAR
), &(
èbÀ
->RBAR), 
rowW‹dSize
);

292 
uöt32_t
 
∫rBa£
 = 
∫r
 & ~(
MPU_TYPE_RALIASES
-1U);

293 
uöt32_t
 
∫rOff£t
 = 
∫r
 % 
MPU_TYPE_RALIASES
;

295 
mpu
->
RNR
 = 
∫rBa£
;

296 (
∫rOff£t
 + 
˙t
Ë> 
MPU_TYPE_RALIASES
) {

297 
uöt32_t
 
c
 = 
MPU_TYPE_RALIASES
 - 
∫rOff£t
;

298 
	`‹dîedCpy
(&(
mpu
->
RBAR
)+(
∫rOff£t
*2U), &(
èbÀ
->RBAR), 
c
*
rowW‹dSize
);

299 
èbÀ
 +
c
;

300 
˙t
 -
c
;

301 
∫rOff£t
 = 0U;

302 
∫rBa£
 +
MPU_TYPE_RALIASES
;

303 
mpu
->
RNR
 = 
∫rBa£
;

306 
	`‹dîedCpy
(&(
mpu
->
RBAR
)+(
∫rOff£t
*2U), &(
èbÀ
->RBAR), 
˙t
*
rowW‹dSize
);

308 
	}
}

315 
__STATIC_INLINE
 
	$ARM_MPU_Lﬂd
(
uöt32_t
 
∫r
, 
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, uöt32_à
˙t
)

317 
	`ARM_MPU_LﬂdEx
(
MPU
, 
∫r
, 
èbÀ
, 
˙t
);

318 
	}
}

320 #ifde‡
MPU_NS


326 
__STATIC_INLINE
 
	$ARM_MPU_Lﬂd_NS
(
uöt32_t
 
∫r
, 
ARM_MPU_Regi⁄_t
 c⁄°* 
èbÀ
, uöt32_à
˙t
)

328 
	`ARM_MPU_LﬂdEx
(
MPU_NS
, 
∫r
, 
èbÀ
, 
˙t
);

329 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\tz_context.h

25 #i‡ 
deföed
 ( 
__ICCARM__
 )

26 #¥agm®
sy°em_ö˛ude


27 #ñi‡
deföed
 (
__˛™g__
)

28 #¥agm®
˛™g
 
sy°em_hódî


31 #i‚de‡
TZ_CONTEXT_H


32 
	#TZ_CONTEXT_H


	)

34 
	~<°döt.h
>

36 #i‚de‡
TZ_MODULEID_T


37 
	#TZ_MODULEID_T


	)

39 
uöt32_t
 
	tTZ_ModuÀId_t
;

43 
uöt32_t
 
	tTZ_Mem‹yId_t
;

47 
uöt32_t
 
TZ_InôC⁄ãxtSy°em_S
 ();

53 
TZ_Mem‹yId_t
 
TZ_AŒocModuÀC⁄ãxt_S
 (
TZ_ModuÀId_t
 
moduÀ
);

58 
uöt32_t
 
TZ_FªeModuÀC⁄ãxt_S
 (
TZ_Mem‹yId_t
 
id
);

63 
uöt32_t
 
TZ_LﬂdC⁄ãxt_S
 (
TZ_Mem‹yId_t
 
id
);

68 
uöt32_t
 
TZ_St‹eC⁄ãxt_S
 (
TZ_Mem‹yId_t
 
id
);

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32_hal_legacy.h

22 #i‚de‡
STM32_HAL_LEGACY


23 
	#STM32_HAL_LEGACY


	)

25 #ifde‡
__˝lu•lus


36 
	#AES_FLAG_RDERR
 
CRYP_FLAG_RDERR


	)

37 
	#AES_FLAG_WRERR
 
CRYP_FLAG_WRERR


	)

38 
	#AES_CLEARFLAG_CCF
 
CRYP_CLEARFLAG_CCF


	)

39 
	#AES_CLEARFLAG_RDERR
 
CRYP_CLEARFLAG_RDERR


	)

40 
	#AES_CLEARFLAG_WRERR
 
CRYP_CLEARFLAG_WRERR


	)

48 
	#ADC_RESOLUTION12b
 
ADC_RESOLUTION_12B


	)

49 
	#ADC_RESOLUTION10b
 
ADC_RESOLUTION_10B


	)

50 
	#ADC_RESOLUTION8b
 
ADC_RESOLUTION_8B


	)

51 
	#ADC_RESOLUTION6b
 
ADC_RESOLUTION_6B


	)

52 
	#OVR_DATA_OVERWRITTEN
 
ADC_OVR_DATA_OVERWRITTEN


	)

53 
	#OVR_DATA_PRESERVED
 
ADC_OVR_DATA_PRESERVED


	)

54 
	#EOC_SINGLE_CONV
 
ADC_EOC_SINGLE_CONV


	)

55 
	#EOC_SEQ_CONV
 
ADC_EOC_SEQ_CONV


	)

56 
	#EOC_SINGLE_SEQ_CONV
 
ADC_EOC_SINGLE_SEQ_CONV


	)

57 
	#REGULAR_GROUP
 
ADC_REGULAR_GROUP


	)

58 
	#INJECTED_GROUP
 
ADC_INJECTED_GROUP


	)

59 
	#REGULAR_INJECTED_GROUP
 
ADC_REGULAR_INJECTED_GROUP


	)

60 
	#AWD_EVENT
 
ADC_AWD_EVENT


	)

61 
	#AWD1_EVENT
 
ADC_AWD1_EVENT


	)

62 
	#AWD2_EVENT
 
ADC_AWD2_EVENT


	)

63 
	#AWD3_EVENT
 
ADC_AWD3_EVENT


	)

64 
	#OVR_EVENT
 
ADC_OVR_EVENT


	)

65 
	#JQOVF_EVENT
 
ADC_JQOVF_EVENT


	)

66 
	#ALL_CHANNELS
 
ADC_ALL_CHANNELS


	)

67 
	#REGULAR_CHANNELS
 
ADC_REGULAR_CHANNELS


	)

68 
	#INJECTED_CHANNELS
 
ADC_INJECTED_CHANNELS


	)

69 
	#SYSCFG_FLAG_SENSOR_ADC
 
ADC_FLAG_SENSOR


	)

70 
	#SYSCFG_FLAG_VREF_ADC
 
ADC_FLAG_VREFINT


	)

71 
	#ADC_CLOCKPRESCALER_PCLK_DIV1
 
ADC_CLOCK_SYNC_PCLK_DIV1


	)

72 
	#ADC_CLOCKPRESCALER_PCLK_DIV2
 
ADC_CLOCK_SYNC_PCLK_DIV2


	)

73 
	#ADC_CLOCKPRESCALER_PCLK_DIV4
 
ADC_CLOCK_SYNC_PCLK_DIV4


	)

74 
	#ADC_CLOCKPRESCALER_PCLK_DIV6
 
ADC_CLOCK_SYNC_PCLK_DIV6


	)

75 
	#ADC_CLOCKPRESCALER_PCLK_DIV8
 
ADC_CLOCK_SYNC_PCLK_DIV8


	)

76 
	#ADC_EXTERNALTRIG0_T6_TRGO
 
ADC_EXTERNALTRIGCONV_T6_TRGO


	)

77 
	#ADC_EXTERNALTRIG1_T21_CC2
 
ADC_EXTERNALTRIGCONV_T21_CC2


	)

78 
	#ADC_EXTERNALTRIG2_T2_TRGO
 
ADC_EXTERNALTRIGCONV_T2_TRGO


	)

79 
	#ADC_EXTERNALTRIG3_T2_CC4
 
ADC_EXTERNALTRIGCONV_T2_CC4


	)

80 
	#ADC_EXTERNALTRIG4_T22_TRGO
 
ADC_EXTERNALTRIGCONV_T22_TRGO


	)

81 
	#ADC_EXTERNALTRIG7_EXT_IT11
 
ADC_EXTERNALTRIGCONV_EXT_IT11


	)

82 
	#ADC_CLOCK_ASYNC
 
ADC_CLOCK_ASYNC_DIV1


	)

83 
	#ADC_EXTERNALTRIG_EDGE_NONE
 
ADC_EXTERNALTRIGCONVEDGE_NONE


	)

84 
	#ADC_EXTERNALTRIG_EDGE_RISING
 
ADC_EXTERNALTRIGCONVEDGE_RISING


	)

85 
	#ADC_EXTERNALTRIG_EDGE_FALLING
 
ADC_EXTERNALTRIGCONVEDGE_FALLING


	)

86 
	#ADC_EXTERNALTRIG_EDGE_RISINGFALLING
 
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING


	)

87 
	#ADC_SAMPLETIME_2CYCLE_5
 
ADC_SAMPLETIME_2CYCLES_5


	)

89 
	#HAL_ADC_STATE_BUSY_REG
 
HAL_ADC_STATE_REG_BUSY


	)

90 
	#HAL_ADC_STATE_BUSY_INJ
 
HAL_ADC_STATE_INJ_BUSY


	)

91 
	#HAL_ADC_STATE_EOC_REG
 
HAL_ADC_STATE_REG_EOC


	)

92 
	#HAL_ADC_STATE_EOC_INJ
 
HAL_ADC_STATE_INJ_EOC


	)

93 
	#HAL_ADC_STATE_ERROR
 
HAL_ADC_STATE_ERROR_INTERNAL


	)

94 
	#HAL_ADC_STATE_BUSY
 
HAL_ADC_STATE_BUSY_INTERNAL


	)

95 
	#HAL_ADC_STATE_AWD
 
HAL_ADC_STATE_AWD1


	)

97 #i‡
deföed
(
STM32H7
)

98 
	#ADC_CHANNEL_VBAT_DIV4
 
ADC_CHANNEL_VBAT


	)

108 
	#__HAL_CEC_GET_IT
 
__HAL_CEC_GET_FLAG


	)

117 
	#COMP_WINDOWMODE_DISABLED
 
COMP_WINDOWMODE_DISABLE


	)

118 
	#COMP_WINDOWMODE_ENABLED
 
COMP_WINDOWMODE_ENABLE


	)

119 
	#COMP_EXTI_LINE_COMP1_EVENT
 
COMP_EXTI_LINE_COMP1


	)

120 
	#COMP_EXTI_LINE_COMP2_EVENT
 
COMP_EXTI_LINE_COMP2


	)

121 
	#COMP_EXTI_LINE_COMP3_EVENT
 
COMP_EXTI_LINE_COMP3


	)

122 
	#COMP_EXTI_LINE_COMP4_EVENT
 
COMP_EXTI_LINE_COMP4


	)

123 
	#COMP_EXTI_LINE_COMP5_EVENT
 
COMP_EXTI_LINE_COMP5


	)

124 
	#COMP_EXTI_LINE_COMP6_EVENT
 
COMP_EXTI_LINE_COMP6


	)

125 
	#COMP_EXTI_LINE_COMP7_EVENT
 
COMP_EXTI_LINE_COMP7


	)

126 #i‡
deföed
(
STM32L0
)

127 
	#COMP_LPTIMCONNECTION_ENABLED
 ((
uöt32_t
)0x00000003UË

	)

129 
	#COMP_OUTPUT_COMP6TIM2OCREFCLR
 
COMP_OUTPUT_COMP6_TIM2OCREFCLR


	)

130 #i‡
deföed
(
STM32F373xC
Ë|| deföed(
STM32F378xx
)

131 
	#COMP_OUTPUT_TIM3IC1
 
COMP_OUTPUT_COMP1_TIM3IC1


	)

132 
	#COMP_OUTPUT_TIM3OCREFCLR
 
COMP_OUTPUT_COMP1_TIM3OCREFCLR


	)

135 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

136 
	#COMP_WINDOWMODE_ENABLE
 
COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON


	)

138 
	#COMP_NONINVERTINGINPUT_IO1
 
COMP_INPUT_PLUS_IO1


	)

139 
	#COMP_NONINVERTINGINPUT_IO2
 
COMP_INPUT_PLUS_IO2


	)

140 
	#COMP_NONINVERTINGINPUT_IO3
 
COMP_INPUT_PLUS_IO3


	)

141 
	#COMP_NONINVERTINGINPUT_IO4
 
COMP_INPUT_PLUS_IO4


	)

142 
	#COMP_NONINVERTINGINPUT_IO5
 
COMP_INPUT_PLUS_IO5


	)

143 
	#COMP_NONINVERTINGINPUT_IO6
 
COMP_INPUT_PLUS_IO6


	)

145 
	#COMP_INVERTINGINPUT_1_4VREFINT
 
COMP_INPUT_MINUS_1_4VREFINT


	)

146 
	#COMP_INVERTINGINPUT_1_2VREFINT
 
COMP_INPUT_MINUS_1_2VREFINT


	)

147 
	#COMP_INVERTINGINPUT_3_4VREFINT
 
COMP_INPUT_MINUS_3_4VREFINT


	)

148 
	#COMP_INVERTINGINPUT_VREFINT
 
COMP_INPUT_MINUS_VREFINT


	)

149 
	#COMP_INVERTINGINPUT_DAC1_CH1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

150 
	#COMP_INVERTINGINPUT_DAC1_CH2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

151 
	#COMP_INVERTINGINPUT_DAC1
 
COMP_INPUT_MINUS_DAC1_CH1


	)

152 
	#COMP_INVERTINGINPUT_DAC2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

153 
	#COMP_INVERTINGINPUT_IO1
 
COMP_INPUT_MINUS_IO1


	)

154 #i‡
deföed
(
STM32L0
)

158 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_DAC1_CH2


	)

159 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO2


	)

161 
	#COMP_INVERTINGINPUT_IO2
 
COMP_INPUT_MINUS_IO2


	)

162 
	#COMP_INVERTINGINPUT_IO3
 
COMP_INPUT_MINUS_IO3


	)

164 
	#COMP_INVERTINGINPUT_IO4
 
COMP_INPUT_MINUS_IO4


	)

165 
	#COMP_INVERTINGINPUT_IO5
 
COMP_INPUT_MINUS_IO5


	)

167 
	#COMP_OUTPUTLEVEL_LOW
 
COMP_OUTPUT_LEVEL_LOW


	)

168 
	#COMP_OUTPUTLEVEL_HIGH
 
COMP_OUTPUT_LEVEL_HIGH


	)

172 #i‡
deföed
(
COMP_CSR_LOCK
)

173 
	#COMP_FLAG_LOCK
 
COMP_CSR_LOCK


	)

174 #ñi‡
deföed
(
COMP_CSR_COMP1LOCK
)

175 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMP1LOCK


	)

176 #ñi‡
deföed
(
COMP_CSR_COMPxLOCK
)

177 
	#COMP_FLAG_LOCK
 
COMP_CSR_COMPxLOCK


	)

180 #i‡
deföed
(
STM32L4
)

181 
	#COMP_BLANKINGSRCE_TIM1OC5
 
COMP_BLANKINGSRC_TIM1_OC5_COMP1


	)

182 
	#COMP_BLANKINGSRCE_TIM2OC3
 
COMP_BLANKINGSRC_TIM2_OC3_COMP1


	)

183 
	#COMP_BLANKINGSRCE_TIM3OC3
 
COMP_BLANKINGSRC_TIM3_OC3_COMP1


	)

184 
	#COMP_BLANKINGSRCE_TIM3OC4
 
COMP_BLANKINGSRC_TIM3_OC4_COMP2


	)

185 
	#COMP_BLANKINGSRCE_TIM8OC5
 
COMP_BLANKINGSRC_TIM8_OC5_COMP2


	)

186 
	#COMP_BLANKINGSRCE_TIM15OC1
 
COMP_BLANKINGSRC_TIM15_OC1_COMP2


	)

187 
	#COMP_BLANKINGSRCE_NONE
 
COMP_BLANKINGSRC_NONE


	)

190 #i‡
deföed
(
STM32L0
)

191 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

192 
	#COMP_MODE_LOWSPEED
 
COMP_POWERMODE_ULTRALOWPOWER


	)

194 
	#COMP_MODE_HIGHSPEED
 
COMP_POWERMODE_HIGHSPEED


	)

195 
	#COMP_MODE_MEDIUMSPEED
 
COMP_POWERMODE_MEDIUMSPEED


	)

196 
	#COMP_MODE_LOWPOWER
 
COMP_POWERMODE_LOWPOWER


	)

197 
	#COMP_MODE_ULTRALOWPOWER
 
COMP_POWERMODE_ULTRALOWPOWER


	)

208 
	#__HAL_CORTEX_SYSTICKCLK_CONFIG
 
HAL_SYSTICK_CLKSour˚C⁄fig


	)

217 
	#CRC_OUTPUTDATA_INVERSION_DISABLED
 
CRC_OUTPUTDATA_INVERSION_DISABLE


	)

218 
	#CRC_OUTPUTDATA_INVERSION_ENABLED
 
CRC_OUTPUTDATA_INVERSION_ENABLE


	)

228 
	#DAC1_CHANNEL_1
 
DAC_CHANNEL_1


	)

229 
	#DAC1_CHANNEL_2
 
DAC_CHANNEL_2


	)

230 
	#DAC2_CHANNEL_1
 
DAC_CHANNEL_1


	)

231 
	#DAC_WAVE_NONE
 0x00000000U

	)

232 
	#DAC_WAVE_NOISE
 
DAC_CR_WAVE1_0


	)

233 
	#DAC_WAVE_TRIANGLE
 
DAC_CR_WAVE1_1


	)

234 
	#DAC_WAVEGENERATION_NONE
 
DAC_WAVE_NONE


	)

235 
	#DAC_WAVEGENERATION_NOISE
 
DAC_WAVE_NOISE


	)

236 
	#DAC_WAVEGENERATION_TRIANGLE
 
DAC_WAVE_TRIANGLE


	)

238 #i‡
deföed
(
STM32G4
Ë|| deföed(
STM32H7
)

239 
	#DAC_CHIPCONNECT_DISABLE
 
DAC_CHIPCONNECT_EXTERNAL


	)

240 
	#DAC_CHIPCONNECT_ENABLE
 
DAC_CHIPCONNECT_INTERNAL


	)

243 #i‡
deföed
(
STM32L1
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32H7
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32G4
)

244 
	#HAL_DAC_MSP_INIT_CB_ID
 
HAL_DAC_MSPINIT_CB_ID


	)

245 
	#HAL_DAC_MSP_DEINIT_CB_ID
 
HAL_DAC_MSPDEINIT_CB_ID


	)

255 
	#HAL_REMAPDMA_ADC_DMA_CH2
 
DMA_REMAP_ADC_DMA_CH2


	)

256 
	#HAL_REMAPDMA_USART1_TX_DMA_CH4
 
DMA_REMAP_USART1_TX_DMA_CH4


	)

257 
	#HAL_REMAPDMA_USART1_RX_DMA_CH5
 
DMA_REMAP_USART1_RX_DMA_CH5


	)

258 
	#HAL_REMAPDMA_TIM16_DMA_CH4
 
DMA_REMAP_TIM16_DMA_CH4


	)

259 
	#HAL_REMAPDMA_TIM17_DMA_CH2
 
DMA_REMAP_TIM17_DMA_CH2


	)

260 
	#HAL_REMAPDMA_USART3_DMA_CH32
 
DMA_REMAP_USART3_DMA_CH32


	)

261 
	#HAL_REMAPDMA_TIM16_DMA_CH6
 
DMA_REMAP_TIM16_DMA_CH6


	)

262 
	#HAL_REMAPDMA_TIM17_DMA_CH7
 
DMA_REMAP_TIM17_DMA_CH7


	)

263 
	#HAL_REMAPDMA_SPI2_DMA_CH67
 
DMA_REMAP_SPI2_DMA_CH67


	)

264 
	#HAL_REMAPDMA_USART2_DMA_CH67
 
DMA_REMAP_USART2_DMA_CH67


	)

265 
	#HAL_REMAPDMA_I2C1_DMA_CH76
 
DMA_REMAP_I2C1_DMA_CH76


	)

266 
	#HAL_REMAPDMA_TIM1_DMA_CH6
 
DMA_REMAP_TIM1_DMA_CH6


	)

267 
	#HAL_REMAPDMA_TIM2_DMA_CH7
 
DMA_REMAP_TIM2_DMA_CH7


	)

268 
	#HAL_REMAPDMA_TIM3_DMA_CH6
 
DMA_REMAP_TIM3_DMA_CH6


	)

270 
	#IS_HAL_REMAPDMA
 
IS_DMA_REMAP


	)

271 
	#__HAL_REMAPDMA_CHANNEL_ENABLE
 
__HAL_DMA_REMAP_CHANNEL_ENABLE


	)

272 
	#__HAL_REMAPDMA_CHANNEL_DISABLE
 
__HAL_DMA_REMAP_CHANNEL_DISABLE


	)

274 #i‡
deföed
(
STM32L4
)

276 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI0
 
HAL_DMAMUX1_REQ_GEN_EXTI0


	)

277 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI1
 
HAL_DMAMUX1_REQ_GEN_EXTI1


	)

278 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI2
 
HAL_DMAMUX1_REQ_GEN_EXTI2


	)

279 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI3
 
HAL_DMAMUX1_REQ_GEN_EXTI3


	)

280 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI4
 
HAL_DMAMUX1_REQ_GEN_EXTI4


	)

281 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI5
 
HAL_DMAMUX1_REQ_GEN_EXTI5


	)

282 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI6
 
HAL_DMAMUX1_REQ_GEN_EXTI6


	)

283 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI7
 
HAL_DMAMUX1_REQ_GEN_EXTI7


	)

284 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI8
 
HAL_DMAMUX1_REQ_GEN_EXTI8


	)

285 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI9
 
HAL_DMAMUX1_REQ_GEN_EXTI9


	)

286 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI10
 
HAL_DMAMUX1_REQ_GEN_EXTI10


	)

287 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI11
 
HAL_DMAMUX1_REQ_GEN_EXTI11


	)

288 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI12
 
HAL_DMAMUX1_REQ_GEN_EXTI12


	)

289 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI13
 
HAL_DMAMUX1_REQ_GEN_EXTI13


	)

290 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI14
 
HAL_DMAMUX1_REQ_GEN_EXTI14


	)

291 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI15
 
HAL_DMAMUX1_REQ_GEN_EXTI15


	)

292 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT


	)

293 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT


	)

294 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT


	)

295 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH3_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH3_EVT


	)

296 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT


	)

297 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT


	)

298 
	#HAL_DMAMUX1_REQUEST_GEN_DSI_TE
 
HAL_DMAMUX1_REQ_GEN_DSI_TE


	)

299 
	#HAL_DMAMUX1_REQUEST_GEN_DSI_EOT
 
HAL_DMAMUX1_REQ_GEN_DSI_EOT


	)

300 
	#HAL_DMAMUX1_REQUEST_GEN_DMA2D_EOT
 
HAL_DMAMUX1_REQ_GEN_DMA2D_EOT


	)

301 
	#HAL_DMAMUX1_REQUEST_GEN_LTDC_IT
 
HAL_DMAMUX1_REQ_GEN_LTDC_IT


	)

303 
	#HAL_DMAMUX_REQUEST_GEN_NO_EVENT
 
HAL_DMAMUX_REQ_GEN_NO_EVENT


	)

304 
	#HAL_DMAMUX_REQUEST_GEN_RISING
 
HAL_DMAMUX_REQ_GEN_RISING


	)

305 
	#HAL_DMAMUX_REQUEST_GEN_FALLING
 
HAL_DMAMUX_REQ_GEN_FALLING


	)

306 
	#HAL_DMAMUX_REQUEST_GEN_RISING_FALLING
 
HAL_DMAMUX_REQ_GEN_RISING_FALLING


	)

308 #i‡
deföed
(
STM32L4R5xx
Ë|| deföed(
STM32L4R9xx
Ë|| deföed(STM32L4R9xxË|| deföed(
STM32L4S5xx
Ë|| deföed(
STM32L4S7xx
Ë|| deföed(
STM32L4S9xx
)

309 
	#DMA_REQUEST_DCMI_PSSI
 
DMA_REQUEST_DCMI


	)

314 #i‡
deföed
(
STM32G0
)

315 
	#DMA_REQUEST_DAC1_CHANNEL1
 
DMA_REQUEST_DAC1_CH1


	)

316 
	#DMA_REQUEST_DAC1_CHANNEL2
 
DMA_REQUEST_DAC1_CH2


	)

317 
	#DMA_REQUEST_TIM16_TRIG_COM
 
DMA_REQUEST_TIM16_COM


	)

318 
	#DMA_REQUEST_TIM17_TRIG_COM
 
DMA_REQUEST_TIM17_COM


	)

320 
	#LL_DMAMUX_REQ_TIM16_TRIG_COM
 
LL_DMAMUX_REQ_TIM16_COM


	)

321 
	#LL_DMAMUX_REQ_TIM17_TRIG_COM
 
LL_DMAMUX_REQ_TIM17_COM


	)

324 #i‡
deföed
(
STM32H7
)

326 
	#DMA_REQUEST_DAC1
 
DMA_REQUEST_DAC1_CH1


	)

327 
	#DMA_REQUEST_DAC2
 
DMA_REQUEST_DAC1_CH2


	)

329 
	#BDMA_REQUEST_LP_UART1_RX
 
BDMA_REQUEST_LPUART1_RX


	)

330 
	#BDMA_REQUEST_LP_UART1_TX
 
BDMA_REQUEST_LPUART1_TX


	)

332 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH0_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH0_EVT


	)

333 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH1_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH1_EVT


	)

334 
	#HAL_DMAMUX1_REQUEST_GEN_DMAMUX1_CH2_EVT
 
HAL_DMAMUX1_REQ_GEN_DMAMUX1_CH2_EVT


	)

335 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM1_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM1_OUT


	)

336 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM2_OUT


	)

337 
	#HAL_DMAMUX1_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX1_REQ_GEN_LPTIM3_OUT


	)

338 
	#HAL_DMAMUX1_REQUEST_GEN_EXTI0
 
HAL_DMAMUX1_REQ_GEN_EXTI0


	)

339 
	#HAL_DMAMUX1_REQUEST_GEN_TIM12_TRGO
 
HAL_DMAMUX1_REQ_GEN_TIM12_TRGO


	)

341 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH0_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH0_EVT


	)

342 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH1_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH1_EVT


	)

343 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH2_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH2_EVT


	)

344 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH3_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH3_EVT


	)

345 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH4_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH4_EVT


	)

346 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH5_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH5_EVT


	)

347 
	#HAL_DMAMUX2_REQUEST_GEN_DMAMUX2_CH6_EVT
 
HAL_DMAMUX2_REQ_GEN_DMAMUX2_CH6_EVT


	)

348 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_WKUP


	)

349 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_WKUP


	)

350 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_WKUP


	)

351 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM2_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM2_OUT


	)

352 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_WKUP


	)

353 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM3_OUT
 
HAL_DMAMUX2_REQ_GEN_LPTIM3_OUT


	)

354 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM4_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM4_WKUP


	)

355 
	#HAL_DMAMUX2_REQUEST_GEN_LPTIM5_WKUP
 
HAL_DMAMUX2_REQ_GEN_LPTIM5_WKUP


	)

356 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_WKUP
 
HAL_DMAMUX2_REQ_GEN_I2C4_WKUP


	)

357 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_WKUP
 
HAL_DMAMUX2_REQ_GEN_SPI6_WKUP


	)

358 
	#HAL_DMAMUX2_REQUEST_GEN_COMP1_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP1_OUT


	)

359 
	#HAL_DMAMUX2_REQUEST_GEN_COMP2_OUT
 
HAL_DMAMUX2_REQ_GEN_COMP2_OUT


	)

360 
	#HAL_DMAMUX2_REQUEST_GEN_RTC_WKUP
 
HAL_DMAMUX2_REQ_GEN_RTC_WKUP


	)

361 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI0
 
HAL_DMAMUX2_REQ_GEN_EXTI0


	)

362 
	#HAL_DMAMUX2_REQUEST_GEN_EXTI2
 
HAL_DMAMUX2_REQ_GEN_EXTI2


	)

363 
	#HAL_DMAMUX2_REQUEST_GEN_I2C4_IT_EVT
 
HAL_DMAMUX2_REQ_GEN_I2C4_IT_EVT


	)

364 
	#HAL_DMAMUX2_REQUEST_GEN_SPI6_IT
 
HAL_DMAMUX2_REQ_GEN_SPI6_IT


	)

365 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_TX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_TX_IT


	)

366 
	#HAL_DMAMUX2_REQUEST_GEN_LPUART1_RX_IT
 
HAL_DMAMUX2_REQ_GEN_LPUART1_RX_IT


	)

367 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_IT
 
HAL_DMAMUX2_REQ_GEN_ADC3_IT


	)

368 
	#HAL_DMAMUX2_REQUEST_GEN_ADC3_AWD1_OUT
 
HAL_DMAMUX2_REQ_GEN_ADC3_AWD1_OUT


	)

369 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH0_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH0_IT


	)

370 
	#HAL_DMAMUX2_REQUEST_GEN_BDMA_CH1_IT
 
HAL_DMAMUX2_REQ_GEN_BDMA_CH1_IT


	)

372 
	#HAL_DMAMUX_REQUEST_GEN_NO_EVENT
 
HAL_DMAMUX_REQ_GEN_NO_EVENT


	)

373 
	#HAL_DMAMUX_REQUEST_GEN_RISING
 
HAL_DMAMUX_REQ_GEN_RISING


	)

374 
	#HAL_DMAMUX_REQUEST_GEN_FALLING
 
HAL_DMAMUX_REQ_GEN_FALLING


	)

375 
	#HAL_DMAMUX_REQUEST_GEN_RISING_FALLING
 
HAL_DMAMUX_REQ_GEN_RISING_FALLING


	)

377 
	#DFSDM_FILTER_EXT_TRIG_LPTIM1
 
DFSDM_FILTER_EXT_TRIG_LPTIM1_OUT


	)

378 
	#DFSDM_FILTER_EXT_TRIG_LPTIM2
 
DFSDM_FILTER_EXT_TRIG_LPTIM2_OUT


	)

379 
	#DFSDM_FILTER_EXT_TRIG_LPTIM3
 
DFSDM_FILTER_EXT_TRIG_LPTIM3_OUT


	)

381 
	#DAC_TRIGGER_LP1_OUT
 
DAC_TRIGGER_LPTIM1_OUT


	)

382 
	#DAC_TRIGGER_LP2_OUT
 
DAC_TRIGGER_LPTIM2_OUT


	)

394 
	#TYPEPROGRAM_BYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

395 
	#TYPEPROGRAM_HALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

396 
	#TYPEPROGRAM_WORD
 
FLASH_TYPEPROGRAM_WORD


	)

397 
	#TYPEPROGRAM_DOUBLEWORD
 
FLASH_TYPEPROGRAM_DOUBLEWORD


	)

398 
	#TYPEERASE_SECTORS
 
FLASH_TYPEERASE_SECTORS


	)

399 
	#TYPEERASE_PAGES
 
FLASH_TYPEERASE_PAGES


	)

400 
	#TYPEERASE_PAGEERASE
 
FLASH_TYPEERASE_PAGES


	)

401 
	#TYPEERASE_MASSERASE
 
FLASH_TYPEERASE_MASSERASE


	)

402 
	#WRPSTATE_DISABLE
 
OB_WRPSTATE_DISABLE


	)

403 
	#WRPSTATE_ENABLE
 
OB_WRPSTATE_ENABLE


	)

404 
	#HAL_FLASH_TIMEOUT_VALUE
 
FLASH_TIMEOUT_VALUE


	)

405 
	#OBEX_PCROP
 
OPTIONBYTE_PCROP


	)

406 
	#OBEX_BOOTCONFIG
 
OPTIONBYTE_BOOTCONFIG


	)

407 
	#PCROPSTATE_DISABLE
 
OB_PCROP_STATE_DISABLE


	)

408 
	#PCROPSTATE_ENABLE
 
OB_PCROP_STATE_ENABLE


	)

409 
	#TYPEERASEDATA_BYTE
 
FLASH_TYPEERASEDATA_BYTE


	)

410 
	#TYPEERASEDATA_HALFWORD
 
FLASH_TYPEERASEDATA_HALFWORD


	)

411 
	#TYPEERASEDATA_WORD
 
FLASH_TYPEERASEDATA_WORD


	)

412 
	#TYPEPROGRAMDATA_BYTE
 
FLASH_TYPEPROGRAMDATA_BYTE


	)

413 
	#TYPEPROGRAMDATA_HALFWORD
 
FLASH_TYPEPROGRAMDATA_HALFWORD


	)

414 
	#TYPEPROGRAMDATA_WORD
 
FLASH_TYPEPROGRAMDATA_WORD


	)

415 
	#TYPEPROGRAMDATA_FASTBYTE
 
FLASH_TYPEPROGRAMDATA_FASTBYTE


	)

416 
	#TYPEPROGRAMDATA_FASTHALFWORD
 
FLASH_TYPEPROGRAMDATA_FASTHALFWORD


	)

417 
	#TYPEPROGRAMDATA_FASTWORD
 
FLASH_TYPEPROGRAMDATA_FASTWORD


	)

418 
	#PAGESIZE
 
FLASH_PAGE_SIZE


	)

419 
	#TYPEPROGRAM_FASTBYTE
 
FLASH_TYPEPROGRAM_BYTE


	)

420 
	#TYPEPROGRAM_FASTHALFWORD
 
FLASH_TYPEPROGRAM_HALFWORD


	)

421 
	#TYPEPROGRAM_FASTWORD
 
FLASH_TYPEPROGRAM_WORD


	)

422 
	#VOLTAGE_RANGE_1
 
FLASH_VOLTAGE_RANGE_1


	)

423 
	#VOLTAGE_RANGE_2
 
FLASH_VOLTAGE_RANGE_2


	)

424 
	#VOLTAGE_RANGE_3
 
FLASH_VOLTAGE_RANGE_3


	)

425 
	#VOLTAGE_RANGE_4
 
FLASH_VOLTAGE_RANGE_4


	)

426 
	#TYPEPROGRAM_FAST
 
FLASH_TYPEPROGRAM_FAST


	)

427 
	#TYPEPROGRAM_FAST_AND_LAST
 
FLASH_TYPEPROGRAM_FAST_AND_LAST


	)

428 
	#WRPAREA_BANK1_AREAA
 
OB_WRPAREA_BANK1_AREAA


	)

429 
	#WRPAREA_BANK1_AREAB
 
OB_WRPAREA_BANK1_AREAB


	)

430 
	#WRPAREA_BANK2_AREAA
 
OB_WRPAREA_BANK2_AREAA


	)

431 
	#WRPAREA_BANK2_AREAB
 
OB_WRPAREA_BANK2_AREAB


	)

432 
	#IWDG_STDBY_FREEZE
 
OB_IWDG_STDBY_FREEZE


	)

433 
	#IWDG_STDBY_ACTIVE
 
OB_IWDG_STDBY_RUN


	)

434 
	#IWDG_STOP_FREEZE
 
OB_IWDG_STOP_FREEZE


	)

435 
	#IWDG_STOP_ACTIVE
 
OB_IWDG_STOP_RUN


	)

436 
	#FLASH_ERROR_NONE
 
HAL_FLASH_ERROR_NONE


	)

437 
	#FLASH_ERROR_RD
 
HAL_FLASH_ERROR_RD


	)

438 
	#FLASH_ERROR_PG
 
HAL_FLASH_ERROR_PROG


	)

439 
	#FLASH_ERROR_PGP
 
HAL_FLASH_ERROR_PGS


	)

440 
	#FLASH_ERROR_WRP
 
HAL_FLASH_ERROR_WRP


	)

441 
	#FLASH_ERROR_OPTV
 
HAL_FLASH_ERROR_OPTV


	)

442 
	#FLASH_ERROR_OPTVUSR
 
HAL_FLASH_ERROR_OPTVUSR


	)

443 
	#FLASH_ERROR_PROG
 
HAL_FLASH_ERROR_PROG


	)

444 
	#FLASH_ERROR_OP
 
HAL_FLASH_ERROR_OPERATION


	)

445 
	#FLASH_ERROR_PGA
 
HAL_FLASH_ERROR_PGA


	)

446 
	#FLASH_ERROR_SIZE
 
HAL_FLASH_ERROR_SIZE


	)

447 
	#FLASH_ERROR_SIZ
 
HAL_FLASH_ERROR_SIZE


	)

448 
	#FLASH_ERROR_PGS
 
HAL_FLASH_ERROR_PGS


	)

449 
	#FLASH_ERROR_MIS
 
HAL_FLASH_ERROR_MIS


	)

450 
	#FLASH_ERROR_FAST
 
HAL_FLASH_ERROR_FAST


	)

451 
	#FLASH_ERROR_FWWERR
 
HAL_FLASH_ERROR_FWWERR


	)

452 
	#FLASH_ERROR_NOTZERO
 
HAL_FLASH_ERROR_NOTZERO


	)

453 
	#FLASH_ERROR_OPERATION
 
HAL_FLASH_ERROR_OPERATION


	)

454 
	#FLASH_ERROR_ERS
 
HAL_FLASH_ERROR_ERS


	)

455 
	#OB_WDG_SW
 
OB_IWDG_SW


	)

456 
	#OB_WDG_HW
 
OB_IWDG_HW


	)

457 
	#OB_SDADC12_VDD_MONITOR_SET
 
OB_SDACD_VDD_MONITOR_SET


	)

458 
	#OB_SDADC12_VDD_MONITOR_RESET
 
OB_SDACD_VDD_MONITOR_RESET


	)

459 
	#OB_RAM_PARITY_CHECK_SET
 
OB_SRAM_PARITY_SET


	)

460 
	#OB_RAM_PARITY_CHECK_RESET
 
OB_SRAM_PARITY_RESET


	)

461 
	#IS_OB_SDADC12_VDD_MONITOR
 
IS_OB_SDACD_VDD_MONITOR


	)

462 
	#OB_RDP_LEVEL0
 
OB_RDP_LEVEL_0


	)

463 
	#OB_RDP_LEVEL1
 
OB_RDP_LEVEL_1


	)

464 
	#OB_RDP_LEVEL2
 
OB_RDP_LEVEL_2


	)

465 #i‡
deföed
(
STM32G0
)

466 
	#OB_BOOT_LOCK_DISABLE
 
OB_BOOT_ENTRY_FORCED_NONE


	)

467 
	#OB_BOOT_LOCK_ENABLE
 
OB_BOOT_ENTRY_FORCED_FLASH


	)

469 
	#OB_BOOT_ENTRY_FORCED_NONE
 
OB_BOOT_LOCK_DISABLE


	)

470 
	#OB_BOOT_ENTRY_FORCED_FLASH
 
OB_BOOT_LOCK_ENABLE


	)

472 #i‡
deföed
(
STM32H7
)

473 
	#FLASH_FLAG_SNECCE_BANK1RR
 
FLASH_FLAG_SNECCERR_BANK1


	)

474 
	#FLASH_FLAG_DBECCE_BANK1RR
 
FLASH_FLAG_DBECCERR_BANK1


	)

475 
	#FLASH_FLAG_STRBER_BANK1R
 
FLASH_FLAG_STRBERR_BANK1


	)

476 
	#FLASH_FLAG_SNECCE_BANK2RR
 
FLASH_FLAG_SNECCERR_BANK2


	)

477 
	#FLASH_FLAG_DBECCE_BANK2RR
 
FLASH_FLAG_DBECCERR_BANK2


	)

478 
	#FLASH_FLAG_STRBER_BANK2R
 
FLASH_FLAG_STRBERR_BANK2


	)

479 
	#FLASH_FLAG_WDW
 
FLASH_FLAG_WBNE


	)

480 
	#OB_WRP_SECTOR_AŒ
 
OB_WRP_SECTOR_ALL


	)

491 #i‡
deföed
(
STM32H7
)

492 
	#__HAL_RCC_JPEG_CLK_ENABLE
 
__HAL_RCC_JPGDECEN_CLK_ENABLE


	)

493 
	#__HAL_RCC_JPEG_CLK_DISABLE
 
__HAL_RCC_JPGDECEN_CLK_DISABLE


	)

494 
	#__HAL_RCC_JPEG_FORCE_RESET
 
__HAL_RCC_JPGDECRST_FORCE_RESET


	)

495 
	#__HAL_RCC_JPEG_RELEASE_RESET
 
__HAL_RCC_JPGDECRST_RELEASE_RESET


	)

496 
	#__HAL_RCC_JPEG_CLK_SLEEP_ENABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_ENABLE


	)

497 
	#__HAL_RCC_JPEG_CLK_SLEEP_DISABLE
 
__HAL_RCC_JPGDEC_CLK_SLEEP_DISABLE


	)

508 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA9
 
I2C_FASTMODEPLUS_PA9


	)

509 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PA10
 
I2C_FASTMODEPLUS_PA10


	)

510 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB6
 
I2C_FASTMODEPLUS_PB6


	)

511 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB7
 
I2C_FASTMODEPLUS_PB7


	)

512 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB8
 
I2C_FASTMODEPLUS_PB8


	)

513 
	#HAL_SYSCFG_FASTMODEPLUS_I2C_PB9
 
I2C_FASTMODEPLUS_PB9


	)

514 
	#HAL_SYSCFG_FASTMODEPLUS_I2C1
 
I2C_FASTMODEPLUS_I2C1


	)

515 
	#HAL_SYSCFG_FASTMODEPLUS_I2C2
 
I2C_FASTMODEPLUS_I2C2


	)

516 
	#HAL_SYSCFG_FASTMODEPLUS_I2C3
 
I2C_FASTMODEPLUS_I2C3


	)

517 #i‡
deföed
(
STM32G4
)

519 
	#HAL_SYSCFG_E«bÀIOA«logSwôchBoo°î
 
HAL_SYSCFG_E«bÀIOSwôchBoo°î


	)

520 
	#HAL_SYSCFG_DißbÀIOA«logSwôchBoo°î
 
HAL_SYSCFG_DißbÀIOSwôchBoo°î


	)

521 
	#HAL_SYSCFG_E«bÀIOA«logSwôchVDD
 
HAL_SYSCFG_E«bÀIOSwôchVDD


	)

522 
	#HAL_SYSCFG_DißbÀIOA«logSwôchVDD
 
HAL_SYSCFG_DißbÀIOSwôchVDD


	)

532 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32H7
Ë|| deföed(
STM32G4
)

533 
	#FMC_NAND_PCC_WAIT_FEATURE_DISABLE
 
FMC_NAND_WAIT_FEATURE_DISABLE


	)

534 
	#FMC_NAND_PCC_WAIT_FEATURE_ENABLE
 
FMC_NAND_WAIT_FEATURE_ENABLE


	)

535 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_8
 
FMC_NAND_MEM_BUS_WIDTH_8


	)

536 
	#FMC_NAND_PCC_MEM_BUS_WIDTH_16
 
FMC_NAND_MEM_BUS_WIDTH_16


	)

537 #ñi‡
deföed
(
STM32F1
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F4
)

538 
	#FMC_NAND_WAIT_FEATURE_DISABLE
 
FMC_NAND_PCC_WAIT_FEATURE_DISABLE


	)

539 
	#FMC_NAND_WAIT_FEATURE_ENABLE
 
FMC_NAND_PCC_WAIT_FEATURE_ENABLE


	)

540 
	#FMC_NAND_MEM_BUS_WIDTH_8
 
FMC_NAND_PCC_MEM_BUS_WIDTH_8


	)

541 
	#FMC_NAND_MEM_BUS_WIDTH_16
 
FMC_NAND_PCC_MEM_BUS_WIDTH_16


	)

551 
	#FSMC_NORSRAM_TYPEDEF
 
FSMC_NORSRAM_Ty≥Def


	)

552 
	#FSMC_NORSRAM_EXTENDED_TYPEDEF
 
FSMC_NORSRAM_EXTENDED_Ty≥Def


	)

560 
	#GET_GPIO_SOURCE
 
GPIO_GET_INDEX


	)

561 
	#GET_GPIO_INDEX
 
GPIO_GET_INDEX


	)

563 #i‡
deföed
(
STM32F4
)

564 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDIO


	)

565 
	#GPIO_AF12_SDMMC1
 
GPIO_AF12_SDIO


	)

568 #i‡
deföed
(
STM32F7
)

569 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

570 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

573 #i‡
deföed
(
STM32L4
)

574 
	#GPIO_AF12_SDIO
 
GPIO_AF12_SDMMC1


	)

575 
	#GPIO_AF12_SDMMC
 
GPIO_AF12_SDMMC1


	)

578 #i‡
deföed
(
STM32H7
)

579 
	#GPIO_AF7_SDIO1
 
GPIO_AF7_SDMMC1


	)

580 
	#GPIO_AF8_SDIO1
 
GPIO_AF8_SDMMC1


	)

581 
	#GPIO_AF12_SDIO1
 
GPIO_AF12_SDMMC1


	)

582 
	#GPIO_AF9_SDIO2
 
GPIO_AF9_SDMMC2


	)

583 
	#GPIO_AF10_SDIO2
 
GPIO_AF10_SDMMC2


	)

584 
	#GPIO_AF11_SDIO2
 
GPIO_AF11_SDMMC2


	)

586 #i‡
deföed
 (
STM32H743xx
Ë|| deföed (
STM32H753xx
Ë|| deföed (
STM32H750xx
Ë|| deföed (
STM32H742xx
) || \

587 
deföed
 (
STM32H745xx
Ë|| deföed (
STM32H755xx
Ë|| deföed (
STM32H747xx
Ë|| deföed (
STM32H757xx
)

588 
	#GPIO_AF10_OTG2_HS
 
GPIO_AF10_OTG2_FS


	)

589 
	#GPIO_AF10_OTG1_FS
 
GPIO_AF10_OTG1_HS


	)

590 
	#GPIO_AF12_OTG2_FS
 
GPIO_AF12_OTG1_FS


	)

594 
	#GPIO_AF0_LPTIM
 
GPIO_AF0_LPTIM1


	)

595 
	#GPIO_AF1_LPTIM
 
GPIO_AF1_LPTIM1


	)

596 
	#GPIO_AF2_LPTIM
 
GPIO_AF2_LPTIM1


	)

598 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32G4
Ë|| deföed(
STM32H7
)

599 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

600 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

601 
	#GPIO_SPEED_FAST
 
GPIO_SPEED_FREQ_HIGH


	)

602 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

605 #i‡
deföed
(
STM32L1
)

606 
	#GPIO_SPEED_VERY_LOW
 
GPIO_SPEED_FREQ_LOW


	)

607 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_MEDIUM


	)

608 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_HIGH


	)

609 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_VERY_HIGH


	)

612 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F1
)

613 
	#GPIO_SPEED_LOW
 
GPIO_SPEED_FREQ_LOW


	)

614 
	#GPIO_SPEED_MEDIUM
 
GPIO_SPEED_FREQ_MEDIUM


	)

615 
	#GPIO_SPEED_HIGH
 
GPIO_SPEED_FREQ_HIGH


	)

618 
	#GPIO_AF6_DFSDM
 
GPIO_AF6_DFSDM1


	)

626 
	#HRTIM_TIMDELAYEDPROTECTION_DISABLED
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED


	)

627 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_EEV6


	)

628 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_EEV6


	)

629 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV6


	)

630 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV68
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6


	)

631 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT1_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT1_DEEV7


	)

632 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDOUT2_DEEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDOUT2_DEEV7


	)

633 
	#HRTIM_TIMDELAYEDPROTECTION_DELAYEDBOTH_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DELAYEDBOTH_EEV7


	)

634 
	#HRTIM_TIMDELAYEDPROTECTION_BALANCED_EEV79
 
HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7


	)

636 
	#__HAL_HRTIM_SëCou¡î
 
__HAL_HRTIM_SETCOUNTER


	)

637 
	#__HAL_HRTIM_GëCou¡î
 
__HAL_HRTIM_GETCOUNTER


	)

638 
	#__HAL_HRTIM_SëPîiod
 
__HAL_HRTIM_SETPERIOD


	)

639 
	#__HAL_HRTIM_GëPîiod
 
__HAL_HRTIM_GETPERIOD


	)

640 
	#__HAL_HRTIM_SëClockPªsˇÀr
 
__HAL_HRTIM_SETCLOCKPRESCALER


	)

641 
	#__HAL_HRTIM_GëClockPªsˇÀr
 
__HAL_HRTIM_GETCLOCKPRESCALER


	)

642 
	#__HAL_HRTIM_SëCom∑ª
 
__HAL_HRTIM_SETCOMPARE


	)

643 
	#__HAL_HRTIM_GëCom∑ª
 
__HAL_HRTIM_GETCOMPARE


	)

645 #i‡
deföed
(
STM32G4
)

646 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îC⁄fig
 
HAL_HRTIM_ExtEvítCou¡îC⁄fig


	)

647 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îE«bÀ
 
HAL_HRTIM_ExtEvítCou¡îE«bÀ


	)

648 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îDißbÀ
 
HAL_HRTIM_ExtEvítCou¡îDißbÀ


	)

649 
	#HAL_HRTIM_Exã∫ÆEvítCou¡îRe£t
 
HAL_HRTIM_ExtEvítCou¡îRe£t


	)

650 
	#HRTIM_TIMEEVENT_A
 
HRTIM_EVENTCOUNTER_A


	)

651 
	#HRTIM_TIMEEVENT_B
 
HRTIM_EVENTCOUNTER_B


	)

652 
	#HRTIM_TIMEEVENTRESETMODE_UNCONDITIONAL
 
HRTIM_EVENTCOUNTER_RSTMODE_UNCONDITIONAL


	)

653 
	#HRTIM_TIMEEVENTRESETMODE_CONDITIONAL
 
HRTIM_EVENTCOUNTER_RSTMODE_CONDITIONAL


	)

656 #i‡
deföed
(
STM32H7
)

657 
	#HRTIM_OUTPUTSET_TIMAEV1_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

658 
	#HRTIM_OUTPUTSET_TIMAEV2_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

659 
	#HRTIM_OUTPUTSET_TIMAEV3_TIMCCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

660 
	#HRTIM_OUTPUTSET_TIMAEV4_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

661 
	#HRTIM_OUTPUTSET_TIMAEV5_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_5


	)

662 
	#HRTIM_OUTPUTSET_TIMAEV6_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_6


	)

663 
	#HRTIM_OUTPUTSET_TIMAEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

664 
	#HRTIM_OUTPUTSET_TIMAEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

665 
	#HRTIM_OUTPUTSET_TIMAEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

666 
	#HRTIM_OUTPUTSET_TIMBEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

667 
	#HRTIM_OUTPUTSET_TIMBEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

668 
	#HRTIM_OUTPUTSET_TIMBEV3_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_3


	)

669 
	#HRTIM_OUTPUTSET_TIMBEV4_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

670 
	#HRTIM_OUTPUTSET_TIMBEV5_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_5


	)

671 
	#HRTIM_OUTPUTSET_TIMBEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

672 
	#HRTIM_OUTPUTSET_TIMBEV7_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_7


	)

673 
	#HRTIM_OUTPUTSET_TIMBEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

674 
	#HRTIM_OUTPUTSET_TIMBEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

675 
	#HRTIM_OUTPUTSET_TIMCEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

676 
	#HRTIM_OUTPUTSET_TIMCEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

677 
	#HRTIM_OUTPUTSET_TIMCEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

678 
	#HRTIM_OUTPUTSET_TIMCEV4_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

679 
	#HRTIM_OUTPUTSET_TIMCEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

680 
	#HRTIM_OUTPUTSET_TIMCEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

681 
	#HRTIM_OUTPUTSET_TIMCEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

682 
	#HRTIM_OUTPUTSET_TIMCEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

683 
	#HRTIM_OUTPUTSET_TIMCEV9_TIMFCMP2
 
HRTIM_OUTPUTSET_TIMEV_9


	)

684 
	#HRTIM_OUTPUTSET_TIMDEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

685 
	#HRTIM_OUTPUTSET_TIMDEV2_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_2


	)

686 
	#HRTIM_OUTPUTSET_TIMDEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

687 
	#HRTIM_OUTPUTSET_TIMDEV4_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

688 
	#HRTIM_OUTPUTSET_TIMDEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

689 
	#HRTIM_OUTPUTSET_TIMDEV6_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

690 
	#HRTIM_OUTPUTSET_TIMDEV7_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

691 
	#HRTIM_OUTPUTSET_TIMDEV8_TIMFCMP1
 
HRTIM_OUTPUTSET_TIMEV_8


	)

692 
	#HRTIM_OUTPUTSET_TIMDEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

693 
	#HRTIM_OUTPUTSET_TIMEEV1_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_1


	)

694 
	#HRTIM_OUTPUTSET_TIMEEV2_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_2


	)

695 
	#HRTIM_OUTPUTSET_TIMEEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

696 
	#HRTIM_OUTPUTSET_TIMEEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

697 
	#HRTIM_OUTPUTSET_TIMEEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

698 
	#HRTIM_OUTPUTSET_TIMEEV6_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

699 
	#HRTIM_OUTPUTSET_TIMEEV7_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_7


	)

700 
	#HRTIM_OUTPUTSET_TIMEEV8_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_8


	)

701 
	#HRTIM_OUTPUTSET_TIMEEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

702 
	#HRTIM_OUTPUTSET_TIMFEV1_TIMACMP3
 
HRTIM_OUTPUTSET_TIMEV_1


	)

703 
	#HRTIM_OUTPUTSET_TIMFEV2_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_2


	)

704 
	#HRTIM_OUTPUTSET_TIMFEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

705 
	#HRTIM_OUTPUTSET_TIMFEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

706 
	#HRTIM_OUTPUTSET_TIMFEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

707 
	#HRTIM_OUTPUTSET_TIMFEV6_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_6


	)

708 
	#HRTIM_OUTPUTSET_TIMFEV7_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

709 
	#HRTIM_OUTPUTSET_TIMFEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

710 
	#HRTIM_OUTPUTSET_TIMFEV9_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

712 
	#HRTIM_OUTPUTRESET_TIMAEV1_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

713 
	#HRTIM_OUTPUTRESET_TIMAEV2_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

714 
	#HRTIM_OUTPUTRESET_TIMAEV3_TIMCCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

715 
	#HRTIM_OUTPUTRESET_TIMAEV4_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

716 
	#HRTIM_OUTPUTRESET_TIMAEV5_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_5


	)

717 
	#HRTIM_OUTPUTRESET_TIMAEV6_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_6


	)

718 
	#HRTIM_OUTPUTRESET_TIMAEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

719 
	#HRTIM_OUTPUTRESET_TIMAEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

720 
	#HRTIM_OUTPUTRESET_TIMAEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

721 
	#HRTIM_OUTPUTRESET_TIMBEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

722 
	#HRTIM_OUTPUTRESET_TIMBEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

723 
	#HRTIM_OUTPUTRESET_TIMBEV3_TIMCCMP3
 
HRTIM_OUTPUTSET_TIMEV_3


	)

724 
	#HRTIM_OUTPUTRESET_TIMBEV4_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

725 
	#HRTIM_OUTPUTRESET_TIMBEV5_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_5


	)

726 
	#HRTIM_OUTPUTRESET_TIMBEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

727 
	#HRTIM_OUTPUTRESET_TIMBEV7_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_7


	)

728 
	#HRTIM_OUTPUTRESET_TIMBEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

729 
	#HRTIM_OUTPUTRESET_TIMBEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

730 
	#HRTIM_OUTPUTRESET_TIMCEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

731 
	#HRTIM_OUTPUTRESET_TIMCEV2_TIMACMP2
 
HRTIM_OUTPUTSET_TIMEV_2


	)

732 
	#HRTIM_OUTPUTRESET_TIMCEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

733 
	#HRTIM_OUTPUTRESET_TIMCEV4_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_4


	)

734 
	#HRTIM_OUTPUTRESET_TIMCEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

735 
	#HRTIM_OUTPUTRESET_TIMCEV6_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_6


	)

736 
	#HRTIM_OUTPUTRESET_TIMCEV7_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_7


	)

737 
	#HRTIM_OUTPUTRESET_TIMCEV8_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_8


	)

738 
	#HRTIM_OUTPUTRESET_TIMCEV9_TIMFCMP2
 
HRTIM_OUTPUTSET_TIMEV_9


	)

739 
	#HRTIM_OUTPUTRESET_TIMDEV1_TIMACMP1
 
HRTIM_OUTPUTSET_TIMEV_1


	)

740 
	#HRTIM_OUTPUTRESET_TIMDEV2_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_2


	)

741 
	#HRTIM_OUTPUTRESET_TIMDEV3_TIMBCMP2
 
HRTIM_OUTPUTSET_TIMEV_3


	)

742 
	#HRTIM_OUTPUTRESET_TIMDEV4_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_4


	)

743 
	#HRTIM_OUTPUTRESET_TIMDEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

744 
	#HRTIM_OUTPUTRESET_TIMDEV6_TIMECMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

745 
	#HRTIM_OUTPUTRESET_TIMDEV7_TIMECMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

746 
	#HRTIM_OUTPUTRESET_TIMDEV8_TIMFCMP1
 
HRTIM_OUTPUTSET_TIMEV_8


	)

747 
	#HRTIM_OUTPUTRESET_TIMDEV9_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

748 
	#HRTIM_OUTPUTRESET_TIMEEV1_TIMACMP4
 
HRTIM_OUTPUTSET_TIMEV_1


	)

749 
	#HRTIM_OUTPUTRESET_TIMEEV2_TIMBCMP3
 
HRTIM_OUTPUTSET_TIMEV_2


	)

750 
	#HRTIM_OUTPUTRESET_TIMEEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

751 
	#HRTIM_OUTPUTRESET_TIMEEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

752 
	#HRTIM_OUTPUTRESET_TIMEEV5_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_5


	)

753 
	#HRTIM_OUTPUTRESET_TIMEEV6_TIMDCMP1
 
HRTIM_OUTPUTSET_TIMEV_6


	)

754 
	#HRTIM_OUTPUTRESET_TIMEEV7_TIMDCMP2
 
HRTIM_OUTPUTSET_TIMEV_7


	)

755 
	#HRTIM_OUTPUTRESET_TIMEEV8_TIMFCMP3
 
HRTIM_OUTPUTSET_TIMEV_8


	)

756 
	#HRTIM_OUTPUTRESET_TIMEEV9_TIMFCMP4
 
HRTIM_OUTPUTSET_TIMEV_9


	)

757 
	#HRTIM_OUTPUTRESET_TIMFEV1_TIMACMP3
 
HRTIM_OUTPUTSET_TIMEV_1


	)

758 
	#HRTIM_OUTPUTRESET_TIMFEV2_TIMBCMP1
 
HRTIM_OUTPUTSET_TIMEV_2


	)

759 
	#HRTIM_OUTPUTRESET_TIMFEV3_TIMBCMP4
 
HRTIM_OUTPUTSET_TIMEV_3


	)

760 
	#HRTIM_OUTPUTRESET_TIMFEV4_TIMCCMP1
 
HRTIM_OUTPUTSET_TIMEV_4


	)

761 
	#HRTIM_OUTPUTRESET_TIMFEV5_TIMCCMP4
 
HRTIM_OUTPUTSET_TIMEV_5


	)

762 
	#HRTIM_OUTPUTRESET_TIMFEV6_TIMDCMP3
 
HRTIM_OUTPUTSET_TIMEV_6


	)

763 
	#HRTIM_OUTPUTRESET_TIMFEV7_TIMDCMP4
 
HRTIM_OUTPUTSET_TIMEV_7


	)

764 
	#HRTIM_OUTPUTRESET_TIMFEV8_TIMECMP2
 
HRTIM_OUTPUTSET_TIMEV_8


	)

765 
	#HRTIM_OUTPUTRESET_TIMFEV9_TIMECMP3
 
HRTIM_OUTPUTSET_TIMEV_9


	)

768 #i‡
deföed
(
STM32F3
)

771 
	#HRTIM_EVENTSRC_1
 (0x00000000U)

	)

772 
	#HRTIM_EVENTSRC_2
 (
HRTIM_EECR1_EE1SRC_0
)

	)

773 
	#HRTIM_EVENTSRC_3
 (
HRTIM_EECR1_EE1SRC_1
)

	)

774 
	#HRTIM_EVENTSRC_4
 (
HRTIM_EECR1_EE1SRC_1
 | 
HRTIM_EECR1_EE1SRC_0
)

	)

779 
	#HRTIM_OUTPUTSET_TIMEV_1
 (
HRTIM_SET1R_TIMEVNT1
)

	)

780 
	#HRTIM_OUTPUTSET_TIMEV_2
 (
HRTIM_SET1R_TIMEVNT2
)

	)

781 
	#HRTIM_OUTPUTSET_TIMEV_3
 (
HRTIM_SET1R_TIMEVNT3
)

	)

782 
	#HRTIM_OUTPUTSET_TIMEV_4
 (
HRTIM_SET1R_TIMEVNT4
)

	)

783 
	#HRTIM_OUTPUTSET_TIMEV_5
 (
HRTIM_SET1R_TIMEVNT5
)

	)

784 
	#HRTIM_OUTPUTSET_TIMEV_6
 (
HRTIM_SET1R_TIMEVNT6
)

	)

785 
	#HRTIM_OUTPUTSET_TIMEV_7
 (
HRTIM_SET1R_TIMEVNT7
)

	)

786 
	#HRTIM_OUTPUTSET_TIMEV_8
 (
HRTIM_SET1R_TIMEVNT8
)

	)

787 
	#HRTIM_OUTPUTSET_TIMEV_9
 (
HRTIM_SET1R_TIMEVNT9
)

	)

789 
	#HRTIM_OUTPUTRESET_TIMEV_1
 (
HRTIM_RST1R_TIMEVNT1
)

	)

790 
	#HRTIM_OUTPUTRESET_TIMEV_2
 (
HRTIM_RST1R_TIMEVNT2
)

	)

791 
	#HRTIM_OUTPUTRESET_TIMEV_3
 (
HRTIM_RST1R_TIMEVNT3
)

	)

792 
	#HRTIM_OUTPUTRESET_TIMEV_4
 (
HRTIM_RST1R_TIMEVNT4
)

	)

793 
	#HRTIM_OUTPUTRESET_TIMEV_5
 (
HRTIM_RST1R_TIMEVNT5
)

	)

794 
	#HRTIM_OUTPUTRESET_TIMEV_6
 (
HRTIM_RST1R_TIMEVNT6
)

	)

795 
	#HRTIM_OUTPUTRESET_TIMEV_7
 (
HRTIM_RST1R_TIMEVNT7
)

	)

796 
	#HRTIM_OUTPUTRESET_TIMEV_8
 (
HRTIM_RST1R_TIMEVNT8
)

	)

797 
	#HRTIM_OUTPUTRESET_TIMEV_9
 (
HRTIM_RST1R_TIMEVNT9
)

	)

802 
	#HRTIM_TIMEVENTFILTER_NONE
 (0x00000000U)

	)

803 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP1
 (
HRTIM_EEFR1_EE1FLTR_0
)

	)

804 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP2
 (
HRTIM_EEFR1_EE1FLTR_1
)

	)

805 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP3
 (
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

806 
	#HRTIM_TIMEVENTFILTER_BLANKINGCMP4
 (
HRTIM_EEFR1_EE1FLTR_2
)

	)

807 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR1
 (
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

808 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR2
 (
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
)

	)

809 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR3
 (
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

810 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR4
 (
HRTIM_EEFR1_EE1FLTR_3
)

	)

811 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR5
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

812 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR6
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_1
)

	)

813 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR7
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

814 
	#HRTIM_TIMEVENTFILTER_BLANKINGFLTR8
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
)

	)

815 
	#HRTIM_TIMEVENTFILTER_WINDOWINGCMP2
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

816 
	#HRTIM_TIMEVENTFILTER_WINDOWINGCMP3
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
)

	)

817 
	#HRTIM_TIMEVENTFILTER_WINDOWINGTIM
 (
HRTIM_EEFR1_EE1FLTR_3
 | 
HRTIM_EEFR1_EE1FLTR_2
 | 
HRTIM_EEFR1_EE1FLTR_1
 | 
HRTIM_EEFR1_EE1FLTR_0
)

	)

821 
	#HRTIM_CALIBRATIONRATE_7300
 0x00000000U

	)

822 
	#HRTIM_CALIBRATIONRATE_910
 (
HRTIM_DLLCR_CALRTE_0
)

	)

823 
	#HRTIM_CALIBRATIONRATE_114
 (
HRTIM_DLLCR_CALRTE_1
)

	)

824 
	#HRTIM_CALIBRATIONRATE_14
 (
HRTIM_DLLCR_CALRTE_1
 | 
HRTIM_DLLCR_CALRTE_0
)

	)

834 
	#I2C_DUALADDRESS_DISABLED
 
I2C_DUALADDRESS_DISABLE


	)

835 
	#I2C_DUALADDRESS_ENABLED
 
I2C_DUALADDRESS_ENABLE


	)

836 
	#I2C_GENERALCALL_DISABLED
 
I2C_GENERALCALL_DISABLE


	)

837 
	#I2C_GENERALCALL_ENABLED
 
I2C_GENERALCALL_ENABLE


	)

838 
	#I2C_NOSTRETCH_DISABLED
 
I2C_NOSTRETCH_DISABLE


	)

839 
	#I2C_NOSTRETCH_ENABLED
 
I2C_NOSTRETCH_ENABLE


	)

840 
	#I2C_ANALOGFILTER_ENABLED
 
I2C_ANALOGFILTER_ENABLE


	)

841 
	#I2C_ANALOGFILTER_DISABLED
 
I2C_ANALOGFILTER_DISABLE


	)

842 #i‡
deföed
(
STM32F0
Ë|| deföed(
STM32F1
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32L1
Ë|| deföed(
STM32F7
)

843 
	#HAL_I2C_STATE_MEM_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

844 
	#HAL_I2C_STATE_MEM_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

845 
	#HAL_I2C_STATE_MASTER_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

846 
	#HAL_I2C_STATE_MASTER_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

847 
	#HAL_I2C_STATE_SLAVE_BUSY_TX
 
HAL_I2C_STATE_BUSY_TX


	)

848 
	#HAL_I2C_STATE_SLAVE_BUSY_RX
 
HAL_I2C_STATE_BUSY_RX


	)

857 
	#IRDA_ONE_BIT_SAMPLE_DISABLED
 
IRDA_ONE_BIT_SAMPLE_DISABLE


	)

858 
	#IRDA_ONE_BIT_SAMPLE_ENABLED
 
IRDA_ONE_BIT_SAMPLE_ENABLE


	)

867 
	#KR_KEY_RELOAD
 
IWDG_KEY_RELOAD


	)

868 
	#KR_KEY_ENABLE
 
IWDG_KEY_ENABLE


	)

869 
	#KR_KEY_EWA
 
IWDG_KEY_WRITE_ACCESS_ENABLE


	)

870 
	#KR_KEY_DWA
 
IWDG_KEY_WRITE_ACCESS_DISABLE


	)

879 
	#LPTIM_CLOCKSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION


	)

880 
	#LPTIM_CLOCKSAMPLETIME_2TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS


	)

881 
	#LPTIM_CLOCKSAMPLETIME_4TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS


	)

882 
	#LPTIM_CLOCKSAMPLETIME_8TRANSISTIONS
 
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS


	)

884 
	#LPTIM_CLOCKPOLARITY_RISINGEDGE
 
LPTIM_CLOCKPOLARITY_RISING


	)

885 
	#LPTIM_CLOCKPOLARITY_FALLINGEDGE
 
LPTIM_CLOCKPOLARITY_FALLING


	)

886 
	#LPTIM_CLOCKPOLARITY_BOTHEDGES
 
LPTIM_CLOCKPOLARITY_RISING_FALLING


	)

888 
	#LPTIM_TRIGSAMPLETIME_DIRECTTRANSISTION
 
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION


	)

889 
	#LPTIM_TRIGSAMPLETIME_2TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

890 
	#LPTIM_TRIGSAMPLETIME_4TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

891 
	#LPTIM_TRIGSAMPLETIME_8TRANSISTIONS
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

895 
	#LPTIM_TRIGSAMPLETIME_2TRANSITION
 
LPTIM_TRIGSAMPLETIME_2TRANSITIONS


	)

896 
	#LPTIM_TRIGSAMPLETIME_4TRANSITION
 
LPTIM_TRIGSAMPLETIME_4TRANSITIONS


	)

897 
	#LPTIM_TRIGSAMPLETIME_8TRANSITION
 
LPTIM_TRIGSAMPLETIME_8TRANSITIONS


	)

906 
	#HAL_NAND_Ród_Page
 
HAL_NAND_Ród_Page_8b


	)

907 
	#HAL_NAND_Wrôe_Page
 
HAL_NAND_Wrôe_Page_8b


	)

908 
	#HAL_NAND_Ród_S∑ªAªa
 
HAL_NAND_Ród_S∑ªAªa_8b


	)

909 
	#HAL_NAND_Wrôe_S∑ªAªa
 
HAL_NAND_Wrôe_S∑ªAªa_8b


	)

911 
	#NAND_AddªssTy≥def
 
NAND_AddªssTy≥Def


	)

913 
	#__ARRAY_ADDRESS
 
ARRAY_ADDRESS


	)

914 
	#__ADDR_1°_CYCLE
 
ADDR_1ST_CYCLE


	)

915 
	#__ADDR_2nd_CYCLE
 
ADDR_2ND_CYCLE


	)

916 
	#__ADDR_3rd_CYCLE
 
ADDR_3RD_CYCLE


	)

917 
	#__ADDR_4th_CYCLE
 
ADDR_4TH_CYCLE


	)

925 
	#NOR_SètusTy≥def
 
HAL_NOR_SètusTy≥Def


	)

926 
	#NOR_SUCCESS
 
HAL_NOR_STATUS_SUCCESS


	)

927 
	#NOR_ONGOING
 
HAL_NOR_STATUS_ONGOING


	)

928 
	#NOR_ERROR
 
HAL_NOR_STATUS_ERROR


	)

929 
	#NOR_TIMEOUT
 
HAL_NOR_STATUS_TIMEOUT


	)

931 
	#__NOR_WRITE
 
NOR_WRITE


	)

932 
	#__NOR_ADDR_SHIFT
 
NOR_ADDR_SHIFT


	)

941 
	#OPAMP_NONINVERTINGINPUT_VP0
 
OPAMP_NONINVERTINGINPUT_IO0


	)

942 
	#OPAMP_NONINVERTINGINPUT_VP1
 
OPAMP_NONINVERTINGINPUT_IO1


	)

943 
	#OPAMP_NONINVERTINGINPUT_VP2
 
OPAMP_NONINVERTINGINPUT_IO2


	)

944 
	#OPAMP_NONINVERTINGINPUT_VP3
 
OPAMP_NONINVERTINGINPUT_IO3


	)

946 
	#OPAMP_SEC_NONINVERTINGINPUT_VP0
 
OPAMP_SEC_NONINVERTINGINPUT_IO0


	)

947 
	#OPAMP_SEC_NONINVERTINGINPUT_VP1
 
OPAMP_SEC_NONINVERTINGINPUT_IO1


	)

948 
	#OPAMP_SEC_NONINVERTINGINPUT_VP2
 
OPAMP_SEC_NONINVERTINGINPUT_IO2


	)

949 
	#OPAMP_SEC_NONINVERTINGINPUT_VP3
 
OPAMP_SEC_NONINVERTINGINPUT_IO3


	)

951 
	#OPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

952 
	#OPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

954 
	#IOPAMP_INVERTINGINPUT_VM0
 
OPAMP_INVERTINGINPUT_IO0


	)

955 
	#IOPAMP_INVERTINGINPUT_VM1
 
OPAMP_INVERTINGINPUT_IO1


	)

957 
	#OPAMP_SEC_INVERTINGINPUT_VM0
 
OPAMP_SEC_INVERTINGINPUT_IO0


	)

958 
	#OPAMP_SEC_INVERTINGINPUT_VM1
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

960 
	#OPAMP_INVERTINGINPUT_VINM
 
OPAMP_SEC_INVERTINGINPUT_IO1


	)

962 
	#OPAMP_PGACONNECT_NO
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_NO


	)

963 
	#OPAMP_PGACONNECT_VM0
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0


	)

964 
	#OPAMP_PGACONNECT_VM1
 
OPAMP_PGA_CONNECT_INVERTINGINPUT_IO1


	)

966 #i‡
deföed
(
STM32L1
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32H7
Ë|| deföed(
STM32G4
)

967 
	#HAL_OPAMP_MSP_INIT_CB_ID
 
HAL_OPAMP_MSPINIT_CB_ID


	)

968 
	#HAL_OPAMP_MSP_DEINIT_CB_ID
 
HAL_OPAMP_MSPDEINIT_CB_ID


	)

979 
	#I2S_STANDARD_PHILLIPS
 
I2S_STANDARD_PHILIPS


	)

981 #i‡
deföed
(
STM32H7
)

982 
	#I2S_IT_TXE
 
I2S_IT_TXP


	)

983 
	#I2S_IT_RXNE
 
I2S_IT_RXP


	)

985 
	#I2S_FLAG_TXE
 
I2S_FLAG_TXP


	)

986 
	#I2S_FLAG_RXNE
 
I2S_FLAG_RXP


	)

989 #i‡
deföed
(
STM32F7
)

990 
	#I2S_CLOCK_SYSCLK
 
I2S_CLOCK_PLL


	)

1001 
	#CF_DATA
 
ATA_DATA


	)

1002 
	#CF_SECTOR_COUNT
 
ATA_SECTOR_COUNT


	)

1003 
	#CF_SECTOR_NUMBER
 
ATA_SECTOR_NUMBER


	)

1004 
	#CF_CYLINDER_LOW
 
ATA_CYLINDER_LOW


	)

1005 
	#CF_CYLINDER_HIGH
 
ATA_CYLINDER_HIGH


	)

1006 
	#CF_CARD_HEAD
 
ATA_CARD_HEAD


	)

1007 
	#CF_STATUS_CMD
 
ATA_STATUS_CMD


	)

1008 
	#CF_STATUS_CMD_ALTERNATE
 
ATA_STATUS_CMD_ALTERNATE


	)

1009 
	#CF_COMMON_DATA_AREA
 
ATA_COMMON_DATA_AREA


	)

1012 
	#CF_READ_SECTOR_CMD
 
ATA_READ_SECTOR_CMD


	)

1013 
	#CF_WRITE_SECTOR_CMD
 
ATA_WRITE_SECTOR_CMD


	)

1014 
	#CF_ERASE_SECTOR_CMD
 
ATA_ERASE_SECTOR_CMD


	)

1015 
	#CF_IDENTIFY_CMD
 
ATA_IDENTIFY_CMD


	)

1017 
	#PCCARD_SètusTy≥def
 
HAL_PCCARD_SètusTy≥Def


	)

1018 
	#PCCARD_SUCCESS
 
HAL_PCCARD_STATUS_SUCCESS


	)

1019 
	#PCCARD_ONGOING
 
HAL_PCCARD_STATUS_ONGOING


	)

1020 
	#PCCARD_ERROR
 
HAL_PCCARD_STATUS_ERROR


	)

1021 
	#PCCARD_TIMEOUT
 
HAL_PCCARD_STATUS_TIMEOUT


	)

1030 
	#FORMAT_BIN
 
RTC_FORMAT_BIN


	)

1031 
	#FORMAT_BCD
 
RTC_FORMAT_BCD


	)

1033 
	#RTC_ALARMSUBSECONDMASK_N⁄e
 
RTC_ALARMSUBSECONDMASK_NONE


	)

1034 
	#RTC_TAMPERERASEBACKUP_DISABLED
 
RTC_TAMPER_ERASE_BACKUP_DISABLE


	)

1035 
	#RTC_TAMPERMASK_FLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

1036 
	#RTC_TAMPERMASK_FLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

1038 
	#RTC_MASKTAMPERFLAG_DISABLED
 
RTC_TAMPERMASK_FLAG_DISABLE


	)

1039 
	#RTC_MASKTAMPERFLAG_ENABLED
 
RTC_TAMPERMASK_FLAG_ENABLE


	)

1040 
	#RTC_TAMPERERASEBACKUP_ENABLED
 
RTC_TAMPER_ERASE_BACKUP_ENABLE


	)

1041 
	#RTC_TAMPER1_2_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

1042 
	#RTC_TAMPER1_2_3_INTERRUPT
 
RTC_ALL_TAMPER_INTERRUPT


	)

1044 
	#RTC_TIMESTAMPPIN_PC13
 
RTC_TIMESTAMPPIN_DEFAULT


	)

1045 
	#RTC_TIMESTAMPPIN_PA0
 
RTC_TIMESTAMPPIN_POS1


	)

1046 
	#RTC_TIMESTAMPPIN_PI8
 
RTC_TIMESTAMPPIN_POS1


	)

1047 
	#RTC_TIMESTAMPPIN_PC1
 
RTC_TIMESTAMPPIN_POS2


	)

1049 
	#RTC_OUTPUT_REMAP_PC13
 
RTC_OUTPUT_REMAP_NONE


	)

1050 
	#RTC_OUTPUT_REMAP_PB14
 
RTC_OUTPUT_REMAP_POS1


	)

1051 
	#RTC_OUTPUT_REMAP_PB2
 
RTC_OUTPUT_REMAP_POS1


	)

1053 
	#RTC_TAMPERPIN_PC13
 
RTC_TAMPERPIN_DEFAULT


	)

1054 
	#RTC_TAMPERPIN_PA0
 
RTC_TAMPERPIN_POS1


	)

1055 
	#RTC_TAMPERPIN_PI8
 
RTC_TAMPERPIN_POS1


	)

1057 #i‡
deföed
(
STM32H7
)

1058 
	#RTC_TAMPCR_TAMPXE
 
RTC_TAMPER_X


	)

1059 
	#RTC_TAMPCR_TAMPXIE
 
RTC_TAMPER_X_INTERRUPT


	)

1061 
	#RTC_TAMPER1_INTERRUPT
 
RTC_IT_TAMP1


	)

1062 
	#RTC_TAMPER2_INTERRUPT
 
RTC_IT_TAMP2


	)

1063 
	#RTC_TAMPER3_INTERRUPT
 
RTC_IT_TAMP3


	)

1064 
	#RTC_ALL_TAMPER_INTERRUPT
 
RTC_IT_TAMPALL


	)

1075 
	#SMARTCARD_NACK_ENABLED
 
SMARTCARD_NACK_ENABLE


	)

1076 
	#SMARTCARD_NACK_DISABLED
 
SMARTCARD_NACK_DISABLE


	)

1078 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLED
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

1079 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLED
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

1080 
	#SMARTCARD_ONEBIT_SAMPLING_DISABLE
 
SMARTCARD_ONE_BIT_SAMPLE_DISABLE


	)

1081 
	#SMARTCARD_ONEBIT_SAMPLING_ENABLE
 
SMARTCARD_ONE_BIT_SAMPLE_ENABLE


	)

1083 
	#SMARTCARD_TIMEOUT_DISABLED
 
SMARTCARD_TIMEOUT_DISABLE


	)

1084 
	#SMARTCARD_TIMEOUT_ENABLED
 
SMARTCARD_TIMEOUT_ENABLE


	)

1086 
	#SMARTCARD_LASTBIT_DISABLED
 
SMARTCARD_LASTBIT_DISABLE


	)

1087 
	#SMARTCARD_LASTBIT_ENABLED
 
SMARTCARD_LASTBIT_ENABLE


	)

1096 
	#SMBUS_DUALADDRESS_DISABLED
 
SMBUS_DUALADDRESS_DISABLE


	)

1097 
	#SMBUS_DUALADDRESS_ENABLED
 
SMBUS_DUALADDRESS_ENABLE


	)

1098 
	#SMBUS_GENERALCALL_DISABLED
 
SMBUS_GENERALCALL_DISABLE


	)

1099 
	#SMBUS_GENERALCALL_ENABLED
 
SMBUS_GENERALCALL_ENABLE


	)

1100 
	#SMBUS_NOSTRETCH_DISABLED
 
SMBUS_NOSTRETCH_DISABLE


	)

1101 
	#SMBUS_NOSTRETCH_ENABLED
 
SMBUS_NOSTRETCH_ENABLE


	)

1102 
	#SMBUS_ANALOGFILTER_ENABLED
 
SMBUS_ANALOGFILTER_ENABLE


	)

1103 
	#SMBUS_ANALOGFILTER_DISABLED
 
SMBUS_ANALOGFILTER_DISABLE


	)

1104 
	#SMBUS_PEC_DISABLED
 
SMBUS_PEC_DISABLE


	)

1105 
	#SMBUS_PEC_ENABLED
 
SMBUS_PEC_ENABLE


	)

1106 
	#HAL_SMBUS_STATE_SLAVE_LISTEN
 
HAL_SMBUS_STATE_LISTEN


	)

1114 
	#SPI_TIMODE_DISABLED
 
SPI_TIMODE_DISABLE


	)

1115 
	#SPI_TIMODE_ENABLED
 
SPI_TIMODE_ENABLE


	)

1117 
	#SPI_CRCCALCULATION_DISABLED
 
SPI_CRCCALCULATION_DISABLE


	)

1118 
	#SPI_CRCCALCULATION_ENABLED
 
SPI_CRCCALCULATION_ENABLE


	)

1120 
	#SPI_NSS_PULSE_DISABLED
 
SPI_NSS_PULSE_DISABLE


	)

1121 
	#SPI_NSS_PULSE_ENABLED
 
SPI_NSS_PULSE_ENABLE


	)

1123 #i‡
deföed
(
STM32H7
)

1125 
	#SPI_FLAG_TXE
 
SPI_FLAG_TXP


	)

1126 
	#SPI_FLAG_RXNE
 
SPI_FLAG_RXP


	)

1128 
	#SPI_IT_TXE
 
SPI_IT_TXP


	)

1129 
	#SPI_IT_RXNE
 
SPI_IT_RXP


	)

1131 
	#SPI_FRLVL_EMPTY
 
SPI_RX_FIFO_0PACKET


	)

1132 
	#SPI_FRLVL_QUARTER_FULL
 
SPI_RX_FIFO_1PACKET


	)

1133 
	#SPI_FRLVL_HALF_FULL
 
SPI_RX_FIFO_2PACKET


	)

1134 
	#SPI_FRLVL_FULL
 
SPI_RX_FIFO_3PACKET


	)

1145 
	#CCER_CCxE_MASK
 
TIM_CCER_CCxE_MASK


	)

1146 
	#CCER_CCxNE_MASK
 
TIM_CCER_CCxNE_MASK


	)

1148 
	#TIM_DMABa£_CR1
 
TIM_DMABASE_CR1


	)

1149 
	#TIM_DMABa£_CR2
 
TIM_DMABASE_CR2


	)

1150 
	#TIM_DMABa£_SMCR
 
TIM_DMABASE_SMCR


	)

1151 
	#TIM_DMABa£_DIER
 
TIM_DMABASE_DIER


	)

1152 
	#TIM_DMABa£_SR
 
TIM_DMABASE_SR


	)

1153 
	#TIM_DMABa£_EGR
 
TIM_DMABASE_EGR


	)

1154 
	#TIM_DMABa£_CCMR1
 
TIM_DMABASE_CCMR1


	)

1155 
	#TIM_DMABa£_CCMR2
 
TIM_DMABASE_CCMR2


	)

1156 
	#TIM_DMABa£_CCER
 
TIM_DMABASE_CCER


	)

1157 
	#TIM_DMABa£_CNT
 
TIM_DMABASE_CNT


	)

1158 
	#TIM_DMABa£_PSC
 
TIM_DMABASE_PSC


	)

1159 
	#TIM_DMABa£_ARR
 
TIM_DMABASE_ARR


	)

1160 
	#TIM_DMABa£_RCR
 
TIM_DMABASE_RCR


	)

1161 
	#TIM_DMABa£_CCR1
 
TIM_DMABASE_CCR1


	)

1162 
	#TIM_DMABa£_CCR2
 
TIM_DMABASE_CCR2


	)

1163 
	#TIM_DMABa£_CCR3
 
TIM_DMABASE_CCR3


	)

1164 
	#TIM_DMABa£_CCR4
 
TIM_DMABASE_CCR4


	)

1165 
	#TIM_DMABa£_BDTR
 
TIM_DMABASE_BDTR


	)

1166 
	#TIM_DMABa£_DCR
 
TIM_DMABASE_DCR


	)

1167 
	#TIM_DMABa£_DMAR
 
TIM_DMABASE_DMAR


	)

1168 
	#TIM_DMABa£_OR1
 
TIM_DMABASE_OR1


	)

1169 
	#TIM_DMABa£_CCMR3
 
TIM_DMABASE_CCMR3


	)

1170 
	#TIM_DMABa£_CCR5
 
TIM_DMABASE_CCR5


	)

1171 
	#TIM_DMABa£_CCR6
 
TIM_DMABASE_CCR6


	)

1172 
	#TIM_DMABa£_OR2
 
TIM_DMABASE_OR2


	)

1173 
	#TIM_DMABa£_OR3
 
TIM_DMABASE_OR3


	)

1174 
	#TIM_DMABa£_OR
 
TIM_DMABASE_OR


	)

1176 
	#TIM_EvítSour˚_Upd©e
 
TIM_EVENTSOURCE_UPDATE


	)

1177 
	#TIM_EvítSour˚_CC1
 
TIM_EVENTSOURCE_CC1


	)

1178 
	#TIM_EvítSour˚_CC2
 
TIM_EVENTSOURCE_CC2


	)

1179 
	#TIM_EvítSour˚_CC3
 
TIM_EVENTSOURCE_CC3


	)

1180 
	#TIM_EvítSour˚_CC4
 
TIM_EVENTSOURCE_CC4


	)

1181 
	#TIM_EvítSour˚_COM
 
TIM_EVENTSOURCE_COM


	)

1182 
	#TIM_EvítSour˚_Triggî
 
TIM_EVENTSOURCE_TRIGGER


	)

1183 
	#TIM_EvítSour˚_Bªak
 
TIM_EVENTSOURCE_BREAK


	)

1184 
	#TIM_EvítSour˚_Bªak2
 
TIM_EVENTSOURCE_BREAK2


	)

1186 
	#TIM_DMABur°Lígth_1Tøns„r
 
TIM_DMABURSTLENGTH_1TRANSFER


	)

1187 
	#TIM_DMABur°Lígth_2Tøns„rs
 
TIM_DMABURSTLENGTH_2TRANSFERS


	)

1188 
	#TIM_DMABur°Lígth_3Tøns„rs
 
TIM_DMABURSTLENGTH_3TRANSFERS


	)

1189 
	#TIM_DMABur°Lígth_4Tøns„rs
 
TIM_DMABURSTLENGTH_4TRANSFERS


	)

1190 
	#TIM_DMABur°Lígth_5Tøns„rs
 
TIM_DMABURSTLENGTH_5TRANSFERS


	)

1191 
	#TIM_DMABur°Lígth_6Tøns„rs
 
TIM_DMABURSTLENGTH_6TRANSFERS


	)

1192 
	#TIM_DMABur°Lígth_7Tøns„rs
 
TIM_DMABURSTLENGTH_7TRANSFERS


	)

1193 
	#TIM_DMABur°Lígth_8Tøns„rs
 
TIM_DMABURSTLENGTH_8TRANSFERS


	)

1194 
	#TIM_DMABur°Lígth_9Tøns„rs
 
TIM_DMABURSTLENGTH_9TRANSFERS


	)

1195 
	#TIM_DMABur°Lígth_10Tøns„rs
 
TIM_DMABURSTLENGTH_10TRANSFERS


	)

1196 
	#TIM_DMABur°Lígth_11Tøns„rs
 
TIM_DMABURSTLENGTH_11TRANSFERS


	)

1197 
	#TIM_DMABur°Lígth_12Tøns„rs
 
TIM_DMABURSTLENGTH_12TRANSFERS


	)

1198 
	#TIM_DMABur°Lígth_13Tøns„rs
 
TIM_DMABURSTLENGTH_13TRANSFERS


	)

1199 
	#TIM_DMABur°Lígth_14Tøns„rs
 
TIM_DMABURSTLENGTH_14TRANSFERS


	)

1200 
	#TIM_DMABur°Lígth_15Tøns„rs
 
TIM_DMABURSTLENGTH_15TRANSFERS


	)

1201 
	#TIM_DMABur°Lígth_16Tøns„rs
 
TIM_DMABURSTLENGTH_16TRANSFERS


	)

1202 
	#TIM_DMABur°Lígth_17Tøns„rs
 
TIM_DMABURSTLENGTH_17TRANSFERS


	)

1203 
	#TIM_DMABur°Lígth_18Tøns„rs
 
TIM_DMABURSTLENGTH_18TRANSFERS


	)

1205 #i‡
deföed
(
STM32L0
)

1206 
	#TIM22_TI1_GPIO1
 
TIM22_TI1_GPIO


	)

1207 
	#TIM22_TI1_GPIO2
 
TIM22_TI1_GPIO


	)

1210 #i‡
deföed
(
STM32F3
)

1211 
	#IS_TIM_HALL_INTERFACE_INSTANCE
 
IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE


	)

1214 #i‡
deföed
(
STM32H7
)

1215 
	#TIM_TIM1_ETR_COMP1_OUT
 
TIM_TIM1_ETR_COMP1


	)

1216 
	#TIM_TIM1_ETR_COMP2_OUT
 
TIM_TIM1_ETR_COMP2


	)

1217 
	#TIM_TIM8_ETR_COMP1_OUT
 
TIM_TIM8_ETR_COMP1


	)

1218 
	#TIM_TIM8_ETR_COMP2_OUT
 
TIM_TIM8_ETR_COMP2


	)

1219 
	#TIM_TIM2_ETR_COMP1_OUT
 
TIM_TIM2_ETR_COMP1


	)

1220 
	#TIM_TIM2_ETR_COMP2_OUT
 
TIM_TIM2_ETR_COMP2


	)

1221 
	#TIM_TIM3_ETR_COMP1_OUT
 
TIM_TIM3_ETR_COMP1


	)

1222 
	#TIM_TIM1_TI1_COMP1_OUT
 
TIM_TIM1_TI1_COMP1


	)

1223 
	#TIM_TIM8_TI1_COMP2_OUT
 
TIM_TIM8_TI1_COMP2


	)

1224 
	#TIM_TIM2_TI4_COMP1_OUT
 
TIM_TIM2_TI4_COMP1


	)

1225 
	#TIM_TIM2_TI4_COMP2_OUT
 
TIM_TIM2_TI4_COMP2


	)

1226 
	#TIM_TIM2_TI4_COMP1COMP2_OUT
 
TIM_TIM2_TI4_COMP1_COMP2


	)

1227 
	#TIM_TIM3_TI1_COMP1_OUT
 
TIM_TIM3_TI1_COMP1


	)

1228 
	#TIM_TIM3_TI1_COMP2_OUT
 
TIM_TIM3_TI1_COMP2


	)

1229 
	#TIM_TIM3_TI1_COMP1COMP2_OUT
 
TIM_TIM3_TI1_COMP1_COMP2


	)

1239 
	#TSC_SYNC_POL_FALL
 
TSC_SYNC_POLARITY_FALLING


	)

1240 
	#TSC_SYNC_POL_RISE_HIGH
 
TSC_SYNC_POLARITY_RISING


	)

1248 
	#UART_ONEBIT_SAMPLING_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

1249 
	#UART_ONEBIT_SAMPLING_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

1250 
	#UART_ONE_BIT_SAMPLE_DISABLED
 
UART_ONE_BIT_SAMPLE_DISABLE


	)

1251 
	#UART_ONE_BIT_SAMPLE_ENABLED
 
UART_ONE_BIT_SAMPLE_ENABLE


	)

1253 
	#__HAL_UART_ONEBIT_ENABLE
 
__HAL_UART_ONE_BIT_SAMPLE_ENABLE


	)

1254 
	#__HAL_UART_ONEBIT_DISABLE
 
__HAL_UART_ONE_BIT_SAMPLE_DISABLE


	)

1256 
	#__DIV_SAMPLING16
 
UART_DIV_SAMPLING16


	)

1257 
	#__DIVMANT_SAMPLING16
 
UART_DIVMANT_SAMPLING16


	)

1258 
	#__DIVFRAQ_SAMPLING16
 
UART_DIVFRAQ_SAMPLING16


	)

1259 
	#__UART_BRR_SAMPLING16
 
UART_BRR_SAMPLING16


	)

1261 
	#__DIV_SAMPLING8
 
UART_DIV_SAMPLING8


	)

1262 
	#__DIVMANT_SAMPLING8
 
UART_DIVMANT_SAMPLING8


	)

1263 
	#__DIVFRAQ_SAMPLING8
 
UART_DIVFRAQ_SAMPLING8


	)

1264 
	#__UART_BRR_SAMPLING8
 
UART_BRR_SAMPLING8


	)

1266 
	#__DIV_LPUART
 
UART_DIV_LPUART


	)

1268 
	#UART_WAKEUPMETHODE_IDLELINE
 
UART_WAKEUPMETHOD_IDLELINE


	)

1269 
	#UART_WAKEUPMETHODE_ADDRESSMARK
 
UART_WAKEUPMETHOD_ADDRESSMARK


	)

1280 
	#USART_CLOCK_DISABLED
 
USART_CLOCK_DISABLE


	)

1281 
	#USART_CLOCK_ENABLED
 
USART_CLOCK_ENABLE


	)

1283 
	#USARTNACK_ENABLED
 
USART_NACK_ENABLE


	)

1284 
	#USARTNACK_DISABLED
 
USART_NACK_DISABLE


	)

1292 
	#CFR_BASE
 
WWDG_CFR_BASE


	)

1301 
	#CAN_FûãrFIFO0
 
CAN_FILTER_FIFO0


	)

1302 
	#CAN_FûãrFIFO1
 
CAN_FILTER_FIFO1


	)

1303 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

1304 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

1305 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

1306 
	#INAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

1307 
	#SLAK_TIMEOUT
 
CAN_TIMEOUT_VALUE


	)

1308 
	#CAN_TXSTATUS_FAILED
 ((
uöt8_t
)0x00U)

	)

1309 
	#CAN_TXSTATUS_OK
 ((
uöt8_t
)0x01U)

	)

1310 
	#CAN_TXSTATUS_PENDING
 ((
uöt8_t
)0x02U)

	)

1320 
	#VLAN_TAG
 
ETH_VLAN_TAG


	)

1321 
	#MIN_ETH_PAYLOAD
 
ETH_MIN_ETH_PAYLOAD


	)

1322 
	#MAX_ETH_PAYLOAD
 
ETH_MAX_ETH_PAYLOAD


	)

1323 
	#JUMBO_FRAME_PAYLOAD
 
ETH_JUMBO_FRAME_PAYLOAD


	)

1324 
	#MACMIIAR_CR_MASK
 
ETH_MACMIIAR_CR_MASK


	)

1325 
	#MACCR_CLEAR_MASK
 
ETH_MACCR_CLEAR_MASK


	)

1326 
	#MACFCR_CLEAR_MASK
 
ETH_MACFCR_CLEAR_MASK


	)

1327 
	#DMAOMR_CLEAR_MASK
 
ETH_DMAOMR_CLEAR_MASK


	)

1329 
	#ETH_MMCCR
 0x00000100U

	)

1330 
	#ETH_MMCRIR
 0x00000104U

	)

1331 
	#ETH_MMCTIR
 0x00000108U

	)

1332 
	#ETH_MMCRIMR
 0x0000010CU

	)

1333 
	#ETH_MMCTIMR
 0x00000110U

	)

1334 
	#ETH_MMCTGFSCCR
 0x0000014CU

	)

1335 
	#ETH_MMCTGFMSCCR
 0x00000150U

	)

1336 
	#ETH_MMCTGFCR
 0x00000168U

	)

1337 
	#ETH_MMCRFCECR
 0x00000194U

	)

1338 
	#ETH_MMCRFAECR
 0x00000198U

	)

1339 
	#ETH_MMCRGUFCR
 0x000001C4U

	)

1341 
	#ETH_MAC_TXFIFO_FULL
 0x02000000U

	)

1342 
	#ETH_MAC_TXFIFONOT_EMPTY
 0x01000000U

	)

1343 
	#ETH_MAC_TXFIFO_WRITE_ACTIVE
 0x00400000U

	)

1344 
	#ETH_MAC_TXFIFO_IDLE
 0x00000000U

	)

1345 
	#ETH_MAC_TXFIFO_READ
 0x00100000U

	)

1346 
	#ETH_MAC_TXFIFO_WAITING
 0x00200000U

	)

1347 
	#ETH_MAC_TXFIFO_WRITING
 0x00300000U

	)

1348 
	#ETH_MAC_TRANSMISSION_PAUSE
 0x00080000U

	)

1349 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_IDLE
 0x00000000U

	)

1350 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_WAITING
 0x00020000U

	)

1351 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_GENRATING_PCF
 0x00040000U

	)

1352 
	#ETH_MAC_TRANSMITFRAMECONTROLLER_TRANSFERRING
 0x00060000U

	)

1353 
	#ETH_MAC_MII_TRANSMIT_ACTIVE
 0x00010000U

	)

1354 
	#ETH_MAC_RXFIFO_EMPTY
 0x00000000U

	)

1355 
	#ETH_MAC_RXFIFO_BELOW_THRESHOLD
 0x00000100U

	)

1356 
	#ETH_MAC_RXFIFO_ABOVE_THRESHOLD
 0x00000200U

	)

1357 
	#ETH_MAC_RXFIFO_FULL
 0x00000300U

	)

1358 #i‡
deföed
(
STM32F1
)

1360 
	#ETH_MAC_READCONTROLLER_IDLE
 0x00000000U

	)

1361 
	#ETH_MAC_READCONTROLLER_READING_DATA
 0x00000020U

	)

1362 
	#ETH_MAC_READCONTROLLER_READING_STATUS
 0x00000040U

	)

1364 
	#ETH_MAC_READCONTROLLER_FLUSHING
 0x00000060U

	)

1365 
	#ETH_MAC_RXFIFO_WRITE_ACTIVE
 0x00000010U

	)

1366 
	#ETH_MAC_SMALL_FIFO_NOTACTIVE
 0x00000000U

	)

1367 
	#ETH_MAC_SMALL_FIFO_READ_ACTIVE
 0x00000002U

	)

1368 
	#ETH_MAC_SMALL_FIFO_WRITE_ACTIVE
 0x00000004U

	)

1369 
	#ETH_MAC_SMALL_FIFO_RW_ACTIVE
 0x00000006U

	)

1370 
	#ETH_MAC_MII_RECEIVE_PROTOCOL_ACTIVE
 0x00000001U

	)

1379 
	#HAL_DCMI_ERROR_OVF
 
HAL_DCMI_ERROR_OVR


	)

1380 
	#DCMI_IT_OVF
 
DCMI_IT_OVR


	)

1381 
	#DCMI_FLAG_OVFRI
 
DCMI_FLAG_OVRRI


	)

1382 
	#DCMI_FLAG_OVFMI
 
DCMI_FLAG_OVRMI


	)

1384 
	#HAL_DCMI_C⁄figCROP
 
HAL_DCMI_C⁄figCr›


	)

1385 
	#HAL_DCMI_E«bÀCROP
 
HAL_DCMI_E«bÀCr›


	)

1386 
	#HAL_DCMI_DißbÀCROP
 
HAL_DCMI_DißbÀCr›


	)

1392 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32F427xx
Ë|| deföed(
STM32F437xx
) \

1393 || 
deföed
(
STM32F429xx
Ë|| deföed(
STM32F439xx
Ë|| deföed(
STM32F469xx
Ë|| deföed(
STM32F479xx
) \

1394 || 
deföed
(
STM32H7
)

1398 
	#DMA2D_ARGB8888
 
DMA2D_OUTPUT_ARGB8888


	)

1399 
	#DMA2D_RGB888
 
DMA2D_OUTPUT_RGB888


	)

1400 
	#DMA2D_RGB565
 
DMA2D_OUTPUT_RGB565


	)

1401 
	#DMA2D_ARGB1555
 
DMA2D_OUTPUT_ARGB1555


	)

1402 
	#DMA2D_ARGB4444
 
DMA2D_OUTPUT_ARGB4444


	)

1404 
	#CM_ARGB8888
 
DMA2D_INPUT_ARGB8888


	)

1405 
	#CM_RGB888
 
DMA2D_INPUT_RGB888


	)

1406 
	#CM_RGB565
 
DMA2D_INPUT_RGB565


	)

1407 
	#CM_ARGB1555
 
DMA2D_INPUT_ARGB1555


	)

1408 
	#CM_ARGB4444
 
DMA2D_INPUT_ARGB4444


	)

1409 
	#CM_L8
 
DMA2D_INPUT_L8


	)

1410 
	#CM_AL44
 
DMA2D_INPUT_AL44


	)

1411 
	#CM_AL88
 
DMA2D_INPUT_AL88


	)

1412 
	#CM_L4
 
DMA2D_INPUT_L4


	)

1413 
	#CM_A8
 
DMA2D_INPUT_A8


	)

1414 
	#CM_A4
 
DMA2D_INPUT_A4


	)

1433 
	#HAL_CRYP_Compuèti⁄C∂tCÆlback
 
HAL_CRYPEx_Compuèti⁄C∂tCÆlback


	)

1441 
	#HAL_HASH_STATETy≥Def
 
HAL_HASH_SèãTy≥Def


	)

1442 
	#HAL_HASHPha£Ty≥Def
 
HAL_HASH_Pha£Ty≥Def


	)

1443 
	#HAL_HMAC_MD5_Föish
 
HAL_HASH_MD5_Föish


	)

1444 
	#HAL_HMAC_SHA1_Föish
 
HAL_HASH_SHA1_Föish


	)

1445 
	#HAL_HMAC_SHA224_Föish
 
HAL_HASH_SHA224_Föish


	)

1446 
	#HAL_HMAC_SHA256_Föish
 
HAL_HASH_SHA256_Föish


	)

1450 
	#HASH_AlgoSñe˘i⁄_SHA1
 
HASH_ALGOSELECTION_SHA1


	)

1451 
	#HASH_AlgoSñe˘i⁄_SHA224
 
HASH_ALGOSELECTION_SHA224


	)

1452 
	#HASH_AlgoSñe˘i⁄_SHA256
 
HASH_ALGOSELECTION_SHA256


	)

1453 
	#HASH_AlgoSñe˘i⁄_MD5
 
HASH_ALGOSELECTION_MD5


	)

1455 
	#HASH_AlgoMode_HASH
 
HASH_ALGOMODE_HASH


	)

1456 
	#HASH_AlgoMode_HMAC
 
HASH_ALGOMODE_HMAC


	)

1458 
	#HASH_HMACKeyTy≥_Sh‹tKey
 
HASH_HMAC_KEYTYPE_SHORTKEY


	)

1459 
	#HASH_HMACKeyTy≥_L⁄gKey
 
HASH_HMAC_KEYTYPE_LONGKEY


	)

1461 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32H7
)

1463 
	#HAL_HASH_MD5_Accumuœã
 
HAL_HASH_MD5_Accm…


	)

1464 
	#HAL_HASH_MD5_Accumuœã_End
 
HAL_HASH_MD5_Accm…_End


	)

1465 
	#HAL_HASH_MD5_Accumuœã_IT
 
HAL_HASH_MD5_Accm…_IT


	)

1466 
	#HAL_HASH_MD5_Accumuœã_End_IT
 
HAL_HASH_MD5_Accm…_End_IT


	)

1468 
	#HAL_HASH_SHA1_Accumuœã
 
HAL_HASH_SHA1_Accm…


	)

1469 
	#HAL_HASH_SHA1_Accumuœã_End
 
HAL_HASH_SHA1_Accm…_End


	)

1470 
	#HAL_HASH_SHA1_Accumuœã_IT
 
HAL_HASH_SHA1_Accm…_IT


	)

1471 
	#HAL_HASH_SHA1_Accumuœã_End_IT
 
HAL_HASH_SHA1_Accm…_End_IT


	)

1473 
	#HAL_HASHEx_SHA224_Accumuœã
 
HAL_HASHEx_SHA224_Accm…


	)

1474 
	#HAL_HASHEx_SHA224_Accumuœã_End
 
HAL_HASHEx_SHA224_Accm…_End


	)

1475 
	#HAL_HASHEx_SHA224_Accumuœã_IT
 
HAL_HASHEx_SHA224_Accm…_IT


	)

1476 
	#HAL_HASHEx_SHA224_Accumuœã_End_IT
 
HAL_HASHEx_SHA224_Accm…_End_IT


	)

1478 
	#HAL_HASHEx_SHA256_Accumuœã
 
HAL_HASHEx_SHA256_Accm…


	)

1479 
	#HAL_HASHEx_SHA256_Accumuœã_End
 
HAL_HASHEx_SHA256_Accm…_End


	)

1480 
	#HAL_HASHEx_SHA256_Accumuœã_IT
 
HAL_HASHEx_SHA256_Accm…_IT


	)

1481 
	#HAL_HASHEx_SHA256_Accumuœã_End_IT
 
HAL_HASHEx_SHA256_Accm…_End_IT


	)

1491 
	#HAL_E«bÀDBGSÀïMode
 
HAL_DBGMCU_E«bÀDBGSÀïMode


	)

1492 
	#HAL_DißbÀDBGSÀïMode
 
HAL_DBGMCU_DißbÀDBGSÀïMode


	)

1493 
	#HAL_E«bÀDBGSt›Mode
 
HAL_DBGMCU_E«bÀDBGSt›Mode


	)

1494 
	#HAL_DißbÀDBGSt›Mode
 
HAL_DBGMCU_DißbÀDBGSt›Mode


	)

1495 
	#HAL_E«bÀDBGSèndbyMode
 
HAL_DBGMCU_E«bÀDBGSèndbyMode


	)

1496 
	#HAL_DißbÀDBGSèndbyMode
 
HAL_DBGMCU_DißbÀDBGSèndbyMode


	)

1497 
	#HAL_DBG_LowPowîC⁄fig
(
Pîùh
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_DBGMCU_DBG_E«bÀLowPowîC⁄fig
(PîùhË: 
	`HAL_DBGMCU_DBG_DißbÀLowPowîC⁄fig
(Pîùh))

	)

1498 
	#HAL_VREFINT_OuçutSñe˘
 
HAL_SYSCFG_VREFINT_OuçutSñe˘


	)

1499 
	#HAL_Lock_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_SYSCFG_E«bÀ_Lock_VREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀ_Lock_VREFINT
())

	)

1500 #i‡
deföed
(
STM32L0
)

1502 
	#HAL_VREFINT_Cmd
(
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_SYSCFG_E«bÀVREFINT
(Ë: 
	`HAL_SYSCFG_DißbÀVREFINT
())

	)

1504 
	#HAL_ADC_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINT
(Ë: 
	`HAL_ADCEx_DißbÀVREFINT
())

	)

1505 
	#HAL_ADC_E«bÀBuf„rSís‹_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_ADCEx_E«bÀVREFINTTempSís‹
(Ë: 
	`HAL_ADCEx_DißbÀVREFINTTempSís‹
())

	)

1506 #i‡
deföed
(
STM32H7A3xx
Ë|| deföed(
STM32H7B3xx
Ë|| deföed(
STM32H7B0xx
Ë|| deföed(
STM32H7A3xxQ
Ë|| deföed(
STM32H7B3xxQ
Ë|| deföed(
STM32H7B0xxQ
)

1507 
	#HAL_E«bÀSRDomaöDBGSt›Mode
 
HAL_E«bÀDomaö3DBGSt›Mode


	)

1508 
	#HAL_DißbÀSRDomaöDBGSt›Mode
 
HAL_DißbÀDomaö3DBGSt›Mode


	)

1509 
	#HAL_E«bÀSRDomaöDBGSèndbyMode
 
HAL_E«bÀDomaö3DBGSèndbyMode


	)

1510 
	#HAL_DißbÀSRDomaöDBGSèndbyMode
 
HAL_DißbÀDomaö3DBGSèndbyMode


	)

1520 
	#FLASH_HÆfPageProgøm
 
HAL_FLASHEx_HÆfPageProgøm


	)

1521 
	#FLASH_E«bÀRunPowîDown
 
HAL_FLASHEx_E«bÀRunPowîDown


	)

1522 
	#FLASH_DißbÀRunPowîDown
 
HAL_FLASHEx_DißbÀRunPowîDown


	)

1523 
	#HAL_DATA_EEPROMEx_U∆ock
 
HAL_FLASHEx_DATAEEPROM_U∆ock


	)

1524 
	#HAL_DATA_EEPROMEx_Lock
 
HAL_FLASHEx_DATAEEPROM_Lock


	)

1525 
	#HAL_DATA_EEPROMEx_Eø£
 
HAL_FLASHEx_DATAEEPROM_Eø£


	)

1526 
	#HAL_DATA_EEPROMEx_Progøm
 
HAL_FLASHEx_DATAEEPROM_Progøm


	)

1535 
	#HAL_I2CEx_A«logFûãr_C⁄fig
 
HAL_I2CEx_C⁄figA«logFûãr


	)

1536 
	#HAL_I2CEx_DigôÆFûãr_C⁄fig
 
HAL_I2CEx_C⁄figDigôÆFûãr


	)

1537 
	#HAL_FMPI2CEx_A«logFûãr_C⁄fig
 
HAL_FMPI2CEx_C⁄figA«logFûãr


	)

1538 
	#HAL_FMPI2CEx_DigôÆFûãr_C⁄fig
 
HAL_FMPI2CEx_C⁄figDigôÆFûãr


	)

1540 
	#HAL_I2CFa°ModePlusC⁄fig
(
SYSCFG_I2CFa°ModePlus
, 
cmd
Ë(((cmd)==
ENABLE
)? 
	`HAL_I2CEx_E«bÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus): 
	`HAL_I2CEx_DißbÀFa°ModePlus
(SYSCFG_I2CFa°ModePlus))

	)

1542 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32WB
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32F0
Ë|| deföed(
STM32F1
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32L0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32G4
Ë|| deföed(
STM32L1
)

1543 
	#HAL_I2C_Ma°î_Sequítül_Tønsmô_IT
 
HAL_I2C_Ma°î_Seq_Tønsmô_IT


	)

1544 
	#HAL_I2C_Ma°î_Sequítül_Re˚ive_IT
 
HAL_I2C_Ma°î_Seq_Re˚ive_IT


	)

1545 
	#HAL_I2C_Sœve_Sequítül_Tønsmô_IT
 
HAL_I2C_Sœve_Seq_Tønsmô_IT


	)

1546 
	#HAL_I2C_Sœve_Sequítül_Re˚ive_IT
 
HAL_I2C_Sœve_Seq_Re˚ive_IT


	)

1548 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32WB
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32L0
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32L5
Ë|| deföed(
STM32G4
)|| deföed(
STM32L1
)

1549 
	#HAL_I2C_Ma°î_Sequítül_Tønsmô_DMA
 
HAL_I2C_Ma°î_Seq_Tønsmô_DMA


	)

1550 
	#HAL_I2C_Ma°î_Sequítül_Re˚ive_DMA
 
HAL_I2C_Ma°î_Seq_Re˚ive_DMA


	)

1551 
	#HAL_I2C_Sœve_Sequítül_Tønsmô_DMA
 
HAL_I2C_Sœve_Seq_Tønsmô_DMA


	)

1552 
	#HAL_I2C_Sœve_Sequítül_Re˚ive_DMA
 
HAL_I2C_Sœve_Seq_Re˚ive_DMA


	)

1555 #i‡
deföed
(
STM32F4
)

1556 
	#HAL_FMPI2C_Ma°î_Sequítül_Tønsmô_IT
 
HAL_FMPI2C_Ma°î_Seq_Tønsmô_IT


	)

1557 
	#HAL_FMPI2C_Ma°î_Sequítül_Re˚ive_IT
 
HAL_FMPI2C_Ma°î_Seq_Re˚ive_IT


	)

1558 
	#HAL_FMPI2C_Sœve_Sequítül_Tønsmô_IT
 
HAL_FMPI2C_Sœve_Seq_Tønsmô_IT


	)

1559 
	#HAL_FMPI2C_Sœve_Sequítül_Re˚ive_IT
 
HAL_FMPI2C_Sœve_Seq_Re˚ive_IT


	)

1560 
	#HAL_FMPI2C_Ma°î_Sequítül_Tønsmô_DMA
 
HAL_FMPI2C_Ma°î_Seq_Tønsmô_DMA


	)

1561 
	#HAL_FMPI2C_Ma°î_Sequítül_Re˚ive_DMA
 
HAL_FMPI2C_Ma°î_Seq_Re˚ive_DMA


	)

1562 
	#HAL_FMPI2C_Sœve_Sequítül_Tønsmô_DMA
 
HAL_FMPI2C_Sœve_Seq_Tønsmô_DMA


	)

1563 
	#HAL_FMPI2C_Sœve_Sequítül_Re˚ive_DMA
 
HAL_FMPI2C_Sœve_Seq_Re˚ive_DMA


	)

1573 #i‡
deföed
(
STM32G0
)

1574 
	#HAL_PWR_C⁄figPVD
 
HAL_PWREx_C⁄figPVD


	)

1575 
	#HAL_PWR_E«bÀPVD
 
HAL_PWREx_E«bÀPVD


	)

1576 
	#HAL_PWR_DißbÀPVD
 
HAL_PWREx_DißbÀPVD


	)

1577 
	#HAL_PWR_PVD_IRQH™dÀr
 
HAL_PWREx_PVD_IRQH™dÀr


	)

1579 
	#HAL_PWR_PVDC⁄fig
 
HAL_PWR_C⁄figPVD


	)

1580 
	#HAL_PWR_DißbÀBkUpReg
 
HAL_PWREx_DißbÀBkUpReg


	)

1581 
	#HAL_PWR_DißbÀFœshPowîDown
 
HAL_PWREx_DißbÀFœshPowîDown


	)

1582 
	#HAL_PWR_DißbÀVddio2M⁄ô‹
 
HAL_PWREx_DißbÀVddio2M⁄ô‹


	)

1583 
	#HAL_PWR_E«bÀBkUpReg
 
HAL_PWREx_E«bÀBkUpReg


	)

1584 
	#HAL_PWR_E«bÀFœshPowîDown
 
HAL_PWREx_E«bÀFœshPowîDown


	)

1585 
	#HAL_PWR_E«bÀVddio2M⁄ô‹
 
HAL_PWREx_E«bÀVddio2M⁄ô‹


	)

1586 
	#HAL_PWR_PVD_PVM_IRQH™dÀr
 
HAL_PWREx_PVD_PVM_IRQH™dÀr


	)

1587 
	#HAL_PWR_PVDLevñC⁄fig
 
HAL_PWR_C⁄figPVD


	)

1588 
	#HAL_PWR_Vddio2M⁄ô‹_IRQH™dÀr
 
HAL_PWREx_Vddio2M⁄ô‹_IRQH™dÀr


	)

1589 
	#HAL_PWR_Vddio2M⁄ô‹CÆlback
 
HAL_PWREx_Vddio2M⁄ô‹CÆlback


	)

1590 
	#HAL_PWREx_A˘iv©eOvîDrive
 
HAL_PWREx_E«bÀOvîDrive


	)

1591 
	#HAL_PWREx_Dó˘iv©eOvîDrive
 
HAL_PWREx_DißbÀOvîDrive


	)

1592 
	#HAL_PWREx_DißbÀSDADCA«log
 
HAL_PWREx_DißbÀSDADC


	)

1593 
	#HAL_PWREx_E«bÀSDADCA«log
 
HAL_PWREx_E«bÀSDADC


	)

1594 
	#HAL_PWREx_PVMC⁄fig
 
HAL_PWREx_C⁄figPVM


	)

1596 
	#PWR_MODE_NORMAL
 
PWR_PVD_MODE_NORMAL


	)

1597 
	#PWR_MODE_IT_RISING
 
PWR_PVD_MODE_IT_RISING


	)

1598 
	#PWR_MODE_IT_FALLING
 
PWR_PVD_MODE_IT_FALLING


	)

1599 
	#PWR_MODE_IT_RISING_FALLING
 
PWR_PVD_MODE_IT_RISING_FALLING


	)

1600 
	#PWR_MODE_EVENT_RISING
 
PWR_PVD_MODE_EVENT_RISING


	)

1601 
	#PWR_MODE_EVENT_FALLING
 
PWR_PVD_MODE_EVENT_FALLING


	)

1602 
	#PWR_MODE_EVENT_RISING_FALLING
 
PWR_PVD_MODE_EVENT_RISING_FALLING


	)

1604 
	#CR_OFFSET_BB
 
PWR_CR_OFFSET_BB


	)

1605 
	#CSR_OFFSET_BB
 
PWR_CSR_OFFSET_BB


	)

1606 
	#PMODE_BIT_NUMBER
 
VOS_BIT_NUMBER


	)

1607 
	#CR_PMODE_BB
 
CR_VOS_BB


	)

1609 
	#DBP_BôNumbî
 
DBP_BIT_NUMBER


	)

1610 
	#PVDE_BôNumbî
 
PVDE_BIT_NUMBER


	)

1611 
	#PMODE_BôNumbî
 
PMODE_BIT_NUMBER


	)

1612 
	#EWUP_BôNumbî
 
EWUP_BIT_NUMBER


	)

1613 
	#FPDS_BôNumbî
 
FPDS_BIT_NUMBER


	)

1614 
	#ODEN_BôNumbî
 
ODEN_BIT_NUMBER


	)

1615 
	#ODSWEN_BôNumbî
 
ODSWEN_BIT_NUMBER


	)

1616 
	#MRLVDS_BôNumbî
 
MRLVDS_BIT_NUMBER


	)

1617 
	#LPLVDS_BôNumbî
 
LPLVDS_BIT_NUMBER


	)

1618 
	#BRE_BôNumbî
 
BRE_BIT_NUMBER


	)

1620 
	#PWR_MODE_EVT
 
PWR_PVD_MODE_NORMAL


	)

1629 
	#HAL_SMBUS_Sœve_Li°í_IT
 
HAL_SMBUS_E«bÀLi°í_IT


	)

1630 
	#HAL_SMBUS_SœveAddrCÆlback
 
HAL_SMBUS_AddrCÆlback


	)

1631 
	#HAL_SMBUS_SœveLi°íC∂tCÆlback
 
HAL_SMBUS_Li°íC∂tCÆlback


	)

1639 
	#HAL_SPI_FlushRxFifo
 
HAL_SPIEx_FlushRxFifo


	)

1647 
	#HAL_TIM_DMADñayPul£C∂t
 
TIM_DMADñayPul£C∂t


	)

1648 
	#HAL_TIM_DMAEº‹
 
TIM_DMAEº‹


	)

1649 
	#HAL_TIM_DMAC≠tuªC∂t
 
TIM_DMAC≠tuªC∂t


	)

1650 
	#HAL_TIMEx_DMACommuèti⁄C∂t
 
TIMEx_DMACommuèti⁄C∂t


	)

1651 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32F0
Ë|| deföed(
STM32F1
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32F3
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F7
Ë|| deföed(
STM32L0
Ë|| deföed(
STM32L4
)

1652 
	#HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄
 
HAL_TIM_SœveC⁄figSynchro


	)

1653 
	#HAL_TIM_SœveC⁄figSynchr⁄iz©i⁄_IT
 
HAL_TIM_SœveC⁄figSynchro_IT


	)

1654 
	#HAL_TIMEx_Commuèti⁄CÆlback
 
HAL_TIMEx_CommutCÆlback


	)

1655 
	#HAL_TIMEx_C⁄figCommuèti⁄Evít
 
HAL_TIMEx_C⁄figCommutEvít


	)

1656 
	#HAL_TIMEx_C⁄figCommuèti⁄Evít_IT
 
HAL_TIMEx_C⁄figCommutEvít_IT


	)

1657 
	#HAL_TIMEx_C⁄figCommuèti⁄Evít_DMA
 
HAL_TIMEx_C⁄figCommutEvít_DMA


	)

1666 
	#HAL_UART_WakeupCÆlback
 
HAL_UARTEx_WakeupCÆlback


	)

1674 
	#HAL_LTDC_LöeEvíCÆlback
 
HAL_LTDC_LöeEvítCÆlback


	)

1675 
	#HAL_LTDC_Rñaod
 
HAL_LTDC_Rñﬂd


	)

1676 
	#HAL_LTDC_Såu˘InôFromVideoC⁄fig
 
HAL_LTDCEx_Såu˘InôFromVideoC⁄fig


	)

1677 
	#HAL_LTDC_Såu˘InôFromAd≠ãdComm™dC⁄fig
 
HAL_LTDCEx_Såu˘InôFromAd≠ãdComm™dC⁄fig


	)

1696 
	#AES_IT_CC
 
CRYP_IT_CC


	)

1697 
	#AES_IT_ERR
 
CRYP_IT_ERR


	)

1698 
	#AES_FLAG_CCF
 
CRYP_FLAG_CCF


	)

1706 
	#__HAL_GET_BOOT_MODE
 
__HAL_SYSCFG_GET_BOOT_MODE


	)

1707 
	#__HAL_REMAPMEMORY_FLASH
 
__HAL_SYSCFG_REMAPMEMORY_FLASH


	)

1708 
	#__HAL_REMAPMEMORY_SYSTEMFLASH
 
__HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH


	)

1709 
	#__HAL_REMAPMEMORY_SRAM
 
__HAL_SYSCFG_REMAPMEMORY_SRAM


	)

1710 
	#__HAL_REMAPMEMORY_FMC
 
__HAL_SYSCFG_REMAPMEMORY_FMC


	)

1711 
	#__HAL_REMAPMEMORY_FMC_SDRAM
 
__HAL_SYSCFG_REMAPMEMORY_FMC_SDRAM


	)

1712 
	#__HAL_REMAPMEMORY_FSMC
 
__HAL_SYSCFG_REMAPMEMORY_FSMC


	)

1713 
	#__HAL_REMAPMEMORY_QUADSPI
 
__HAL_SYSCFG_REMAPMEMORY_QUADSPI


	)

1714 
	#__HAL_FMC_BANK
 
__HAL_SYSCFG_FMC_BANK


	)

1715 
	#__HAL_GET_FLAG
 
__HAL_SYSCFG_GET_FLAG


	)

1716 
	#__HAL_CLEAR_FLAG
 
__HAL_SYSCFG_CLEAR_FLAG


	)

1717 
	#__HAL_VREFINT_OUT_ENABLE
 
__HAL_SYSCFG_VREFINT_OUT_ENABLE


	)

1718 
	#__HAL_VREFINT_OUT_DISABLE
 
__HAL_SYSCFG_VREFINT_OUT_DISABLE


	)

1719 
	#__HAL_SYSCFG_SRAM2_WRP_ENABLE
 
__HAL_SYSCFG_SRAM2_WRP_0_31_ENABLE


	)

1721 
	#SYSCFG_FLAG_VREF_READY
 
SYSCFG_FLAG_VREFINT_READY


	)

1722 
	#SYSCFG_FLAG_RC48
 
RCC_FLAG_HSI48


	)

1723 
	#IS_SYSCFG_FASTMODEPLUS_CONFIG
 
IS_I2C_FASTMODEPLUS


	)

1724 
	#UFB_MODE_BôNumbî
 
UFB_MODE_BIT_NUMBER


	)

1725 
	#CMP_PD_BôNumbî
 
CMP_PD_BIT_NUMBER


	)

1735 
	#__ADC_ENABLE
 
__HAL_ADC_ENABLE


	)

1736 
	#__ADC_DISABLE
 
__HAL_ADC_DISABLE


	)

1737 
	#__HAL_ADC_ENABLING_CONDITIONS
 
ADC_ENABLING_CONDITIONS


	)

1738 
	#__HAL_ADC_DISABLING_CONDITIONS
 
ADC_DISABLING_CONDITIONS


	)

1739 
	#__HAL_ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1740 
	#__ADC_IS_ENABLED
 
ADC_IS_ENABLE


	)

1741 
	#__HAL_ADC_IS_SOFTWARE_START_REGULAR
 
ADC_IS_SOFTWARE_START_REGULAR


	)

1742 
	#__HAL_ADC_IS_SOFTWARE_START_INJECTED
 
ADC_IS_SOFTWARE_START_INJECTED


	)

1743 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED
 
ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED


	)

1744 
	#__HAL_ADC_IS_CONVERSION_ONGOING_REGULAR
 
ADC_IS_CONVERSION_ONGOING_REGULAR


	)

1745 
	#__HAL_ADC_IS_CONVERSION_ONGOING_INJECTED
 
ADC_IS_CONVERSION_ONGOING_INJECTED


	)

1746 
	#__HAL_ADC_IS_CONVERSION_ONGOING
 
ADC_IS_CONVERSION_ONGOING


	)

1747 
	#__HAL_ADC_CLEAR_ERRORCODE
 
ADC_CLEAR_ERRORCODE


	)

1749 
	#__HAL_ADC_GET_RESOLUTION
 
ADC_GET_RESOLUTION


	)

1750 
	#__HAL_ADC_JSQR_RK
 
ADC_JSQR_RK


	)

1751 
	#__HAL_ADC_CFGR_AWD1CH
 
ADC_CFGR_AWD1CH_SHIFT


	)

1752 
	#__HAL_ADC_CFGR_AWD23CR
 
ADC_CFGR_AWD23CR


	)

1753 
	#__HAL_ADC_CFGR_INJECT_AUTO_CONVERSION
 
ADC_CFGR_INJECT_AUTO_CONVERSION


	)

1754 
	#__HAL_ADC_CFGR_INJECT_CONTEXT_QUEUE
 
ADC_CFGR_INJECT_CONTEXT_QUEUE


	)

1755 
	#__HAL_ADC_CFGR_INJECT_DISCCONTINUOUS
 
ADC_CFGR_INJECT_DISCCONTINUOUS


	)

1756 
	#__HAL_ADC_CFGR_REG_DISCCONTINUOUS
 
ADC_CFGR_REG_DISCCONTINUOUS


	)

1757 
	#__HAL_ADC_CFGR_DISCONTINUOUS_NUM
 
ADC_CFGR_DISCONTINUOUS_NUM


	)

1758 
	#__HAL_ADC_CFGR_AUTOWAIT
 
ADC_CFGR_AUTOWAIT


	)

1759 
	#__HAL_ADC_CFGR_CONTINUOUS
 
ADC_CFGR_CONTINUOUS


	)

1760 
	#__HAL_ADC_CFGR_OVERRUN
 
ADC_CFGR_OVERRUN


	)

1761 
	#__HAL_ADC_CFGR_DMACONTREQ
 
ADC_CFGR_DMACONTREQ


	)

1762 
	#__HAL_ADC_CFGR_EXTSEL
 
ADC_CFGR_EXTSEL_SET


	)

1763 
	#__HAL_ADC_JSQR_JEXTSEL
 
ADC_JSQR_JEXTSEL_SET


	)

1764 
	#__HAL_ADC_OFR_CHANNEL
 
ADC_OFR_CHANNEL


	)

1765 
	#__HAL_ADC_DIFSEL_CHANNEL
 
ADC_DIFSEL_CHANNEL


	)

1766 
	#__HAL_ADC_CALFACT_DIFF_SET
 
ADC_CALFACT_DIFF_SET


	)

1767 
	#__HAL_ADC_CALFACT_DIFF_GET
 
ADC_CALFACT_DIFF_GET


	)

1768 
	#__HAL_ADC_TRX_HIGHTHRESHOLD
 
ADC_TRX_HIGHTHRESHOLD


	)

1770 
	#__HAL_ADC_OFFSET_SHIFT_RESOLUTION
 
ADC_OFFSET_SHIFT_RESOLUTION


	)

1771 
	#__HAL_ADC_AWD1THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD1THRESHOLD_SHIFT_RESOLUTION


	)

1772 
	#__HAL_ADC_AWD23THRESHOLD_SHIFT_RESOLUTION
 
ADC_AWD23THRESHOLD_SHIFT_RESOLUTION


	)

1773 
	#__HAL_ADC_COMMON_REGISTER
 
ADC_COMMON_REGISTER


	)

1774 
	#__HAL_ADC_COMMON_CCR_MULTI
 
ADC_COMMON_CCR_MULTI


	)

1775 
	#__HAL_ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1776 
	#__ADC_MULTIMODE_IS_ENABLED
 
ADC_MULTIMODE_IS_ENABLE


	)

1777 
	#__HAL_ADC_NONMULTIMODE_OR_MULTIMODEMASTER
 
ADC_NONMULTIMODE_OR_MULTIMODEMASTER


	)

1778 
	#__HAL_ADC_COMMON_ADC_OTHER
 
ADC_COMMON_ADC_OTHER


	)

1779 
	#__HAL_ADC_MULTI_SLAVE
 
ADC_MULTI_SLAVE


	)

1781 
	#__HAL_ADC_SQR1_L
 
ADC_SQR1_L_SHIFT


	)

1782 
	#__HAL_ADC_JSQR_JL
 
ADC_JSQR_JL_SHIFT


	)

1783 
	#__HAL_ADC_JSQR_RK_JL
 
ADC_JSQR_RK_JL


	)

1784 
	#__HAL_ADC_CR1_DISCONTINUOUS_NUM
 
ADC_CR1_DISCONTINUOUS_NUM


	)

1785 
	#__HAL_ADC_CR1_SCAN
 
ADC_CR1_SCAN_SET


	)

1786 
	#__HAL_ADC_CONVCYCLES_MAX_RANGE
 
ADC_CONVCYCLES_MAX_RANGE


	)

1787 
	#__HAL_ADC_CLOCK_PRESCALER_RANGE
 
ADC_CLOCK_PRESCALER_RANGE


	)

1788 
	#__HAL_ADC_GET_CLOCK_PRESCALER
 
ADC_GET_CLOCK_PRESCALER


	)

1790 
	#__HAL_ADC_SQR1
 
ADC_SQR1


	)

1791 
	#__HAL_ADC_SMPR1
 
ADC_SMPR1


	)

1792 
	#__HAL_ADC_SMPR2
 
ADC_SMPR2


	)

1793 
	#__HAL_ADC_SQR3_RK
 
ADC_SQR3_RK


	)

1794 
	#__HAL_ADC_SQR2_RK
 
ADC_SQR2_RK


	)

1795 
	#__HAL_ADC_SQR1_RK
 
ADC_SQR1_RK


	)

1796 
	#__HAL_ADC_CR2_CONTINUOUS
 
ADC_CR2_CONTINUOUS


	)

1797 
	#__HAL_ADC_CR1_DISCONTINUOUS
 
ADC_CR1_DISCONTINUOUS


	)

1798 
	#__HAL_ADC_CR1_SCANCONV
 
ADC_CR1_SCANCONV


	)

1799 
	#__HAL_ADC_CR2_EOCSñe˘i⁄
 
ADC_CR2_EOCSñe˘i⁄


	)

1800 
	#__HAL_ADC_CR2_DMAC⁄tReq
 
ADC_CR2_DMAC⁄tReq


	)

1801 
	#__HAL_ADC_JSQR
 
ADC_JSQR


	)

1803 
	#__HAL_ADC_CHSELR_CHANNEL
 
ADC_CHSELR_CHANNEL


	)

1804 
	#__HAL_ADC_CFGR1_REG_DISCCONTINUOUS
 
ADC_CFGR1_REG_DISCCONTINUOUS


	)

1805 
	#__HAL_ADC_CFGR1_AUTOOFF
 
ADC_CFGR1_AUTOOFF


	)

1806 
	#__HAL_ADC_CFGR1_AUTOWAIT
 
ADC_CFGR1_AUTOWAIT


	)

1807 
	#__HAL_ADC_CFGR1_CONTINUOUS
 
ADC_CFGR1_CONTINUOUS


	)

1808 
	#__HAL_ADC_CFGR1_OVERRUN
 
ADC_CFGR1_OVERRUN


	)

1809 
	#__HAL_ADC_CFGR1_SCANDIR
 
ADC_CFGR1_SCANDIR


	)

1810 
	#__HAL_ADC_CFGR1_DMACONTREQ
 
ADC_CFGR1_DMACONTREQ


	)

1819 
	#__HAL_DHR12R1_ALIGNEMENT
 
DAC_DHR12R1_ALIGNMENT


	)

1820 
	#__HAL_DHR12R2_ALIGNEMENT
 
DAC_DHR12R2_ALIGNMENT


	)

1821 
	#__HAL_DHR12RD_ALIGNEMENT
 
DAC_DHR12RD_ALIGNMENT


	)

1822 
	#IS_DAC_GENERATE_WAVE
 
IS_DAC_WAVE


	)

1831 
	#__HAL_FREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM1


	)

1832 
	#__HAL_UNFREEZE_TIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM1


	)

1833 
	#__HAL_FREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM2


	)

1834 
	#__HAL_UNFREEZE_TIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM2


	)

1835 
	#__HAL_FREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM3


	)

1836 
	#__HAL_UNFREEZE_TIM3_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM3


	)

1837 
	#__HAL_FREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM4


	)

1838 
	#__HAL_UNFREEZE_TIM4_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM4


	)

1839 
	#__HAL_FREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM5


	)

1840 
	#__HAL_UNFREEZE_TIM5_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM5


	)

1841 
	#__HAL_FREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM6


	)

1842 
	#__HAL_UNFREEZE_TIM6_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM6


	)

1843 
	#__HAL_FREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM7


	)

1844 
	#__HAL_UNFREEZE_TIM7_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM7


	)

1845 
	#__HAL_FREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM8


	)

1846 
	#__HAL_UNFREEZE_TIM8_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM8


	)

1848 
	#__HAL_FREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM9


	)

1849 
	#__HAL_UNFREEZE_TIM9_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM9


	)

1850 
	#__HAL_FREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM10


	)

1851 
	#__HAL_UNFREEZE_TIM10_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM10


	)

1852 
	#__HAL_FREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM11


	)

1853 
	#__HAL_UNFREEZE_TIM11_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM11


	)

1854 
	#__HAL_FREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM12


	)

1855 
	#__HAL_UNFREEZE_TIM12_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM12


	)

1856 
	#__HAL_FREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM13


	)

1857 
	#__HAL_UNFREEZE_TIM13_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM13


	)

1858 
	#__HAL_FREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM14


	)

1859 
	#__HAL_UNFREEZE_TIM14_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM14


	)

1860 
	#__HAL_FREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN2


	)

1861 
	#__HAL_UNFREEZE_CAN2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN2


	)

1864 
	#__HAL_FREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM15


	)

1865 
	#__HAL_UNFREEZE_TIM15_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM15


	)

1866 
	#__HAL_FREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM16


	)

1867 
	#__HAL_UNFREEZE_TIM16_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM16


	)

1868 
	#__HAL_FREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_FREEZE_TIM17


	)

1869 
	#__HAL_UNFREEZE_TIM17_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_TIM17


	)

1870 
	#__HAL_FREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_FREEZE_RTC


	)

1871 
	#__HAL_UNFREEZE_RTC_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_RTC


	)

1872 #i‡
deföed
(
STM32H7
)

1873 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG1


	)

1874 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UnFªeze_WWDG1


	)

1875 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG1


	)

1876 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UnFªeze_IWDG1


	)

1878 
	#__HAL_FREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_WWDG


	)

1879 
	#__HAL_UNFREEZE_WWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_WWDG


	)

1880 
	#__HAL_FREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_FREEZE_IWDG


	)

1881 
	#__HAL_UNFREEZE_IWDG_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_IWDG


	)

1883 
	#__HAL_FREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT


	)

1884 
	#__HAL_UNFREEZE_I2C1_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT


	)

1885 
	#__HAL_FREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT


	)

1886 
	#__HAL_UNFREEZE_I2C2_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT


	)

1887 
	#__HAL_FREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_FREEZE_I2C3_TIMEOUT


	)

1888 
	#__HAL_UNFREEZE_I2C3_TIMEOUT_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT


	)

1889 
	#__HAL_FREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_FREEZE_CAN1


	)

1890 
	#__HAL_UNFREEZE_CAN1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_CAN1


	)

1891 
	#__HAL_FREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM1


	)

1892 
	#__HAL_UNFREEZE_LPTIM1_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM1


	)

1893 
	#__HAL_FREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_FREEZE_LPTIM2


	)

1894 
	#__HAL_UNFREEZE_LPTIM2_DBGMCU
 
__HAL_DBGMCU_UNFREEZE_LPTIM2


	)

1903 #i‡
deföed
(
STM32F3
)

1904 
	#COMP_START
 
__HAL_COMP_ENABLE


	)

1905 
	#COMP_STOP
 
__HAL_COMP_DISABLE


	)

1906 
	#COMP_LOCK
 
__HAL_COMP_LOCK


	)

1908 #i‡
deföed
(
STM32F301x8
Ë|| deföed(
STM32F302x8
Ë|| deföed(
STM32F318xx
Ë|| deföed(
STM32F303x8
Ë|| deföed(
STM32F334x8
Ë|| deföed(
STM32F328xx
)

1909 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1910 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1911 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

1912 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1913 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1914 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

1915 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1916 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1917 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

1918 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1919 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1920 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

1921 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1922 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1923 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

1924 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1925 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1926 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

1927 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1928 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1929 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

1930 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1931 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1932 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

1934 #i‡
deföed
(
STM32F302xE
Ë|| deföed(
STM32F302xC
)

1935 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1936 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1937 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1938 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
())

	)

1939 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1940 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1941 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1942 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
())

	)

1943 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1944 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1945 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1946 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
())

	)

1947 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1948 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1949 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1950 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
())

	)

1951 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1952 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1953 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

1954 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
())

	)

1955 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

1956 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

1957 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

1958 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
())

	)

1959 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

1960 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

1961 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

1962 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
())

	)

1963 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

1964 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

1965 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

1966 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
())

	)

1968 #i‡
deföed
(
STM32F303xE
Ë|| deföed(
STM32F398xx
Ë|| deföed(
STM32F303xC
Ë|| deföed(
STM32F358xx
)

1969 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

1970 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
() : \

1971 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_RISING_EDGE
() : \

1972 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_RISING_EDGE
() : \

1973 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_RISING_EDGE
() : \

1974 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_RISING_EDGE
() : \

1975 
	`__HAL_COMP_COMP7_EXTI_ENABLE_RISING_EDGE
())

	)

1976 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

1977 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
() : \

1978 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_RISING_EDGE
() : \

1979 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_RISING_EDGE
() : \

1980 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_RISING_EDGE
() : \

1981 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_RISING_EDGE
() : \

1982 
	`__HAL_COMP_COMP7_EXTI_DISABLE_RISING_EDGE
())

	)

1983 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

1984 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
() : \

1985 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_FALLING_EDGE
() : \

1986 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_FALLING_EDGE
() : \

1987 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_FALLING_EDGE
() : \

1988 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_FALLING_EDGE
() : \

1989 
	`__HAL_COMP_COMP7_EXTI_ENABLE_FALLING_EDGE
())

	)

1990 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

1991 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
() : \

1992 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_FALLING_EDGE
() : \

1993 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_FALLING_EDGE
() : \

1994 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_FALLING_EDGE
() : \

1995 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_FALLING_EDGE
() : \

1996 
	`__HAL_COMP_COMP7_EXTI_DISABLE_FALLING_EDGE
())

	)

1997 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

1998 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
() : \

1999 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_ENABLE_IT
() : \

2000 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_ENABLE_IT
() : \

2001 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_ENABLE_IT
() : \

2002 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_ENABLE_IT
() : \

2003 
	`__HAL_COMP_COMP7_EXTI_ENABLE_IT
())

	)

2004 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2005 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
() : \

2006 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_DISABLE_IT
() : \

2007 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_DISABLE_IT
() : \

2008 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_DISABLE_IT
() : \

2009 ((
__EXTILINE__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_DISABLE_IT
() : \

2010 
	`__HAL_COMP_COMP7_EXTI_DISABLE_IT
())

	)

2011 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2012 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
() : \

2013 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_GET_FLAG
() : \

2014 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_GET_FLAG
() : \

2015 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_GET_FLAG
() : \

2016 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_GET_FLAG
() : \

2017 
	`__HAL_COMP_COMP7_EXTI_GET_FLAG
())

	)

2018 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2019 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP2
Ë? 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
() : \

2020 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP3
Ë? 
	`__HAL_COMP_COMP3_EXTI_CLEAR_FLAG
() : \

2021 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP4
Ë? 
	`__HAL_COMP_COMP4_EXTI_CLEAR_FLAG
() : \

2022 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP5
Ë? 
	`__HAL_COMP_COMP5_EXTI_CLEAR_FLAG
() : \

2023 ((
__FLAG__
Ë=
COMP_EXTI_LINE_COMP6
Ë? 
	`__HAL_COMP_COMP6_EXTI_CLEAR_FLAG
() : \

2024 
	`__HAL_COMP_COMP7_EXTI_CLEAR_FLAG
())

	)

2026 #i‡
deföed
(
STM32F373xC
Ë||deföed(
STM32F378xx
)

2027 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2028 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

2029 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2030 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

2031 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2032 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

2033 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2034 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

2035 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2036 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

2037 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2038 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

2039 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2040 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

2041 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2042 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

2045 
	#__HAL_COMP_EXTI_RISING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE
() : \

2046 
	`__HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE
())

	)

2047 
	#__HAL_COMP_EXTI_RISING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE
() : \

2048 
	`__HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE
())

	)

2049 
	#__HAL_COMP_EXTI_FALLING_IT_ENABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE
() : \

2050 
	`__HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE
())

	)

2051 
	#__HAL_COMP_EXTI_FALLING_IT_DISABLE
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE
() : \

2052 
	`__HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE
())

	)

2053 
	#__HAL_COMP_EXTI_ENABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_ENABLE_IT
() : \

2054 
	`__HAL_COMP_COMP2_EXTI_ENABLE_IT
())

	)

2055 
	#__HAL_COMP_EXTI_DISABLE_IT
(
__EXTILINE__
Ë(((__EXTILINE__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_DISABLE_IT
() : \

2056 
	`__HAL_COMP_COMP2_EXTI_DISABLE_IT
())

	)

2057 
	#__HAL_COMP_EXTI_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_GET_FLAG
() : \

2058 
	`__HAL_COMP_COMP2_EXTI_GET_FLAG
())

	)

2059 
	#__HAL_COMP_EXTI_CLEAR_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
COMP_EXTI_LINE_COMP1
Ë? 
	`__HAL_COMP_COMP1_EXTI_CLEAR_FLAG
() : \

2060 
	`__HAL_COMP_COMP2_EXTI_CLEAR_FLAG
())

	)

2063 
	#__HAL_COMP_GET_EXTI_LINE
 
COMP_GET_EXTI_LINE


	)

2065 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

2070 
	#__HAL_COMP_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
	`__HAL_COMP_IS_LOCKED
(__HANDLE__))

	)

2076 #i‡
deföed
(
STM32L0
Ë|| deföed(
STM32L4
)

2080 
	#HAL_COMP_Sèπ_IT
 
HAL_COMP_Sèπ


	)

2081 
	#HAL_COMP_St›_IT
 
HAL_COMP_St›


	)

2091 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WAVE_NONE
) || \

2092 ((
WAVE
Ë=
DAC_WAVE_NOISE
)|| \

2093 ((
WAVE
Ë=
DAC_WAVE_TRIANGLE
))

	)

2103 
	#IS_WRPAREA
 
IS_OB_WRPAREA


	)

2104 
	#IS_TYPEPROGRAM
 
IS_FLASH_TYPEPROGRAM


	)

2105 
	#IS_TYPEPROGRAMFLASH
 
IS_FLASH_TYPEPROGRAM


	)

2106 
	#IS_TYPEERASE
 
IS_FLASH_TYPEERASE


	)

2107 
	#IS_NBSECTORS
 
IS_FLASH_NBSECTORS


	)

2108 
	#IS_OB_WDG_SOURCE
 
IS_OB_IWDG_SOURCE


	)

2118 
	#__HAL_I2C_RESET_CR2
 
I2C_RESET_CR2


	)

2119 
	#__HAL_I2C_GENERATE_START
 
I2C_GENERATE_START


	)

2120 #i‡
deföed
(
STM32F1
)

2121 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQRANGE


	)

2123 
	#__HAL_I2C_FREQ_RANGE
 
I2C_FREQ_RANGE


	)

2125 
	#__HAL_I2C_RISE_TIME
 
I2C_RISE_TIME


	)

2126 
	#__HAL_I2C_SPEED_STANDARD
 
I2C_SPEED_STANDARD


	)

2127 
	#__HAL_I2C_SPEED_FAST
 
I2C_SPEED_FAST


	)

2128 
	#__HAL_I2C_SPEED
 
I2C_SPEED


	)

2129 
	#__HAL_I2C_7BIT_ADD_WRITE
 
I2C_7BIT_ADD_WRITE


	)

2130 
	#__HAL_I2C_7BIT_ADD_READ
 
I2C_7BIT_ADD_READ


	)

2131 
	#__HAL_I2C_10BIT_ADDRESS
 
I2C_10BIT_ADDRESS


	)

2132 
	#__HAL_I2C_10BIT_HEADER_WRITE
 
I2C_10BIT_HEADER_WRITE


	)

2133 
	#__HAL_I2C_10BIT_HEADER_READ
 
I2C_10BIT_HEADER_READ


	)

2134 
	#__HAL_I2C_MEM_ADD_MSB
 
I2C_MEM_ADD_MSB


	)

2135 
	#__HAL_I2C_MEM_ADD_LSB
 
I2C_MEM_ADD_LSB


	)

2136 
	#__HAL_I2C_FREQRANGE
 
I2C_FREQRANGE


	)

2145 
	#IS_I2S_INSTANCE
 
IS_I2S_ALL_INSTANCE


	)

2146 
	#IS_I2S_INSTANCE_EXT
 
IS_I2S_ALL_INSTANCE_EXT


	)

2148 #i‡
deföed
(
STM32H7
)

2149 
	#__HAL_I2S_CLEAR_FREFLAG
 
__HAL_I2S_CLEAR_TIFREFLAG


	)

2160 
	#__IRDA_DISABLE
 
__HAL_IRDA_DISABLE


	)

2161 
	#__IRDA_ENABLE
 
__HAL_IRDA_ENABLE


	)

2163 
	#__HAL_IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

2164 
	#__HAL_IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

2165 
	#__IRDA_GETCLOCKSOURCE
 
IRDA_GETCLOCKSOURCE


	)

2166 
	#__IRDA_MASK_COMPUTATION
 
IRDA_MASK_COMPUTATION


	)

2168 
	#IS_IRDA_ONEBIT_SAMPLE
 
IS_IRDA_ONE_BIT_SAMPLE


	)

2179 
	#__HAL_IWDG_ENABLE_WRITE_ACCESS
 
IWDG_ENABLE_WRITE_ACCESS


	)

2180 
	#__HAL_IWDG_DISABLE_WRITE_ACCESS
 
IWDG_DISABLE_WRITE_ACCESS


	)

2190 
	#__HAL_LPTIM_ENABLE_INTERRUPT
 
__HAL_LPTIM_ENABLE_IT


	)

2191 
	#__HAL_LPTIM_DISABLE_INTERRUPT
 
__HAL_LPTIM_DISABLE_IT


	)

2192 
	#__HAL_LPTIM_GET_ITSTATUS
 
__HAL_LPTIM_GET_IT_SOURCE


	)

2202 
	#__OPAMP_CSR_OPAXPD
 
OPAMP_CSR_OPAXPD


	)

2203 
	#__OPAMP_CSR_S3SELX
 
OPAMP_CSR_S3SELX


	)

2204 
	#__OPAMP_CSR_S4SELX
 
OPAMP_CSR_S4SELX


	)

2205 
	#__OPAMP_CSR_S5SELX
 
OPAMP_CSR_S5SELX


	)

2206 
	#__OPAMP_CSR_S6SELX
 
OPAMP_CSR_S6SELX


	)

2207 
	#__OPAMP_CSR_OPAXCAL_L
 
OPAMP_CSR_OPAXCAL_L


	)

2208 
	#__OPAMP_CSR_OPAXCAL_H
 
OPAMP_CSR_OPAXCAL_H


	)

2209 
	#__OPAMP_CSR_OPAXLPM
 
OPAMP_CSR_OPAXLPM


	)

2210 
	#__OPAMP_CSR_ALL_SWITCHES
 
OPAMP_CSR_ALL_SWITCHES


	)

2211 
	#__OPAMP_CSR_ANAWSELX
 
OPAMP_CSR_ANAWSELX


	)

2212 
	#__OPAMP_CSR_OPAXCALOUT
 
OPAMP_CSR_OPAXCALOUT


	)

2213 
	#__OPAMP_OFFSET_TRIM_BITSPOSITION
 
OPAMP_OFFSET_TRIM_BITSPOSITION


	)

2214 
	#__OPAMP_OFFSET_TRIM_SET
 
OPAMP_OFFSET_TRIM_SET


	)

2224 
	#__HAL_PVD_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

2225 
	#__HAL_PVD_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

2226 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

2227 
	#__HAL_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2228 
	#__HAL_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

2229 
	#__HAL_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2230 
	#__HAL_PVM_EVENT_DISABLE
 
__HAL_PWR_PVM_EVENT_DISABLE


	)

2231 
	#__HAL_PVM_EVENT_ENABLE
 
__HAL_PWR_PVM_EVENT_ENABLE


	)

2232 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_DISABLE


	)

2233 
	#__HAL_PVM_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_FALLINGTRIGGER_ENABLE


	)

2234 
	#__HAL_PVM_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_DISABLE


	)

2235 
	#__HAL_PVM_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVM_EXTI_RISINGTRIGGER_ENABLE


	)

2236 
	#__HAL_PWR_INTERNALWAKEUP_DISABLE
 
HAL_PWREx_DißbÀI¡î«lWakeUpLöe


	)

2237 
	#__HAL_PWR_INTERNALWAKEUP_ENABLE
 
HAL_PWREx_E«bÀI¡î«lWakeUpLöe


	)

2238 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_DISABLE
 
HAL_PWREx_DißbÀPuŒUpPuŒDownC⁄fig


	)

2239 
	#__HAL_PWR_PULL_UP_DOWN_CONFIG_ENABLE
 
HAL_PWREx_E«bÀPuŒUpPuŒDownC⁄fig


	)

2240 
	#__HAL_PWR_PVD_EXTI_CLEAR_EGDE_TRIGGER
(Ëdÿ{ 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(); } 0)

	)

2241 
	#__HAL_PWR_PVD_EXTI_EVENT_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_EVENT


	)

2242 
	#__HAL_PWR_PVD_EXTI_EVENT_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_EVENT


	)

2243 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE


	)

2244 
	#__HAL_PWR_PVD_EXTI_FALLINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2245 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_DISABLE
 
__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE


	)

2246 
	#__HAL_PWR_PVD_EXTI_RISINGTRIGGER_ENABLE
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2247 
	#__HAL_PWR_PVD_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE


	)

2248 
	#__HAL_PWR_PVD_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE


	)

2249 
	#__HAL_PWR_PVM_DISABLE
(Ëdÿ{ 
	`HAL_PWREx_DißbÀPVM1
();
	`HAL_PWREx_DißbÀPVM2
();
	`HAL_PWREx_DißbÀPVM3
();
	`HAL_PWREx_DißbÀPVM4
(); } 0)

	)

2250 
	#__HAL_PWR_PVM_ENABLE
(Ëdÿ{ 
	`HAL_PWREx_E«bÀPVM1
();
	`HAL_PWREx_E«bÀPVM2
();
	`HAL_PWREx_E«bÀPVM3
();
	`HAL_PWREx_E«bÀPVM4
(); } 0)

	)

2251 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_DISABLE
 
HAL_PWREx_DißbÀSRAM2C⁄ã¡Rëíti⁄


	)

2252 
	#__HAL_PWR_SRAM2CONTENT_PRESERVE_ENABLE
 
HAL_PWREx_E«bÀSRAM2C⁄ã¡Rëíti⁄


	)

2253 
	#__HAL_PWR_VDDIO2_DISABLE
 
HAL_PWREx_DißbÀVddIO2


	)

2254 
	#__HAL_PWR_VDDIO2_ENABLE
 
HAL_PWREx_E«bÀVddIO2


	)

2255 
	#__HAL_PWR_VDDIO2_EXTI_CLEAR_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_DISABLE_FALLING_EDGE


	)

2256 
	#__HAL_PWR_VDDIO2_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_PWR_VDDIO2_EXTI_ENABLE_FALLING_EDGE


	)

2257 
	#__HAL_PWR_VDDUSB_DISABLE
 
HAL_PWREx_DißbÀVddUSB


	)

2258 
	#__HAL_PWR_VDDUSB_ENABLE
 
HAL_PWREx_E«bÀVddUSB


	)

2260 #i‡
deföed
 (
STM32F4
)

2261 
	#__HAL_PVD_EXTI_ENABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
()

	)

2262 
	#__HAL_PVD_EXTI_DISABLE_IT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
()

	)

2263 
	#__HAL_PVD_EXTI_GET_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GET_FLAG
()

	)

2264 
	#__HAL_PVD_EXTI_CLEAR_FLAG
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
()

	)

2265 
	#__HAL_PVD_EXTI_GENERATE_SWIT
(
PWR_EXTI_LINE_PVD
Ë
	`__HAL_PWR_PVD_EXTI_GENERATE_SWIT
()

	)

2267 
	#__HAL_PVD_EXTI_CLEAR_FLAG
 
__HAL_PWR_PVD_EXTI_CLEAR_FLAG


	)

2268 
	#__HAL_PVD_EXTI_DISABLE_IT
 
__HAL_PWR_PVD_EXTI_DISABLE_IT


	)

2269 
	#__HAL_PVD_EXTI_ENABLE_IT
 
__HAL_PWR_PVD_EXTI_ENABLE_IT


	)

2270 
	#__HAL_PVD_EXTI_GENERATE_SWIT
 
__HAL_PWR_PVD_EXTI_GENERATE_SWIT


	)

2271 
	#__HAL_PVD_EXTI_GET_FLAG
 
__HAL_PWR_PVD_EXTI_GET_FLAG


	)

2282 
	#RCC_St›WakeUpClock_MSI
 
RCC_STOP_WAKEUPCLOCK_MSI


	)

2283 
	#RCC_St›WakeUpClock_HSI
 
RCC_STOP_WAKEUPCLOCK_HSI


	)

2285 
	#HAL_RCC_CCSCÆlback
 
HAL_RCC_CSSCÆlback


	)

2286 
	#HAL_RC48_E«bÀBuf„r_Cmd
(
cmd
Ë(((cmd)==
ENABLE
Ë? 
	`HAL_RCCEx_E«bÀHSI48_VREFINT
(Ë: 
	`HAL_RCCEx_DißbÀHSI48_VREFINT
())

	)

2288 
	#__ADC_CLK_DISABLE
 
__HAL_RCC_ADC_CLK_DISABLE


	)

2289 
	#__ADC_CLK_ENABLE
 
__HAL_RCC_ADC_CLK_ENABLE


	)

2290 
	#__ADC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC_CLK_SLEEP_DISABLE


	)

2291 
	#__ADC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC_CLK_SLEEP_ENABLE


	)

2292 
	#__ADC_FORCE_RESET
 
__HAL_RCC_ADC_FORCE_RESET


	)

2293 
	#__ADC_RELEASE_RESET
 
__HAL_RCC_ADC_RELEASE_RESET


	)

2294 
	#__ADC1_CLK_DISABLE
 
__HAL_RCC_ADC1_CLK_DISABLE


	)

2295 
	#__ADC1_CLK_ENABLE
 
__HAL_RCC_ADC1_CLK_ENABLE


	)

2296 
	#__ADC1_FORCE_RESET
 
__HAL_RCC_ADC1_FORCE_RESET


	)

2297 
	#__ADC1_RELEASE_RESET
 
__HAL_RCC_ADC1_RELEASE_RESET


	)

2298 
	#__ADC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_ENABLE


	)

2299 
	#__ADC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC1_CLK_SLEEP_DISABLE


	)

2300 
	#__ADC2_CLK_DISABLE
 
__HAL_RCC_ADC2_CLK_DISABLE


	)

2301 
	#__ADC2_CLK_ENABLE
 
__HAL_RCC_ADC2_CLK_ENABLE


	)

2302 
	#__ADC2_FORCE_RESET
 
__HAL_RCC_ADC2_FORCE_RESET


	)

2303 
	#__ADC2_RELEASE_RESET
 
__HAL_RCC_ADC2_RELEASE_RESET


	)

2304 
	#__ADC3_CLK_DISABLE
 
__HAL_RCC_ADC3_CLK_DISABLE


	)

2305 
	#__ADC3_CLK_ENABLE
 
__HAL_RCC_ADC3_CLK_ENABLE


	)

2306 
	#__ADC3_FORCE_RESET
 
__HAL_RCC_ADC3_FORCE_RESET


	)

2307 
	#__ADC3_RELEASE_RESET
 
__HAL_RCC_ADC3_RELEASE_RESET


	)

2308 
	#__AES_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

2309 
	#__AES_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

2310 
	#__AES_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

2311 
	#__AES_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

2312 
	#__AES_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

2313 
	#__AES_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

2314 
	#__CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_ENABLE


	)

2315 
	#__CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRYP_CLK_SLEEP_DISABLE


	)

2316 
	#__CRYP_CLK_ENABLE
 
__HAL_RCC_CRYP_CLK_ENABLE


	)

2317 
	#__CRYP_CLK_DISABLE
 
__HAL_RCC_CRYP_CLK_DISABLE


	)

2318 
	#__CRYP_FORCE_RESET
 
__HAL_RCC_CRYP_FORCE_RESET


	)

2319 
	#__CRYP_RELEASE_RESET
 
__HAL_RCC_CRYP_RELEASE_RESET


	)

2320 
	#__AFIO_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

2321 
	#__AFIO_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

2322 
	#__AFIO_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

2323 
	#__AFIO_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

2324 
	#__AHB_FORCE_RESET
 
__HAL_RCC_AHB_FORCE_RESET


	)

2325 
	#__AHB_RELEASE_RESET
 
__HAL_RCC_AHB_RELEASE_RESET


	)

2326 
	#__AHB1_FORCE_RESET
 
__HAL_RCC_AHB1_FORCE_RESET


	)

2327 
	#__AHB1_RELEASE_RESET
 
__HAL_RCC_AHB1_RELEASE_RESET


	)

2328 
	#__AHB2_FORCE_RESET
 
__HAL_RCC_AHB2_FORCE_RESET


	)

2329 
	#__AHB2_RELEASE_RESET
 
__HAL_RCC_AHB2_RELEASE_RESET


	)

2330 
	#__AHB3_FORCE_RESET
 
__HAL_RCC_AHB3_FORCE_RESET


	)

2331 
	#__AHB3_RELEASE_RESET
 
__HAL_RCC_AHB3_RELEASE_RESET


	)

2332 
	#__APB1_FORCE_RESET
 
__HAL_RCC_APB1_FORCE_RESET


	)

2333 
	#__APB1_RELEASE_RESET
 
__HAL_RCC_APB1_RELEASE_RESET


	)

2334 
	#__APB2_FORCE_RESET
 
__HAL_RCC_APB2_FORCE_RESET


	)

2335 
	#__APB2_RELEASE_RESET
 
__HAL_RCC_APB2_RELEASE_RESET


	)

2336 
	#__BKP_CLK_DISABLE
 
__HAL_RCC_BKP_CLK_DISABLE


	)

2337 
	#__BKP_CLK_ENABLE
 
__HAL_RCC_BKP_CLK_ENABLE


	)

2338 
	#__BKP_FORCE_RESET
 
__HAL_RCC_BKP_FORCE_RESET


	)

2339 
	#__BKP_RELEASE_RESET
 
__HAL_RCC_BKP_RELEASE_RESET


	)

2340 
	#__CAN1_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

2341 
	#__CAN1_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

2342 
	#__CAN1_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_DISABLE


	)

2343 
	#__CAN1_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN1_CLK_SLEEP_ENABLE


	)

2344 
	#__CAN1_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

2345 
	#__CAN1_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

2346 
	#__CAN_CLK_DISABLE
 
__HAL_RCC_CAN1_CLK_DISABLE


	)

2347 
	#__CAN_CLK_ENABLE
 
__HAL_RCC_CAN1_CLK_ENABLE


	)

2348 
	#__CAN_FORCE_RESET
 
__HAL_RCC_CAN1_FORCE_RESET


	)

2349 
	#__CAN_RELEASE_RESET
 
__HAL_RCC_CAN1_RELEASE_RESET


	)

2350 
	#__CAN2_CLK_DISABLE
 
__HAL_RCC_CAN2_CLK_DISABLE


	)

2351 
	#__CAN2_CLK_ENABLE
 
__HAL_RCC_CAN2_CLK_ENABLE


	)

2352 
	#__CAN2_FORCE_RESET
 
__HAL_RCC_CAN2_FORCE_RESET


	)

2353 
	#__CAN2_RELEASE_RESET
 
__HAL_RCC_CAN2_RELEASE_RESET


	)

2354 
	#__CEC_CLK_DISABLE
 
__HAL_RCC_CEC_CLK_DISABLE


	)

2355 
	#__CEC_CLK_ENABLE
 
__HAL_RCC_CEC_CLK_ENABLE


	)

2356 
	#__COMP_CLK_DISABLE
 
__HAL_RCC_COMP_CLK_DISABLE


	)

2357 
	#__COMP_CLK_ENABLE
 
__HAL_RCC_COMP_CLK_ENABLE


	)

2358 
	#__COMP_FORCE_RESET
 
__HAL_RCC_COMP_FORCE_RESET


	)

2359 
	#__COMP_RELEASE_RESET
 
__HAL_RCC_COMP_RELEASE_RESET


	)

2360 
	#__COMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_COMP_CLK_SLEEP_ENABLE


	)

2361 
	#__COMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_COMP_CLK_SLEEP_DISABLE


	)

2362 
	#__CEC_FORCE_RESET
 
__HAL_RCC_CEC_FORCE_RESET


	)

2363 
	#__CEC_RELEASE_RESET
 
__HAL_RCC_CEC_RELEASE_RESET


	)

2364 
	#__CRC_CLK_DISABLE
 
__HAL_RCC_CRC_CLK_DISABLE


	)

2365 
	#__CRC_CLK_ENABLE
 
__HAL_RCC_CRC_CLK_ENABLE


	)

2366 
	#__CRC_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRC_CLK_SLEEP_DISABLE


	)

2367 
	#__CRC_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRC_CLK_SLEEP_ENABLE


	)

2368 
	#__CRC_FORCE_RESET
 
__HAL_RCC_CRC_FORCE_RESET


	)

2369 
	#__CRC_RELEASE_RESET
 
__HAL_RCC_CRC_RELEASE_RESET


	)

2370 
	#__DAC_CLK_DISABLE
 
__HAL_RCC_DAC_CLK_DISABLE


	)

2371 
	#__DAC_CLK_ENABLE
 
__HAL_RCC_DAC_CLK_ENABLE


	)

2372 
	#__DAC_FORCE_RESET
 
__HAL_RCC_DAC_FORCE_RESET


	)

2373 
	#__DAC_RELEASE_RESET
 
__HAL_RCC_DAC_RELEASE_RESET


	)

2374 
	#__DAC1_CLK_DISABLE
 
__HAL_RCC_DAC1_CLK_DISABLE


	)

2375 
	#__DAC1_CLK_ENABLE
 
__HAL_RCC_DAC1_CLK_ENABLE


	)

2376 
	#__DAC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_DISABLE


	)

2377 
	#__DAC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC1_CLK_SLEEP_ENABLE


	)

2378 
	#__DAC1_FORCE_RESET
 
__HAL_RCC_DAC1_FORCE_RESET


	)

2379 
	#__DAC1_RELEASE_RESET
 
__HAL_RCC_DAC1_RELEASE_RESET


	)

2380 
	#__DBGMCU_CLK_ENABLE
 
__HAL_RCC_DBGMCU_CLK_ENABLE


	)

2381 
	#__DBGMCU_CLK_DISABLE
 
__HAL_RCC_DBGMCU_CLK_DISABLE


	)

2382 
	#__DBGMCU_FORCE_RESET
 
__HAL_RCC_DBGMCU_FORCE_RESET


	)

2383 
	#__DBGMCU_RELEASE_RESET
 
__HAL_RCC_DBGMCU_RELEASE_RESET


	)

2384 
	#__DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM_CLK_DISABLE


	)

2385 
	#__DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM_CLK_ENABLE


	)

2386 
	#__DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE


	)

2387 
	#__DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE


	)

2388 
	#__DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM_FORCE_RESET


	)

2389 
	#__DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM_RELEASE_RESET


	)

2390 
	#__DMA1_CLK_DISABLE
 
__HAL_RCC_DMA1_CLK_DISABLE


	)

2391 
	#__DMA1_CLK_ENABLE
 
__HAL_RCC_DMA1_CLK_ENABLE


	)

2392 
	#__DMA1_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_DISABLE


	)

2393 
	#__DMA1_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA1_CLK_SLEEP_ENABLE


	)

2394 
	#__DMA1_FORCE_RESET
 
__HAL_RCC_DMA1_FORCE_RESET


	)

2395 
	#__DMA1_RELEASE_RESET
 
__HAL_RCC_DMA1_RELEASE_RESET


	)

2396 
	#__DMA2_CLK_DISABLE
 
__HAL_RCC_DMA2_CLK_DISABLE


	)

2397 
	#__DMA2_CLK_ENABLE
 
__HAL_RCC_DMA2_CLK_ENABLE


	)

2398 
	#__DMA2_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_DISABLE


	)

2399 
	#__DMA2_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2_CLK_SLEEP_ENABLE


	)

2400 
	#__DMA2_FORCE_RESET
 
__HAL_RCC_DMA2_FORCE_RESET


	)

2401 
	#__DMA2_RELEASE_RESET
 
__HAL_RCC_DMA2_RELEASE_RESET


	)

2402 
	#__ETHMAC_CLK_DISABLE
 
__HAL_RCC_ETHMAC_CLK_DISABLE


	)

2403 
	#__ETHMAC_CLK_ENABLE
 
__HAL_RCC_ETHMAC_CLK_ENABLE


	)

2404 
	#__ETHMAC_FORCE_RESET
 
__HAL_RCC_ETHMAC_FORCE_RESET


	)

2405 
	#__ETHMAC_RELEASE_RESET
 
__HAL_RCC_ETHMAC_RELEASE_RESET


	)

2406 
	#__ETHMACRX_CLK_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_DISABLE


	)

2407 
	#__ETHMACRX_CLK_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_ENABLE


	)

2408 
	#__ETHMACTX_CLK_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_DISABLE


	)

2409 
	#__ETHMACTX_CLK_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_ENABLE


	)

2410 
	#__FIREWALL_CLK_DISABLE
 
__HAL_RCC_FIREWALL_CLK_DISABLE


	)

2411 
	#__FIREWALL_CLK_ENABLE
 
__HAL_RCC_FIREWALL_CLK_ENABLE


	)

2412 
	#__FLASH_CLK_DISABLE
 
__HAL_RCC_FLASH_CLK_DISABLE


	)

2413 
	#__FLASH_CLK_ENABLE
 
__HAL_RCC_FLASH_CLK_ENABLE


	)

2414 
	#__FLASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_DISABLE


	)

2415 
	#__FLASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLASH_CLK_SLEEP_ENABLE


	)

2416 
	#__FLASH_FORCE_RESET
 
__HAL_RCC_FLASH_FORCE_RESET


	)

2417 
	#__FLASH_RELEASE_RESET
 
__HAL_RCC_FLASH_RELEASE_RESET


	)

2418 
	#__FLITF_CLK_DISABLE
 
__HAL_RCC_FLITF_CLK_DISABLE


	)

2419 
	#__FLITF_CLK_ENABLE
 
__HAL_RCC_FLITF_CLK_ENABLE


	)

2420 
	#__FLITF_FORCE_RESET
 
__HAL_RCC_FLITF_FORCE_RESET


	)

2421 
	#__FLITF_RELEASE_RESET
 
__HAL_RCC_FLITF_RELEASE_RESET


	)

2422 
	#__FLITF_CLK_SLEEP_ENABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_ENABLE


	)

2423 
	#__FLITF_CLK_SLEEP_DISABLE
 
__HAL_RCC_FLITF_CLK_SLEEP_DISABLE


	)

2424 
	#__FMC_CLK_DISABLE
 
__HAL_RCC_FMC_CLK_DISABLE


	)

2425 
	#__FMC_CLK_ENABLE
 
__HAL_RCC_FMC_CLK_ENABLE


	)

2426 
	#__FMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FMC_CLK_SLEEP_DISABLE


	)

2427 
	#__FMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FMC_CLK_SLEEP_ENABLE


	)

2428 
	#__FMC_FORCE_RESET
 
__HAL_RCC_FMC_FORCE_RESET


	)

2429 
	#__FMC_RELEASE_RESET
 
__HAL_RCC_FMC_RELEASE_RESET


	)

2430 
	#__FSMC_CLK_DISABLE
 
__HAL_RCC_FSMC_CLK_DISABLE


	)

2431 
	#__FSMC_CLK_ENABLE
 
__HAL_RCC_FSMC_CLK_ENABLE


	)

2432 
	#__GPIOA_CLK_DISABLE
 
__HAL_RCC_GPIOA_CLK_DISABLE


	)

2433 
	#__GPIOA_CLK_ENABLE
 
__HAL_RCC_GPIOA_CLK_ENABLE


	)

2434 
	#__GPIOA_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_DISABLE


	)

2435 
	#__GPIOA_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOA_CLK_SLEEP_ENABLE


	)

2436 
	#__GPIOA_FORCE_RESET
 
__HAL_RCC_GPIOA_FORCE_RESET


	)

2437 
	#__GPIOA_RELEASE_RESET
 
__HAL_RCC_GPIOA_RELEASE_RESET


	)

2438 
	#__GPIOB_CLK_DISABLE
 
__HAL_RCC_GPIOB_CLK_DISABLE


	)

2439 
	#__GPIOB_CLK_ENABLE
 
__HAL_RCC_GPIOB_CLK_ENABLE


	)

2440 
	#__GPIOB_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_DISABLE


	)

2441 
	#__GPIOB_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOB_CLK_SLEEP_ENABLE


	)

2442 
	#__GPIOB_FORCE_RESET
 
__HAL_RCC_GPIOB_FORCE_RESET


	)

2443 
	#__GPIOB_RELEASE_RESET
 
__HAL_RCC_GPIOB_RELEASE_RESET


	)

2444 
	#__GPIOC_CLK_DISABLE
 
__HAL_RCC_GPIOC_CLK_DISABLE


	)

2445 
	#__GPIOC_CLK_ENABLE
 
__HAL_RCC_GPIOC_CLK_ENABLE


	)

2446 
	#__GPIOC_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_DISABLE


	)

2447 
	#__GPIOC_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOC_CLK_SLEEP_ENABLE


	)

2448 
	#__GPIOC_FORCE_RESET
 
__HAL_RCC_GPIOC_FORCE_RESET


	)

2449 
	#__GPIOC_RELEASE_RESET
 
__HAL_RCC_GPIOC_RELEASE_RESET


	)

2450 
	#__GPIOD_CLK_DISABLE
 
__HAL_RCC_GPIOD_CLK_DISABLE


	)

2451 
	#__GPIOD_CLK_ENABLE
 
__HAL_RCC_GPIOD_CLK_ENABLE


	)

2452 
	#__GPIOD_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_DISABLE


	)

2453 
	#__GPIOD_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOD_CLK_SLEEP_ENABLE


	)

2454 
	#__GPIOD_FORCE_RESET
 
__HAL_RCC_GPIOD_FORCE_RESET


	)

2455 
	#__GPIOD_RELEASE_RESET
 
__HAL_RCC_GPIOD_RELEASE_RESET


	)

2456 
	#__GPIOE_CLK_DISABLE
 
__HAL_RCC_GPIOE_CLK_DISABLE


	)

2457 
	#__GPIOE_CLK_ENABLE
 
__HAL_RCC_GPIOE_CLK_ENABLE


	)

2458 
	#__GPIOE_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_DISABLE


	)

2459 
	#__GPIOE_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOE_CLK_SLEEP_ENABLE


	)

2460 
	#__GPIOE_FORCE_RESET
 
__HAL_RCC_GPIOE_FORCE_RESET


	)

2461 
	#__GPIOE_RELEASE_RESET
 
__HAL_RCC_GPIOE_RELEASE_RESET


	)

2462 
	#__GPIOF_CLK_DISABLE
 
__HAL_RCC_GPIOF_CLK_DISABLE


	)

2463 
	#__GPIOF_CLK_ENABLE
 
__HAL_RCC_GPIOF_CLK_ENABLE


	)

2464 
	#__GPIOF_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_DISABLE


	)

2465 
	#__GPIOF_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOF_CLK_SLEEP_ENABLE


	)

2466 
	#__GPIOF_FORCE_RESET
 
__HAL_RCC_GPIOF_FORCE_RESET


	)

2467 
	#__GPIOF_RELEASE_RESET
 
__HAL_RCC_GPIOF_RELEASE_RESET


	)

2468 
	#__GPIOG_CLK_DISABLE
 
__HAL_RCC_GPIOG_CLK_DISABLE


	)

2469 
	#__GPIOG_CLK_ENABLE
 
__HAL_RCC_GPIOG_CLK_ENABLE


	)

2470 
	#__GPIOG_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_DISABLE


	)

2471 
	#__GPIOG_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOG_CLK_SLEEP_ENABLE


	)

2472 
	#__GPIOG_FORCE_RESET
 
__HAL_RCC_GPIOG_FORCE_RESET


	)

2473 
	#__GPIOG_RELEASE_RESET
 
__HAL_RCC_GPIOG_RELEASE_RESET


	)

2474 
	#__GPIOH_CLK_DISABLE
 
__HAL_RCC_GPIOH_CLK_DISABLE


	)

2475 
	#__GPIOH_CLK_ENABLE
 
__HAL_RCC_GPIOH_CLK_ENABLE


	)

2476 
	#__GPIOH_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_DISABLE


	)

2477 
	#__GPIOH_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOH_CLK_SLEEP_ENABLE


	)

2478 
	#__GPIOH_FORCE_RESET
 
__HAL_RCC_GPIOH_FORCE_RESET


	)

2479 
	#__GPIOH_RELEASE_RESET
 
__HAL_RCC_GPIOH_RELEASE_RESET


	)

2480 
	#__I2C1_CLK_DISABLE
 
__HAL_RCC_I2C1_CLK_DISABLE


	)

2481 
	#__I2C1_CLK_ENABLE
 
__HAL_RCC_I2C1_CLK_ENABLE


	)

2482 
	#__I2C1_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_DISABLE


	)

2483 
	#__I2C1_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C1_CLK_SLEEP_ENABLE


	)

2484 
	#__I2C1_FORCE_RESET
 
__HAL_RCC_I2C1_FORCE_RESET


	)

2485 
	#__I2C1_RELEASE_RESET
 
__HAL_RCC_I2C1_RELEASE_RESET


	)

2486 
	#__I2C2_CLK_DISABLE
 
__HAL_RCC_I2C2_CLK_DISABLE


	)

2487 
	#__I2C2_CLK_ENABLE
 
__HAL_RCC_I2C2_CLK_ENABLE


	)

2488 
	#__I2C2_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_DISABLE


	)

2489 
	#__I2C2_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C2_CLK_SLEEP_ENABLE


	)

2490 
	#__I2C2_FORCE_RESET
 
__HAL_RCC_I2C2_FORCE_RESET


	)

2491 
	#__I2C2_RELEASE_RESET
 
__HAL_RCC_I2C2_RELEASE_RESET


	)

2492 
	#__I2C3_CLK_DISABLE
 
__HAL_RCC_I2C3_CLK_DISABLE


	)

2493 
	#__I2C3_CLK_ENABLE
 
__HAL_RCC_I2C3_CLK_ENABLE


	)

2494 
	#__I2C3_CLK_SLEEP_DISABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_DISABLE


	)

2495 
	#__I2C3_CLK_SLEEP_ENABLE
 
__HAL_RCC_I2C3_CLK_SLEEP_ENABLE


	)

2496 
	#__I2C3_FORCE_RESET
 
__HAL_RCC_I2C3_FORCE_RESET


	)

2497 
	#__I2C3_RELEASE_RESET
 
__HAL_RCC_I2C3_RELEASE_RESET


	)

2498 
	#__LCD_CLK_DISABLE
 
__HAL_RCC_LCD_CLK_DISABLE


	)

2499 
	#__LCD_CLK_ENABLE
 
__HAL_RCC_LCD_CLK_ENABLE


	)

2500 
	#__LCD_CLK_SLEEP_DISABLE
 
__HAL_RCC_LCD_CLK_SLEEP_DISABLE


	)

2501 
	#__LCD_CLK_SLEEP_ENABLE
 
__HAL_RCC_LCD_CLK_SLEEP_ENABLE


	)

2502 
	#__LCD_FORCE_RESET
 
__HAL_RCC_LCD_FORCE_RESET


	)

2503 
	#__LCD_RELEASE_RESET
 
__HAL_RCC_LCD_RELEASE_RESET


	)

2504 
	#__LPTIM1_CLK_DISABLE
 
__HAL_RCC_LPTIM1_CLK_DISABLE


	)

2505 
	#__LPTIM1_CLK_ENABLE
 
__HAL_RCC_LPTIM1_CLK_ENABLE


	)

2506 
	#__LPTIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE


	)

2507 
	#__LPTIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE


	)

2508 
	#__LPTIM1_FORCE_RESET
 
__HAL_RCC_LPTIM1_FORCE_RESET


	)

2509 
	#__LPTIM1_RELEASE_RESET
 
__HAL_RCC_LPTIM1_RELEASE_RESET


	)

2510 
	#__LPTIM2_CLK_DISABLE
 
__HAL_RCC_LPTIM2_CLK_DISABLE


	)

2511 
	#__LPTIM2_CLK_ENABLE
 
__HAL_RCC_LPTIM2_CLK_ENABLE


	)

2512 
	#__LPTIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_DISABLE


	)

2513 
	#__LPTIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPTIM2_CLK_SLEEP_ENABLE


	)

2514 
	#__LPTIM2_FORCE_RESET
 
__HAL_RCC_LPTIM2_FORCE_RESET


	)

2515 
	#__LPTIM2_RELEASE_RESET
 
__HAL_RCC_LPTIM2_RELEASE_RESET


	)

2516 
	#__LPUART1_CLK_DISABLE
 
__HAL_RCC_LPUART1_CLK_DISABLE


	)

2517 
	#__LPUART1_CLK_ENABLE
 
__HAL_RCC_LPUART1_CLK_ENABLE


	)

2518 
	#__LPUART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_DISABLE


	)

2519 
	#__LPUART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_LPUART1_CLK_SLEEP_ENABLE


	)

2520 
	#__LPUART1_FORCE_RESET
 
__HAL_RCC_LPUART1_FORCE_RESET


	)

2521 
	#__LPUART1_RELEASE_RESET
 
__HAL_RCC_LPUART1_RELEASE_RESET


	)

2522 
	#__OPAMP_CLK_DISABLE
 
__HAL_RCC_OPAMP_CLK_DISABLE


	)

2523 
	#__OPAMP_CLK_ENABLE
 
__HAL_RCC_OPAMP_CLK_ENABLE


	)

2524 
	#__OPAMP_CLK_SLEEP_DISABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_DISABLE


	)

2525 
	#__OPAMP_CLK_SLEEP_ENABLE
 
__HAL_RCC_OPAMP_CLK_SLEEP_ENABLE


	)

2526 
	#__OPAMP_FORCE_RESET
 
__HAL_RCC_OPAMP_FORCE_RESET


	)

2527 
	#__OPAMP_RELEASE_RESET
 
__HAL_RCC_OPAMP_RELEASE_RESET


	)

2528 
	#__OTGFS_CLK_DISABLE
 
__HAL_RCC_OTGFS_CLK_DISABLE


	)

2529 
	#__OTGFS_CLK_ENABLE
 
__HAL_RCC_OTGFS_CLK_ENABLE


	)

2530 
	#__OTGFS_CLK_SLEEP_DISABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_DISABLE


	)

2531 
	#__OTGFS_CLK_SLEEP_ENABLE
 
__HAL_RCC_OTGFS_CLK_SLEEP_ENABLE


	)

2532 
	#__OTGFS_FORCE_RESET
 
__HAL_RCC_OTGFS_FORCE_RESET


	)

2533 
	#__OTGFS_RELEASE_RESET
 
__HAL_RCC_OTGFS_RELEASE_RESET


	)

2534 
	#__PWR_CLK_DISABLE
 
__HAL_RCC_PWR_CLK_DISABLE


	)

2535 
	#__PWR_CLK_ENABLE
 
__HAL_RCC_PWR_CLK_ENABLE


	)

2536 
	#__PWR_CLK_SLEEP_DISABLE
 
__HAL_RCC_PWR_CLK_SLEEP_DISABLE


	)

2537 
	#__PWR_CLK_SLEEP_ENABLE
 
__HAL_RCC_PWR_CLK_SLEEP_ENABLE


	)

2538 
	#__PWR_FORCE_RESET
 
__HAL_RCC_PWR_FORCE_RESET


	)

2539 
	#__PWR_RELEASE_RESET
 
__HAL_RCC_PWR_RELEASE_RESET


	)

2540 
	#__QSPI_CLK_DISABLE
 
__HAL_RCC_QSPI_CLK_DISABLE


	)

2541 
	#__QSPI_CLK_ENABLE
 
__HAL_RCC_QSPI_CLK_ENABLE


	)

2542 
	#__QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_DISABLE


	)

2543 
	#__QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QSPI_CLK_SLEEP_ENABLE


	)

2544 
	#__QSPI_FORCE_RESET
 
__HAL_RCC_QSPI_FORCE_RESET


	)

2545 
	#__QSPI_RELEASE_RESET
 
__HAL_RCC_QSPI_RELEASE_RESET


	)

2547 #i‡
deföed
(
STM32WB
)

2548 
	#__HAL_RCC_QSPI_CLK_DISABLE
 
__HAL_RCC_QUADSPI_CLK_DISABLE


	)

2549 
	#__HAL_RCC_QSPI_CLK_ENABLE
 
__HAL_RCC_QUADSPI_CLK_ENABLE


	)

2550 
	#__HAL_RCC_QSPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_QUADSPI_CLK_SLEEP_DISABLE


	)

2551 
	#__HAL_RCC_QSPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_QUADSPI_CLK_SLEEP_ENABLE


	)

2552 
	#__HAL_RCC_QSPI_FORCE_RESET
 
__HAL_RCC_QUADSPI_FORCE_RESET


	)

2553 
	#__HAL_RCC_QSPI_RELEASE_RESET
 
__HAL_RCC_QUADSPI_RELEASE_RESET


	)

2554 
	#__HAL_RCC_QSPI_IS_CLK_ENABLED
 
__HAL_RCC_QUADSPI_IS_CLK_ENABLED


	)

2555 
	#__HAL_RCC_QSPI_IS_CLK_DISABLED
 
__HAL_RCC_QUADSPI_IS_CLK_DISABLED


	)

2556 
	#__HAL_RCC_QSPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_QUADSPI_IS_CLK_SLEEP_ENABLED


	)

2557 
	#__HAL_RCC_QSPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_QUADSPI_IS_CLK_SLEEP_DISABLED


	)

2558 
	#QSPI_IRQH™dÀr
 
QUADSPI_IRQH™dÀr


	)

2561 
	#__RNG_CLK_DISABLE
 
__HAL_RCC_RNG_CLK_DISABLE


	)

2562 
	#__RNG_CLK_ENABLE
 
__HAL_RCC_RNG_CLK_ENABLE


	)

2563 
	#__RNG_CLK_SLEEP_DISABLE
 
__HAL_RCC_RNG_CLK_SLEEP_DISABLE


	)

2564 
	#__RNG_CLK_SLEEP_ENABLE
 
__HAL_RCC_RNG_CLK_SLEEP_ENABLE


	)

2565 
	#__RNG_FORCE_RESET
 
__HAL_RCC_RNG_FORCE_RESET


	)

2566 
	#__RNG_RELEASE_RESET
 
__HAL_RCC_RNG_RELEASE_RESET


	)

2567 
	#__SAI1_CLK_DISABLE
 
__HAL_RCC_SAI1_CLK_DISABLE


	)

2568 
	#__SAI1_CLK_ENABLE
 
__HAL_RCC_SAI1_CLK_ENABLE


	)

2569 
	#__SAI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_DISABLE


	)

2570 
	#__SAI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI1_CLK_SLEEP_ENABLE


	)

2571 
	#__SAI1_FORCE_RESET
 
__HAL_RCC_SAI1_FORCE_RESET


	)

2572 
	#__SAI1_RELEASE_RESET
 
__HAL_RCC_SAI1_RELEASE_RESET


	)

2573 
	#__SAI2_CLK_DISABLE
 
__HAL_RCC_SAI2_CLK_DISABLE


	)

2574 
	#__SAI2_CLK_ENABLE
 
__HAL_RCC_SAI2_CLK_ENABLE


	)

2575 
	#__SAI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_DISABLE


	)

2576 
	#__SAI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SAI2_CLK_SLEEP_ENABLE


	)

2577 
	#__SAI2_FORCE_RESET
 
__HAL_RCC_SAI2_FORCE_RESET


	)

2578 
	#__SAI2_RELEASE_RESET
 
__HAL_RCC_SAI2_RELEASE_RESET


	)

2579 
	#__SDIO_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

2580 
	#__SDIO_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

2581 
	#__SDMMC_CLK_DISABLE
 
__HAL_RCC_SDMMC_CLK_DISABLE


	)

2582 
	#__SDMMC_CLK_ENABLE
 
__HAL_RCC_SDMMC_CLK_ENABLE


	)

2583 
	#__SDMMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_DISABLE


	)

2584 
	#__SDMMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC_CLK_SLEEP_ENABLE


	)

2585 
	#__SDMMC_FORCE_RESET
 
__HAL_RCC_SDMMC_FORCE_RESET


	)

2586 
	#__SDMMC_RELEASE_RESET
 
__HAL_RCC_SDMMC_RELEASE_RESET


	)

2587 
	#__SPI1_CLK_DISABLE
 
__HAL_RCC_SPI1_CLK_DISABLE


	)

2588 
	#__SPI1_CLK_ENABLE
 
__HAL_RCC_SPI1_CLK_ENABLE


	)

2589 
	#__SPI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_DISABLE


	)

2590 
	#__SPI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI1_CLK_SLEEP_ENABLE


	)

2591 
	#__SPI1_FORCE_RESET
 
__HAL_RCC_SPI1_FORCE_RESET


	)

2592 
	#__SPI1_RELEASE_RESET
 
__HAL_RCC_SPI1_RELEASE_RESET


	)

2593 
	#__SPI2_CLK_DISABLE
 
__HAL_RCC_SPI2_CLK_DISABLE


	)

2594 
	#__SPI2_CLK_ENABLE
 
__HAL_RCC_SPI2_CLK_ENABLE


	)

2595 
	#__SPI2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_DISABLE


	)

2596 
	#__SPI2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI2_CLK_SLEEP_ENABLE


	)

2597 
	#__SPI2_FORCE_RESET
 
__HAL_RCC_SPI2_FORCE_RESET


	)

2598 
	#__SPI2_RELEASE_RESET
 
__HAL_RCC_SPI2_RELEASE_RESET


	)

2599 
	#__SPI3_CLK_DISABLE
 
__HAL_RCC_SPI3_CLK_DISABLE


	)

2600 
	#__SPI3_CLK_ENABLE
 
__HAL_RCC_SPI3_CLK_ENABLE


	)

2601 
	#__SPI3_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_DISABLE


	)

2602 
	#__SPI3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI3_CLK_SLEEP_ENABLE


	)

2603 
	#__SPI3_FORCE_RESET
 
__HAL_RCC_SPI3_FORCE_RESET


	)

2604 
	#__SPI3_RELEASE_RESET
 
__HAL_RCC_SPI3_RELEASE_RESET


	)

2605 
	#__SRAM_CLK_DISABLE
 
__HAL_RCC_SRAM_CLK_DISABLE


	)

2606 
	#__SRAM_CLK_ENABLE
 
__HAL_RCC_SRAM_CLK_ENABLE


	)

2607 
	#__SRAM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_DISABLE


	)

2608 
	#__SRAM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM1_CLK_SLEEP_ENABLE


	)

2609 
	#__SRAM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_DISABLE


	)

2610 
	#__SRAM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM2_CLK_SLEEP_ENABLE


	)

2611 
	#__SWPMI1_CLK_DISABLE
 
__HAL_RCC_SWPMI1_CLK_DISABLE


	)

2612 
	#__SWPMI1_CLK_ENABLE
 
__HAL_RCC_SWPMI1_CLK_ENABLE


	)

2613 
	#__SWPMI1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_DISABLE


	)

2614 
	#__SWPMI1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SWPMI1_CLK_SLEEP_ENABLE


	)

2615 
	#__SWPMI1_FORCE_RESET
 
__HAL_RCC_SWPMI1_FORCE_RESET


	)

2616 
	#__SWPMI1_RELEASE_RESET
 
__HAL_RCC_SWPMI1_RELEASE_RESET


	)

2617 
	#__SYSCFG_CLK_DISABLE
 
__HAL_RCC_SYSCFG_CLK_DISABLE


	)

2618 
	#__SYSCFG_CLK_ENABLE
 
__HAL_RCC_SYSCFG_CLK_ENABLE


	)

2619 
	#__SYSCFG_CLK_SLEEP_DISABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE


	)

2620 
	#__SYSCFG_CLK_SLEEP_ENABLE
 
__HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE


	)

2621 
	#__SYSCFG_FORCE_RESET
 
__HAL_RCC_SYSCFG_FORCE_RESET


	)

2622 
	#__SYSCFG_RELEASE_RESET
 
__HAL_RCC_SYSCFG_RELEASE_RESET


	)

2623 
	#__TIM1_CLK_DISABLE
 
__HAL_RCC_TIM1_CLK_DISABLE


	)

2624 
	#__TIM1_CLK_ENABLE
 
__HAL_RCC_TIM1_CLK_ENABLE


	)

2625 
	#__TIM1_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_DISABLE


	)

2626 
	#__TIM1_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM1_CLK_SLEEP_ENABLE


	)

2627 
	#__TIM1_FORCE_RESET
 
__HAL_RCC_TIM1_FORCE_RESET


	)

2628 
	#__TIM1_RELEASE_RESET
 
__HAL_RCC_TIM1_RELEASE_RESET


	)

2629 
	#__TIM10_CLK_DISABLE
 
__HAL_RCC_TIM10_CLK_DISABLE


	)

2630 
	#__TIM10_CLK_ENABLE
 
__HAL_RCC_TIM10_CLK_ENABLE


	)

2631 
	#__TIM10_FORCE_RESET
 
__HAL_RCC_TIM10_FORCE_RESET


	)

2632 
	#__TIM10_RELEASE_RESET
 
__HAL_RCC_TIM10_RELEASE_RESET


	)

2633 
	#__TIM11_CLK_DISABLE
 
__HAL_RCC_TIM11_CLK_DISABLE


	)

2634 
	#__TIM11_CLK_ENABLE
 
__HAL_RCC_TIM11_CLK_ENABLE


	)

2635 
	#__TIM11_FORCE_RESET
 
__HAL_RCC_TIM11_FORCE_RESET


	)

2636 
	#__TIM11_RELEASE_RESET
 
__HAL_RCC_TIM11_RELEASE_RESET


	)

2637 
	#__TIM12_CLK_DISABLE
 
__HAL_RCC_TIM12_CLK_DISABLE


	)

2638 
	#__TIM12_CLK_ENABLE
 
__HAL_RCC_TIM12_CLK_ENABLE


	)

2639 
	#__TIM12_FORCE_RESET
 
__HAL_RCC_TIM12_FORCE_RESET


	)

2640 
	#__TIM12_RELEASE_RESET
 
__HAL_RCC_TIM12_RELEASE_RESET


	)

2641 
	#__TIM13_CLK_DISABLE
 
__HAL_RCC_TIM13_CLK_DISABLE


	)

2642 
	#__TIM13_CLK_ENABLE
 
__HAL_RCC_TIM13_CLK_ENABLE


	)

2643 
	#__TIM13_FORCE_RESET
 
__HAL_RCC_TIM13_FORCE_RESET


	)

2644 
	#__TIM13_RELEASE_RESET
 
__HAL_RCC_TIM13_RELEASE_RESET


	)

2645 
	#__TIM14_CLK_DISABLE
 
__HAL_RCC_TIM14_CLK_DISABLE


	)

2646 
	#__TIM14_CLK_ENABLE
 
__HAL_RCC_TIM14_CLK_ENABLE


	)

2647 
	#__TIM14_FORCE_RESET
 
__HAL_RCC_TIM14_FORCE_RESET


	)

2648 
	#__TIM14_RELEASE_RESET
 
__HAL_RCC_TIM14_RELEASE_RESET


	)

2649 
	#__TIM15_CLK_DISABLE
 
__HAL_RCC_TIM15_CLK_DISABLE


	)

2650 
	#__TIM15_CLK_ENABLE
 
__HAL_RCC_TIM15_CLK_ENABLE


	)

2651 
	#__TIM15_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_DISABLE


	)

2652 
	#__TIM15_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM15_CLK_SLEEP_ENABLE


	)

2653 
	#__TIM15_FORCE_RESET
 
__HAL_RCC_TIM15_FORCE_RESET


	)

2654 
	#__TIM15_RELEASE_RESET
 
__HAL_RCC_TIM15_RELEASE_RESET


	)

2655 
	#__TIM16_CLK_DISABLE
 
__HAL_RCC_TIM16_CLK_DISABLE


	)

2656 
	#__TIM16_CLK_ENABLE
 
__HAL_RCC_TIM16_CLK_ENABLE


	)

2657 
	#__TIM16_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_DISABLE


	)

2658 
	#__TIM16_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM16_CLK_SLEEP_ENABLE


	)

2659 
	#__TIM16_FORCE_RESET
 
__HAL_RCC_TIM16_FORCE_RESET


	)

2660 
	#__TIM16_RELEASE_RESET
 
__HAL_RCC_TIM16_RELEASE_RESET


	)

2661 
	#__TIM17_CLK_DISABLE
 
__HAL_RCC_TIM17_CLK_DISABLE


	)

2662 
	#__TIM17_CLK_ENABLE
 
__HAL_RCC_TIM17_CLK_ENABLE


	)

2663 
	#__TIM17_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_DISABLE


	)

2664 
	#__TIM17_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM17_CLK_SLEEP_ENABLE


	)

2665 
	#__TIM17_FORCE_RESET
 
__HAL_RCC_TIM17_FORCE_RESET


	)

2666 
	#__TIM17_RELEASE_RESET
 
__HAL_RCC_TIM17_RELEASE_RESET


	)

2667 
	#__TIM2_CLK_DISABLE
 
__HAL_RCC_TIM2_CLK_DISABLE


	)

2668 
	#__TIM2_CLK_ENABLE
 
__HAL_RCC_TIM2_CLK_ENABLE


	)

2669 
	#__TIM2_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_DISABLE


	)

2670 
	#__TIM2_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM2_CLK_SLEEP_ENABLE


	)

2671 
	#__TIM2_FORCE_RESET
 
__HAL_RCC_TIM2_FORCE_RESET


	)

2672 
	#__TIM2_RELEASE_RESET
 
__HAL_RCC_TIM2_RELEASE_RESET


	)

2673 
	#__TIM3_CLK_DISABLE
 
__HAL_RCC_TIM3_CLK_DISABLE


	)

2674 
	#__TIM3_CLK_ENABLE
 
__HAL_RCC_TIM3_CLK_ENABLE


	)

2675 
	#__TIM3_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_DISABLE


	)

2676 
	#__TIM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM3_CLK_SLEEP_ENABLE


	)

2677 
	#__TIM3_FORCE_RESET
 
__HAL_RCC_TIM3_FORCE_RESET


	)

2678 
	#__TIM3_RELEASE_RESET
 
__HAL_RCC_TIM3_RELEASE_RESET


	)

2679 
	#__TIM4_CLK_DISABLE
 
__HAL_RCC_TIM4_CLK_DISABLE


	)

2680 
	#__TIM4_CLK_ENABLE
 
__HAL_RCC_TIM4_CLK_ENABLE


	)

2681 
	#__TIM4_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_DISABLE


	)

2682 
	#__TIM4_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM4_CLK_SLEEP_ENABLE


	)

2683 
	#__TIM4_FORCE_RESET
 
__HAL_RCC_TIM4_FORCE_RESET


	)

2684 
	#__TIM4_RELEASE_RESET
 
__HAL_RCC_TIM4_RELEASE_RESET


	)

2685 
	#__TIM5_CLK_DISABLE
 
__HAL_RCC_TIM5_CLK_DISABLE


	)

2686 
	#__TIM5_CLK_ENABLE
 
__HAL_RCC_TIM5_CLK_ENABLE


	)

2687 
	#__TIM5_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_DISABLE


	)

2688 
	#__TIM5_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM5_CLK_SLEEP_ENABLE


	)

2689 
	#__TIM5_FORCE_RESET
 
__HAL_RCC_TIM5_FORCE_RESET


	)

2690 
	#__TIM5_RELEASE_RESET
 
__HAL_RCC_TIM5_RELEASE_RESET


	)

2691 
	#__TIM6_CLK_DISABLE
 
__HAL_RCC_TIM6_CLK_DISABLE


	)

2692 
	#__TIM6_CLK_ENABLE
 
__HAL_RCC_TIM6_CLK_ENABLE


	)

2693 
	#__TIM6_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_DISABLE


	)

2694 
	#__TIM6_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM6_CLK_SLEEP_ENABLE


	)

2695 
	#__TIM6_FORCE_RESET
 
__HAL_RCC_TIM6_FORCE_RESET


	)

2696 
	#__TIM6_RELEASE_RESET
 
__HAL_RCC_TIM6_RELEASE_RESET


	)

2697 
	#__TIM7_CLK_DISABLE
 
__HAL_RCC_TIM7_CLK_DISABLE


	)

2698 
	#__TIM7_CLK_ENABLE
 
__HAL_RCC_TIM7_CLK_ENABLE


	)

2699 
	#__TIM7_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_DISABLE


	)

2700 
	#__TIM7_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM7_CLK_SLEEP_ENABLE


	)

2701 
	#__TIM7_FORCE_RESET
 
__HAL_RCC_TIM7_FORCE_RESET


	)

2702 
	#__TIM7_RELEASE_RESET
 
__HAL_RCC_TIM7_RELEASE_RESET


	)

2703 
	#__TIM8_CLK_DISABLE
 
__HAL_RCC_TIM8_CLK_DISABLE


	)

2704 
	#__TIM8_CLK_ENABLE
 
__HAL_RCC_TIM8_CLK_ENABLE


	)

2705 
	#__TIM8_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_DISABLE


	)

2706 
	#__TIM8_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM8_CLK_SLEEP_ENABLE


	)

2707 
	#__TIM8_FORCE_RESET
 
__HAL_RCC_TIM8_FORCE_RESET


	)

2708 
	#__TIM8_RELEASE_RESET
 
__HAL_RCC_TIM8_RELEASE_RESET


	)

2709 
	#__TIM9_CLK_DISABLE
 
__HAL_RCC_TIM9_CLK_DISABLE


	)

2710 
	#__TIM9_CLK_ENABLE
 
__HAL_RCC_TIM9_CLK_ENABLE


	)

2711 
	#__TIM9_FORCE_RESET
 
__HAL_RCC_TIM9_FORCE_RESET


	)

2712 
	#__TIM9_RELEASE_RESET
 
__HAL_RCC_TIM9_RELEASE_RESET


	)

2713 
	#__TSC_CLK_DISABLE
 
__HAL_RCC_TSC_CLK_DISABLE


	)

2714 
	#__TSC_CLK_ENABLE
 
__HAL_RCC_TSC_CLK_ENABLE


	)

2715 
	#__TSC_CLK_SLEEP_DISABLE
 
__HAL_RCC_TSC_CLK_SLEEP_DISABLE


	)

2716 
	#__TSC_CLK_SLEEP_ENABLE
 
__HAL_RCC_TSC_CLK_SLEEP_ENABLE


	)

2717 
	#__TSC_FORCE_RESET
 
__HAL_RCC_TSC_FORCE_RESET


	)

2718 
	#__TSC_RELEASE_RESET
 
__HAL_RCC_TSC_RELEASE_RESET


	)

2719 
	#__UART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

2720 
	#__UART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

2721 
	#__UART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

2722 
	#__UART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

2723 
	#__UART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

2724 
	#__UART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

2725 
	#__UART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

2726 
	#__UART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

2727 
	#__UART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

2728 
	#__UART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

2729 
	#__UART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

2730 
	#__UART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

2731 
	#__USART1_CLK_DISABLE
 
__HAL_RCC_USART1_CLK_DISABLE


	)

2732 
	#__USART1_CLK_ENABLE
 
__HAL_RCC_USART1_CLK_ENABLE


	)

2733 
	#__USART1_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART1_CLK_SLEEP_DISABLE


	)

2734 
	#__USART1_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART1_CLK_SLEEP_ENABLE


	)

2735 
	#__USART1_FORCE_RESET
 
__HAL_RCC_USART1_FORCE_RESET


	)

2736 
	#__USART1_RELEASE_RESET
 
__HAL_RCC_USART1_RELEASE_RESET


	)

2737 
	#__USART2_CLK_DISABLE
 
__HAL_RCC_USART2_CLK_DISABLE


	)

2738 
	#__USART2_CLK_ENABLE
 
__HAL_RCC_USART2_CLK_ENABLE


	)

2739 
	#__USART2_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART2_CLK_SLEEP_DISABLE


	)

2740 
	#__USART2_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART2_CLK_SLEEP_ENABLE


	)

2741 
	#__USART2_FORCE_RESET
 
__HAL_RCC_USART2_FORCE_RESET


	)

2742 
	#__USART2_RELEASE_RESET
 
__HAL_RCC_USART2_RELEASE_RESET


	)

2743 
	#__USART3_CLK_DISABLE
 
__HAL_RCC_USART3_CLK_DISABLE


	)

2744 
	#__USART3_CLK_ENABLE
 
__HAL_RCC_USART3_CLK_ENABLE


	)

2745 
	#__USART3_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART3_CLK_SLEEP_DISABLE


	)

2746 
	#__USART3_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART3_CLK_SLEEP_ENABLE


	)

2747 
	#__USART3_FORCE_RESET
 
__HAL_RCC_USART3_FORCE_RESET


	)

2748 
	#__USART3_RELEASE_RESET
 
__HAL_RCC_USART3_RELEASE_RESET


	)

2749 
	#__USART4_CLK_DISABLE
 
__HAL_RCC_UART4_CLK_DISABLE


	)

2750 
	#__USART4_CLK_ENABLE
 
__HAL_RCC_UART4_CLK_ENABLE


	)

2751 
	#__USART4_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART4_CLK_SLEEP_ENABLE


	)

2752 
	#__USART4_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART4_CLK_SLEEP_DISABLE


	)

2753 
	#__USART4_FORCE_RESET
 
__HAL_RCC_UART4_FORCE_RESET


	)

2754 
	#__USART4_RELEASE_RESET
 
__HAL_RCC_UART4_RELEASE_RESET


	)

2755 
	#__USART5_CLK_DISABLE
 
__HAL_RCC_UART5_CLK_DISABLE


	)

2756 
	#__USART5_CLK_ENABLE
 
__HAL_RCC_UART5_CLK_ENABLE


	)

2757 
	#__USART5_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART5_CLK_SLEEP_ENABLE


	)

2758 
	#__USART5_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART5_CLK_SLEEP_DISABLE


	)

2759 
	#__USART5_FORCE_RESET
 
__HAL_RCC_UART5_FORCE_RESET


	)

2760 
	#__USART5_RELEASE_RESET
 
__HAL_RCC_UART5_RELEASE_RESET


	)

2761 
	#__USART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2762 
	#__USART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2763 
	#__USART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2764 
	#__USART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2765 
	#__USART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2766 
	#__USART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2767 
	#__USART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2768 
	#__USART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2769 
	#__USB_CLK_DISABLE
 
__HAL_RCC_USB_CLK_DISABLE


	)

2770 
	#__USB_CLK_ENABLE
 
__HAL_RCC_USB_CLK_ENABLE


	)

2771 
	#__USB_FORCE_RESET
 
__HAL_RCC_USB_FORCE_RESET


	)

2772 
	#__USB_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_CLK_SLEEP_ENABLE


	)

2773 
	#__USB_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_CLK_SLEEP_DISABLE


	)

2774 
	#__USB_OTG_FS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_DISABLE


	)

2775 
	#__USB_OTG_FS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_ENABLE


	)

2776 
	#__USB_RELEASE_RESET
 
__HAL_RCC_USB_RELEASE_RESET


	)

2778 #i‡
deföed
(
STM32H7
)

2779 
	#__HAL_RCC_WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG1_CLK_DISABLE


	)

2780 
	#__HAL_RCC_WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG1_CLK_ENABLE


	)

2781 
	#__HAL_RCC_WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG1_CLK_SLEEP_DISABLE


	)

2782 
	#__HAL_RCC_WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG1_CLK_SLEEP_ENABLE


	)

2784 
	#__HAL_RCC_WWDG_FORCE_RESET
 (()0UË

	)

2785 
	#__HAL_RCC_WWDG_RELEASE_RESET
 (()0UË

	)

2788 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG1_IS_CLK_ENABLED


	)

2789 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG1_IS_CLK_DISABLED


	)

2792 
	#__WWDG_CLK_DISABLE
 
__HAL_RCC_WWDG_CLK_DISABLE


	)

2793 
	#__WWDG_CLK_ENABLE
 
__HAL_RCC_WWDG_CLK_ENABLE


	)

2794 
	#__WWDG_CLK_SLEEP_DISABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_DISABLE


	)

2795 
	#__WWDG_CLK_SLEEP_ENABLE
 
__HAL_RCC_WWDG_CLK_SLEEP_ENABLE


	)

2796 
	#__WWDG_FORCE_RESET
 
__HAL_RCC_WWDG_FORCE_RESET


	)

2797 
	#__WWDG_RELEASE_RESET
 
__HAL_RCC_WWDG_RELEASE_RESET


	)

2799 
	#__TIM21_CLK_ENABLE
 
__HAL_RCC_TIM21_CLK_ENABLE


	)

2800 
	#__TIM21_CLK_DISABLE
 
__HAL_RCC_TIM21_CLK_DISABLE


	)

2801 
	#__TIM21_FORCE_RESET
 
__HAL_RCC_TIM21_FORCE_RESET


	)

2802 
	#__TIM21_RELEASE_RESET
 
__HAL_RCC_TIM21_RELEASE_RESET


	)

2803 
	#__TIM21_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_ENABLE


	)

2804 
	#__TIM21_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM21_CLK_SLEEP_DISABLE


	)

2805 
	#__TIM22_CLK_ENABLE
 
__HAL_RCC_TIM22_CLK_ENABLE


	)

2806 
	#__TIM22_CLK_DISABLE
 
__HAL_RCC_TIM22_CLK_DISABLE


	)

2807 
	#__TIM22_FORCE_RESET
 
__HAL_RCC_TIM22_FORCE_RESET


	)

2808 
	#__TIM22_RELEASE_RESET
 
__HAL_RCC_TIM22_RELEASE_RESET


	)

2809 
	#__TIM22_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_ENABLE


	)

2810 
	#__TIM22_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM22_CLK_SLEEP_DISABLE


	)

2811 
	#__CRS_CLK_DISABLE
 
__HAL_RCC_CRS_CLK_DISABLE


	)

2812 
	#__CRS_CLK_ENABLE
 
__HAL_RCC_CRS_CLK_ENABLE


	)

2813 
	#__CRS_CLK_SLEEP_DISABLE
 
__HAL_RCC_CRS_CLK_SLEEP_DISABLE


	)

2814 
	#__CRS_CLK_SLEEP_ENABLE
 
__HAL_RCC_CRS_CLK_SLEEP_ENABLE


	)

2815 
	#__CRS_FORCE_RESET
 
__HAL_RCC_CRS_FORCE_RESET


	)

2816 
	#__CRS_RELEASE_RESET
 
__HAL_RCC_CRS_RELEASE_RESET


	)

2817 
	#__RCC_BACKUPRESET_FORCE
 
__HAL_RCC_BACKUPRESET_FORCE


	)

2818 
	#__RCC_BACKUPRESET_RELEASE
 
__HAL_RCC_BACKUPRESET_RELEASE


	)

2820 
	#__USB_OTG_FS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2821 
	#__USB_OTG_FS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2822 
	#__USB_OTG_FS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE


	)

2823 
	#__USB_OTG_FS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE


	)

2824 
	#__USB_OTG_HS_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_DISABLE


	)

2825 
	#__USB_OTG_HS_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_ENABLE


	)

2826 
	#__USB_OTG_HS_ULPI_CLK_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE


	)

2827 
	#__USB_OTG_HS_ULPI_CLK_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE


	)

2828 
	#__TIM9_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_ENABLE


	)

2829 
	#__TIM9_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM9_CLK_SLEEP_DISABLE


	)

2830 
	#__TIM10_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_ENABLE


	)

2831 
	#__TIM10_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM10_CLK_SLEEP_DISABLE


	)

2832 
	#__TIM11_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_ENABLE


	)

2833 
	#__TIM11_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM11_CLK_SLEEP_DISABLE


	)

2834 
	#__ETHMACPTP_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_ENABLE


	)

2835 
	#__ETHMACPTP_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_SLEEP_DISABLE


	)

2836 
	#__ETHMACPTP_CLK_ENABLE
 
__HAL_RCC_ETHMACPTP_CLK_ENABLE


	)

2837 
	#__ETHMACPTP_CLK_DISABLE
 
__HAL_RCC_ETHMACPTP_CLK_DISABLE


	)

2838 
	#__HASH_CLK_ENABLE
 
__HAL_RCC_HASH_CLK_ENABLE


	)

2839 
	#__HASH_FORCE_RESET
 
__HAL_RCC_HASH_FORCE_RESET


	)

2840 
	#__HASH_RELEASE_RESET
 
__HAL_RCC_HASH_RELEASE_RESET


	)

2841 
	#__HASH_CLK_SLEEP_ENABLE
 
__HAL_RCC_HASH_CLK_SLEEP_ENABLE


	)

2842 
	#__HASH_CLK_SLEEP_DISABLE
 
__HAL_RCC_HASH_CLK_SLEEP_DISABLE


	)

2843 
	#__HASH_CLK_DISABLE
 
__HAL_RCC_HASH_CLK_DISABLE


	)

2844 
	#__SPI5_CLK_ENABLE
 
__HAL_RCC_SPI5_CLK_ENABLE


	)

2845 
	#__SPI5_CLK_DISABLE
 
__HAL_RCC_SPI5_CLK_DISABLE


	)

2846 
	#__SPI5_FORCE_RESET
 
__HAL_RCC_SPI5_FORCE_RESET


	)

2847 
	#__SPI5_RELEASE_RESET
 
__HAL_RCC_SPI5_RELEASE_RESET


	)

2848 
	#__SPI5_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_ENABLE


	)

2849 
	#__SPI5_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI5_CLK_SLEEP_DISABLE


	)

2850 
	#__SPI6_CLK_ENABLE
 
__HAL_RCC_SPI6_CLK_ENABLE


	)

2851 
	#__SPI6_CLK_DISABLE
 
__HAL_RCC_SPI6_CLK_DISABLE


	)

2852 
	#__SPI6_FORCE_RESET
 
__HAL_RCC_SPI6_FORCE_RESET


	)

2853 
	#__SPI6_RELEASE_RESET
 
__HAL_RCC_SPI6_RELEASE_RESET


	)

2854 
	#__SPI6_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_ENABLE


	)

2855 
	#__SPI6_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI6_CLK_SLEEP_DISABLE


	)

2856 
	#__LTDC_CLK_ENABLE
 
__HAL_RCC_LTDC_CLK_ENABLE


	)

2857 
	#__LTDC_CLK_DISABLE
 
__HAL_RCC_LTDC_CLK_DISABLE


	)

2858 
	#__LTDC_FORCE_RESET
 
__HAL_RCC_LTDC_FORCE_RESET


	)

2859 
	#__LTDC_RELEASE_RESET
 
__HAL_RCC_LTDC_RELEASE_RESET


	)

2860 
	#__LTDC_CLK_SLEEP_ENABLE
 
__HAL_RCC_LTDC_CLK_SLEEP_ENABLE


	)

2861 
	#__ETHMAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_ENABLE


	)

2862 
	#__ETHMAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMAC_CLK_SLEEP_DISABLE


	)

2863 
	#__ETHMACTX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_ENABLE


	)

2864 
	#__ETHMACTX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACTX_CLK_SLEEP_DISABLE


	)

2865 
	#__ETHMACRX_CLK_SLEEP_ENABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_ENABLE


	)

2866 
	#__ETHMACRX_CLK_SLEEP_DISABLE
 
__HAL_RCC_ETHMACRX_CLK_SLEEP_DISABLE


	)

2867 
	#__TIM12_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_ENABLE


	)

2868 
	#__TIM12_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM12_CLK_SLEEP_DISABLE


	)

2869 
	#__TIM13_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_ENABLE


	)

2870 
	#__TIM13_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM13_CLK_SLEEP_DISABLE


	)

2871 
	#__TIM14_CLK_SLEEP_ENABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_ENABLE


	)

2872 
	#__TIM14_CLK_SLEEP_DISABLE
 
__HAL_RCC_TIM14_CLK_SLEEP_DISABLE


	)

2873 
	#__BKPSRAM_CLK_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_ENABLE


	)

2874 
	#__BKPSRAM_CLK_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_DISABLE


	)

2875 
	#__BKPSRAM_CLK_SLEEP_ENABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_ENABLE


	)

2876 
	#__BKPSRAM_CLK_SLEEP_DISABLE
 
__HAL_RCC_BKPSRAM_CLK_SLEEP_DISABLE


	)

2877 
	#__CCMDATARAMEN_CLK_ENABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_ENABLE


	)

2878 
	#__CCMDATARAMEN_CLK_DISABLE
 
__HAL_RCC_CCMDATARAMEN_CLK_DISABLE


	)

2879 
	#__USART6_CLK_ENABLE
 
__HAL_RCC_USART6_CLK_ENABLE


	)

2880 
	#__USART6_CLK_DISABLE
 
__HAL_RCC_USART6_CLK_DISABLE


	)

2881 
	#__USART6_FORCE_RESET
 
__HAL_RCC_USART6_FORCE_RESET


	)

2882 
	#__USART6_RELEASE_RESET
 
__HAL_RCC_USART6_RELEASE_RESET


	)

2883 
	#__USART6_CLK_SLEEP_ENABLE
 
__HAL_RCC_USART6_CLK_SLEEP_ENABLE


	)

2884 
	#__USART6_CLK_SLEEP_DISABLE
 
__HAL_RCC_USART6_CLK_SLEEP_DISABLE


	)

2885 
	#__SPI4_CLK_ENABLE
 
__HAL_RCC_SPI4_CLK_ENABLE


	)

2886 
	#__SPI4_CLK_DISABLE
 
__HAL_RCC_SPI4_CLK_DISABLE


	)

2887 
	#__SPI4_FORCE_RESET
 
__HAL_RCC_SPI4_FORCE_RESET


	)

2888 
	#__SPI4_RELEASE_RESET
 
__HAL_RCC_SPI4_RELEASE_RESET


	)

2889 
	#__SPI4_CLK_SLEEP_ENABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_ENABLE


	)

2890 
	#__SPI4_CLK_SLEEP_DISABLE
 
__HAL_RCC_SPI4_CLK_SLEEP_DISABLE


	)

2891 
	#__GPIOI_CLK_ENABLE
 
__HAL_RCC_GPIOI_CLK_ENABLE


	)

2892 
	#__GPIOI_CLK_DISABLE
 
__HAL_RCC_GPIOI_CLK_DISABLE


	)

2893 
	#__GPIOI_FORCE_RESET
 
__HAL_RCC_GPIOI_FORCE_RESET


	)

2894 
	#__GPIOI_RELEASE_RESET
 
__HAL_RCC_GPIOI_RELEASE_RESET


	)

2895 
	#__GPIOI_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_ENABLE


	)

2896 
	#__GPIOI_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOI_CLK_SLEEP_DISABLE


	)

2897 
	#__GPIOJ_CLK_ENABLE
 
__HAL_RCC_GPIOJ_CLK_ENABLE


	)

2898 
	#__GPIOJ_CLK_DISABLE
 
__HAL_RCC_GPIOJ_CLK_DISABLE


	)

2899 
	#__GPIOJ_FORCE_RESET
 
__HAL_RCC_GPIOJ_FORCE_RESET


	)

2900 
	#__GPIOJ_RELEASE_RESET
 
__HAL_RCC_GPIOJ_RELEASE_RESET


	)

2901 
	#__GPIOJ_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_ENABLE


	)

2902 
	#__GPIOJ_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOJ_CLK_SLEEP_DISABLE


	)

2903 
	#__GPIOK_CLK_ENABLE
 
__HAL_RCC_GPIOK_CLK_ENABLE


	)

2904 
	#__GPIOK_CLK_DISABLE
 
__HAL_RCC_GPIOK_CLK_DISABLE


	)

2905 
	#__GPIOK_RELEASE_RESET
 
__HAL_RCC_GPIOK_RELEASE_RESET


	)

2906 
	#__GPIOK_CLK_SLEEP_ENABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_ENABLE


	)

2907 
	#__GPIOK_CLK_SLEEP_DISABLE
 
__HAL_RCC_GPIOK_CLK_SLEEP_DISABLE


	)

2908 
	#__ETH_CLK_ENABLE
 
__HAL_RCC_ETH_CLK_ENABLE


	)

2909 
	#__ETH_CLK_DISABLE
 
__HAL_RCC_ETH_CLK_DISABLE


	)

2910 
	#__DCMI_CLK_ENABLE
 
__HAL_RCC_DCMI_CLK_ENABLE


	)

2911 
	#__DCMI_CLK_DISABLE
 
__HAL_RCC_DCMI_CLK_DISABLE


	)

2912 
	#__DCMI_FORCE_RESET
 
__HAL_RCC_DCMI_FORCE_RESET


	)

2913 
	#__DCMI_RELEASE_RESET
 
__HAL_RCC_DCMI_RELEASE_RESET


	)

2914 
	#__DCMI_CLK_SLEEP_ENABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_ENABLE


	)

2915 
	#__DCMI_CLK_SLEEP_DISABLE
 
__HAL_RCC_DCMI_CLK_SLEEP_DISABLE


	)

2916 
	#__UART7_CLK_ENABLE
 
__HAL_RCC_UART7_CLK_ENABLE


	)

2917 
	#__UART7_CLK_DISABLE
 
__HAL_RCC_UART7_CLK_DISABLE


	)

2918 
	#__UART7_RELEASE_RESET
 
__HAL_RCC_UART7_RELEASE_RESET


	)

2919 
	#__UART7_FORCE_RESET
 
__HAL_RCC_UART7_FORCE_RESET


	)

2920 
	#__UART7_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART7_CLK_SLEEP_ENABLE


	)

2921 
	#__UART7_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART7_CLK_SLEEP_DISABLE


	)

2922 
	#__UART8_CLK_ENABLE
 
__HAL_RCC_UART8_CLK_ENABLE


	)

2923 
	#__UART8_CLK_DISABLE
 
__HAL_RCC_UART8_CLK_DISABLE


	)

2924 
	#__UART8_FORCE_RESET
 
__HAL_RCC_UART8_FORCE_RESET


	)

2925 
	#__UART8_RELEASE_RESET
 
__HAL_RCC_UART8_RELEASE_RESET


	)

2926 
	#__UART8_CLK_SLEEP_ENABLE
 
__HAL_RCC_UART8_CLK_SLEEP_ENABLE


	)

2927 
	#__UART8_CLK_SLEEP_DISABLE
 
__HAL_RCC_UART8_CLK_SLEEP_DISABLE


	)

2928 
	#__OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2929 
	#__OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2930 
	#__OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2931 
	#__OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2932 
	#__OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2933 
	#__OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2934 
	#__HAL_RCC_OTGHS_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE


	)

2935 
	#__HAL_RCC_OTGHS_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE


	)

2936 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_ENABLED


	)

2937 
	#__HAL_RCC_OTGHS_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_IS_CLK_SLEEP_DISABLED


	)

2938 
	#__HAL_RCC_OTGHS_FORCE_RESET
 
__HAL_RCC_USB_OTG_HS_FORCE_RESET


	)

2939 
	#__HAL_RCC_OTGHS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_HS_RELEASE_RESET


	)

2940 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_ENABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE


	)

2941 
	#__HAL_RCC_OTGHSULPI_CLK_SLEEP_DISABLE
 
__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE


	)

2942 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_ENABLED


	)

2943 
	#__HAL_RCC_OTGHSULPI_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_USB_OTG_HS_ULPI_IS_CLK_SLEEP_DISABLED


	)

2944 
	#__SRAM3_CLK_SLEEP_ENABLE
 
__HAL_RCC_SRAM3_CLK_SLEEP_ENABLE


	)

2945 
	#__CAN2_CLK_SLEEP_ENABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_ENABLE


	)

2946 
	#__CAN2_CLK_SLEEP_DISABLE
 
__HAL_RCC_CAN2_CLK_SLEEP_DISABLE


	)

2947 
	#__DAC_CLK_SLEEP_ENABLE
 
__HAL_RCC_DAC_CLK_SLEEP_ENABLE


	)

2948 
	#__DAC_CLK_SLEEP_DISABLE
 
__HAL_RCC_DAC_CLK_SLEEP_DISABLE


	)

2949 
	#__ADC2_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_ENABLE


	)

2950 
	#__ADC2_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC2_CLK_SLEEP_DISABLE


	)

2951 
	#__ADC3_CLK_SLEEP_ENABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_ENABLE


	)

2952 
	#__ADC3_CLK_SLEEP_DISABLE
 
__HAL_RCC_ADC3_CLK_SLEEP_DISABLE


	)

2953 
	#__FSMC_FORCE_RESET
 
__HAL_RCC_FSMC_FORCE_RESET


	)

2954 
	#__FSMC_RELEASE_RESET
 
__HAL_RCC_FSMC_RELEASE_RESET


	)

2955 
	#__FSMC_CLK_SLEEP_ENABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_ENABLE


	)

2956 
	#__FSMC_CLK_SLEEP_DISABLE
 
__HAL_RCC_FSMC_CLK_SLEEP_DISABLE


	)

2957 
	#__SDIO_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

2958 
	#__SDIO_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

2959 
	#__SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

2960 
	#__SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

2961 
	#__DMA2D_CLK_ENABLE
 
__HAL_RCC_DMA2D_CLK_ENABLE


	)

2962 
	#__DMA2D_CLK_DISABLE
 
__HAL_RCC_DMA2D_CLK_DISABLE


	)

2963 
	#__DMA2D_FORCE_RESET
 
__HAL_RCC_DMA2D_FORCE_RESET


	)

2964 
	#__DMA2D_RELEASE_RESET
 
__HAL_RCC_DMA2D_RELEASE_RESET


	)

2965 
	#__DMA2D_CLK_SLEEP_ENABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_ENABLE


	)

2966 
	#__DMA2D_CLK_SLEEP_DISABLE
 
__HAL_RCC_DMA2D_CLK_SLEEP_DISABLE


	)

2969 
	#__HAL_RCC_OTGFS_FORCE_RESET
 
__HAL_RCC_USB_OTG_FS_FORCE_RESET


	)

2970 
	#__HAL_RCC_OTGFS_RELEASE_RESET
 
__HAL_RCC_USB_OTG_FS_RELEASE_RESET


	)

2972 
	#__ADC12_CLK_ENABLE
 
__HAL_RCC_ADC12_CLK_ENABLE


	)

2973 
	#__ADC12_CLK_DISABLE
 
__HAL_RCC_ADC12_CLK_DISABLE


	)

2974 
	#__ADC34_CLK_ENABLE
 
__HAL_RCC_ADC34_CLK_ENABLE


	)

2975 
	#__ADC34_CLK_DISABLE
 
__HAL_RCC_ADC34_CLK_DISABLE


	)

2976 
	#__DAC2_CLK_ENABLE
 
__HAL_RCC_DAC2_CLK_ENABLE


	)

2977 
	#__DAC2_CLK_DISABLE
 
__HAL_RCC_DAC2_CLK_DISABLE


	)

2978 
	#__TIM18_CLK_ENABLE
 
__HAL_RCC_TIM18_CLK_ENABLE


	)

2979 
	#__TIM18_CLK_DISABLE
 
__HAL_RCC_TIM18_CLK_DISABLE


	)

2980 
	#__TIM19_CLK_ENABLE
 
__HAL_RCC_TIM19_CLK_ENABLE


	)

2981 
	#__TIM19_CLK_DISABLE
 
__HAL_RCC_TIM19_CLK_DISABLE


	)

2982 
	#__TIM20_CLK_ENABLE
 
__HAL_RCC_TIM20_CLK_ENABLE


	)

2983 
	#__TIM20_CLK_DISABLE
 
__HAL_RCC_TIM20_CLK_DISABLE


	)

2984 
	#__HRTIM1_CLK_ENABLE
 
__HAL_RCC_HRTIM1_CLK_ENABLE


	)

2985 
	#__HRTIM1_CLK_DISABLE
 
__HAL_RCC_HRTIM1_CLK_DISABLE


	)

2986 
	#__SDADC1_CLK_ENABLE
 
__HAL_RCC_SDADC1_CLK_ENABLE


	)

2987 
	#__SDADC2_CLK_ENABLE
 
__HAL_RCC_SDADC2_CLK_ENABLE


	)

2988 
	#__SDADC3_CLK_ENABLE
 
__HAL_RCC_SDADC3_CLK_ENABLE


	)

2989 
	#__SDADC1_CLK_DISABLE
 
__HAL_RCC_SDADC1_CLK_DISABLE


	)

2990 
	#__SDADC2_CLK_DISABLE
 
__HAL_RCC_SDADC2_CLK_DISABLE


	)

2991 
	#__SDADC3_CLK_DISABLE
 
__HAL_RCC_SDADC3_CLK_DISABLE


	)

2993 
	#__ADC12_FORCE_RESET
 
__HAL_RCC_ADC12_FORCE_RESET


	)

2994 
	#__ADC12_RELEASE_RESET
 
__HAL_RCC_ADC12_RELEASE_RESET


	)

2995 
	#__ADC34_FORCE_RESET
 
__HAL_RCC_ADC34_FORCE_RESET


	)

2996 
	#__ADC34_RELEASE_RESET
 
__HAL_RCC_ADC34_RELEASE_RESET


	)

2997 
	#__DAC2_FORCE_RESET
 
__HAL_RCC_DAC2_FORCE_RESET


	)

2998 
	#__DAC2_RELEASE_RESET
 
__HAL_RCC_DAC2_RELEASE_RESET


	)

2999 
	#__TIM18_FORCE_RESET
 
__HAL_RCC_TIM18_FORCE_RESET


	)

3000 
	#__TIM18_RELEASE_RESET
 
__HAL_RCC_TIM18_RELEASE_RESET


	)

3001 
	#__TIM19_FORCE_RESET
 
__HAL_RCC_TIM19_FORCE_RESET


	)

3002 
	#__TIM19_RELEASE_RESET
 
__HAL_RCC_TIM19_RELEASE_RESET


	)

3003 
	#__TIM20_FORCE_RESET
 
__HAL_RCC_TIM20_FORCE_RESET


	)

3004 
	#__TIM20_RELEASE_RESET
 
__HAL_RCC_TIM20_RELEASE_RESET


	)

3005 
	#__HRTIM1_FORCE_RESET
 
__HAL_RCC_HRTIM1_FORCE_RESET


	)

3006 
	#__HRTIM1_RELEASE_RESET
 
__HAL_RCC_HRTIM1_RELEASE_RESET


	)

3007 
	#__SDADC1_FORCE_RESET
 
__HAL_RCC_SDADC1_FORCE_RESET


	)

3008 
	#__SDADC2_FORCE_RESET
 
__HAL_RCC_SDADC2_FORCE_RESET


	)

3009 
	#__SDADC3_FORCE_RESET
 
__HAL_RCC_SDADC3_FORCE_RESET


	)

3010 
	#__SDADC1_RELEASE_RESET
 
__HAL_RCC_SDADC1_RELEASE_RESET


	)

3011 
	#__SDADC2_RELEASE_RESET
 
__HAL_RCC_SDADC2_RELEASE_RESET


	)

3012 
	#__SDADC3_RELEASE_RESET
 
__HAL_RCC_SDADC3_RELEASE_RESET


	)

3014 
	#__ADC1_IS_CLK_ENABLED
 
__HAL_RCC_ADC1_IS_CLK_ENABLED


	)

3015 
	#__ADC1_IS_CLK_DISABLED
 
__HAL_RCC_ADC1_IS_CLK_DISABLED


	)

3016 
	#__ADC12_IS_CLK_ENABLED
 
__HAL_RCC_ADC12_IS_CLK_ENABLED


	)

3017 
	#__ADC12_IS_CLK_DISABLED
 
__HAL_RCC_ADC12_IS_CLK_DISABLED


	)

3018 
	#__ADC34_IS_CLK_ENABLED
 
__HAL_RCC_ADC34_IS_CLK_ENABLED


	)

3019 
	#__ADC34_IS_CLK_DISABLED
 
__HAL_RCC_ADC34_IS_CLK_DISABLED


	)

3020 
	#__CEC_IS_CLK_ENABLED
 
__HAL_RCC_CEC_IS_CLK_ENABLED


	)

3021 
	#__CEC_IS_CLK_DISABLED
 
__HAL_RCC_CEC_IS_CLK_DISABLED


	)

3022 
	#__CRC_IS_CLK_ENABLED
 
__HAL_RCC_CRC_IS_CLK_ENABLED


	)

3023 
	#__CRC_IS_CLK_DISABLED
 
__HAL_RCC_CRC_IS_CLK_DISABLED


	)

3024 
	#__DAC1_IS_CLK_ENABLED
 
__HAL_RCC_DAC1_IS_CLK_ENABLED


	)

3025 
	#__DAC1_IS_CLK_DISABLED
 
__HAL_RCC_DAC1_IS_CLK_DISABLED


	)

3026 
	#__DAC2_IS_CLK_ENABLED
 
__HAL_RCC_DAC2_IS_CLK_ENABLED


	)

3027 
	#__DAC2_IS_CLK_DISABLED
 
__HAL_RCC_DAC2_IS_CLK_DISABLED


	)

3028 
	#__DMA1_IS_CLK_ENABLED
 
__HAL_RCC_DMA1_IS_CLK_ENABLED


	)

3029 
	#__DMA1_IS_CLK_DISABLED
 
__HAL_RCC_DMA1_IS_CLK_DISABLED


	)

3030 
	#__DMA2_IS_CLK_ENABLED
 
__HAL_RCC_DMA2_IS_CLK_ENABLED


	)

3031 
	#__DMA2_IS_CLK_DISABLED
 
__HAL_RCC_DMA2_IS_CLK_DISABLED


	)

3032 
	#__FLITF_IS_CLK_ENABLED
 
__HAL_RCC_FLITF_IS_CLK_ENABLED


	)

3033 
	#__FLITF_IS_CLK_DISABLED
 
__HAL_RCC_FLITF_IS_CLK_DISABLED


	)

3034 
	#__FMC_IS_CLK_ENABLED
 
__HAL_RCC_FMC_IS_CLK_ENABLED


	)

3035 
	#__FMC_IS_CLK_DISABLED
 
__HAL_RCC_FMC_IS_CLK_DISABLED


	)

3036 
	#__GPIOA_IS_CLK_ENABLED
 
__HAL_RCC_GPIOA_IS_CLK_ENABLED


	)

3037 
	#__GPIOA_IS_CLK_DISABLED
 
__HAL_RCC_GPIOA_IS_CLK_DISABLED


	)

3038 
	#__GPIOB_IS_CLK_ENABLED
 
__HAL_RCC_GPIOB_IS_CLK_ENABLED


	)

3039 
	#__GPIOB_IS_CLK_DISABLED
 
__HAL_RCC_GPIOB_IS_CLK_DISABLED


	)

3040 
	#__GPIOC_IS_CLK_ENABLED
 
__HAL_RCC_GPIOC_IS_CLK_ENABLED


	)

3041 
	#__GPIOC_IS_CLK_DISABLED
 
__HAL_RCC_GPIOC_IS_CLK_DISABLED


	)

3042 
	#__GPIOD_IS_CLK_ENABLED
 
__HAL_RCC_GPIOD_IS_CLK_ENABLED


	)

3043 
	#__GPIOD_IS_CLK_DISABLED
 
__HAL_RCC_GPIOD_IS_CLK_DISABLED


	)

3044 
	#__GPIOE_IS_CLK_ENABLED
 
__HAL_RCC_GPIOE_IS_CLK_ENABLED


	)

3045 
	#__GPIOE_IS_CLK_DISABLED
 
__HAL_RCC_GPIOE_IS_CLK_DISABLED


	)

3046 
	#__GPIOF_IS_CLK_ENABLED
 
__HAL_RCC_GPIOF_IS_CLK_ENABLED


	)

3047 
	#__GPIOF_IS_CLK_DISABLED
 
__HAL_RCC_GPIOF_IS_CLK_DISABLED


	)

3048 
	#__GPIOG_IS_CLK_ENABLED
 
__HAL_RCC_GPIOG_IS_CLK_ENABLED


	)

3049 
	#__GPIOG_IS_CLK_DISABLED
 
__HAL_RCC_GPIOG_IS_CLK_DISABLED


	)

3050 
	#__GPIOH_IS_CLK_ENABLED
 
__HAL_RCC_GPIOH_IS_CLK_ENABLED


	)

3051 
	#__GPIOH_IS_CLK_DISABLED
 
__HAL_RCC_GPIOH_IS_CLK_DISABLED


	)

3052 
	#__HRTIM1_IS_CLK_ENABLED
 
__HAL_RCC_HRTIM1_IS_CLK_ENABLED


	)

3053 
	#__HRTIM1_IS_CLK_DISABLED
 
__HAL_RCC_HRTIM1_IS_CLK_DISABLED


	)

3054 
	#__I2C1_IS_CLK_ENABLED
 
__HAL_RCC_I2C1_IS_CLK_ENABLED


	)

3055 
	#__I2C1_IS_CLK_DISABLED
 
__HAL_RCC_I2C1_IS_CLK_DISABLED


	)

3056 
	#__I2C2_IS_CLK_ENABLED
 
__HAL_RCC_I2C2_IS_CLK_ENABLED


	)

3057 
	#__I2C2_IS_CLK_DISABLED
 
__HAL_RCC_I2C2_IS_CLK_DISABLED


	)

3058 
	#__I2C3_IS_CLK_ENABLED
 
__HAL_RCC_I2C3_IS_CLK_ENABLED


	)

3059 
	#__I2C3_IS_CLK_DISABLED
 
__HAL_RCC_I2C3_IS_CLK_DISABLED


	)

3060 
	#__PWR_IS_CLK_ENABLED
 
__HAL_RCC_PWR_IS_CLK_ENABLED


	)

3061 
	#__PWR_IS_CLK_DISABLED
 
__HAL_RCC_PWR_IS_CLK_DISABLED


	)

3062 
	#__SYSCFG_IS_CLK_ENABLED
 
__HAL_RCC_SYSCFG_IS_CLK_ENABLED


	)

3063 
	#__SYSCFG_IS_CLK_DISABLED
 
__HAL_RCC_SYSCFG_IS_CLK_DISABLED


	)

3064 
	#__SPI1_IS_CLK_ENABLED
 
__HAL_RCC_SPI1_IS_CLK_ENABLED


	)

3065 
	#__SPI1_IS_CLK_DISABLED
 
__HAL_RCC_SPI1_IS_CLK_DISABLED


	)

3066 
	#__SPI2_IS_CLK_ENABLED
 
__HAL_RCC_SPI2_IS_CLK_ENABLED


	)

3067 
	#__SPI2_IS_CLK_DISABLED
 
__HAL_RCC_SPI2_IS_CLK_DISABLED


	)

3068 
	#__SPI3_IS_CLK_ENABLED
 
__HAL_RCC_SPI3_IS_CLK_ENABLED


	)

3069 
	#__SPI3_IS_CLK_DISABLED
 
__HAL_RCC_SPI3_IS_CLK_DISABLED


	)

3070 
	#__SPI4_IS_CLK_ENABLED
 
__HAL_RCC_SPI4_IS_CLK_ENABLED


	)

3071 
	#__SPI4_IS_CLK_DISABLED
 
__HAL_RCC_SPI4_IS_CLK_DISABLED


	)

3072 
	#__SDADC1_IS_CLK_ENABLED
 
__HAL_RCC_SDADC1_IS_CLK_ENABLED


	)

3073 
	#__SDADC1_IS_CLK_DISABLED
 
__HAL_RCC_SDADC1_IS_CLK_DISABLED


	)

3074 
	#__SDADC2_IS_CLK_ENABLED
 
__HAL_RCC_SDADC2_IS_CLK_ENABLED


	)

3075 
	#__SDADC2_IS_CLK_DISABLED
 
__HAL_RCC_SDADC2_IS_CLK_DISABLED


	)

3076 
	#__SDADC3_IS_CLK_ENABLED
 
__HAL_RCC_SDADC3_IS_CLK_ENABLED


	)

3077 
	#__SDADC3_IS_CLK_DISABLED
 
__HAL_RCC_SDADC3_IS_CLK_DISABLED


	)

3078 
	#__SRAM_IS_CLK_ENABLED
 
__HAL_RCC_SRAM_IS_CLK_ENABLED


	)

3079 
	#__SRAM_IS_CLK_DISABLED
 
__HAL_RCC_SRAM_IS_CLK_DISABLED


	)

3080 
	#__TIM1_IS_CLK_ENABLED
 
__HAL_RCC_TIM1_IS_CLK_ENABLED


	)

3081 
	#__TIM1_IS_CLK_DISABLED
 
__HAL_RCC_TIM1_IS_CLK_DISABLED


	)

3082 
	#__TIM2_IS_CLK_ENABLED
 
__HAL_RCC_TIM2_IS_CLK_ENABLED


	)

3083 
	#__TIM2_IS_CLK_DISABLED
 
__HAL_RCC_TIM2_IS_CLK_DISABLED


	)

3084 
	#__TIM3_IS_CLK_ENABLED
 
__HAL_RCC_TIM3_IS_CLK_ENABLED


	)

3085 
	#__TIM3_IS_CLK_DISABLED
 
__HAL_RCC_TIM3_IS_CLK_DISABLED


	)

3086 
	#__TIM4_IS_CLK_ENABLED
 
__HAL_RCC_TIM4_IS_CLK_ENABLED


	)

3087 
	#__TIM4_IS_CLK_DISABLED
 
__HAL_RCC_TIM4_IS_CLK_DISABLED


	)

3088 
	#__TIM5_IS_CLK_ENABLED
 
__HAL_RCC_TIM5_IS_CLK_ENABLED


	)

3089 
	#__TIM5_IS_CLK_DISABLED
 
__HAL_RCC_TIM5_IS_CLK_DISABLED


	)

3090 
	#__TIM6_IS_CLK_ENABLED
 
__HAL_RCC_TIM6_IS_CLK_ENABLED


	)

3091 
	#__TIM6_IS_CLK_DISABLED
 
__HAL_RCC_TIM6_IS_CLK_DISABLED


	)

3092 
	#__TIM7_IS_CLK_ENABLED
 
__HAL_RCC_TIM7_IS_CLK_ENABLED


	)

3093 
	#__TIM7_IS_CLK_DISABLED
 
__HAL_RCC_TIM7_IS_CLK_DISABLED


	)

3094 
	#__TIM8_IS_CLK_ENABLED
 
__HAL_RCC_TIM8_IS_CLK_ENABLED


	)

3095 
	#__TIM8_IS_CLK_DISABLED
 
__HAL_RCC_TIM8_IS_CLK_DISABLED


	)

3096 
	#__TIM12_IS_CLK_ENABLED
 
__HAL_RCC_TIM12_IS_CLK_ENABLED


	)

3097 
	#__TIM12_IS_CLK_DISABLED
 
__HAL_RCC_TIM12_IS_CLK_DISABLED


	)

3098 
	#__TIM13_IS_CLK_ENABLED
 
__HAL_RCC_TIM13_IS_CLK_ENABLED


	)

3099 
	#__TIM13_IS_CLK_DISABLED
 
__HAL_RCC_TIM13_IS_CLK_DISABLED


	)

3100 
	#__TIM14_IS_CLK_ENABLED
 
__HAL_RCC_TIM14_IS_CLK_ENABLED


	)

3101 
	#__TIM14_IS_CLK_DISABLED
 
__HAL_RCC_TIM14_IS_CLK_DISABLED


	)

3102 
	#__TIM15_IS_CLK_ENABLED
 
__HAL_RCC_TIM15_IS_CLK_ENABLED


	)

3103 
	#__TIM15_IS_CLK_DISABLED
 
__HAL_RCC_TIM15_IS_CLK_DISABLED


	)

3104 
	#__TIM16_IS_CLK_ENABLED
 
__HAL_RCC_TIM16_IS_CLK_ENABLED


	)

3105 
	#__TIM16_IS_CLK_DISABLED
 
__HAL_RCC_TIM16_IS_CLK_DISABLED


	)

3106 
	#__TIM17_IS_CLK_ENABLED
 
__HAL_RCC_TIM17_IS_CLK_ENABLED


	)

3107 
	#__TIM17_IS_CLK_DISABLED
 
__HAL_RCC_TIM17_IS_CLK_DISABLED


	)

3108 
	#__TIM18_IS_CLK_ENABLED
 
__HAL_RCC_TIM18_IS_CLK_ENABLED


	)

3109 
	#__TIM18_IS_CLK_DISABLED
 
__HAL_RCC_TIM18_IS_CLK_DISABLED


	)

3110 
	#__TIM19_IS_CLK_ENABLED
 
__HAL_RCC_TIM19_IS_CLK_ENABLED


	)

3111 
	#__TIM19_IS_CLK_DISABLED
 
__HAL_RCC_TIM19_IS_CLK_DISABLED


	)

3112 
	#__TIM20_IS_CLK_ENABLED
 
__HAL_RCC_TIM20_IS_CLK_ENABLED


	)

3113 
	#__TIM20_IS_CLK_DISABLED
 
__HAL_RCC_TIM20_IS_CLK_DISABLED


	)

3114 
	#__TSC_IS_CLK_ENABLED
 
__HAL_RCC_TSC_IS_CLK_ENABLED


	)

3115 
	#__TSC_IS_CLK_DISABLED
 
__HAL_RCC_TSC_IS_CLK_DISABLED


	)

3116 
	#__UART4_IS_CLK_ENABLED
 
__HAL_RCC_UART4_IS_CLK_ENABLED


	)

3117 
	#__UART4_IS_CLK_DISABLED
 
__HAL_RCC_UART4_IS_CLK_DISABLED


	)

3118 
	#__UART5_IS_CLK_ENABLED
 
__HAL_RCC_UART5_IS_CLK_ENABLED


	)

3119 
	#__UART5_IS_CLK_DISABLED
 
__HAL_RCC_UART5_IS_CLK_DISABLED


	)

3120 
	#__USART1_IS_CLK_ENABLED
 
__HAL_RCC_USART1_IS_CLK_ENABLED


	)

3121 
	#__USART1_IS_CLK_DISABLED
 
__HAL_RCC_USART1_IS_CLK_DISABLED


	)

3122 
	#__USART2_IS_CLK_ENABLED
 
__HAL_RCC_USART2_IS_CLK_ENABLED


	)

3123 
	#__USART2_IS_CLK_DISABLED
 
__HAL_RCC_USART2_IS_CLK_DISABLED


	)

3124 
	#__USART3_IS_CLK_ENABLED
 
__HAL_RCC_USART3_IS_CLK_ENABLED


	)

3125 
	#__USART3_IS_CLK_DISABLED
 
__HAL_RCC_USART3_IS_CLK_DISABLED


	)

3126 
	#__USB_IS_CLK_ENABLED
 
__HAL_RCC_USB_IS_CLK_ENABLED


	)

3127 
	#__USB_IS_CLK_DISABLED
 
__HAL_RCC_USB_IS_CLK_DISABLED


	)

3128 
	#__WWDG_IS_CLK_ENABLED
 
__HAL_RCC_WWDG_IS_CLK_ENABLED


	)

3129 
	#__WWDG_IS_CLK_DISABLED
 
__HAL_RCC_WWDG_IS_CLK_DISABLED


	)

3131 #i‡
deföed
(
STM32L1
)

3132 
	#__HAL_RCC_CRYP_CLK_DISABLE
 
__HAL_RCC_AES_CLK_DISABLE


	)

3133 
	#__HAL_RCC_CRYP_CLK_ENABLE
 
__HAL_RCC_AES_CLK_ENABLE


	)

3134 
	#__HAL_RCC_CRYP_CLK_SLEEP_DISABLE
 
__HAL_RCC_AES_CLK_SLEEP_DISABLE


	)

3135 
	#__HAL_RCC_CRYP_CLK_SLEEP_ENABLE
 
__HAL_RCC_AES_CLK_SLEEP_ENABLE


	)

3136 
	#__HAL_RCC_CRYP_FORCE_RESET
 
__HAL_RCC_AES_FORCE_RESET


	)

3137 
	#__HAL_RCC_CRYP_RELEASE_RESET
 
__HAL_RCC_AES_RELEASE_RESET


	)

3140 #i‡
deföed
(
STM32F4
)

3141 
	#__HAL_RCC_SDMMC1_FORCE_RESET
 
__HAL_RCC_SDIO_FORCE_RESET


	)

3142 
	#__HAL_RCC_SDMMC1_RELEASE_RESET
 
__HAL_RCC_SDIO_RELEASE_RESET


	)

3143 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_ENABLE


	)

3144 
	#__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDIO_CLK_SLEEP_DISABLE


	)

3145 
	#__HAL_RCC_SDMMC1_CLK_ENABLE
 
__HAL_RCC_SDIO_CLK_ENABLE


	)

3146 
	#__HAL_RCC_SDMMC1_CLK_DISABLE
 
__HAL_RCC_SDIO_CLK_DISABLE


	)

3147 
	#__HAL_RCC_SDMMC1_IS_CLK_ENABLED
 
__HAL_RCC_SDIO_IS_CLK_ENABLED


	)

3148 
	#__HAL_RCC_SDMMC1_IS_CLK_DISABLED
 
__HAL_RCC_SDIO_IS_CLK_DISABLED


	)

3149 
	#Sdmmc1ClockSñe˘i⁄
 
SdioClockSñe˘i⁄


	)

3150 
	#RCC_PERIPHCLK_SDMMC1
 
RCC_PERIPHCLK_SDIO


	)

3151 
	#RCC_SDMMC1CLKSOURCE_CLK48
 
RCC_SDIOCLKSOURCE_CK48


	)

3152 
	#RCC_SDMMC1CLKSOURCE_SYSCLK
 
RCC_SDIOCLKSOURCE_SYSCLK


	)

3153 
	#__HAL_RCC_SDMMC1_CONFIG
 
__HAL_RCC_SDIO_CONFIG


	)

3154 
	#__HAL_RCC_GET_SDMMC1_SOURCE
 
__HAL_RCC_GET_SDIO_SOURCE


	)

3157 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

3158 
	#__HAL_RCC_SDIO_FORCE_RESET
 
__HAL_RCC_SDMMC1_FORCE_RESET


	)

3159 
	#__HAL_RCC_SDIO_RELEASE_RESET
 
__HAL_RCC_SDMMC1_RELEASE_RESET


	)

3160 
	#__HAL_RCC_SDIO_CLK_SLEEP_ENABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_ENABLE


	)

3161 
	#__HAL_RCC_SDIO_CLK_SLEEP_DISABLE
 
__HAL_RCC_SDMMC1_CLK_SLEEP_DISABLE


	)

3162 
	#__HAL_RCC_SDIO_CLK_ENABLE
 
__HAL_RCC_SDMMC1_CLK_ENABLE


	)

3163 
	#__HAL_RCC_SDIO_CLK_DISABLE
 
__HAL_RCC_SDMMC1_CLK_DISABLE


	)

3164 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
 
__HAL_RCC_SDMMC1_IS_CLK_ENABLED


	)

3165 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
 
__HAL_RCC_SDMMC1_IS_CLK_DISABLED


	)

3166 
	#SdioClockSñe˘i⁄
 
Sdmmc1ClockSñe˘i⁄


	)

3167 
	#RCC_PERIPHCLK_SDIO
 
RCC_PERIPHCLK_SDMMC1


	)

3168 
	#__HAL_RCC_SDIO_CONFIG
 
__HAL_RCC_SDMMC1_CONFIG


	)

3169 
	#__HAL_RCC_GET_SDIO_SOURCE
 
__HAL_RCC_GET_SDMMC1_SOURCE


	)

3172 #i‡
deföed
(
STM32F7
)

3173 
	#RCC_SDIOCLKSOURCE_CLK48
 
RCC_SDMMC1CLKSOURCE_CLK48


	)

3174 
	#RCC_SDIOCLKSOURCE_SYSCLK
 
RCC_SDMMC1CLKSOURCE_SYSCLK


	)

3177 #i‡
deföed
(
STM32H7
)

3178 
	#__HAL_RCC_USB_OTG_HS_CLK_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_ENABLE
()

	)

3179 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_ENABLE
()

	)

3180 
	#__HAL_RCC_USB_OTG_HS_CLK_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_DISABLE
()

	)

3181 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_DISABLE
()

	)

3182 
	#__HAL_RCC_USB_OTG_HS_FORCE_RESET
(Ë
	`__HAL_RCC_USB1_OTG_HS_FORCE_RESET
()

	)

3183 
	#__HAL_RCC_USB_OTG_HS_RELEASE_RESET
(Ë
	`__HAL_RCC_USB1_OTG_HS_RELEASE_RESET
()

	)

3184 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_SLEEP_ENABLE
()

	)

3185 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_SLEEP_ENABLE
()

	)

3186 
	#__HAL_RCC_USB_OTG_HS_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_CLK_SLEEP_DISABLE
()

	)

3187 
	#__HAL_RCC_USB_OTG_HS_ULPI_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB1_OTG_HS_ULPI_CLK_SLEEP_DISABLE
()

	)

3189 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_ENABLE
()

	)

3190 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_ENABLE
()

	)

3191 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_DISABLE
()

	)

3192 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_DISABLE
()

	)

3193 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë
	`__HAL_RCC_USB2_OTG_FS_FORCE_RESET
()

	)

3194 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë
	`__HAL_RCC_USB2_OTG_FS_RELEASE_RESET
()

	)

3195 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_SLEEP_ENABLE
()

	)

3196 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_SLEEP_ENABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_SLEEP_ENABLE
()

	)

3197 
	#__HAL_RCC_USB_OTG_FS_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_CLK_SLEEP_DISABLE
()

	)

3198 
	#__HAL_RCC_USB_OTG_FS_ULPI_CLK_SLEEP_DISABLE
(Ë
	`__HAL_RCC_USB2_OTG_FS_ULPI_CLK_SLEEP_DISABLE
()

	)

3201 
	#__HAL_RCC_I2SCLK
 
__HAL_RCC_I2S_CONFIG


	)

3202 
	#__HAL_RCC_I2SCLK_CONFIG
 
__HAL_RCC_I2S_CONFIG


	)

3204 
	#__RCC_PLLSRC
 
RCC_GET_PLL_OSCSOURCE


	)

3206 
	#IS_RCC_MSIRANGE
 
IS_RCC_MSI_CLOCK_RANGE


	)

3207 
	#IS_RCC_RTCCLK_SOURCE
 
IS_RCC_RTCCLKSOURCE


	)

3208 
	#IS_RCC_SYSCLK_DIV
 
IS_RCC_HCLK


	)

3209 
	#IS_RCC_HCLK_DIV
 
IS_RCC_PCLK


	)

3210 
	#IS_RCC_PERIPHCLK
 
IS_RCC_PERIPHCLOCK


	)

3212 
	#RCC_IT_HSI14
 
RCC_IT_HSI14RDY


	)

3214 
	#RCC_IT_CSSLSE
 
RCC_IT_LSECSS


	)

3215 
	#RCC_IT_CSSHSE
 
RCC_IT_CSS


	)

3217 
	#RCC_PLLMUL_3
 
RCC_PLL_MUL3


	)

3218 
	#RCC_PLLMUL_4
 
RCC_PLL_MUL4


	)

3219 
	#RCC_PLLMUL_6
 
RCC_PLL_MUL6


	)

3220 
	#RCC_PLLMUL_8
 
RCC_PLL_MUL8


	)

3221 
	#RCC_PLLMUL_12
 
RCC_PLL_MUL12


	)

3222 
	#RCC_PLLMUL_16
 
RCC_PLL_MUL16


	)

3223 
	#RCC_PLLMUL_24
 
RCC_PLL_MUL24


	)

3224 
	#RCC_PLLMUL_32
 
RCC_PLL_MUL32


	)

3225 
	#RCC_PLLMUL_48
 
RCC_PLL_MUL48


	)

3227 
	#RCC_PLLDIV_2
 
RCC_PLL_DIV2


	)

3228 
	#RCC_PLLDIV_3
 
RCC_PLL_DIV3


	)

3229 
	#RCC_PLLDIV_4
 
RCC_PLL_DIV4


	)

3231 
	#IS_RCC_MCOSOURCE
 
IS_RCC_MCO1SOURCE


	)

3232 
	#__HAL_RCC_MCO_CONFIG
 
__HAL_RCC_MCO1_CONFIG


	)

3233 
	#RCC_MCO_NODIV
 
RCC_MCODIV_1


	)

3234 
	#RCC_MCO_DIV1
 
RCC_MCODIV_1


	)

3235 
	#RCC_MCO_DIV2
 
RCC_MCODIV_2


	)

3236 
	#RCC_MCO_DIV4
 
RCC_MCODIV_4


	)

3237 
	#RCC_MCO_DIV8
 
RCC_MCODIV_8


	)

3238 
	#RCC_MCO_DIV16
 
RCC_MCODIV_16


	)

3239 
	#RCC_MCO_DIV32
 
RCC_MCODIV_32


	)

3240 
	#RCC_MCO_DIV64
 
RCC_MCODIV_64


	)

3241 
	#RCC_MCO_DIV128
 
RCC_MCODIV_128


	)

3242 
	#RCC_MCOSOURCE_NONE
 
RCC_MCO1SOURCE_NOCLOCK


	)

3243 
	#RCC_MCOSOURCE_LSI
 
RCC_MCO1SOURCE_LSI


	)

3244 
	#RCC_MCOSOURCE_LSE
 
RCC_MCO1SOURCE_LSE


	)

3245 
	#RCC_MCOSOURCE_SYSCLK
 
RCC_MCO1SOURCE_SYSCLK


	)

3246 
	#RCC_MCOSOURCE_HSI
 
RCC_MCO1SOURCE_HSI


	)

3247 
	#RCC_MCOSOURCE_HSI14
 
RCC_MCO1SOURCE_HSI14


	)

3248 
	#RCC_MCOSOURCE_HSI48
 
RCC_MCO1SOURCE_HSI48


	)

3249 
	#RCC_MCOSOURCE_HSE
 
RCC_MCO1SOURCE_HSE


	)

3250 
	#RCC_MCOSOURCE_PLLCLK_DIV1
 
RCC_MCO1SOURCE_PLLCLK


	)

3251 
	#RCC_MCOSOURCE_PLLCLK_NODIV
 
RCC_MCO1SOURCE_PLLCLK


	)

3252 
	#RCC_MCOSOURCE_PLLCLK_DIV2
 
RCC_MCO1SOURCE_PLLCLK_DIV2


	)

3254 #i‡
deföed
(
STM32L4
Ë|| deföed(
STM32WB
Ë|| deföed(
STM32G0
Ë|| deföed(
STM32G4
Ë|| deföed(
STM32L5
)

3255 
	#RCC_RTCCLKSOURCE_NO_CLK
 
RCC_RTCCLKSOURCE_NONE


	)

3257 
	#RCC_RTCCLKSOURCE_NONE
 
RCC_RTCCLKSOURCE_NO_CLK


	)

3260 
	#RCC_USBCLK_PLLSAI1
 
RCC_USBCLKSOURCE_PLLSAI1


	)

3261 
	#RCC_USBCLK_PLL
 
RCC_USBCLKSOURCE_PLL


	)

3262 
	#RCC_USBCLK_MSI
 
RCC_USBCLKSOURCE_MSI


	)

3263 
	#RCC_USBCLKSOURCE_PLLCLK
 
RCC_USBCLKSOURCE_PLL


	)

3264 
	#RCC_USBPLLCLK_DIV1
 
RCC_USBCLKSOURCE_PLL


	)

3265 
	#RCC_USBPLLCLK_DIV1_5
 
RCC_USBCLKSOURCE_PLL_DIV1_5


	)

3266 
	#RCC_USBPLLCLK_DIV2
 
RCC_USBCLKSOURCE_PLL_DIV2


	)

3267 
	#RCC_USBPLLCLK_DIV3
 
RCC_USBCLKSOURCE_PLL_DIV3


	)

3269 
	#HSION_BôNumbî
 
RCC_HSION_BIT_NUMBER


	)

3270 
	#HSION_BITNUMBER
 
RCC_HSION_BIT_NUMBER


	)

3271 
	#HSEON_BôNumbî
 
RCC_HSEON_BIT_NUMBER


	)

3272 
	#HSEON_BITNUMBER
 
RCC_HSEON_BIT_NUMBER


	)

3273 
	#MSION_BITNUMBER
 
RCC_MSION_BIT_NUMBER


	)

3274 
	#CSSON_BôNumbî
 
RCC_CSSON_BIT_NUMBER


	)

3275 
	#CSSON_BITNUMBER
 
RCC_CSSON_BIT_NUMBER


	)

3276 
	#PLLON_BôNumbî
 
RCC_PLLON_BIT_NUMBER


	)

3277 
	#PLLON_BITNUMBER
 
RCC_PLLON_BIT_NUMBER


	)

3278 
	#PLLI2SON_BôNumbî
 
RCC_PLLI2SON_BIT_NUMBER


	)

3279 
	#I2SSRC_BôNumbî
 
RCC_I2SSRC_BIT_NUMBER


	)

3280 
	#RTCEN_BôNumbî
 
RCC_RTCEN_BIT_NUMBER


	)

3281 
	#RTCEN_BITNUMBER
 
RCC_RTCEN_BIT_NUMBER


	)

3282 
	#BDRST_BôNumbî
 
RCC_BDRST_BIT_NUMBER


	)

3283 
	#BDRST_BITNUMBER
 
RCC_BDRST_BIT_NUMBER


	)

3284 
	#RTCRST_BITNUMBER
 
RCC_RTCRST_BIT_NUMBER


	)

3285 
	#LSION_BôNumbî
 
RCC_LSION_BIT_NUMBER


	)

3286 
	#LSION_BITNUMBER
 
RCC_LSION_BIT_NUMBER


	)

3287 
	#LSEON_BôNumbî
 
RCC_LSEON_BIT_NUMBER


	)

3288 
	#LSEON_BITNUMBER
 
RCC_LSEON_BIT_NUMBER


	)

3289 
	#LSEBYP_BITNUMBER
 
RCC_LSEBYP_BIT_NUMBER


	)

3290 
	#PLLSAION_BôNumbî
 
RCC_PLLSAION_BIT_NUMBER


	)

3291 
	#TIMPRE_BôNumbî
 
RCC_TIMPRE_BIT_NUMBER


	)

3292 
	#RMVF_BôNumbî
 
RCC_RMVF_BIT_NUMBER


	)

3293 
	#RMVF_BITNUMBER
 
RCC_RMVF_BIT_NUMBER


	)

3294 
	#RCC_CR2_HSI14TRIM_BôNumbî
 
RCC_HSI14TRIM_BIT_NUMBER


	)

3295 
	#CR_BYTE2_ADDRESS
 
RCC_CR_BYTE2_ADDRESS


	)

3296 
	#CIR_BYTE1_ADDRESS
 
RCC_CIR_BYTE1_ADDRESS


	)

3297 
	#CIR_BYTE2_ADDRESS
 
RCC_CIR_BYTE2_ADDRESS


	)

3298 
	#BDCR_BYTE0_ADDRESS
 
RCC_BDCR_BYTE0_ADDRESS


	)

3299 
	#DBP_TIMEOUT_VALUE
 
RCC_DBP_TIMEOUT_VALUE


	)

3300 
	#LSE_TIMEOUT_VALUE
 
RCC_LSE_TIMEOUT_VALUE


	)

3302 
	#CR_HSION_BB
 
RCC_CR_HSION_BB


	)

3303 
	#CR_CSSON_BB
 
RCC_CR_CSSON_BB


	)

3304 
	#CR_PLLON_BB
 
RCC_CR_PLLON_BB


	)

3305 
	#CR_PLLI2SON_BB
 
RCC_CR_PLLI2SON_BB


	)

3306 
	#CR_MSION_BB
 
RCC_CR_MSION_BB


	)

3307 
	#CSR_LSION_BB
 
RCC_CSR_LSION_BB


	)

3308 
	#CSR_LSEON_BB
 
RCC_CSR_LSEON_BB


	)

3309 
	#CSR_LSEBYP_BB
 
RCC_CSR_LSEBYP_BB


	)

3310 
	#CSR_RTCEN_BB
 
RCC_CSR_RTCEN_BB


	)

3311 
	#CSR_RTCRST_BB
 
RCC_CSR_RTCRST_BB


	)

3312 
	#CFGR_I2SSRC_BB
 
RCC_CFGR_I2SSRC_BB


	)

3313 
	#BDCR_RTCEN_BB
 
RCC_BDCR_RTCEN_BB


	)

3314 
	#BDCR_BDRST_BB
 
RCC_BDCR_BDRST_BB


	)

3315 
	#CR_HSEON_BB
 
RCC_CR_HSEON_BB


	)

3316 
	#CSR_RMVF_BB
 
RCC_CSR_RMVF_BB


	)

3317 
	#CR_PLLSAION_BB
 
RCC_CR_PLLSAION_BB


	)

3318 
	#DCKCFGR_TIMPRE_BB
 
RCC_DCKCFGR_TIMPRE_BB


	)

3320 
	#__HAL_RCC_CRS_ENABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE


	)

3321 
	#__HAL_RCC_CRS_DISABLE_FREQ_ERROR_COUNTER
 
__HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE


	)

3322 
	#__HAL_RCC_CRS_ENABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE


	)

3323 
	#__HAL_RCC_CRS_DISABLE_AUTOMATIC_CALIB
 
__HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE


	)

3324 
	#__HAL_RCC_CRS_CALCULATE_RELOADVALUE
 
__HAL_RCC_CRS_RELOADVALUE_CALCULATE


	)

3326 
	#__HAL_RCC_GET_IT_SOURCE
 
__HAL_RCC_GET_IT


	)

3328 
	#RCC_CRS_SYNCWARM
 
RCC_CRS_SYNCWARN


	)

3329 
	#RCC_CRS_TRIMOV
 
RCC_CRS_TRIMOVF


	)

3331 
	#RCC_PERIPHCLK_CK48
 
RCC_PERIPHCLK_CLK48


	)

3332 
	#RCC_CK48CLKSOURCE_PLLQ
 
RCC_CLK48CLKSOURCE_PLLQ


	)

3333 
	#RCC_CK48CLKSOURCE_PLLSAIP
 
RCC_CLK48CLKSOURCE_PLLSAIP


	)

3334 
	#RCC_CK48CLKSOURCE_PLLI2SQ
 
RCC_CLK48CLKSOURCE_PLLI2SQ


	)

3335 
	#IS_RCC_CK48CLKSOURCE
 
IS_RCC_CLK48CLKSOURCE


	)

3336 
	#RCC_SDIOCLKSOURCE_CK48
 
RCC_SDIOCLKSOURCE_CLK48


	)

3338 
	#__HAL_RCC_DFSDM_CLK_ENABLE
 
__HAL_RCC_DFSDM1_CLK_ENABLE


	)

3339 
	#__HAL_RCC_DFSDM_CLK_DISABLE
 
__HAL_RCC_DFSDM1_CLK_DISABLE


	)

3340 
	#__HAL_RCC_DFSDM_IS_CLK_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_ENABLED


	)

3341 
	#__HAL_RCC_DFSDM_IS_CLK_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_DISABLED


	)

3342 
	#__HAL_RCC_DFSDM_FORCE_RESET
 
__HAL_RCC_DFSDM1_FORCE_RESET


	)

3343 
	#__HAL_RCC_DFSDM_RELEASE_RESET
 
__HAL_RCC_DFSDM1_RELEASE_RESET


	)

3344 
	#__HAL_RCC_DFSDM_CLK_SLEEP_ENABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_ENABLE


	)

3345 
	#__HAL_RCC_DFSDM_CLK_SLEEP_DISABLE
 
__HAL_RCC_DFSDM1_CLK_SLEEP_DISABLE


	)

3346 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_ENABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_ENABLED


	)

3347 
	#__HAL_RCC_DFSDM_IS_CLK_SLEEP_DISABLED
 
__HAL_RCC_DFSDM1_IS_CLK_SLEEP_DISABLED


	)

3348 
	#DfsdmClockSñe˘i⁄
 
Dfsdm1ClockSñe˘i⁄


	)

3349 
	#RCC_PERIPHCLK_DFSDM
 
RCC_PERIPHCLK_DFSDM1


	)

3350 
	#RCC_DFSDMCLKSOURCE_PCLK
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3351 
	#RCC_DFSDMCLKSOURCE_SYSCLK
 
RCC_DFSDM1CLKSOURCE_SYSCLK


	)

3352 
	#__HAL_RCC_DFSDM_CONFIG
 
__HAL_RCC_DFSDM1_CONFIG


	)

3353 
	#__HAL_RCC_GET_DFSDM_SOURCE
 
__HAL_RCC_GET_DFSDM1_SOURCE


	)

3354 
	#RCC_DFSDM1CLKSOURCE_PCLK
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3355 
	#RCC_SWPMI1CLKSOURCE_PCLK
 
RCC_SWPMI1CLKSOURCE_PCLK1


	)

3356 
	#RCC_LPTIM1CLKSOURCE_PCLK
 
RCC_LPTIM1CLKSOURCE_PCLK1


	)

3357 
	#RCC_LPTIM2CLKSOURCE_PCLK
 
RCC_LPTIM2CLKSOURCE_PCLK1


	)

3359 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB1
 
RCC_DFSDM1AUDIOCLKSOURCE_I2S1


	)

3360 
	#RCC_DFSDM1AUDIOCLKSOURCE_I2SAPB2
 
RCC_DFSDM1AUDIOCLKSOURCE_I2S2


	)

3361 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB1
 
RCC_DFSDM2AUDIOCLKSOURCE_I2S1


	)

3362 
	#RCC_DFSDM2AUDIOCLKSOURCE_I2SAPB2
 
RCC_DFSDM2AUDIOCLKSOURCE_I2S2


	)

3363 
	#RCC_DFSDM1CLKSOURCE_APB2
 
RCC_DFSDM1CLKSOURCE_PCLK2


	)

3364 
	#RCC_DFSDM2CLKSOURCE_APB2
 
RCC_DFSDM2CLKSOURCE_PCLK2


	)

3365 
	#RCC_FMPI2C1CLKSOURCE_APB
 
RCC_FMPI2C1CLKSOURCE_PCLK1


	)

3374 
	#HAL_RNG_RódyCÆlback
(
__HANDLE__
Ë
	`HAL_RNG_RódyD©aCÆlback
((__HANDLE__), 
uöt32_t
 
øndom32bô
)

	)

3383 #i‡
deföed
 (
STM32G0
Ë|| deföed (
STM32L5
Ë|| deföed (
STM32L412xx
Ë|| deföed (
STM32L422xx
Ë|| deföed (
STM32L4P5xx
Ë|| deföed (
STM32L4Q5xx
Ë|| deföed (
STM32G4
)

3385 
	#__HAL_RTC_CLEAR_FLAG
 
__HAL_RTC_EXTI_CLEAR_FLAG


	)

3387 
	#__HAL_RTC_DISABLE_IT
 
__HAL_RTC_EXTI_DISABLE_IT


	)

3388 
	#__HAL_RTC_ENABLE_IT
 
__HAL_RTC_EXTI_ENABLE_IT


	)

3390 #i‡
deföed
 (
STM32F1
)

3391 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
()

	)

3393 
	#__HAL_RTC_EXTI_ENABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
()

	)

3395 
	#__HAL_RTC_EXTI_DISABLE_IT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
()

	)

3397 
	#__HAL_RTC_EXTI_GET_FLAG
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
()

	)

3399 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
RTC_EXTI_LINE_ALARM_EVENT
Ë
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
()

	)

3401 
	#__HAL_RTC_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
() : \

3402 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG
() : \

3403 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG
()))

	)

3404 
	#__HAL_RTC_EXTI_ENABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
() : \

3405 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT
() : \

3406 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT
()))

	)

3407 
	#__HAL_RTC_EXTI_DISABLE_IT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
() : \

3408 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT
() : \

3409 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT
()))

	)

3410 
	#__HAL_RTC_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GET_FLAG
() : \

3411 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG
() : \

3412 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG
()))

	)

3413 
	#__HAL_RTC_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(((__EXTI_LINE__Ë=
RTC_EXTI_LINE_ALARM_EVENT
Ë? 
	`__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
() : \

3414 (((
__EXTI_LINE__
Ë=
RTC_EXTI_LINE_WAKEUPTIMER_EVENT
Ë? 
	`__HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT
() : \

3415 
	`__HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT
()))

	)

3418 
	#IS_ALARM
 
IS_RTC_ALARM


	)

3419 
	#IS_ALARM_MASK
 
IS_RTC_ALARM_MASK


	)

3420 
	#IS_TAMPER
 
IS_RTC_TAMPER


	)

3421 
	#IS_TAMPER_ERASE_MODE
 
IS_RTC_TAMPER_ERASE_MODE


	)

3422 
	#IS_TAMPER_FILTER
 
IS_RTC_TAMPER_FILTER


	)

3423 
	#IS_TAMPER_INTERRUPT
 
IS_RTC_TAMPER_INTERRUPT


	)

3424 
	#IS_TAMPER_MASKFLAG_STATE
 
IS_RTC_TAMPER_MASKFLAG_STATE


	)

3425 
	#IS_TAMPER_PRECHARGE_DURATION
 
IS_RTC_TAMPER_PRECHARGE_DURATION


	)

3426 
	#IS_TAMPER_PULLUP_STATE
 
IS_RTC_TAMPER_PULLUP_STATE


	)

3427 
	#IS_TAMPER_SAMPLING_FREQ
 
IS_RTC_TAMPER_SAMPLING_FREQ


	)

3428 
	#IS_TAMPER_TIMESTAMPONTAMPER_DETECTION
 
IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION


	)

3429 
	#IS_TAMPER_TRIGGER
 
IS_RTC_TAMPER_TRIGGER


	)

3430 
	#IS_WAKEUP_CLOCK
 
IS_RTC_WAKEUP_CLOCK


	)

3431 
	#IS_WAKEUP_COUNTER
 
IS_RTC_WAKEUP_COUNTER


	)

3433 
	#__RTC_WRITEPROTECTION_ENABLE
 
__HAL_RTC_WRITEPROTECTION_ENABLE


	)

3434 
	#__RTC_WRITEPROTECTION_DISABLE
 
__HAL_RTC_WRITEPROTECTION_DISABLE


	)

3444 
	#SD_OCR_CID_CSD_OVERWRIETE
 
SD_OCR_CID_CSD_OVERWRITE


	)

3445 
	#SD_CMD_SD_APP_STAUS
 
SD_CMD_SD_APP_STATUS


	)

3447 #i‡
deföed
(
STM32F4
Ë|| deföed(
STM32F2
)

3448 
	#SD_SDMMC_DISABLED
 
SD_SDIO_DISABLED


	)

3449 
	#SD_SDMMC_FUNCTION_BUSY
 
SD_SDIO_FUNCTION_BUSY


	)

3450 
	#SD_SDMMC_FUNCTION_FAILED
 
SD_SDIO_FUNCTION_FAILED


	)

3451 
	#SD_SDMMC_UNKNOWN_FUNCTION
 
SD_SDIO_UNKNOWN_FUNCTION


	)

3452 
	#SD_CMD_SDMMC_SEN_OP_COND
 
SD_CMD_SDIO_SEN_OP_COND


	)

3453 
	#SD_CMD_SDMMC_RW_DIRECT
 
SD_CMD_SDIO_RW_DIRECT


	)

3454 
	#SD_CMD_SDMMC_RW_EXTENDED
 
SD_CMD_SDIO_RW_EXTENDED


	)

3455 
	#__HAL_SD_SDMMC_ENABLE
 
__HAL_SD_SDIO_ENABLE


	)

3456 
	#__HAL_SD_SDMMC_DISABLE
 
__HAL_SD_SDIO_DISABLE


	)

3457 
	#__HAL_SD_SDMMC_DMA_ENABLE
 
__HAL_SD_SDIO_DMA_ENABLE


	)

3458 
	#__HAL_SD_SDMMC_DMA_DISABLE
 
__HAL_SD_SDIO_DMA_DISABL


	)

3459 
	#__HAL_SD_SDMMC_ENABLE_IT
 
__HAL_SD_SDIO_ENABLE_IT


	)

3460 
	#__HAL_SD_SDMMC_DISABLE_IT
 
__HAL_SD_SDIO_DISABLE_IT


	)

3461 
	#__HAL_SD_SDMMC_GET_FLAG
 
__HAL_SD_SDIO_GET_FLAG


	)

3462 
	#__HAL_SD_SDMMC_CLEAR_FLAG
 
__HAL_SD_SDIO_CLEAR_FLAG


	)

3463 
	#__HAL_SD_SDMMC_GET_IT
 
__HAL_SD_SDIO_GET_IT


	)

3464 
	#__HAL_SD_SDMMC_CLEAR_IT
 
__HAL_SD_SDIO_CLEAR_IT


	)

3465 
	#SDMMC_STATIC_FLAGS
 
SDIO_STATIC_FLAGS


	)

3466 
	#SDMMC_CMD0TIMEOUT
 
SDIO_CMD0TIMEOUT


	)

3467 
	#SD_SDMMC_SEND_IF_COND
 
SD_SDIO_SEND_IF_COND


	)

3469 
	#SDMMC1_IRQn
 
SDIO_IRQn


	)

3470 
	#SDMMC1_IRQH™dÀr
 
SDIO_IRQH™dÀr


	)

3473 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32L4
)

3474 
	#SD_SDIO_DISABLED
 
SD_SDMMC_DISABLED


	)

3475 
	#SD_SDIO_FUNCTION_BUSY
 
SD_SDMMC_FUNCTION_BUSY


	)

3476 
	#SD_SDIO_FUNCTION_FAILED
 
SD_SDMMC_FUNCTION_FAILED


	)

3477 
	#SD_SDIO_UNKNOWN_FUNCTION
 
SD_SDMMC_UNKNOWN_FUNCTION


	)

3478 
	#SD_CMD_SDIO_SEN_OP_COND
 
SD_CMD_SDMMC_SEN_OP_COND


	)

3479 
	#SD_CMD_SDIO_RW_DIRECT
 
SD_CMD_SDMMC_RW_DIRECT


	)

3480 
	#SD_CMD_SDIO_RW_EXTENDED
 
SD_CMD_SDMMC_RW_EXTENDED


	)

3481 
	#__HAL_SD_SDIO_ENABLE
 
__HAL_SD_SDMMC_ENABLE


	)

3482 
	#__HAL_SD_SDIO_DISABLE
 
__HAL_SD_SDMMC_DISABLE


	)

3483 
	#__HAL_SD_SDIO_DMA_ENABLE
 
__HAL_SD_SDMMC_DMA_ENABLE


	)

3484 
	#__HAL_SD_SDIO_DMA_DISABL
 
__HAL_SD_SDMMC_DMA_DISABLE


	)

3485 
	#__HAL_SD_SDIO_ENABLE_IT
 
__HAL_SD_SDMMC_ENABLE_IT


	)

3486 
	#__HAL_SD_SDIO_DISABLE_IT
 
__HAL_SD_SDMMC_DISABLE_IT


	)

3487 
	#__HAL_SD_SDIO_GET_FLAG
 
__HAL_SD_SDMMC_GET_FLAG


	)

3488 
	#__HAL_SD_SDIO_CLEAR_FLAG
 
__HAL_SD_SDMMC_CLEAR_FLAG


	)

3489 
	#__HAL_SD_SDIO_GET_IT
 
__HAL_SD_SDMMC_GET_IT


	)

3490 
	#__HAL_SD_SDIO_CLEAR_IT
 
__HAL_SD_SDMMC_CLEAR_IT


	)

3491 
	#SDIO_STATIC_FLAGS
 
SDMMC_STATIC_FLAGS


	)

3492 
	#SDIO_CMD0TIMEOUT
 
SDMMC_CMD0TIMEOUT


	)

3493 
	#SD_SDIO_SEND_IF_COND
 
SD_SDMMC_SEND_IF_COND


	)

3495 
	#SDIO_IRQn
 
SDMMC1_IRQn


	)

3496 
	#SDIO_IRQH™dÀr
 
SDMMC1_IRQH™dÀr


	)

3499 #i‡
deföed
(
STM32F7
Ë|| deföed(
STM32F4
Ë|| deföed(
STM32F2
Ë|| deföed(
STM32L4
Ë|| deföed(
STM32H7
)

3500 
	#HAL_SD_C¨dCIDTy≥def
 
HAL_SD_C¨dCIDTy≥Def


	)

3501 
	#HAL_SD_C¨dCSDTy≥def
 
HAL_SD_C¨dCSDTy≥Def


	)

3502 
	#HAL_SD_C¨dSètusTy≥def
 
HAL_SD_C¨dSètusTy≥Def


	)

3503 
	#HAL_SD_C¨dSèãTy≥def
 
HAL_SD_C¨dSèãTy≥Def


	)

3506 #i‡
deföed
(
STM32H7
Ë|| deföed(
STM32L5
)

3507 
	#HAL_MMCEx_Ród_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_MMCEx_Ród_DMADoubÀBuf0C∂tCÆlback


	)

3508 
	#HAL_MMCEx_Ród_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_MMCEx_Ród_DMADoubÀBuf1C∂tCÆlback


	)

3509 
	#HAL_MMCEx_Wrôe_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_MMCEx_Wrôe_DMADoubÀBuf0C∂tCÆlback


	)

3510 
	#HAL_MMCEx_Wrôe_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_MMCEx_Wrôe_DMADoubÀBuf1C∂tCÆlback


	)

3511 
	#HAL_SDEx_Ród_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_SDEx_Ród_DMADoubÀBuf0C∂tCÆlback


	)

3512 
	#HAL_SDEx_Ród_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_SDEx_Ród_DMADoubÀBuf1C∂tCÆlback


	)

3513 
	#HAL_SDEx_Wrôe_DMADoubÀBuf„r0C∂tCÆlback
 
HAL_SDEx_Wrôe_DMADoubÀBuf0C∂tCÆlback


	)

3514 
	#HAL_SDEx_Wrôe_DMADoubÀBuf„r1C∂tCÆlback
 
HAL_SDEx_Wrôe_DMADoubÀBuf1C∂tCÆlback


	)

3515 
	#HAL_SD_DriveTønscivî_1_8V_CÆlback
 
HAL_SD_DriveTøns˚ivî_1_8V_CÆlback


	)

3525 
	#__SMARTCARD_ENABLE_IT
 
__HAL_SMARTCARD_ENABLE_IT


	)

3526 
	#__SMARTCARD_DISABLE_IT
 
__HAL_SMARTCARD_DISABLE_IT


	)

3527 
	#__SMARTCARD_ENABLE
 
__HAL_SMARTCARD_ENABLE


	)

3528 
	#__SMARTCARD_DISABLE
 
__HAL_SMARTCARD_DISABLE


	)

3529 
	#__SMARTCARD_DMA_REQUEST_ENABLE
 
__HAL_SMARTCARD_DMA_REQUEST_ENABLE


	)

3530 
	#__SMARTCARD_DMA_REQUEST_DISABLE
 
__HAL_SMARTCARD_DMA_REQUEST_DISABLE


	)

3532 
	#__HAL_SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

3533 
	#__SMARTCARD_GETCLOCKSOURCE
 
SMARTCARD_GETCLOCKSOURCE


	)

3535 
	#IS_SMARTCARD_ONEBIT_SAMPLING
 
IS_SMARTCARD_ONE_BIT_SAMPLE


	)

3544 
	#__HAL_SMBUS_RESET_CR1
 
SMBUS_RESET_CR1


	)

3545 
	#__HAL_SMBUS_RESET_CR2
 
SMBUS_RESET_CR2


	)

3546 
	#__HAL_SMBUS_GENERATE_START
 
SMBUS_GENERATE_START


	)

3547 
	#__HAL_SMBUS_GET_ADDR_MATCH
 
SMBUS_GET_ADDR_MATCH


	)

3548 
	#__HAL_SMBUS_GET_DIR
 
SMBUS_GET_DIR


	)

3549 
	#__HAL_SMBUS_GET_STOP_MODE
 
SMBUS_GET_STOP_MODE


	)

3550 
	#__HAL_SMBUS_GET_PEC_MODE
 
SMBUS_GET_PEC_MODE


	)

3551 
	#__HAL_SMBUS_GET_ALERT_ENABLED
 
SMBUS_GET_ALERT_ENABLED


	)

3560 
	#__HAL_SPI_1LINE_TX
 
SPI_1LINE_TX


	)

3561 
	#__HAL_SPI_1LINE_RX
 
SPI_1LINE_RX


	)

3562 
	#__HAL_SPI_RESET_CRC
 
SPI_RESET_CRC


	)

3572 
	#__HAL_UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

3573 
	#__HAL_UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

3574 
	#__UART_GETCLOCKSOURCE
 
UART_GETCLOCKSOURCE


	)

3575 
	#__UART_MASK_COMPUTATION
 
UART_MASK_COMPUTATION


	)

3577 
	#IS_UART_WAKEUPMETHODE
 
IS_UART_WAKEUPMETHOD


	)

3579 
	#IS_UART_ONEBIT_SAMPLE
 
IS_UART_ONE_BIT_SAMPLE


	)

3580 
	#IS_UART_ONEBIT_SAMPLING
 
IS_UART_ONE_BIT_SAMPLE


	)

3591 
	#__USART_ENABLE_IT
 
__HAL_USART_ENABLE_IT


	)

3592 
	#__USART_DISABLE_IT
 
__HAL_USART_DISABLE_IT


	)

3593 
	#__USART_ENABLE
 
__HAL_USART_ENABLE


	)

3594 
	#__USART_DISABLE
 
__HAL_USART_DISABLE


	)

3596 
	#__HAL_USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

3597 
	#__USART_GETCLOCKSOURCE
 
USART_GETCLOCKSOURCE


	)

3606 
	#USB_EXTI_LINE_WAKEUP
 
USB_WAKEUP_EXTI_LINE


	)

3608 
	#USB_FS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_EDGE


	)

3609 
	#USB_FS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_FALLING_EDGE


	)

3610 
	#USB_FS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_FS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

3611 
	#USB_FS_EXTI_LINE_WAKEUP
 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

3613 
	#USB_HS_EXTI_TRIGGER_RISING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_EDGE


	)

3614 
	#USB_HS_EXTI_TRIGGER_FALLING_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_FALLING_EDGE


	)

3615 
	#USB_HS_EXTI_TRIGGER_BOTH_EDGE
 
USB_OTG_HS_WAKEUP_EXTI_RISING_FALLING_EDGE


	)

3616 
	#USB_HS_EXTI_LINE_WAKEUP
 
USB_OTG_HS_WAKEUP_EXTI_LINE


	)

3618 
	#__HAL_USB_EXTI_ENABLE_IT
 
__HAL_USB_WAKEUP_EXTI_ENABLE_IT


	)

3619 
	#__HAL_USB_EXTI_DISABLE_IT
 
__HAL_USB_WAKEUP_EXTI_DISABLE_IT


	)

3620 
	#__HAL_USB_EXTI_GET_FLAG
 
__HAL_USB_WAKEUP_EXTI_GET_FLAG


	)

3621 
	#__HAL_USB_EXTI_CLEAR_FLAG
 
__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG


	)

3622 
	#__HAL_USB_EXTI_SET_RISING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3623 
	#__HAL_USB_EXTI_SET_FALLING_EDGE_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3624 
	#__HAL_USB_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3626 
	#__HAL_USB_FS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT


	)

3627 
	#__HAL_USB_FS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT


	)

3628 
	#__HAL_USB_FS_EXTI_GET_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG


	)

3629 
	#__HAL_USB_FS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG


	)

3630 
	#__HAL_USB_FS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3631 
	#__HAL_USB_FS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3632 
	#__HAL_USB_FS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3633 
	#__HAL_USB_FS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_FS_WAKEUP_EXTI_GENERATE_SWIT


	)

3635 
	#__HAL_USB_HS_EXTI_ENABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_IT


	)

3636 
	#__HAL_USB_HS_EXTI_DISABLE_IT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_DISABLE_IT


	)

3637 
	#__HAL_USB_HS_EXTI_GET_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GET_FLAG


	)

3638 
	#__HAL_USB_HS_EXTI_CLEAR_FLAG
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_CLEAR_FLAG


	)

3639 
	#__HAL_USB_HS_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_EDGE


	)

3640 
	#__HAL_USB_HS_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_FALLING_EDGE


	)

3641 
	#__HAL_USB_HS_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_ENABLE_RISING_FALLING_EDGE


	)

3642 
	#__HAL_USB_HS_EXTI_GENERATE_SWIT
 
__HAL_USB_OTG_HS_WAKEUP_EXTI_GENERATE_SWIT


	)

3644 
	#HAL_PCD_A˘iveRemŸeWakeup
 
HAL_PCD_A˘iv©eRemŸeWakeup


	)

3645 
	#HAL_PCD_DeA˘iveRemŸeWakeup
 
HAL_PCD_DeA˘iv©eRemŸeWakeup


	)

3647 
	#HAL_PCD_SëTxFiFo
 
HAL_PCDEx_SëTxFiFo


	)

3648 
	#HAL_PCD_SëRxFiFo
 
HAL_PCDEx_SëRxFiFo


	)

3656 
	#__HAL_TIM_SëICPªsˇÀrVÆue
 
TIM_SET_ICPRESCALERVALUE


	)

3657 
	#__HAL_TIM_Re£tICPªsˇÀrVÆue
 
TIM_RESET_ICPRESCALERVALUE


	)

3659 
	#TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

3660 
	#TIM_GET_CLEAR_IT
 
__HAL_TIM_CLEAR_IT


	)

3662 
	#__HAL_TIM_GET_ITSTATUS
 
__HAL_TIM_GET_IT_SOURCE


	)

3664 
	#__HAL_TIM_DIRECTION_STATUS
 
__HAL_TIM_IS_TIM_COUNTING_DOWN


	)

3665 
	#__HAL_TIM_PRESCALER
 
__HAL_TIM_SET_PRESCALER


	)

3666 
	#__HAL_TIM_SëCou¡î
 
__HAL_TIM_SET_COUNTER


	)

3667 
	#__HAL_TIM_GëCou¡î
 
__HAL_TIM_GET_COUNTER


	)

3668 
	#__HAL_TIM_SëAut‹ñﬂd
 
__HAL_TIM_SET_AUTORELOAD


	)

3669 
	#__HAL_TIM_GëAut‹ñﬂd
 
__HAL_TIM_GET_AUTORELOAD


	)

3670 
	#__HAL_TIM_SëClockDivisi⁄
 
__HAL_TIM_SET_CLOCKDIVISION


	)

3671 
	#__HAL_TIM_GëClockDivisi⁄
 
__HAL_TIM_GET_CLOCKDIVISION


	)

3672 
	#__HAL_TIM_SëICPªsˇÀr
 
__HAL_TIM_SET_ICPRESCALER


	)

3673 
	#__HAL_TIM_GëICPªsˇÀr
 
__HAL_TIM_GET_ICPRESCALER


	)

3674 
	#__HAL_TIM_SëCom∑ª
 
__HAL_TIM_SET_COMPARE


	)

3675 
	#__HAL_TIM_GëCom∑ª
 
__HAL_TIM_GET_COMPARE


	)

3677 
	#TIM_BREAKINPUTSOURCE_DFSDM
 
TIM_BREAKINPUTSOURCE_DFSDM1


	)

3686 
	#__HAL_ETH_EXTI_ENABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_IT


	)

3687 
	#__HAL_ETH_EXTI_DISABLE_IT
 
__HAL_ETH_WAKEUP_EXTI_DISABLE_IT


	)

3688 
	#__HAL_ETH_EXTI_GET_FLAG
 
__HAL_ETH_WAKEUP_EXTI_GET_FLAG


	)

3689 
	#__HAL_ETH_EXTI_CLEAR_FLAG
 
__HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG


	)

3690 
	#__HAL_ETH_EXTI_SET_RISING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_RISING_EDGE_TRIGGER


	)

3691 
	#__HAL_ETH_EXTI_SET_FALLING_EGDE_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLING_EDGE_TRIGGER


	)

3692 
	#__HAL_ETH_EXTI_SET_FALLINGRISING_TRIGGER
 
__HAL_ETH_WAKEUP_EXTI_ENABLE_FALLINGRISING_TRIGGER


	)

3694 
	#ETH_PROMISCIOUSMODE_ENABLE
 
ETH_PROMISCUOUS_MODE_ENABLE


	)

3695 
	#ETH_PROMISCIOUSMODE_DISABLE
 
ETH_PROMISCUOUS_MODE_DISABLE


	)

3696 
	#IS_ETH_PROMISCIOUS_MODE
 
IS_ETH_PROMISCUOUS_MODE


	)

3704 
	#__HAL_LTDC_LAYER
 
LTDC_LAYER


	)

3705 
	#__HAL_LTDC_RELOAD_CONFIG
 
__HAL_LTDC_RELOAD_IMMEDIATE_CONFIG


	)

3713 
	#SAI_OUTPUTDRIVE_DISABLED
 
SAI_OUTPUTDRIVE_DISABLE


	)

3714 
	#SAI_OUTPUTDRIVE_ENABLED
 
SAI_OUTPUTDRIVE_ENABLE


	)

3715 
	#SAI_MASTERDIVIDER_ENABLED
 
SAI_MASTERDIVIDER_ENABLE


	)

3716 
	#SAI_MASTERDIVIDER_DISABLED
 
SAI_MASTERDIVIDER_DISABLE


	)

3717 
	#SAI_STREOMODE
 
SAI_STEREOMODE


	)

3718 
	#SAI_FIFOSètus_Em±y
 
SAI_FIFOSTATUS_EMPTY


	)

3719 
	#SAI_FIFOSètus_Less1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_LESS1QUARTERFULL


	)

3720 
	#SAI_FIFOSètus_1Qu¨ãrFuŒ
 
SAI_FIFOSTATUS_1QUARTERFULL


	)

3721 
	#SAI_FIFOSètus_HÆfFuŒ
 
SAI_FIFOSTATUS_HALFFULL


	)

3722 
	#SAI_FIFOSètus_3Qu¨ãrsFuŒ
 
SAI_FIFOSTATUS_3QUARTERFULL


	)

3723 
	#SAI_FIFOSètus_FuŒ
 
SAI_FIFOSTATUS_FULL


	)

3724 
	#IS_SAI_BLOCK_MONO_STREO_MODE
 
IS_SAI_BLOCK_MONO_STEREO_MODE


	)

3725 
	#SAI_SYNCHRONOUS_EXT
 
SAI_SYNCHRONOUS_EXT_SAI1


	)

3726 
	#SAI_SYNCEXT_IN_ENABLE
 
SAI_SYNCEXT_OUTBLOCKA_ENABLE


	)

3734 #i‡
deföed
(
STM32H7
)

3735 
	#HAL_SPDIFRX_Re˚iveC⁄åﬁFlow
 
HAL_SPDIFRX_Re˚iveCålFlow


	)

3736 
	#HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_IT
 
HAL_SPDIFRX_Re˚iveCålFlow_IT


	)

3737 
	#HAL_SPDIFRX_Re˚iveC⁄åﬁFlow_DMA
 
HAL_SPDIFRX_Re˚iveCålFlow_DMA


	)

3746 #i‡
deföed
 (
STM32H7
Ë|| deföed (
STM32G4
Ë|| deföed (
STM32F3
)

3747 
	#HAL_HRTIM_Wavef‹mCou¡îSèπ_IT
 
HAL_HRTIM_Wavef‹mCou¡Sèπ_IT


	)

3748 
	#HAL_HRTIM_Wavef‹mCou¡îSèπ_DMA
 
HAL_HRTIM_Wavef‹mCou¡Sèπ_DMA


	)

3749 
	#HAL_HRTIM_Wavef‹mCou¡îSèπ
 
HAL_HRTIM_Wavef‹mCou¡Sèπ


	)

3750 
	#HAL_HRTIM_Wavef‹mCou¡îSt›_IT
 
HAL_HRTIM_Wavef‹mCou¡St›_IT


	)

3751 
	#HAL_HRTIM_Wavef‹mCou¡îSt›_DMA
 
HAL_HRTIM_Wavef‹mCou¡St›_DMA


	)

3752 
	#HAL_HRTIM_Wavef‹mCou¡îSt›
 
HAL_HRTIM_Wavef‹mCou¡St›


	)

3761 #i‡
deföed
 (
STM32L4
Ë|| deföed (
STM32F4
Ë|| deföed (
STM32F7
Ë|| deföed(
STM32H7
)

3762 
	#HAL_QPSI_TIMEOUT_DEFAULT_VALUE
 
HAL_QSPI_TIMEOUT_DEFAULT_VALUE


	)

3776 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal.h

22 #i‚de‡
__STM32F1xx_HAL_H


23 
	#__STM32F1xx_HAL_H


	)

25 #ifde‡
__˝lu•lus


30 
	~"°m32f1xx_hÆ_c⁄f.h
"

51 
HAL_TICK_FREQ_10HZ
 = 100U,

52 
HAL_TICK_FREQ_100HZ
 = 10U,

53 
HAL_TICK_FREQ_1KHZ
 = 1U,

54 
HAL_TICK_FREQ_DEFAULT
 = 
HAL_TICK_FREQ_1KHZ


55 } 
	tHAL_TickFªqTy≥Def
;

60 
__IO
 
uöt32_t
 
uwTick
;

61 
uöt32_t
 
uwTickPrio
;

62 
HAL_TickFªqTy≥Def
 
uwTickFªq
;

88 
	#__HAL_DBGMCU_FREEZE_TIM2
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

89 
	#__HAL_DBGMCU_UNFREEZE_TIM2
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM2_STOP
)

	)

94 
	#__HAL_DBGMCU_FREEZE_TIM3
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

95 
	#__HAL_DBGMCU_UNFREEZE_TIM3
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM3_STOP
)

	)

97 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM4_STOP
)

101 
	#__HAL_DBGMCU_FREEZE_TIM4
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

102 
	#__HAL_DBGMCU_UNFREEZE_TIM4
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM4_STOP
)

	)

105 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM5_STOP
)

109 
	#__HAL_DBGMCU_FREEZE_TIM5
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

110 
	#__HAL_DBGMCU_UNFREEZE_TIM5
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM5_STOP
)

	)

113 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM6_STOP
)

117 
	#__HAL_DBGMCU_FREEZE_TIM6
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

118 
	#__HAL_DBGMCU_UNFREEZE_TIM6
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM6_STOP
)

	)

121 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM7_STOP
)

125 
	#__HAL_DBGMCU_FREEZE_TIM7
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

126 
	#__HAL_DBGMCU_UNFREEZE_TIM7
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM7_STOP
)

	)

129 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM12_STOP
)

133 
	#__HAL_DBGMCU_FREEZE_TIM12
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

134 
	#__HAL_DBGMCU_UNFREEZE_TIM12
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM12_STOP
)

	)

137 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM13_STOP
)

141 
	#__HAL_DBGMCU_FREEZE_TIM13
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

142 
	#__HAL_DBGMCU_UNFREEZE_TIM13
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM13_STOP
)

	)

145 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM14_STOP
)

149 
	#__HAL_DBGMCU_FREEZE_TIM14
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

150 
	#__HAL_DBGMCU_UNFREEZE_TIM14
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM14_STOP
)

	)

156 
	#__HAL_DBGMCU_FREEZE_WWDG
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

157 
	#__HAL_DBGMCU_UNFREEZE_WWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_WWDG_STOP
)

	)

162 
	#__HAL_DBGMCU_FREEZE_IWDG
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

163 
	#__HAL_DBGMCU_UNFREEZE_IWDG
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_IWDG_STOP
)

	)

168 
	#__HAL_DBGMCU_FREEZE_I2C1_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

169 
	#__HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C1_SMBUS_TIMEOUT
)

	)

171 #i‡
deföed
 (
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

175 
	#__HAL_DBGMCU_FREEZE_I2C2_TIMEOUT
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

176 
	#__HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_I2C2_SMBUS_TIMEOUT
)

	)

179 #i‡
deföed
 (
DBGMCU_CR_DBG_CAN1_STOP
)

183 
	#__HAL_DBGMCU_FREEZE_CAN1
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

184 
	#__HAL_DBGMCU_UNFREEZE_CAN1
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN1_STOP
)

	)

187 #i‡
deföed
 (
DBGMCU_CR_DBG_CAN2_STOP
)

191 
	#__HAL_DBGMCU_FREEZE_CAN2
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

192 
	#__HAL_DBGMCU_UNFREEZE_CAN2
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_CAN2_STOP
)

	)

196 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM1_STOP
)

200 
	#__HAL_DBGMCU_FREEZE_TIM1
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

201 
	#__HAL_DBGMCU_UNFREEZE_TIM1
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM1_STOP
)

	)

204 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM8_STOP
)

208 
	#__HAL_DBGMCU_FREEZE_TIM8
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

209 
	#__HAL_DBGMCU_UNFREEZE_TIM8
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM8_STOP
)

	)

212 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM9_STOP
)

216 
	#__HAL_DBGMCU_FREEZE_TIM9
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

217 
	#__HAL_DBGMCU_UNFREEZE_TIM9
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM9_STOP
)

	)

220 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM10_STOP
)

224 
	#__HAL_DBGMCU_FREEZE_TIM10
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

225 
	#__HAL_DBGMCU_UNFREEZE_TIM10
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM10_STOP
)

	)

228 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM11_STOP
)

232 
	#__HAL_DBGMCU_FREEZE_TIM11
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

233 
	#__HAL_DBGMCU_UNFREEZE_TIM11
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM11_STOP
)

	)

237 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM15_STOP
)

241 
	#__HAL_DBGMCU_FREEZE_TIM15
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

242 
	#__HAL_DBGMCU_UNFREEZE_TIM15
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM15_STOP
)

	)

245 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM16_STOP
)

249 
	#__HAL_DBGMCU_FREEZE_TIM16
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

250 
	#__HAL_DBGMCU_UNFREEZE_TIM16
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM16_STOP
)

	)

253 #i‡
deföed
 (
DBGMCU_CR_DBG_TIM17_STOP
)

257 
	#__HAL_DBGMCU_FREEZE_TIM17
(Ë
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

258 
	#__HAL_DBGMCU_UNFREEZE_TIM17
(Ë
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_TIM17_STOP
)

	)

268 
	#IS_TICKFREQ
(
FREQ
Ë(((FREQË=
HAL_TICK_FREQ_10HZ
) || \

269 ((
FREQ
Ë=
HAL_TICK_FREQ_100HZ
) || \

270 ((
FREQ
Ë=
HAL_TICK_FREQ_1KHZ
))

	)

283 
HAL_SètusTy≥Def
 
HAL_Inô
();

284 
HAL_SètusTy≥Def
 
HAL_DeInô
();

285 
HAL_M•Inô
();

286 
HAL_M•DeInô
();

287 
HAL_SètusTy≥Def
 
HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
);

296 
HAL_IncTick
();

297 
HAL_Dñay
(
uöt32_t
 
Dñay
);

298 
uöt32_t
 
HAL_GëTick
();

299 
uöt32_t
 
HAL_GëTickPrio
();

300 
HAL_SètusTy≥Def
 
HAL_SëTickFªq
(
HAL_TickFªqTy≥Def
 
Fªq
);

301 
HAL_TickFªqTy≥Def
 
HAL_GëTickFªq
();

302 
HAL_Su•ídTick
();

303 
HAL_ResumeTick
();

304 
uöt32_t
 
HAL_GëHÆVîsi⁄
();

305 
uöt32_t
 
HAL_GëREVID
();

306 
uöt32_t
 
HAL_GëDEVID
();

307 
uöt32_t
 
HAL_GëUIDw0
();

308 
uöt32_t
 
HAL_GëUIDw1
();

309 
uöt32_t
 
HAL_GëUIDw2
();

310 
HAL_DBGMCU_E«bÀDBGSÀïMode
();

311 
HAL_DBGMCU_DißbÀDBGSÀïMode
();

312 
HAL_DBGMCU_E«bÀDBGSt›Mode
();

313 
HAL_DBGMCU_DißbÀDBGSt›Mode
();

314 
HAL_DBGMCU_E«bÀDBGSèndbyMode
();

315 
HAL_DBGMCU_DißbÀDBGSèndbyMode
();

352 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h

21 #i‚de‡
__STM32F1xx_HAL_CORTEX_H


22 
	#__STM32F1xx_HAL_CORTEX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

43 #i‡(
__MPU_PRESENT
 == 1U)

50 
uöt8_t
 
E«bÀ
;

52 
uöt8_t
 
Numbî
;

54 
uöt32_t
 
Ba£Addªss
;

55 
uöt8_t
 
Size
;

57 
uöt8_t
 
SubRegi⁄DißbÀ
;

59 
uöt8_t
 
Ty≥ExtFõld
;

61 
uöt8_t
 
Ac˚ssPîmissi⁄
;

63 
uöt8_t
 
DißbÀExec
;

65 
uöt8_t
 
IsSh¨óbÀ
;

67 
uöt8_t
 
IsCachóbÀ
;

69 
uöt8_t
 
IsBuf„øbÀ
;

71 }
	tMPU_Regi⁄_InôTy≥Def
;

90 
	#NVIC_PRIORITYGROUP_0
 0x00000007U

	)

92 
	#NVIC_PRIORITYGROUP_1
 0x00000006U

	)

94 
	#NVIC_PRIORITYGROUP_2
 0x00000005U

	)

96 
	#NVIC_PRIORITYGROUP_3
 0x00000004U

	)

98 
	#NVIC_PRIORITYGROUP_4
 0x00000003U

	)

107 
	#SYSTICK_CLKSOURCE_HCLK_DIV8
 0x00000000U

	)

108 
	#SYSTICK_CLKSOURCE_HCLK
 0x00000004U

	)

114 #i‡(
__MPU_PRESENT
 == 1)

118 
	#MPU_HFNMI_PRIVDEF_NONE
 0x00000000U

	)

119 
	#MPU_HARDFAULT_NMI
 
MPU_CTRL_HFNMIENA_Msk


	)

120 
	#MPU_PRIVILEGED_DEFAULT
 
MPU_CTRL_PRIVDEFENA_Msk


	)

121 
	#MPU_HFNMI_PRIVDEF
 (
MPU_CTRL_HFNMIENA_Msk
 | 
MPU_CTRL_PRIVDEFENA_Msk
)

	)

130 
	#MPU_REGION_ENABLE
 ((
uöt8_t
)0x01)

	)

131 
	#MPU_REGION_DISABLE
 ((
uöt8_t
)0x00)

	)

139 
	#MPU_INSTRUCTION_ACCESS_ENABLE
 ((
uöt8_t
)0x00)

	)

140 
	#MPU_INSTRUCTION_ACCESS_DISABLE
 ((
uöt8_t
)0x01)

	)

148 
	#MPU_ACCESS_SHAREABLE
 ((
uöt8_t
)0x01)

	)

149 
	#MPU_ACCESS_NOT_SHAREABLE
 ((
uöt8_t
)0x00)

	)

157 
	#MPU_ACCESS_CACHEABLE
 ((
uöt8_t
)0x01)

	)

158 
	#MPU_ACCESS_NOT_CACHEABLE
 ((
uöt8_t
)0x00)

	)

166 
	#MPU_ACCESS_BUFFERABLE
 ((
uöt8_t
)0x01)

	)

167 
	#MPU_ACCESS_NOT_BUFFERABLE
 ((
uöt8_t
)0x00)

	)

175 
	#MPU_TEX_LEVEL0
 ((
uöt8_t
)0x00)

	)

176 
	#MPU_TEX_LEVEL1
 ((
uöt8_t
)0x01)

	)

177 
	#MPU_TEX_LEVEL2
 ((
uöt8_t
)0x02)

	)

185 
	#MPU_REGION_SIZE_32B
 ((
uöt8_t
)0x04)

	)

186 
	#MPU_REGION_SIZE_64B
 ((
uöt8_t
)0x05)

	)

187 
	#MPU_REGION_SIZE_128B
 ((
uöt8_t
)0x06)

	)

188 
	#MPU_REGION_SIZE_256B
 ((
uöt8_t
)0x07)

	)

189 
	#MPU_REGION_SIZE_512B
 ((
uöt8_t
)0x08)

	)

190 
	#MPU_REGION_SIZE_1KB
 ((
uöt8_t
)0x09)

	)

191 
	#MPU_REGION_SIZE_2KB
 ((
uöt8_t
)0x0A)

	)

192 
	#MPU_REGION_SIZE_4KB
 ((
uöt8_t
)0x0B)

	)

193 
	#MPU_REGION_SIZE_8KB
 ((
uöt8_t
)0x0C)

	)

194 
	#MPU_REGION_SIZE_16KB
 ((
uöt8_t
)0x0D)

	)

195 
	#MPU_REGION_SIZE_32KB
 ((
uöt8_t
)0x0E)

	)

196 
	#MPU_REGION_SIZE_64KB
 ((
uöt8_t
)0x0F)

	)

197 
	#MPU_REGION_SIZE_128KB
 ((
uöt8_t
)0x10)

	)

198 
	#MPU_REGION_SIZE_256KB
 ((
uöt8_t
)0x11)

	)

199 
	#MPU_REGION_SIZE_512KB
 ((
uöt8_t
)0x12)

	)

200 
	#MPU_REGION_SIZE_1MB
 ((
uöt8_t
)0x13)

	)

201 
	#MPU_REGION_SIZE_2MB
 ((
uöt8_t
)0x14)

	)

202 
	#MPU_REGION_SIZE_4MB
 ((
uöt8_t
)0x15)

	)

203 
	#MPU_REGION_SIZE_8MB
 ((
uöt8_t
)0x16)

	)

204 
	#MPU_REGION_SIZE_16MB
 ((
uöt8_t
)0x17)

	)

205 
	#MPU_REGION_SIZE_32MB
 ((
uöt8_t
)0x18)

	)

206 
	#MPU_REGION_SIZE_64MB
 ((
uöt8_t
)0x19)

	)

207 
	#MPU_REGION_SIZE_128MB
 ((
uöt8_t
)0x1A)

	)

208 
	#MPU_REGION_SIZE_256MB
 ((
uöt8_t
)0x1B)

	)

209 
	#MPU_REGION_SIZE_512MB
 ((
uöt8_t
)0x1C)

	)

210 
	#MPU_REGION_SIZE_1GB
 ((
uöt8_t
)0x1D)

	)

211 
	#MPU_REGION_SIZE_2GB
 ((
uöt8_t
)0x1E)

	)

212 
	#MPU_REGION_SIZE_4GB
 ((
uöt8_t
)0x1F)

	)

220 
	#MPU_REGION_NO_ACCESS
 ((
uöt8_t
)0x00)

	)

221 
	#MPU_REGION_PRIV_RW
 ((
uöt8_t
)0x01)

	)

222 
	#MPU_REGION_PRIV_RW_URO
 ((
uöt8_t
)0x02)

	)

223 
	#MPU_REGION_FULL_ACCESS
 ((
uöt8_t
)0x03)

	)

224 
	#MPU_REGION_PRIV_RO
 ((
uöt8_t
)0x05)

	)

225 
	#MPU_REGION_PRIV_RO_URO
 ((
uöt8_t
)0x06)

	)

233 
	#MPU_REGION_NUMBER0
 ((
uöt8_t
)0x00)

	)

234 
	#MPU_REGION_NUMBER1
 ((
uöt8_t
)0x01)

	)

235 
	#MPU_REGION_NUMBER2
 ((
uöt8_t
)0x02)

	)

236 
	#MPU_REGION_NUMBER3
 ((
uöt8_t
)0x03)

	)

237 
	#MPU_REGION_NUMBER4
 ((
uöt8_t
)0x04)

	)

238 
	#MPU_REGION_NUMBER5
 ((
uöt8_t
)0x05)

	)

239 
	#MPU_REGION_NUMBER6
 ((
uöt8_t
)0x06)

	)

240 
	#MPU_REGION_NUMBER7
 ((
uöt8_t
)0x07)

	)

262 
HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
);

263 
HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
);

264 
HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
);

265 
HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
);

266 
HAL_NVIC_Sy°emRe£t
();

267 
uöt32_t
 
HAL_SYSTICK_C⁄fig
(uöt32_à
TicksNumb
);

276 
uöt32_t
 
HAL_NVIC_GëPri‹ôyGroupög
();

277 
HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
);

278 
uöt32_t
 
HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

279 
HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
);

280 
HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
);

281 
uöt32_t
 
HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
);

282 
HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
);

283 
HAL_SYSTICK_IRQH™dÀr
();

284 
HAL_SYSTICK_CÆlback
();

286 #i‡(
__MPU_PRESENT
 == 1U)

287 
HAL_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
);

288 
HAL_MPU_DißbÀ
();

289 
HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
);

306 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_PRIORITYGROUP_0
) || \

307 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_1
) || \

308 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_2
) || \

309 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_3
) || \

310 ((
GROUP
Ë=
NVIC_PRIORITYGROUP_4
))

	)

312 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10U)

	)

314 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10U)

	)

316 
	#IS_NVIC_DEVICE_IRQ
(
IRQ
Ë((IRQË>(
IRQn_Ty≥
)0x00U)

	)

318 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SYSTICK_CLKSOURCE_HCLK
) || \

319 ((
SOURCE
Ë=
SYSTICK_CLKSOURCE_HCLK_DIV8
))

	)

321 #i‡(
__MPU_PRESENT
 == 1U)

322 
	#IS_MPU_REGION_ENABLE
(
STATE
Ë(((STATEË=
MPU_REGION_ENABLE
) || \

323 ((
STATE
Ë=
MPU_REGION_DISABLE
))

	)

325 
	#IS_MPU_INSTRUCTION_ACCESS
(
STATE
Ë(((STATEË=
MPU_INSTRUCTION_ACCESS_ENABLE
) || \

326 ((
STATE
Ë=
MPU_INSTRUCTION_ACCESS_DISABLE
))

	)

328 
	#IS_MPU_ACCESS_SHAREABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_SHAREABLE
) || \

329 ((
STATE
Ë=
MPU_ACCESS_NOT_SHAREABLE
))

	)

331 
	#IS_MPU_ACCESS_CACHEABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_CACHEABLE
) || \

332 ((
STATE
Ë=
MPU_ACCESS_NOT_CACHEABLE
))

	)

334 
	#IS_MPU_ACCESS_BUFFERABLE
(
STATE
Ë(((STATEË=
MPU_ACCESS_BUFFERABLE
) || \

335 ((
STATE
Ë=
MPU_ACCESS_NOT_BUFFERABLE
))

	)

337 
	#IS_MPU_TEX_LEVEL
(
TYPE
Ë(((TYPEË=
MPU_TEX_LEVEL0
) || \

338 ((
TYPE
Ë=
MPU_TEX_LEVEL1
) || \

339 ((
TYPE
Ë=
MPU_TEX_LEVEL2
))

	)

341 
	#IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
TYPE
Ë(((TYPEË=
MPU_REGION_NO_ACCESS
) || \

342 ((
TYPE
Ë=
MPU_REGION_PRIV_RW
) || \

343 ((
TYPE
Ë=
MPU_REGION_PRIV_RW_URO
) || \

344 ((
TYPE
Ë=
MPU_REGION_FULL_ACCESS
) || \

345 ((
TYPE
Ë=
MPU_REGION_PRIV_RO
) || \

346 ((
TYPE
Ë=
MPU_REGION_PRIV_RO_URO
))

	)

348 
	#IS_MPU_REGION_NUMBER
(
NUMBER
Ë(((NUMBERË=
MPU_REGION_NUMBER0
) || \

349 ((
NUMBER
Ë=
MPU_REGION_NUMBER1
) || \

350 ((
NUMBER
Ë=
MPU_REGION_NUMBER2
) || \

351 ((
NUMBER
Ë=
MPU_REGION_NUMBER3
) || \

352 ((
NUMBER
Ë=
MPU_REGION_NUMBER4
) || \

353 ((
NUMBER
Ë=
MPU_REGION_NUMBER5
) || \

354 ((
NUMBER
Ë=
MPU_REGION_NUMBER6
) || \

355 ((
NUMBER
Ë=
MPU_REGION_NUMBER7
))

	)

357 
	#IS_MPU_REGION_SIZE
(
SIZE
Ë(((SIZEË=
MPU_REGION_SIZE_32B
) || \

358 ((
SIZE
Ë=
MPU_REGION_SIZE_64B
) || \

359 ((
SIZE
Ë=
MPU_REGION_SIZE_128B
) || \

360 ((
SIZE
Ë=
MPU_REGION_SIZE_256B
) || \

361 ((
SIZE
Ë=
MPU_REGION_SIZE_512B
) || \

362 ((
SIZE
Ë=
MPU_REGION_SIZE_1KB
) || \

363 ((
SIZE
Ë=
MPU_REGION_SIZE_2KB
) || \

364 ((
SIZE
Ë=
MPU_REGION_SIZE_4KB
) || \

365 ((
SIZE
Ë=
MPU_REGION_SIZE_8KB
) || \

366 ((
SIZE
Ë=
MPU_REGION_SIZE_16KB
) || \

367 ((
SIZE
Ë=
MPU_REGION_SIZE_32KB
) || \

368 ((
SIZE
Ë=
MPU_REGION_SIZE_64KB
) || \

369 ((
SIZE
Ë=
MPU_REGION_SIZE_128KB
) || \

370 ((
SIZE
Ë=
MPU_REGION_SIZE_256KB
) || \

371 ((
SIZE
Ë=
MPU_REGION_SIZE_512KB
) || \

372 ((
SIZE
Ë=
MPU_REGION_SIZE_1MB
) || \

373 ((
SIZE
Ë=
MPU_REGION_SIZE_2MB
) || \

374 ((
SIZE
Ë=
MPU_REGION_SIZE_4MB
) || \

375 ((
SIZE
Ë=
MPU_REGION_SIZE_8MB
) || \

376 ((
SIZE
Ë=
MPU_REGION_SIZE_16MB
) || \

377 ((
SIZE
Ë=
MPU_REGION_SIZE_32MB
) || \

378 ((
SIZE
Ë=
MPU_REGION_SIZE_64MB
) || \

379 ((
SIZE
Ë=
MPU_REGION_SIZE_128MB
) || \

380 ((
SIZE
Ë=
MPU_REGION_SIZE_256MB
) || \

381 ((
SIZE
Ë=
MPU_REGION_SIZE_512MB
) || \

382 ((
SIZE
Ë=
MPU_REGION_SIZE_1GB
) || \

383 ((
SIZE
Ë=
MPU_REGION_SIZE_2GB
) || \

384 ((
SIZE
Ë=
MPU_REGION_SIZE_4GB
))

	)

386 
	#IS_MPU_SUB_REGION_DISABLE
(
SUBREGION
Ë((SUBREGIONË< (
uöt16_t
)0x00FF)

	)

403 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h

22 #i‚de‡
__STM32F1xx_HAL_DEF


23 
	#__STM32F1xx_HAL_DEF


	)

25 #ifde‡
__˝lu•lus


30 
	~"°m32f1xx.h
"

31 
	~"Legacy/°m32_hÆ_Àgacy.h
"

32 
	~<°ddef.h
>

41 
HAL_OK
 = 0x00U,

42 
HAL_ERROR
 = 0x01U,

43 
HAL_BUSY
 = 0x02U,

44 
HAL_TIMEOUT
 = 0x03U

45 } 
	tHAL_SètusTy≥Def
;

52 
HAL_UNLOCKED
 = 0x00U,

53 
HAL_LOCKED
 = 0x01U

54 } 
	tHAL_LockTy≥Def
;

57 
	#HAL_MAX_DELAY
 0xFFFFFFFFU

	)

59 
	#HAL_IS_BIT_SET
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë!0U)

	)

60 
	#HAL_IS_BIT_CLR
(
REG
, 
BIT
Ë(((REGË& (BIT)Ë=0U)

	)

62 
	#__HAL_LINKDMA
(
__HANDLE__
, 
__PPP_DMA_FIELD__
, 
__DMA_HANDLE__
) \

64 (
__HANDLE__
)->
__PPP_DMA_FIELD__
 = &(
__DMA_HANDLE__
); \

65 (
__DMA_HANDLE__
).
P¨ít
 = (
__HANDLE__
); \

66 } 0U)

	)

68 
	#UNUSED
(
X
Ë()X

	)

85 
	#__HAL_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 0U)

	)

87 #i‡(
USE_RTOS
 == 1U)

91 
	#__HAL_LOCK
(
__HANDLE__
) \

93 if((
__HANDLE__
)->
Lock
 =
HAL_LOCKED
) \

95  
HAL_BUSY
; \

99 (
__HANDLE__
)->
Lock
 = 
HAL_LOCKED
; \

101 }0U)

	)

103 
	#__HAL_UNLOCK
(
__HANDLE__
) \

105 (
__HANDLE__
)->
Lock
 = 
HAL_UNLOCKED
; \

106 }0U)

	)

109 #i‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

110 #i‚de‡
__wók


111 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

113 #i‚de‡
__∑cked


114 
	#__∑cked
 
	`__©åibuã__
((
∑cked
))

	)

116 #ñi‡
deföed
 ( 
__GNUC__
 ) && !deföed (
__CC_ARM
)

117 #i‚de‡
__wók


118 
	#__wók
 
	`__©åibuã__
((
wók
))

	)

120 #i‚de‡
__∑cked


121 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

127 #i‡
deföed
 (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050)

128 #i‚de‡
__ALIGN_BEGIN


129 
	#__ALIGN_BEGIN


	)

131 #i‚de‡
__ALIGN_END


132 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

134 #ñi‡
deföed
 ( 
__GNUC__
 ) && !deföed (
__CC_ARM
)

135 #i‚de‡
__ALIGN_END


136 
	#__ALIGN_END
 
	`__©åibuã__
 ((
	`Æig√d
 (4)))

	)

138 #i‚de‡
__ALIGN_BEGIN


139 
	#__ALIGN_BEGIN


	)

142 #i‚de‡
__ALIGN_END


143 
	#__ALIGN_END


	)

145 #i‚de‡
__ALIGN_BEGIN


146 #i‡
deföed
 (
__CC_ARM
)

147 
	#__ALIGN_BEGIN
 
	`__Æign
(4)

	)

148 #ñi‡
deföed
 (
__ICCARM__
)

149 
	#__ALIGN_BEGIN


	)

158 #i‡
deföed
 ( 
__CC_ARM
 ) || (deföed (
__ARMCC_VERSION
) && (__ARMCC_VERSION >= 6010050))

168 
	#__RAM_FUNC


	)

170 #ñi‡
deföed
 ( 
__ICCARM__
 )

175 
	#__RAM_FUNC
 
__ømfunc


	)

177 #ñi‡
deföed
 ( 
__GNUC__
 )

183 
	#__RAM_FUNC
 
	`__©åibuã__
((
	`£˘i⁄
(".RamFunc")))

	)

190 #i‡
deföed
 ( 
__CC_ARM
 ) || (deföed (
__ARMCC_VERSION
Ë&& (__ARMCC_VERSION >6010050)Ë|| deföed ( 
__GNUC__
 )

194 
	#__NOINLINE
 
	`__©åibuã__
 ( (
noölöe
Ë)

	)

196 #ñi‡
deföed
 ( 
__ICCARM__
 )

200 
	#__NOINLINE
 
	`_Pøgma
("›timizêno_ölöe")

	)

204 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma.h

21 #i‚de‡
__STM32F1xx_HAL_DMA_H


22 
	#__STM32F1xx_HAL_DMA_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

50 
uöt32_t
 
Dúe˘i⁄
;

54 
uöt32_t
 
PîùhInc
;

57 
uöt32_t
 
MemInc
;

60 
uöt32_t
 
PîùhD©aAlignmít
;

63 
uöt32_t
 
MemD©aAlignmít
;

66 
uöt32_t
 
Mode
;

71 
uöt32_t
 
Pri‹ôy
;

73 } 
	tDMA_InôTy≥Def
;

80 
HAL_DMA_STATE_RESET
 = 0x00U,

81 
HAL_DMA_STATE_READY
 = 0x01U,

82 
HAL_DMA_STATE_BUSY
 = 0x02U,

83 
HAL_DMA_STATE_TIMEOUT
 = 0x03U

84 }
	tHAL_DMA_SèãTy≥Def
;

91 
HAL_DMA_FULL_TRANSFER
 = 0x00U,

92 
HAL_DMA_HALF_TRANSFER
 = 0x01U

93 }
	tHAL_DMA_LevñCom∂ëeTy≥Def
;

100 
HAL_DMA_XFER_CPLT_CB_ID
 = 0x00U,

101 
HAL_DMA_XFER_HALFCPLT_CB_ID
 = 0x01U,

102 
HAL_DMA_XFER_ERROR_CB_ID
 = 0x02U,

103 
HAL_DMA_XFER_ABORT_CB_ID
 = 0x03U,

104 
HAL_DMA_XFER_ALL_CB_ID
 = 0x04U

106 }
	tHAL_DMA_CÆlbackIDTy≥Def
;

111 
	s__DMA_H™dÀTy≥Def


113 
DMA_Ch™√l_Ty≥Def
 *
In°™˚
;

115 
DMA_InôTy≥Def
 
Inô
;

117 
HAL_LockTy≥Def
 
Lock
;

119 
HAL_DMA_SèãTy≥Def
 
Sèã
;

121 *
P¨ít
;

123 (* 
X„rC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

125 (* 
X„rHÆfC∂tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

127 (* 
X„rEº‹CÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

129 (* 
X„rAb‹tCÆlback
)–
__DMA_H™dÀTy≥Def
 * 
hdma
);

131 
__IO
 
uöt32_t
 
Eº‹Code
;

133 
DMA_Ty≥Def
 *
DmaBa£Addªss
;

135 
uöt32_t
 
Ch™√lIndex
;

137 } 
	tDMA_H™dÀTy≥Def
;

151 
	#HAL_DMA_ERROR_NONE
 0x00000000U

	)

152 
	#HAL_DMA_ERROR_TE
 0x00000001U

	)

153 
	#HAL_DMA_ERROR_NO_XFER
 0x00000004U

	)

154 
	#HAL_DMA_ERROR_TIMEOUT
 0x00000020U

	)

155 
	#HAL_DMA_ERROR_NOT_SUPPORTED
 0x00000100U

	)

163 
	#DMA_PERIPH_TO_MEMORY
 0x00000000U

	)

164 
	#DMA_MEMORY_TO_PERIPH
 ((
uöt32_t
)
DMA_CCR_DIR
Ë

	)

165 
	#DMA_MEMORY_TO_MEMORY
 ((
uöt32_t
)
DMA_CCR_MEM2MEM
Ë

	)

174 
	#DMA_PINC_ENABLE
 ((
uöt32_t
)
DMA_CCR_PINC
Ë

	)

175 
	#DMA_PINC_DISABLE
 0x00000000U

	)

183 
	#DMA_MINC_ENABLE
 ((
uöt32_t
)
DMA_CCR_MINC
Ë

	)

184 
	#DMA_MINC_DISABLE
 0x00000000U

	)

192 
	#DMA_PDATAALIGN_BYTE
 0x00000000U

	)

193 
	#DMA_PDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_CCR_PSIZE_0
Ë

	)

194 
	#DMA_PDATAALIGN_WORD
 ((
uöt32_t
)
DMA_CCR_PSIZE_1
Ë

	)

202 
	#DMA_MDATAALIGN_BYTE
 0x00000000U

	)

203 
	#DMA_MDATAALIGN_HALFWORD
 ((
uöt32_t
)
DMA_CCR_MSIZE_0
Ë

	)

204 
	#DMA_MDATAALIGN_WORD
 ((
uöt32_t
)
DMA_CCR_MSIZE_1
Ë

	)

212 
	#DMA_NORMAL
 0x00000000U

	)

213 
	#DMA_CIRCULAR
 ((
uöt32_t
)
DMA_CCR_CIRC
Ë

	)

221 
	#DMA_PRIORITY_LOW
 0x00000000U

	)

222 
	#DMA_PRIORITY_MEDIUM
 ((
uöt32_t
)
DMA_CCR_PL_0
Ë

	)

223 
	#DMA_PRIORITY_HIGH
 ((
uöt32_t
)
DMA_CCR_PL_1
Ë

	)

224 
	#DMA_PRIORITY_VERY_HIGH
 ((
uöt32_t
)
DMA_CCR_PL
Ë

	)

233 
	#DMA_IT_TC
 ((
uöt32_t
)
DMA_CCR_TCIE
)

	)

234 
	#DMA_IT_HT
 ((
uöt32_t
)
DMA_CCR_HTIE
)

	)

235 
	#DMA_IT_TE
 ((
uöt32_t
)
DMA_CCR_TEIE
)

	)

243 
	#DMA_FLAG_GL1
 0x00000001U

	)

244 
	#DMA_FLAG_TC1
 0x00000002U

	)

245 
	#DMA_FLAG_HT1
 0x00000004U

	)

246 
	#DMA_FLAG_TE1
 0x00000008U

	)

247 
	#DMA_FLAG_GL2
 0x00000010U

	)

248 
	#DMA_FLAG_TC2
 0x00000020U

	)

249 
	#DMA_FLAG_HT2
 0x00000040U

	)

250 
	#DMA_FLAG_TE2
 0x00000080U

	)

251 
	#DMA_FLAG_GL3
 0x00000100U

	)

252 
	#DMA_FLAG_TC3
 0x00000200U

	)

253 
	#DMA_FLAG_HT3
 0x00000400U

	)

254 
	#DMA_FLAG_TE3
 0x00000800U

	)

255 
	#DMA_FLAG_GL4
 0x00001000U

	)

256 
	#DMA_FLAG_TC4
 0x00002000U

	)

257 
	#DMA_FLAG_HT4
 0x00004000U

	)

258 
	#DMA_FLAG_TE4
 0x00008000U

	)

259 
	#DMA_FLAG_GL5
 0x00010000U

	)

260 
	#DMA_FLAG_TC5
 0x00020000U

	)

261 
	#DMA_FLAG_HT5
 0x00040000U

	)

262 
	#DMA_FLAG_TE5
 0x00080000U

	)

263 
	#DMA_FLAG_GL6
 0x00100000U

	)

264 
	#DMA_FLAG_TC6
 0x00200000U

	)

265 
	#DMA_FLAG_HT6
 0x00400000U

	)

266 
	#DMA_FLAG_TE6
 0x00800000U

	)

267 
	#DMA_FLAG_GL7
 0x01000000U

	)

268 
	#DMA_FLAG_TC7
 0x02000000U

	)

269 
	#DMA_FLAG_HT7
 0x04000000U

	)

270 
	#DMA_FLAG_TE7
 0x08000000U

	)

289 
	#__HAL_DMA_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_DMA_STATE_RESET
)

	)

296 
	#__HAL_DMA_ENABLE
(
__HANDLE__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CCR
, 
DMA_CCR_EN
))

	)

303 
	#__HAL_DMA_DISABLE
(
__HANDLE__
Ë(
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CCR
, 
DMA_CCR_EN
))

	)

318 
	#__HAL_DMA_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CCR
, (__INTERRUPT__)))

	)

330 
	#__HAL_DMA_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CCR
 , (__INTERRUPT__)))

	)

342 
	#__HAL_DMA_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
CCR
 & (__INTERRUPT__)Ë=(__INTERRUPT__)Ë? 
SET
 : 
RESET
)

	)

349 
	#__HAL_DMA_GET_COUNTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CNDTR
)

	)

356 
	~"°m32f1xx_hÆ_dma_ex.h
"

367 
HAL_SètusTy≥Def
 
HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
);

368 
HAL_SètusTy≥Def
 
HAL_DMA_DeInô
 (
DMA_H™dÀTy≥Def
 *
hdma
);

377 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ
 (
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

378 
HAL_SètusTy≥Def
 
HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

379 
HAL_SètusTy≥Def
 
HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
);

380 
HAL_SètusTy≥Def
 
HAL_DMA_Ab‹t_IT
(
DMA_H™dÀTy≥Def
 *
hdma
);

381 
HAL_SètusTy≥Def
 
HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
);

382 
HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
);

383 
HAL_SètusTy≥Def
 
HAL_DMA_Regi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
, (* 
pCÆlback
)–DMA_H™dÀTy≥De‡* 
_hdma
));

384 
HAL_SètusTy≥Def
 
HAL_DMA_UnRegi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
);

394 
HAL_DMA_SèãTy≥Def
 
HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
);

395 
uöt32_t
 
HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

409 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_PERIPH_TO_MEMORY
 ) || \

410 ((
DIRECTION
Ë=
DMA_MEMORY_TO_PERIPH
) || \

411 ((
DIRECTION
Ë=
DMA_MEMORY_TO_MEMORY
))

	)

413 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1UË&& ((SIZEË< 0x10000U))

	)

415 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PINC_ENABLE
) || \

416 ((
STATE
Ë=
DMA_PINC_DISABLE
))

	)

418 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_MINC_ENABLE
) || \

419 ((
STATE
Ë=
DMA_MINC_DISABLE
))

	)

421 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PDATAALIGN_BYTE
) || \

422 ((
SIZE
Ë=
DMA_PDATAALIGN_HALFWORD
) || \

423 ((
SIZE
Ë=
DMA_PDATAALIGN_WORD
))

	)

425 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_MDATAALIGN_BYTE
) || \

426 ((
SIZE
Ë=
DMA_MDATAALIGN_HALFWORD
) || \

427 ((
SIZE
Ë=
DMA_MDATAALIGN_WORD
 ))

	)

429 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_NORMAL
 ) || \

430 ((
MODE
Ë=
DMA_CIRCULAR
))

	)

432 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_PRIORITY_LOW
 ) || \

433 ((
PRIORITY
Ë=
DMA_PRIORITY_MEDIUM
) || \

434 ((
PRIORITY
Ë=
DMA_PRIORITY_HIGH
) || \

435 ((
PRIORITY
Ë=
DMA_PRIORITY_VERY_HIGH
))

	)

451 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma_ex.h

21 #i‚de‡
__STM32F1xx_HAL_DMA_EX_H


22 
	#__STM32F1xx_HAL_DMA_EX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

46 #i‡
deföed
 (
STM32F100xE
Ë|| deföed (
STM32F101xE
Ë|| deföed (
STM32F101xG
Ë|| deföed (
STM32F103xE
) || \

47 
deföed
 (
STM32F103xG
Ë|| deföed (
STM32F105xC
Ë|| deföed (
STM32F107xC
)

57 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

58 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

59 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

60 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

61 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

62 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TC5
 :\

63 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TC6
 :\

64 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_TC7
 :\

65 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

66 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

67 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

68 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

69 
DMA_FLAG_TC5
)

	)

76 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

77 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

78 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

79 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

80 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

81 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_HT5
 :\

82 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_HT6
 :\

83 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_HT7
 :\

84 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

85 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

86 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

87 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

88 
DMA_FLAG_HT5
)

	)

95 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

96 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

97 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

98 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

99 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

100 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TE5
 :\

101 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TE6
 :\

102 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_TE7
 :\

103 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

104 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

105 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

106 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

107 
DMA_FLAG_TE5
)

	)

114 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

115 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_GL1
 :\

116 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_GL2
 :\

117 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_GL3
 :\

118 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_GL4
 :\

119 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_GL5
 :\

120 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_GL6
 :\

121 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l7
))? 
DMA_FLAG_GL7
 :\

122 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l1
))? 
DMA_FLAG_GL1
 :\

123 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l2
))? 
DMA_FLAG_GL2
 :\

124 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l3
))? 
DMA_FLAG_GL3
 :\

125 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA2_Ch™√l4
))? 
DMA_FLAG_GL4
 :\

126 
DMA_FLAG_GL5
)

	)

139 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
)\

140 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Ch™√l7
)? (
DMA2
->
ISR
 & (
__FLAG__
)) :\

141 (
DMA1
->
ISR
 & (
__FLAG__
)))

	)

154 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
) \

155 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë> (uöt32_t)
DMA1_Ch™√l7
)? (
DMA2
->
IFCR
 = (
__FLAG__
)) :\

156 (
DMA1
->
IFCR
 = (
__FLAG__
)))

	)

172 
	#__HAL_DMA_GET_TC_FLAG_INDEX
(
__HANDLE__
) \

173 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TC1
 :\

174 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TC2
 :\

175 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TC3
 :\

176 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TC4
 :\

177 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TC5
 :\

178 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TC6
 :\

179 
DMA_FLAG_TC7
)

	)

186 
	#__HAL_DMA_GET_HT_FLAG_INDEX
(
__HANDLE__
)\

187 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_HT1
 :\

188 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_HT2
 :\

189 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_HT3
 :\

190 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_HT4
 :\

191 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_HT5
 :\

192 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_HT6
 :\

193 
DMA_FLAG_HT7
)

	)

200 
	#__HAL_DMA_GET_TE_FLAG_INDEX
(
__HANDLE__
)\

201 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_TE1
 :\

202 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_TE2
 :\

203 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_TE3
 :\

204 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_TE4
 :\

205 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_TE5
 :\

206 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_TE6
 :\

207 
DMA_FLAG_TE7
)

	)

214 
	#__HAL_DMA_GET_GI_FLAG_INDEX
(
__HANDLE__
)\

215 (((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l1
))? 
DMA_FLAG_GL1
 :\

216 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l2
))? 
DMA_FLAG_GL2
 :\

217 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l3
))? 
DMA_FLAG_GL3
 :\

218 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l4
))? 
DMA_FLAG_GL4
 :\

219 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l5
))? 
DMA_FLAG_GL5
 :\

220 ((
uöt32_t
)((
__HANDLE__
)->
In°™˚
Ë=((uöt32_t)
DMA1_Ch™√l6
))? 
DMA_FLAG_GL6
 :\

221 
DMA_FLAG_GL7
)

	)

236 
	#__HAL_DMA_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
ISR
 & (__FLAG__))

	)

250 
	#__HAL_DMA_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(
DMA1
->
IFCR
 = (__FLAG__))

	)

270 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_exti.h

21 #i‚de‡
STM32F1xx_HAL_EXTI_H


22 
	#STM32F1xx_HAL_EXTI_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

51 
HAL_EXTI_COMMON_CB_ID
 = 0x00U

52 } 
	tEXTI_CÆlbackIDTy≥Def
;

59 
uöt32_t
 
Löe
;

60 (* 
PídögCÆlback
)();

61 } 
	tEXTI_H™dÀTy≥Def
;

68 
uöt32_t
 
Löe
;

70 
uöt32_t
 
Mode
;

72 
uöt32_t
 
Triggî
;

74 
uöt32_t
 
GPIOSñ
;

77 } 
	tEXTI_C⁄figTy≥Def
;

91 
	#EXTI_LINE_0
 (
EXTI_GPIO
 | 0x00uË

	)

92 
	#EXTI_LINE_1
 (
EXTI_GPIO
 | 0x01uË

	)

93 
	#EXTI_LINE_2
 (
EXTI_GPIO
 | 0x02uË

	)

94 
	#EXTI_LINE_3
 (
EXTI_GPIO
 | 0x03uË

	)

95 
	#EXTI_LINE_4
 (
EXTI_GPIO
 | 0x04uË

	)

96 
	#EXTI_LINE_5
 (
EXTI_GPIO
 | 0x05uË

	)

97 
	#EXTI_LINE_6
 (
EXTI_GPIO
 | 0x06uË

	)

98 
	#EXTI_LINE_7
 (
EXTI_GPIO
 | 0x07uË

	)

99 
	#EXTI_LINE_8
 (
EXTI_GPIO
 | 0x08uË

	)

100 
	#EXTI_LINE_9
 (
EXTI_GPIO
 | 0x09uË

	)

101 
	#EXTI_LINE_10
 (
EXTI_GPIO
 | 0x0AuË

	)

102 
	#EXTI_LINE_11
 (
EXTI_GPIO
 | 0x0BuË

	)

103 
	#EXTI_LINE_12
 (
EXTI_GPIO
 | 0x0CuË

	)

104 
	#EXTI_LINE_13
 (
EXTI_GPIO
 | 0x0DuË

	)

105 
	#EXTI_LINE_14
 (
EXTI_GPIO
 | 0x0EuË

	)

106 
	#EXTI_LINE_15
 (
EXTI_GPIO
 | 0x0FuË

	)

107 
	#EXTI_LINE_16
 (
EXTI_CONFIG
 | 0x10uË

	)

108 
	#EXTI_LINE_17
 (
EXTI_CONFIG
 | 0x11uË

	)

109 #i‡
deföed
(
EXTI_IMR_IM18
)

110 
	#EXTI_LINE_18
 (
EXTI_CONFIG
 | 0x12uË

	)

112 #i‡
deföed
(
EXTI_IMR_IM19
)

113 
	#EXTI_LINE_19
 (
EXTI_CONFIG
 | 0x13uË

	)

123 
	#EXTI_MODE_NONE
 0x00000000u

	)

124 
	#EXTI_MODE_INTERRUPT
 0x00000001u

	)

125 
	#EXTI_MODE_EVENT
 0x00000002u

	)

133 
	#EXTI_TRIGGER_NONE
 0x00000000u

	)

134 
	#EXTI_TRIGGER_RISING
 0x00000001u

	)

135 
	#EXTI_TRIGGER_FALLING
 0x00000002u

	)

136 
	#EXTI_TRIGGER_RISING_FALLING
 (
EXTI_TRIGGER_RISING
 | 
EXTI_TRIGGER_FALLING
)

	)

145 
	#EXTI_GPIOA
 0x00000000u

	)

146 
	#EXTI_GPIOB
 0x00000001u

	)

147 
	#EXTI_GPIOC
 0x00000002u

	)

148 
	#EXTI_GPIOD
 0x00000003u

	)

149 #i‡
deföed
 (
GPIOE
)

150 
	#EXTI_GPIOE
 0x00000004u

	)

152 #i‡
deföed
 (
GPIOF
)

153 
	#EXTI_GPIOF
 0x00000005u

	)

155 #i‡
deföed
 (
GPIOG
)

156 
	#EXTI_GPIOG
 0x00000006u

	)

182 
	#EXTI_PROPERTY_SHIFT
 24u

	)

183 
	#EXTI_CONFIG
 (0x02uL << 
EXTI_PROPERTY_SHIFT
)

	)

184 
	#EXTI_GPIO
 ((0x04uL << 
EXTI_PROPERTY_SHIFT
Ë| 
EXTI_CONFIG
)

	)

185 
	#EXTI_PROPERTY_MASK
 (
EXTI_CONFIG
 | 
EXTI_GPIO
)

	)

190 
	#EXTI_PIN_MASK
 0x0000001Fu

	)

195 
	#EXTI_MODE_MASK
 (
EXTI_MODE_EVENT
 | 
EXTI_MODE_INTERRUPT
)

	)

200 
	#EXTI_TRIGGER_MASK
 (
EXTI_TRIGGER_RISING
 | 
EXTI_TRIGGER_FALLING
)

	)

205 #i‡
deföed
(
EXTI_IMR_IM19
)

206 
	#EXTI_LINE_NB
 20UL

	)

207 #ñi‡
deföed
(
EXTI_IMR_IM18
)

208 
	#EXTI_LINE_NB
 19UL

	)

210 
	#EXTI_LINE_NB
 18UL

	)

220 
	#IS_EXTI_LINE
(
__LINE__
Ë((((__LINE__Ë& ~(
EXTI_PROPERTY_MASK
 | 
EXTI_PIN_MASK
)) == 0x00u) && \

221 ((((
__LINE__
Ë& 
EXTI_PROPERTY_MASK
Ë=
EXTI_CONFIG
) || \

222 (((
__LINE__
Ë& 
EXTI_PROPERTY_MASK
Ë=
EXTI_GPIO
)) && \

223 (((
__LINE__
Ë& 
EXTI_PIN_MASK
Ë< 
EXTI_LINE_NB
))

	)

225 
	#IS_EXTI_MODE
(
__LINE__
Ë((((__LINE__Ë& 
EXTI_MODE_MASK
) != 0x00u) && \

226 (((
__LINE__
Ë& ~
EXTI_MODE_MASK
Ë=0x00u))

	)

228 
	#IS_EXTI_TRIGGER
(
__LINE__
Ë(((__LINE__Ë& ~
EXTI_TRIGGER_MASK
Ë=0x00u)

	)

230 
	#IS_EXTI_PENDING_EDGE
(
__LINE__
Ë((__LINE__Ë=
EXTI_TRIGGER_RISING_FALLING
)

	)

232 
	#IS_EXTI_CONFIG_LINE
(
__LINE__
Ë(((__LINE__Ë& 
EXTI_CONFIG
Ë!0x00u)

	)

234 #i‡
deföed
 (
GPIOG
)

235 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

236 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

237 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

238 ((
__PORT__
Ë=
EXTI_GPIOD
) || \

239 ((
__PORT__
Ë=
EXTI_GPIOE
) || \

240 ((
__PORT__
Ë=
EXTI_GPIOF
) || \

241 ((
__PORT__
Ë=
EXTI_GPIOG
))

	)

242 #ñi‡
deföed
 (
GPIOF
)

243 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

244 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

245 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

246 ((
__PORT__
Ë=
EXTI_GPIOD
) || \

247 ((
__PORT__
Ë=
EXTI_GPIOE
) || \

248 ((
__PORT__
Ë=
EXTI_GPIOF
))

	)

249 #ñi‡
deföed
 (
GPIOE
)

250 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

251 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

252 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

253 ((
__PORT__
Ë=
EXTI_GPIOD
) || \

254 ((
__PORT__
Ë=
EXTI_GPIOE
))

	)

256 
	#IS_EXTI_GPIO_PORT
(
__PORT__
Ë(((__PORT__Ë=
EXTI_GPIOA
) || \

257 ((
__PORT__
Ë=
EXTI_GPIOB
) || \

258 ((
__PORT__
Ë=
EXTI_GPIOC
) || \

259 ((
__PORT__
Ë=
EXTI_GPIOD
))

	)

262 
	#IS_EXTI_GPIO_PIN
(
__PIN__
Ë((__PIN__Ë< 16u)

	)

279 
HAL_SètusTy≥Def
 
HAL_EXTI_SëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
);

280 
HAL_SètusTy≥Def
 
HAL_EXTI_GëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
);

281 
HAL_SètusTy≥Def
 
HAL_EXTI_CÀ¨C⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
);

282 
HAL_SètusTy≥Def
 
HAL_EXTI_Regi°îCÆlback
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_CÆlbackIDTy≥Def
 
CÆlbackID
, (*
pPídögCb‚
)());

283 
HAL_SètusTy≥Def
 
HAL_EXTI_GëH™dÀ
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
ExtiLöe
);

293 
HAL_EXTI_IRQH™dÀr
(
EXTI_H™dÀTy≥Def
 *
hexti
);

294 
uöt32_t
 
HAL_EXTI_GëPídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, uöt32_à
Edge
);

295 
HAL_EXTI_CÀ¨Pídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
Edge
);

296 
HAL_EXTI_Gíî©eSWI
(
EXTI_H™dÀTy≥Def
 *
hexti
);

314 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash.h

21 #i‚de‡
__STM32F1xx_HAL_FLASH_H


22 
	#__STM32F1xx_HAL_FLASH_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

42 
	#FLASH_TIMEOUT_VALUE
 50000U

	)

51 
	#IS_FLASH_TYPEPROGRAM
(
VALUE
Ë(((VALUEË=
FLASH_TYPEPROGRAM_HALFWORD
) || \

52 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_WORD
) || \

53 ((
VALUE
Ë=
FLASH_TYPEPROGRAM_DOUBLEWORD
))

	)

55 #i‡ 
deföed
(
FLASH_ACR_LATENCY
)

56 
	#IS_FLASH_LATENCY
(
__LATENCY__
Ë(((__LATENCY__Ë=
FLASH_LATENCY_0
) || \

57 ((
__LATENCY__
Ë=
FLASH_LATENCY_1
) || \

58 ((
__LATENCY__
Ë=
FLASH_LATENCY_2
))

	)

61 
	#IS_FLASH_LATENCY
(
__LATENCY__
Ë((__LATENCY__Ë=
FLASH_LATENCY_0
)

	)

77 
FLASH_PROC_NONE
 = 0U,

78 
FLASH_PROC_PAGEERASE
 = 1U,

79 
FLASH_PROC_MASSERASE
 = 2U,

80 
FLASH_PROC_PROGRAMHALFWORD
 = 3U,

81 
FLASH_PROC_PROGRAMWORD
 = 4U,

82 
FLASH_PROC_PROGRAMDOUBLEWORD
 = 5U

83 } 
	tFLASH_Pro˚duªTy≥Def
;

90 
__IO
 
FLASH_Pro˚duªTy≥Def
 
Pro˚duªOnGoög
;

92 
__IO
 
uöt32_t
 
D©aRemaöög
;

94 
__IO
 
uöt32_t
 
Addªss
;

96 
__IO
 
uöt64_t
 
D©a
;

98 
HAL_LockTy≥Def
 
Lock
;

100 
__IO
 
uöt32_t
 
Eº‹Code
;

102 } 
	tFLASH_Pro˚ssTy≥Def
;

117 
	#HAL_FLASH_ERROR_NONE
 0x00U

	)

118 
	#HAL_FLASH_ERROR_PROG
 0x01U

	)

119 
	#HAL_FLASH_ERROR_WRP
 0x02U

	)

120 
	#HAL_FLASH_ERROR_OPTV
 0x04U

	)

129 
	#FLASH_TYPEPROGRAM_HALFWORD
 0x01U

	)

130 
	#FLASH_TYPEPROGRAM_WORD
 0x02U

	)

131 
	#FLASH_TYPEPROGRAM_DOUBLEWORD
 0x03U

	)

137 #i‡ 
deföed
(
FLASH_ACR_LATENCY
)

141 
	#FLASH_LATENCY_0
 0x00000000U

	)

142 
	#FLASH_LATENCY_1
 
FLASH_ACR_LATENCY_0


	)

143 
	#FLASH_LATENCY_2
 
FLASH_ACR_LATENCY_1


	)

153 
	#FLASH_LATENCY_0
 0x00000000U

	)

182 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_HLFCYA
)

	)

190 
	#__HAL_FLASH_HALF_CYCLE_ACCESS_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_HLFCYA
))

	)

196 #i‡
deföed
(
FLASH_ACR_LATENCY
)

208 
	#__HAL_FLASH_SET_LATENCY
(
__LATENCY__
Ë(
FLASH
->
ACR
 = (FLASH->ACR&(~
FLASH_ACR_LATENCY
)Ë| (__LATENCY__))

	)

216 
	#__HAL_FLASH_GET_LATENCY
(Ë(
	`READ_BIT
((
FLASH
->
ACR
), 
FLASH_ACR_LATENCY
))

	)

231 
	#__HAL_FLASH_PREFETCH_BUFFER_ENABLE
(Ë(
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
)

	)

237 
	#__HAL_FLASH_PREFETCH_BUFFER_DISABLE
(Ë(
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTBE
))

	)

248 
	~"°m32f1xx_hÆ_Êash_ex.h
"

259 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

260 
HAL_SètusTy≥Def
 
HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
);

263 
HAL_FLASH_IRQH™dÀr
();

265 
HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

266 
HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
);

276 
HAL_SètusTy≥Def
 
HAL_FLASH_U∆ock
();

277 
HAL_SètusTy≥Def
 
HAL_FLASH_Lock
();

278 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_U∆ock
();

279 
HAL_SètusTy≥Def
 
HAL_FLASH_OB_Lock
();

280 
HAL_FLASH_OB_Launch
();

290 
uöt32_t
 
HAL_FLASH_GëEº‹
();

304 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

305 #i‡
deföed
(
FLASH_BANK2_END
)

306 
HAL_SètusTy≥Def
 
FLASH_WaôF‹La°O≥øti⁄B™k2
(
uöt32_t
 
Timeout
);

321 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash_ex.h

21 #i‚de‡
__STM32F1xx_HAL_FLASH_EX_H


22 
	#__STM32F1xx_HAL_FLASH_EX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

43 
	#FLASH_SIZE_DATA_REGISTER
 0x1FFFF7E0U

	)

44 
	#OBR_REG_INDEX
 1U

	)

45 
	#SR_FLAG_MASK
 ((
uöt32_t
)(
FLASH_SR_BSY
 | 
FLASH_SR_PGERR
 | 
FLASH_SR_WRPRTERR
 | 
FLASH_SR_EOP
))

	)

55 
	#IS_FLASH_TYPEERASE
(
VALUE
Ë(((VALUEË=
FLASH_TYPEERASE_PAGES
Ë|| ((VALUEË=
FLASH_TYPEERASE_MASSERASE
))

	)

57 
	#IS_OPTIONBYTE
(
VALUE
Ë(((VALUEË<(
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
 | 
OPTIONBYTE_DATA
)))

	)

59 
	#IS_WRPSTATE
(
VALUE
Ë(((VALUEË=
OB_WRPSTATE_DISABLE
Ë|| ((VALUEË=
OB_WRPSTATE_ENABLE
))

	)

61 
	#IS_OB_RDP_LEVEL
(
LEVEL
Ë(((LEVELË=
OB_RDP_LEVEL_0
Ë|| ((LEVELË=
OB_RDP_LEVEL_1
))

	)

63 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
OB_DATA_ADDRESS_DATA0
Ë|| ((ADDRESSË=
OB_DATA_ADDRESS_DATA1
))

	)

65 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

67 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NO_RST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

69 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NO_RST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

71 #i‡
deföed
(
FLASH_BANK2_END
)

72 
	#IS_OB_BOOT1
(
BOOT1
Ë(((BOOT1Ë=
OB_BOOT1_RESET
Ë|| ((BOOT1Ë=
OB_BOOT1_SET
))

	)

76 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
))

77 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x20UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)- 1 <= 0x08007FFFU) : \

78 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)- 1 <0x08003FFFU))

	)

82 #i‡(
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

83 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x80UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFFU) : \

84 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x40UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0800FFFFU) : \

85 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x20UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x08007FFFU) : \

86 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x08003FFFU))))

	)

90 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
))

91 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x200UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0807FFFFU) : \

92 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x180UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0805FFFFU) : \

93 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x0803FFFFU)))

	)

97 #i‡
deföed
(
FLASH_BANK2_END
)

98 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x400UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x080FFFFFU) : \

99 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x080BFFFFU))

	)

103 #i‡(
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

104 
	#IS_FLASH_NB_PAGES
(
ADDRESS
,
NBPAGES
Ë(((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x100UË? ((ADDRESS)+((NBPAGES)*
FLASH_PAGE_SIZE
)-1 <= 0x0803FFFFU) : \

105 (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)Ë=0x80UË? ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <= 0x0801FFFFU) : \

106 ((
ADDRESS
)+((
NBPAGES
)*
FLASH_PAGE_SIZE
)-1 <0x0800FFFFU)))

	)

109 
	#IS_OB_WRP
(
PAGE
Ë(((PAGEË!0x0000000U))

	)

111 #i‡
deföed
(
FLASH_BANK2_END
)

112 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
) || \

113 ((
BANK
Ë=
FLASH_BANK_2
) || \

114 ((
BANK
Ë=
FLASH_BANK_BOTH
))

	)

116 
	#IS_FLASH_BANK
(
BANK
Ë(((BANKË=
FLASH_BANK_1
))

	)

120 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
))

121 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20U) ? \

122 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: ((ADDRESSË<0x08003FFFU)))

	)

127 #i‡(
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

128 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80U) ? \

129 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x40U) ? \

130 ((
ADDRESS
Ë<0x0800FFFFË: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x20U) ? \

131 ((
ADDRESS
Ë<0x08007FFFË: ((ADDRESSË<0x08003FFFU)))))

	)

136 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
))

137 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x200U) ? \

138 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x180U) ? \

139 ((
ADDRESS
Ë<0x0805FFFFUË: ((ADDRESSË<0x0803FFFFU))))

	)

144 #i‡
deföed
(
FLASH_BANK2_END
)

145 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x400U) ? \

146 ((
ADDRESS
Ë<
FLASH_BANK2_END
Ë: ((ADDRESSË<0x080BFFFFU)))

	)

151 #i‡(
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

152 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>
FLASH_BASE
Ë&& (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x100U) ? \

153 ((
ADDRESS
Ë<
FLASH_BANK1_END
Ë: (((*((
uöt16_t
 *)
FLASH_SIZE_DATA_REGISTER
)) == 0x80U) ? \

154 ((
ADDRESS
Ë<0x0801FFFFUË: ((ADDRESSË<0x0800FFFFU))))

	)

172 
uöt32_t
 
Ty≥Eø£
;

175 
uöt32_t
 
B™ks
;

178 
uöt32_t
 
PageAddªss
;

182 
uöt32_t
 
NbPages
;

185 } 
	tFLASH_Eø£InôTy≥Def
;

192 
uöt32_t
 
O±i⁄Ty≥
;

195 
uöt32_t
 
WRPSèã
;

198 
uöt32_t
 
WRPPage
;

201 
uöt32_t
 
B™ks
;

204 
uöt8_t
 
RDPLevñ
;

207 #i‡
deföed
(
FLASH_BANK2_END
)

208 
uöt8_t
 
USERC⁄fig
;

213 
uöt8_t
 
USERC⁄fig
;

219 
uöt32_t
 
DATAAddªss
;

222 
uöt8_t
 
DATAD©a
;

224 } 
	tFLASH_OBProgømInôTy≥Def
;

242 #i‡(
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
))

243 
	#FLASH_PAGE_SIZE
 0x400U

	)

247 #i‡(
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
))

248 
	#FLASH_PAGE_SIZE
 0x800U

	)

260 
	#FLASH_TYPEERASE_PAGES
 0x00U

	)

261 
	#FLASH_TYPEERASE_MASSERASE
 0x02U

	)

270 #i‡
deföed
(
FLASH_BANK2_END
)

271 
	#FLASH_BANK_1
 1U

	)

272 
	#FLASH_BANK_2
 2U

	)

273 
	#FLASH_BANK_BOTH
 ((
uöt32_t
)
FLASH_BANK_1
 | 
FLASH_BANK_2
Ë

	)

276 
	#FLASH_BANK_1
 1U

	)

293 
	#OPTIONBYTE_WRP
 0x01U

	)

294 
	#OPTIONBYTE_RDP
 0x02U

	)

295 
	#OPTIONBYTE_USER
 0x04U

	)

296 
	#OPTIONBYTE_DATA
 0x08U

	)

305 
	#OB_WRPSTATE_DISABLE
 0x00U

	)

306 
	#OB_WRPSTATE_ENABLE
 0x01U

	)

316 #i‡ 
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
) \

317 || 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
) \

318 || 
deföed
(
STM32F103xB
)

319 
	#OB_WRP_PAGES0TO3
 0x00000001U

	)

320 
	#OB_WRP_PAGES4TO7
 0x00000002U

	)

321 
	#OB_WRP_PAGES8TO11
 0x00000004U

	)

322 
	#OB_WRP_PAGES12TO15
 0x00000008U

	)

323 
	#OB_WRP_PAGES16TO19
 0x00000010U

	)

324 
	#OB_WRP_PAGES20TO23
 0x00000020U

	)

325 
	#OB_WRP_PAGES24TO27
 0x00000040U

	)

326 
	#OB_WRP_PAGES28TO31
 0x00000080U

	)

331 #i‡ 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
)

332 
	#OB_WRP_PAGES32TO35
 0x00000100U

	)

333 
	#OB_WRP_PAGES36TO39
 0x00000200U

	)

334 
	#OB_WRP_PAGES40TO43
 0x00000400U

	)

335 
	#OB_WRP_PAGES44TO47
 0x00000800U

	)

336 
	#OB_WRP_PAGES48TO51
 0x00001000U

	)

337 
	#OB_WRP_PAGES52TO55
 0x00002000U

	)

338 
	#OB_WRP_PAGES56TO59
 0x00004000U

	)

339 
	#OB_WRP_PAGES60TO63
 0x00008000U

	)

340 
	#OB_WRP_PAGES64TO67
 0x00010000U

	)

341 
	#OB_WRP_PAGES68TO71
 0x00020000U

	)

342 
	#OB_WRP_PAGES72TO75
 0x00040000U

	)

343 
	#OB_WRP_PAGES76TO79
 0x00080000U

	)

344 
	#OB_WRP_PAGES80TO83
 0x00100000U

	)

345 
	#OB_WRP_PAGES84TO87
 0x00200000U

	)

346 
	#OB_WRP_PAGES88TO91
 0x00400000U

	)

347 
	#OB_WRP_PAGES92TO95
 0x00800000U

	)

348 
	#OB_WRP_PAGES96TO99
 0x01000000U

	)

349 
	#OB_WRP_PAGES100TO103
 0x02000000U

	)

350 
	#OB_WRP_PAGES104TO107
 0x04000000U

	)

351 
	#OB_WRP_PAGES108TO111
 0x08000000U

	)

352 
	#OB_WRP_PAGES112TO115
 0x10000000U

	)

353 
	#OB_WRP_PAGES116TO119
 0x20000000U

	)

354 
	#OB_WRP_PAGES120TO123
 0x40000000U

	)

355 
	#OB_WRP_PAGES124TO127
 0x80000000U

	)

360 #i‡ 
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
) \

361 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
) \

362 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

363 
	#OB_WRP_PAGES0TO1
 0x00000001U

	)

364 
	#OB_WRP_PAGES2TO3
 0x00000002U

	)

365 
	#OB_WRP_PAGES4TO5
 0x00000004U

	)

366 
	#OB_WRP_PAGES6TO7
 0x00000008U

	)

367 
	#OB_WRP_PAGES8TO9
 0x00000010U

	)

368 
	#OB_WRP_PAGES10TO11
 0x00000020U

	)

369 
	#OB_WRP_PAGES12TO13
 0x00000040U

	)

370 
	#OB_WRP_PAGES14TO15
 0x00000080U

	)

371 
	#OB_WRP_PAGES16TO17
 0x00000100U

	)

372 
	#OB_WRP_PAGES18TO19
 0x00000200U

	)

373 
	#OB_WRP_PAGES20TO21
 0x00000400U

	)

374 
	#OB_WRP_PAGES22TO23
 0x00000800U

	)

375 
	#OB_WRP_PAGES24TO25
 0x00001000U

	)

376 
	#OB_WRP_PAGES26TO27
 0x00002000U

	)

377 
	#OB_WRP_PAGES28TO29
 0x00004000U

	)

378 
	#OB_WRP_PAGES30TO31
 0x00008000U

	)

379 
	#OB_WRP_PAGES32TO33
 0x00010000U

	)

380 
	#OB_WRP_PAGES34TO35
 0x00020000U

	)

381 
	#OB_WRP_PAGES36TO37
 0x00040000U

	)

382 
	#OB_WRP_PAGES38TO39
 0x00080000U

	)

383 
	#OB_WRP_PAGES40TO41
 0x00100000U

	)

384 
	#OB_WRP_PAGES42TO43
 0x00200000U

	)

385 
	#OB_WRP_PAGES44TO45
 0x00400000U

	)

386 
	#OB_WRP_PAGES46TO47
 0x00800000U

	)

387 
	#OB_WRP_PAGES48TO49
 0x01000000U

	)

388 
	#OB_WRP_PAGES50TO51
 0x02000000U

	)

389 
	#OB_WRP_PAGES52TO53
 0x04000000U

	)

390 
	#OB_WRP_PAGES54TO55
 0x08000000U

	)

391 
	#OB_WRP_PAGES56TO57
 0x10000000U

	)

392 
	#OB_WRP_PAGES58TO59
 0x20000000U

	)

393 
	#OB_WRP_PAGES60TO61
 0x40000000U

	)

394 
	#OB_WRP_PAGES62TO127
 0x80000000U

	)

395 
	#OB_WRP_PAGES62TO255
 0x80000000U

	)

396 
	#OB_WRP_PAGES62TO511
 0x80000000U

	)

401 
	#OB_WRP_ALLPAGES
 0xFFFFFFFFU

	)

404 #i‡ 
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F103x6
)

405 
	#OB_WRP_PAGES0TO31MASK
 0x000000FFU

	)

409 #i‡ 
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103xB
)

410 
	#OB_WRP_PAGES0TO31MASK
 0x000000FFU

	)

411 
	#OB_WRP_PAGES32TO63MASK
 0x0000FF00U

	)

412 
	#OB_WRP_PAGES64TO95MASK
 0x00FF0000U

	)

413 
	#OB_WRP_PAGES96TO127MASK
 0xFF000000U

	)

417 #i‡ 
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F103xE
)

418 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

419 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

420 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

421 
	#OB_WRP_PAGES48TO255MASK
 0xFF000000U

	)

425 #i‡ 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

426 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

427 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

428 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

429 
	#OB_WRP_PAGES48TO511MASK
 0xFF000000U

	)

433 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

434 
	#OB_WRP_PAGES0TO15MASK
 0x000000FFU

	)

435 
	#OB_WRP_PAGES16TO31MASK
 0x0000FF00U

	)

436 
	#OB_WRP_PAGES32TO47MASK
 0x00FF0000U

	)

437 
	#OB_WRP_PAGES48TO127MASK
 0xFF000000U

	)

447 
	#OB_RDP_LEVEL_0
 ((
uöt8_t
)0xA5)

	)

448 
	#OB_RDP_LEVEL_1
 ((
uöt8_t
)0x00)

	)

456 
	#OB_IWDG_SW
 ((
uöt16_t
)0x0001Ë

	)

457 
	#OB_IWDG_HW
 ((
uöt16_t
)0x0000Ë

	)

465 
	#OB_STOP_NO_RST
 ((
uöt16_t
)0x0002Ë

	)

466 
	#OB_STOP_RST
 ((
uöt16_t
)0x0000Ë

	)

474 
	#OB_STDBY_NO_RST
 ((
uöt16_t
)0x0004Ë

	)

475 
	#OB_STDBY_RST
 ((
uöt16_t
)0x0000Ë

	)

480 #i‡
deföed
(
FLASH_BANK2_END
)

484 
	#OB_BOOT1_RESET
 ((
uöt16_t
)0x0000Ë

	)

485 
	#OB_BOOT1_SET
 ((
uöt16_t
)0x0008Ë

	)

494 
	#OB_DATA_ADDRESS_DATA0
 0x1FFFF804U

	)

495 
	#OB_DATA_ADDRESS_DATA1
 0x1FFFF806U

	)

512 #i‡
deföed
(
FLASH_BANK2_END
)

513 
	#FLASH_FLAG_BSY
 
FLASH_FLAG_BSY_BANK1


	)

514 
	#FLASH_FLAG_PGERR
 
FLASH_FLAG_PGERR_BANK1


	)

515 
	#FLASH_FLAG_WRPERR
 
FLASH_FLAG_WRPERR_BANK1


	)

516 
	#FLASH_FLAG_EOP
 
FLASH_FLAG_EOP_BANK1


	)

518 
	#FLASH_FLAG_BSY_BANK1
 
FLASH_SR_BSY


	)

519 
	#FLASH_FLAG_PGERR_BANK1
 
FLASH_SR_PGERR


	)

520 
	#FLASH_FLAG_WRPERR_BANK1
 
FLASH_SR_WRPRTERR


	)

521 
	#FLASH_FLAG_EOP_BANK1
 
FLASH_SR_EOP


	)

523 
	#FLASH_FLAG_BSY_BANK2
 (
FLASH_SR2_BSY
 << 16UË

	)

524 
	#FLASH_FLAG_PGERR_BANK2
 (
FLASH_SR2_PGERR
 << 16UË

	)

525 
	#FLASH_FLAG_WRPERR_BANK2
 (
FLASH_SR2_WRPRTERR
 << 16UË

	)

526 
	#FLASH_FLAG_EOP_BANK2
 (
FLASH_SR2_EOP
 << 16UË

	)

530 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

531 
	#FLASH_FLAG_PGERR
 
FLASH_SR_PGERR


	)

532 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPRTERR


	)

533 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

536 
	#FLASH_FLAG_OPTVERR
 ((
OBR_REG_INDEX
 << 8U | 
FLASH_OBR_OPTERR
)Ë

	)

545 #i‡
deföed
(
FLASH_BANK2_END
)

546 
	#FLASH_IT_EOP
 
FLASH_IT_EOP_BANK1


	)

547 
	#FLASH_IT_ERR
 
FLASH_IT_ERR_BANK1


	)

549 
	#FLASH_IT_EOP_BANK1
 
FLASH_CR_EOPIE


	)

550 
	#FLASH_IT_ERR_BANK1
 
FLASH_CR_ERRIE


	)

552 
	#FLASH_IT_EOP_BANK2
 (
FLASH_CR2_EOPIE
 << 16UË

	)

553 
	#FLASH_IT_ERR_BANK2
 (
FLASH_CR2_ERRIE
 << 16UË

	)

557 
	#FLASH_IT_EOP
 
FLASH_CR_EOPIE


	)

558 
	#FLASH_IT_ERR
 
FLASH_CR_ERRIE


	)

584 #i‡
deföed
(
FLASH_BANK2_END
)

595 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
) do { \

597 
	`SET_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFFU)); \

599 
	`SET_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16U)); \

600 } 0U)

	)

612 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
) do { \

614 
	`CLEAR_BIT
(
FLASH
->
CR
, ((
__INTERRUPT__
) & 0x0000FFFFU)); \

616 
	`CLEAR_BIT
(
FLASH
->
CR2
, ((
__INTERRUPT__
) >> 16U)); \

617 } 0U)

	)

634 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
FLASH_FLAG_OPTVERR
) ? \

635 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

636 ((((
__FLAG__
Ë& 
SR_FLAG_MASK
Ë!
RESET
)? \

637 (
FLASH
->
SR
 & ((
__FLAG__
Ë& 
SR_FLAG_MASK
)) : \

638 (
FLASH
->
SR2
 & ((
__FLAG__
Ë>> 16U))))

	)

655 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

657 i‡((
__FLAG__
Ë=
FLASH_FLAG_OPTVERR
) \

659 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

663 i‡(((
__FLAG__
Ë& 
SR_FLAG_MASK
Ë!
RESET
) \

665 
FLASH
->
SR
 = ((
__FLAG__
Ë& 
SR_FLAG_MASK
); \

668 i‡(((
__FLAG__
Ë>> 16UË!
RESET
) \

670 
FLASH
->
SR2
 = ((
__FLAG__
) >> 16U); \

673 } 0U)

	)

683 
	#__HAL_FLASH_ENABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 |(__INTERRUPT__))

	)

693 
	#__HAL_FLASH_DISABLE_IT
(
__INTERRUPT__
Ë(
FLASH
->
CR
 &~(__INTERRUPT__))

	)

706 
	#__HAL_FLASH_GET_FLAG
(
__FLAG__
Ë(((__FLAG__Ë=
FLASH_FLAG_OPTVERR
) ? \

707 (
FLASH
->
OBR
 & 
FLASH_OBR_OPTERR
) : \

708 (
FLASH
->
SR
 & (
__FLAG__
)))

	)

719 
	#__HAL_FLASH_CLEAR_FLAG
(
__FLAG__
) do { \

721 i‡((
__FLAG__
Ë=
FLASH_FLAG_OPTVERR
) \

723 
	`CLEAR_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_OPTERR
); \

727 
FLASH
->
SR
 = (
__FLAG__
); \

729 } 0U)

	)

750 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
);

751 
HAL_SètusTy≥Def
 
HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
);

761 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBEø£
();

762 
HAL_SètusTy≥Def
 
HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

763 
HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
);

764 
uöt32_t
 
HAL_FLASHEx_OBGëU£rD©a
(uöt32_à
DATAAdªss
);

780 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h

21 #i‚de‡
STM32F1xx_HAL_GPIO_H


22 
	#STM32F1xx_HAL_GPIO_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

49 
uöt32_t
 
Pö
;

52 
uöt32_t
 
Mode
;

55 
uöt32_t
 
PuŒ
;

58 
uöt32_t
 
S≥ed
;

60 } 
	tGPIO_InôTy≥Def
;

67 
GPIO_PIN_RESET
 = 0u,

68 
GPIO_PIN_SET


69 } 
	tGPIO_PöSèã
;

83 
	#GPIO_PIN_0
 ((
uöt16_t
)0x0001Ë

	)

84 
	#GPIO_PIN_1
 ((
uöt16_t
)0x0002Ë

	)

85 
	#GPIO_PIN_2
 ((
uöt16_t
)0x0004Ë

	)

86 
	#GPIO_PIN_3
 ((
uöt16_t
)0x0008Ë

	)

87 
	#GPIO_PIN_4
 ((
uöt16_t
)0x0010Ë

	)

88 
	#GPIO_PIN_5
 ((
uöt16_t
)0x0020Ë

	)

89 
	#GPIO_PIN_6
 ((
uöt16_t
)0x0040Ë

	)

90 
	#GPIO_PIN_7
 ((
uöt16_t
)0x0080Ë

	)

91 
	#GPIO_PIN_8
 ((
uöt16_t
)0x0100Ë

	)

92 
	#GPIO_PIN_9
 ((
uöt16_t
)0x0200Ë

	)

93 
	#GPIO_PIN_10
 ((
uöt16_t
)0x0400Ë

	)

94 
	#GPIO_PIN_11
 ((
uöt16_t
)0x0800Ë

	)

95 
	#GPIO_PIN_12
 ((
uöt16_t
)0x1000Ë

	)

96 
	#GPIO_PIN_13
 ((
uöt16_t
)0x2000Ë

	)

97 
	#GPIO_PIN_14
 ((
uöt16_t
)0x4000Ë

	)

98 
	#GPIO_PIN_15
 ((
uöt16_t
)0x8000Ë

	)

99 
	#GPIO_PIN_AŒ
 ((
uöt16_t
)0xFFFFË

	)

101 
	#GPIO_PIN_MASK
 0x0000FFFFu

	)

116 
	#GPIO_MODE_INPUT
 0x00000000u

	)

117 
	#GPIO_MODE_OUTPUT_PP
 0x00000001u

	)

118 
	#GPIO_MODE_OUTPUT_OD
 0x00000011u

	)

119 
	#GPIO_MODE_AF_PP
 0x00000002u

	)

120 
	#GPIO_MODE_AF_OD
 0x00000012u

	)

121 
	#GPIO_MODE_AF_INPUT
 
GPIO_MODE_INPUT


	)

123 
	#GPIO_MODE_ANALOG
 0x00000003u

	)

125 
	#GPIO_MODE_IT_RISING
 0x10110000u

	)

126 
	#GPIO_MODE_IT_FALLING
 0x10210000u

	)

127 
	#GPIO_MODE_IT_RISING_FALLING
 0x10310000u

	)

129 
	#GPIO_MODE_EVT_RISING
 0x10120000u

	)

130 
	#GPIO_MODE_EVT_FALLING
 0x10220000u

	)

131 
	#GPIO_MODE_EVT_RISING_FALLING
 0x10320000u

	)

141 
	#GPIO_SPEED_FREQ_LOW
 (
GPIO_CRL_MODE0_1
Ë

	)

142 
	#GPIO_SPEED_FREQ_MEDIUM
 (
GPIO_CRL_MODE0_0
Ë

	)

143 
	#GPIO_SPEED_FREQ_HIGH
 (
GPIO_CRL_MODE0
Ë

	)

153 
	#GPIO_NOPULL
 0x00000000u

	)

154 
	#GPIO_PULLUP
 0x00000001u

	)

155 
	#GPIO_PULLDOWN
 0x00000002u

	)

175 
	#__HAL_GPIO_EXTI_GET_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

183 
	#__HAL_GPIO_EXTI_CLEAR_FLAG
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

191 
	#__HAL_GPIO_EXTI_GET_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 & (__EXTI_LINE__))

	)

199 
	#__HAL_GPIO_EXTI_CLEAR_IT
(
__EXTI_LINE__
Ë(
EXTI
->
PR
 = (__EXTI_LINE__))

	)

207 
	#__HAL_GPIO_EXTI_GENERATE_SWIT
(
__EXTI_LINE__
Ë(
EXTI
->
SWIER
 |(__EXTI_LINE__))

	)

213 
	~"°m32f1xx_hÆ_gpio_ex.h
"

224 
HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
);

225 
HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
);

234 
GPIO_PöSèã
 
HAL_GPIO_RódPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

235 
HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
);

236 
HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

237 
HAL_SètusTy≥Def
 
HAL_GPIO_LockPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

238 
HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
);

239 
HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
);

263 
	#IS_GPIO_PIN_ACTION
(
ACTION
Ë(((ACTIONË=
GPIO_PIN_RESET
Ë|| ((ACTIONË=
GPIO_PIN_SET
))

	)

264 
	#IS_GPIO_PIN
(
PIN
Ë(((((
uöt32_t
)PINË& 
GPIO_PIN_MASK
 ) !0x00uË&& ((((uöt32_t)PINË& ~GPIO_PIN_MASKË=0x00u))

	)

265 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_MODE_INPUT
) ||\

266 ((
MODE
Ë=
GPIO_MODE_OUTPUT_PP
) ||\

267 ((
MODE
Ë=
GPIO_MODE_OUTPUT_OD
) ||\

268 ((
MODE
Ë=
GPIO_MODE_AF_PP
) ||\

269 ((
MODE
Ë=
GPIO_MODE_AF_OD
) ||\

270 ((
MODE
Ë=
GPIO_MODE_IT_RISING
) ||\

271 ((
MODE
Ë=
GPIO_MODE_IT_FALLING
) ||\

272 ((
MODE
Ë=
GPIO_MODE_IT_RISING_FALLING
) ||\

273 ((
MODE
Ë=
GPIO_MODE_EVT_RISING
) ||\

274 ((
MODE
Ë=
GPIO_MODE_EVT_FALLING
) ||\

275 ((
MODE
Ë=
GPIO_MODE_EVT_RISING_FALLING
) ||\

276 ((
MODE
Ë=
GPIO_MODE_ANALOG
))

	)

277 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_SPEED_FREQ_LOW
) || \

278 ((
SPEED
Ë=
GPIO_SPEED_FREQ_MEDIUM
Ë|| ((SPEEDË=
GPIO_SPEED_FREQ_HIGH
))

	)

279 
	#IS_GPIO_PULL
(
PULL
Ë(((PULLË=
GPIO_NOPULL
Ë|| ((PULLË=
GPIO_PULLUP
) || \

280 ((
PULL
Ë=
GPIO_PULLDOWN
))

	)

302 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio_ex.h

21 #i‚de‡
STM32F1xx_HAL_GPIO_EX_H


22 
	#STM32F1xx_HAL_GPIO_EX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

54 
	#AFIO_EVENTOUT_PIN_0
 
AFIO_EVCR_PIN_PX0


	)

55 
	#AFIO_EVENTOUT_PIN_1
 
AFIO_EVCR_PIN_PX1


	)

56 
	#AFIO_EVENTOUT_PIN_2
 
AFIO_EVCR_PIN_PX2


	)

57 
	#AFIO_EVENTOUT_PIN_3
 
AFIO_EVCR_PIN_PX3


	)

58 
	#AFIO_EVENTOUT_PIN_4
 
AFIO_EVCR_PIN_PX4


	)

59 
	#AFIO_EVENTOUT_PIN_5
 
AFIO_EVCR_PIN_PX5


	)

60 
	#AFIO_EVENTOUT_PIN_6
 
AFIO_EVCR_PIN_PX6


	)

61 
	#AFIO_EVENTOUT_PIN_7
 
AFIO_EVCR_PIN_PX7


	)

62 
	#AFIO_EVENTOUT_PIN_8
 
AFIO_EVCR_PIN_PX8


	)

63 
	#AFIO_EVENTOUT_PIN_9
 
AFIO_EVCR_PIN_PX9


	)

64 
	#AFIO_EVENTOUT_PIN_10
 
AFIO_EVCR_PIN_PX10


	)

65 
	#AFIO_EVENTOUT_PIN_11
 
AFIO_EVCR_PIN_PX11


	)

66 
	#AFIO_EVENTOUT_PIN_12
 
AFIO_EVCR_PIN_PX12


	)

67 
	#AFIO_EVENTOUT_PIN_13
 
AFIO_EVCR_PIN_PX13


	)

68 
	#AFIO_EVENTOUT_PIN_14
 
AFIO_EVCR_PIN_PX14


	)

69 
	#AFIO_EVENTOUT_PIN_15
 
AFIO_EVCR_PIN_PX15


	)

71 
	#IS_AFIO_EVENTOUT_PIN
(
__PIN__
Ë(((__PIN__Ë=
AFIO_EVENTOUT_PIN_0
) || \

72 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_1
) || \

73 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_2
) || \

74 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_3
) || \

75 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_4
) || \

76 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_5
) || \

77 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_6
) || \

78 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_7
) || \

79 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_8
) || \

80 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_9
) || \

81 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_10
) || \

82 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_11
) || \

83 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_12
) || \

84 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_13
) || \

85 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_14
) || \

86 ((
__PIN__
Ë=
AFIO_EVENTOUT_PIN_15
))

	)

95 
	#AFIO_EVENTOUT_PORT_A
 
AFIO_EVCR_PORT_PA


	)

96 
	#AFIO_EVENTOUT_PORT_B
 
AFIO_EVCR_PORT_PB


	)

97 
	#AFIO_EVENTOUT_PORT_C
 
AFIO_EVCR_PORT_PC


	)

98 
	#AFIO_EVENTOUT_PORT_D
 
AFIO_EVCR_PORT_PD


	)

99 
	#AFIO_EVENTOUT_PORT_E
 
AFIO_EVCR_PORT_PE


	)

101 
	#IS_AFIO_EVENTOUT_PORT
(
__PORT__
Ë(((__PORT__Ë=
AFIO_EVENTOUT_PORT_A
) || \

102 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_B
) || \

103 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_C
) || \

104 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_D
) || \

105 ((
__PORT__
Ë=
AFIO_EVENTOUT_PORT_E
))

	)

124 
	#__HAL_AFIO_REMAP_SPI1_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_SPI1_REMAP
)

	)

131 
	#__HAL_AFIO_REMAP_SPI1_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_SPI1_REMAP
)

	)

138 
	#__HAL_AFIO_REMAP_I2C1_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_I2C1_REMAP
)

	)

145 
	#__HAL_AFIO_REMAP_I2C1_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_I2C1_REMAP
)

	)

152 
	#__HAL_AFIO_REMAP_USART1_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_USART1_REMAP
)

	)

159 
	#__HAL_AFIO_REMAP_USART1_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_USART1_REMAP
)

	)

166 
	#__HAL_AFIO_REMAP_USART2_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_USART2_REMAP
)

	)

173 
	#__HAL_AFIO_REMAP_USART2_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_USART2_REMAP
)

	)

180 
	#__HAL_AFIO_REMAP_USART3_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_FULLREMAP
, AFIO_MAPR_USART3_REMAP_FULLREMAP)

	)

187 
	#__HAL_AFIO_REMAP_USART3_PARTIAL
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_PARTIALREMAP
, 
AFIO_MAPR_USART3_REMAP_FULLREMAP
)

	)

194 
	#__HAL_AFIO_REMAP_USART3_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_USART3_REMAP_NOREMAP
, 
AFIO_MAPR_USART3_REMAP_FULLREMAP
)

	)

201 
	#__HAL_AFIO_REMAP_TIM1_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_FULLREMAP
, AFIO_MAPR_TIM1_REMAP_FULLREMAP)

	)

208 
	#__HAL_AFIO_REMAP_TIM1_PARTIAL
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_PARTIALREMAP
, 
AFIO_MAPR_TIM1_REMAP_FULLREMAP
)

	)

215 
	#__HAL_AFIO_REMAP_TIM1_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM1_REMAP_NOREMAP
, 
AFIO_MAPR_TIM1_REMAP_FULLREMAP
)

	)

222 
	#__HAL_AFIO_REMAP_TIM2_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_FULLREMAP
, AFIO_MAPR_TIM2_REMAP_FULLREMAP)

	)

229 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_2
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP2
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

236 
	#__HAL_AFIO_REMAP_TIM2_PARTIAL_1
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_PARTIALREMAP1
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

243 
	#__HAL_AFIO_REMAP_TIM2_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM2_REMAP_NOREMAP
, 
AFIO_MAPR_TIM2_REMAP_FULLREMAP
)

	)

251 
	#__HAL_AFIO_REMAP_TIM3_ENABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_FULLREMAP
, AFIO_MAPR_TIM3_REMAP_FULLREMAP)

	)

259 
	#__HAL_AFIO_REMAP_TIM3_PARTIAL
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_PARTIALREMAP
, 
AFIO_MAPR_TIM3_REMAP_FULLREMAP
)

	)

267 
	#__HAL_AFIO_REMAP_TIM3_DISABLE
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_TIM3_REMAP_NOREMAP
, 
AFIO_MAPR_TIM3_REMAP_FULLREMAP
)

	)

275 
	#__HAL_AFIO_REMAP_TIM4_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM4_REMAP
)

	)

283 
	#__HAL_AFIO_REMAP_TIM4_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM4_REMAP
)

	)

285 #i‡
deföed
(
AFIO_MAPR_CAN_REMAP_REMAP1
)

292 
	#__HAL_AFIO_REMAP_CAN1_1
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP1
, 
AFIO_MAPR_CAN_REMAP
)

	)

299 
	#__HAL_AFIO_REMAP_CAN1_2
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP2
, 
AFIO_MAPR_CAN_REMAP
)

	)

306 
	#__HAL_AFIO_REMAP_CAN1_3
(Ë
	`AFIO_REMAP_PARTIAL
(
AFIO_MAPR_CAN_REMAP_REMAP3
, 
AFIO_MAPR_CAN_REMAP
)

	)

318 
	#__HAL_AFIO_REMAP_PD01_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_PD01_REMAP
)

	)

328 
	#__HAL_AFIO_REMAP_PD01_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_PD01_REMAP
)

	)

330 #i‡
deföed
(
AFIO_MAPR_TIM5CH4_IREMAP
)

337 
	#__HAL_AFIO_REMAP_TIM5CH4_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

345 
	#__HAL_AFIO_REMAP_TIM5CH4_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM5CH4_IREMAP
)

	)

348 #i‡
deföed
(
AFIO_MAPR_ETH_REMAP
)

355 
	#__HAL_AFIO_REMAP_ETH_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ETH_REMAP
)

	)

363 
	#__HAL_AFIO_REMAP_ETH_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ETH_REMAP
)

	)

366 #i‡
deföed
(
AFIO_MAPR_CAN2_REMAP
)

374 
	#__HAL_AFIO_REMAP_CAN2_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_CAN2_REMAP
)

	)

382 
	#__HAL_AFIO_REMAP_CAN2_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_CAN2_REMAP
)

	)

385 #i‡
deföed
(
AFIO_MAPR_MII_RMII_SEL
)

392 
	#__HAL_AFIO_ETH_RMII
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_MII_RMII_SEL
)

	)

400 
	#__HAL_AFIO_ETH_MII
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_MII_RMII_SEL
)

	)

408 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

415 
	#__HAL_AFIO_REMAP_ADC1_ETRGINJ_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC1_ETRGINJ_REMAP
)

	)

422 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

429 
	#__HAL_AFIO_REMAP_ADC1_ETRGREG_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC1_ETRGREG_REMAP
)

	)

431 #i‡
deföed
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

438 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

445 
	#__HAL_AFIO_REMAP_ADC2_ETRGINJ_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC2_ETRGINJ_REMAP
)

	)

448 #i‡
deföed
 (
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

455 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

462 
	#__HAL_AFIO_REMAP_ADC2_ETRGREG_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_ADC2_ETRGREG_REMAP
)

	)

470 
	#__HAL_AFIO_REMAP_SWJ_ENABLE
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_RESET
)

	)

477 
	#__HAL_AFIO_REMAP_SWJ_NONJTRST
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_NOJNTRST
)

	)

485 
	#__HAL_AFIO_REMAP_SWJ_NOJTAG
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_JTAGDISABLE
)

	)

492 
	#__HAL_AFIO_REMAP_SWJ_DISABLE
(Ë
	`AFIO_DBGAFR_CONFIG
(
AFIO_MAPR_SWJ_CFG_DISABLE
)

	)

494 #i‡
deföed
(
AFIO_MAPR_SPI3_REMAP
)

502 
	#__HAL_AFIO_REMAP_SPI3_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_SPI3_REMAP
)

	)

510 
	#__HAL_AFIO_REMAP_SPI3_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_SPI3_REMAP
)

	)

513 #i‡
deföed
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

521 
	#__HAL_AFIO_TIM2ITR1_TO_USB
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

529 
	#__HAL_AFIO_TIM2ITR1_TO_ETH
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_TIM2ITR1_IREMAP
)

	)

532 #i‡
deföed
(
AFIO_MAPR_PTP_PPS_REMAP
)

540 
	#__HAL_AFIO_ETH_PTP_PPS_ENABLE
(Ë
	`AFIO_REMAP_ENABLE
(
AFIO_MAPR_PTP_PPS_REMAP
)

	)

548 
	#__HAL_AFIO_ETH_PTP_PPS_DISABLE
(Ë
	`AFIO_REMAP_DISABLE
(
AFIO_MAPR_PTP_PPS_REMAP
)

	)

551 #i‡
deföed
(
AFIO_MAPR2_TIM9_REMAP
)

558 
	#__HAL_AFIO_REMAP_TIM9_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

565 
	#__HAL_AFIO_REMAP_TIM9_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM9_REMAP
)

	)

568 #i‡
deföed
(
AFIO_MAPR2_TIM10_REMAP
)

575 
	#__HAL_AFIO_REMAP_TIM10_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

582 
	#__HAL_AFIO_REMAP_TIM10_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM10_REMAP
)

	)

585 #i‡
deföed
(
AFIO_MAPR2_TIM11_REMAP
)

591 
	#__HAL_AFIO_REMAP_TIM11_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

598 
	#__HAL_AFIO_REMAP_TIM11_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM11_REMAP
)

	)

601 #i‡
deföed
(
AFIO_MAPR2_TIM13_REMAP
)

608 
	#__HAL_AFIO_REMAP_TIM13_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

615 
	#__HAL_AFIO_REMAP_TIM13_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM13_REMAP
)

	)

618 #i‡
deföed
(
AFIO_MAPR2_TIM14_REMAP
)

625 
	#__HAL_AFIO_REMAP_TIM14_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

632 
	#__HAL_AFIO_REMAP_TIM14_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM14_REMAP
)

	)

635 #i‡
deföed
(
AFIO_MAPR2_FSMC_NADV_REMAP
)

642 
	#__HAL_AFIO_FSMCNADV_DISCONNECTED
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

649 
	#__HAL_AFIO_FSMCNADV_CONNECTED
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_FSMC_NADV_REMAP
)

	)

652 #i‡
deföed
(
AFIO_MAPR2_TIM15_REMAP
)

659 
	#__HAL_AFIO_REMAP_TIM15_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

666 
	#__HAL_AFIO_REMAP_TIM15_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM15_REMAP
)

	)

669 #i‡
deföed
(
AFIO_MAPR2_TIM16_REMAP
)

676 
	#__HAL_AFIO_REMAP_TIM16_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

683 
	#__HAL_AFIO_REMAP_TIM16_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM16_REMAP
)

	)

686 #i‡
deföed
(
AFIO_MAPR2_TIM17_REMAP
)

693 
	#__HAL_AFIO_REMAP_TIM17_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

700 
	#__HAL_AFIO_REMAP_TIM17_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM17_REMAP
)

	)

703 #i‡
deföed
(
AFIO_MAPR2_CEC_REMAP
)

710 
	#__HAL_AFIO_REMAP_CEC_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

717 
	#__HAL_AFIO_REMAP_CEC_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_CEC_REMAP
)

	)

720 #i‡
deföed
(
AFIO_MAPR2_TIM1_DMA_REMAP
)

727 
	#__HAL_AFIO_REMAP_TIM1DMA_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

734 
	#__HAL_AFIO_REMAP_TIM1DMA_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM1_DMA_REMAP
)

	)

737 #i‡
deföed
(
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

744 
	#__HAL_AFIO_REMAP_TIM67DACDMA_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

751 
	#__HAL_AFIO_REMAP_TIM67DACDMA_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM67_DAC_DMA_REMAP
)

	)

754 #i‡
deföed
(
AFIO_MAPR2_TIM12_REMAP
)

762 
	#__HAL_AFIO_REMAP_TIM12_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

770 
	#__HAL_AFIO_REMAP_TIM12_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_TIM12_REMAP
)

	)

773 #i‡
deföed
(
AFIO_MAPR2_MISC_REMAP
)

785 
	#__HAL_AFIO_REMAP_MISC_ENABLE
(Ë
	`SET_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

797 
	#__HAL_AFIO_REMAP_MISC_DISABLE
(Ë
	`CLEAR_BIT
(
AFIO
->
MAPR2
, 
AFIO_MAPR2_MISC_REMAP
)

	)

811 #i‡
deföed
(
STM32F101x6
Ë|| deföed(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)

812 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0uL :\

813 ((
__GPIOx__
Ë=(
GPIOB
))? 1uL :\

814 ((
__GPIOx__
Ë=(
GPIOC
))? 2uL :3uL)

	)

815 #ñi‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

816 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0uL :\

817 ((
__GPIOx__
Ë=(
GPIOB
))? 1uL :\

818 ((
__GPIOx__
Ë=(
GPIOC
))? 2uL :\

819 ((
__GPIOx__
Ë=(
GPIOD
))? 3uL :4uL)

	)

820 #ñi‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

821 
	#GPIO_GET_INDEX
(
__GPIOx__
Ë(((__GPIOx__Ë=(
GPIOA
))? 0uL :\

822 ((
__GPIOx__
Ë=(
GPIOB
))? 1uL :\

823 ((
__GPIOx__
Ë=(
GPIOC
))? 2uL :\

824 ((
__GPIOx__
Ë=(
GPIOD
))? 3uL :\

825 ((
__GPIOx__
Ë=(
GPIOE
))? 4uL :\

826 ((
__GPIOx__
Ë=(
GPIOF
))? 5uL :6uL)

	)

829 
	#AFIO_REMAP_ENABLE
(
REMAP_PIN
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

830 
tm¥eg
 |
AFIO_MAPR_SWJ_CFG
; \

831 
tm¥eg
 |
REMAP_PIN
; \

832 
AFIO
->
MAPR
 = 
tm¥eg
; \

833 }0u)

	)

835 
	#AFIO_REMAP_DISABLE
(
REMAP_PIN
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

836 
tm¥eg
 |
AFIO_MAPR_SWJ_CFG
; \

837 
tm¥eg
 &~
REMAP_PIN
; \

838 
AFIO
->
MAPR
 = 
tm¥eg
; \

839 }0u)

	)

841 
	#AFIO_REMAP_PARTIAL
(
REMAP_PIN
, 
REMAP_PIN_MASK
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

842 
tm¥eg
 &~
REMAP_PIN_MASK
; \

843 
tm¥eg
 |
AFIO_MAPR_SWJ_CFG
; \

844 
tm¥eg
 |
REMAP_PIN
; \

845 
AFIO
->
MAPR
 = 
tm¥eg
; \

846 }0u)

	)

848 
	#AFIO_DBGAFR_CONFIG
(
DBGAFR_SWJCFG
Ëdo{ 
uöt32_t
 
tm¥eg
 = 
AFIO
->
MAPR
; \

849 
tm¥eg
 &~
AFIO_MAPR_SWJ_CFG_Msk
; \

850 
tm¥eg
 |
DBGAFR_SWJCFG
; \

851 
AFIO
->
MAPR
 = 
tm¥eg
; \

852 }0u)

	)

868 
HAL_GPIOEx_C⁄figEvítout
(
uöt32_t
 
GPIO_P‹tSour˚
, uöt32_à
GPIO_PöSour˚
);

869 
HAL_GPIOEx_E«bÀEvítout
();

870 
HAL_GPIOEx_DißbÀEvítout
();

888 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd.h

21 #i‚de‡
STM32F1xx_HAL_PCD_H


22 
	#STM32F1xx_HAL_PCD_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_Œ_usb.h
"

31 #i‡
deföed
 (
USB
Ë|| deföed (
USB_OTG_FS
)

51 
HAL_PCD_STATE_RESET
 = 0x00,

52 
HAL_PCD_STATE_READY
 = 0x01,

53 
HAL_PCD_STATE_ERROR
 = 0x02,

54 
HAL_PCD_STATE_BUSY
 = 0x03,

55 
HAL_PCD_STATE_TIMEOUT
 = 0x04

56 } 
	tPCD_SèãTy≥Def
;

61 
LPM_L0
 = 0x00,

62 
LPM_L1
 = 0x01,

63 
LPM_L2
 = 0x02,

64 
LPM_L3
 = 0x03,

65 } 
	tPCD_LPM_SèãTy≥Def
;

69 
PCD_LPM_L0_ACTIVE
 = 0x00,

70 
PCD_LPM_L1_ACTIVE
 = 0x01,

71 } 
	tPCD_LPM_MsgTy≥Def
;

75 
PCD_BCD_ERROR
 = 0xFF,

76 
PCD_BCD_CONTACT_DETECTION
 = 0xFE,

77 
PCD_BCD_STD_DOWNSTREAM_PORT
 = 0xFD,

78 
PCD_BCD_CHARGING_DOWNSTREAM_PORT
 = 0xFC,

79 
PCD_BCD_DEDICATED_CHARGING_PORT
 = 0xFB,

80 
PCD_BCD_DISCOVERY_COMPLETED
 = 0x00,

82 } 
	tPCD_BCD_MsgTy≥Def
;

84 #i‡
deföed
 (
USB
)

87 #i‡
deföed
 (
USB_OTG_FS
)

88 
USB_OTG_GlobÆTy≥Def
 
	tPCD_Ty≥Def
;

89 
USB_OTG_CfgTy≥Def
 
	tPCD_InôTy≥Def
;

90 
USB_OTG_EPTy≥Def
 
	tPCD_EPTy≥Def
;

92 #i‡
deföed
 (
USB
)

93 
USB_Ty≥Def
 
	tPCD_Ty≥Def
;

94 
USB_CfgTy≥Def
 
	tPCD_InôTy≥Def
;

95 
USB_EPTy≥Def
 
	tPCD_EPTy≥Def
;

101 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

102 
__PCD_H™dÀTy≥Def


107 
PCD_Ty≥Def
 *
In°™˚
;

108 
PCD_InôTy≥Def
 
Inô
;

109 
__IO
 
uöt8_t
 
USB_Addªss
;

110 #i‡
deföed
 (
USB_OTG_FS
)

111 
PCD_EPTy≥Def
 
IN_ï
[16];

112 
PCD_EPTy≥Def
 
OUT_ï
[16];

114 #i‡
deföed
 (
USB
)

115 
PCD_EPTy≥Def
 
IN_ï
[8];

116 
PCD_EPTy≥Def
 
OUT_ï
[8];

118 
HAL_LockTy≥Def
 
Lock
;

119 
__IO
 
PCD_SèãTy≥Def
 
Sèã
;

120 
__IO
 
uöt32_t
 
Eº‹Code
;

121 
uöt32_t
 
Sëup
[12];

122 
PCD_LPM_SèãTy≥Def
 
LPM_Sèã
;

123 
uöt32_t
 
BESL
;

125 *
pD©a
;

127 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

128 (* 
SOFCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

129 (* 
SëupSègeCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

130 (* 
Re£tCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

131 (* 
Su•ídCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

132 (* 
ResumeCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

133 (* 
C⁄√˘CÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

134 (* 
Disc⁄√˘CÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

136 (* 
D©aOutSègeCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

137 (* 
D©aInSègeCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

138 (* 
ISOOUTIncom∂ëeCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

139 (* 
ISOINIncom∂ëeCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

141 (* 
M•InôCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

142 (* 
M•DeInôCÆlback
)(
__PCD_H™dÀTy≥Def
 *
hpcd
);

144 } 
	tPCD_H™dÀTy≥Def
;

151 
	~"°m32f1xx_hÆ_pcd_ex.h
"

161 
	#PCD_SPEED_FULL
 
USBD_FS_SPEED


	)

169 
	#PCD_PHY_ULPI
 1U

	)

170 
	#PCD_PHY_EMBEDDED
 2U

	)

171 
	#PCD_PHY_UTMI
 3U

	)

180 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

181 
	#HAL_PCD_ERROR_INVALID_CALLBACK
 (0x00000010UË

	)

197 #i‡
deföed
 (
USB_OTG_FS
)

198 
	#__HAL_PCD_ENABLE
(
__HANDLE__
Ë()
	`USB_E«bÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

199 
	#__HAL_PCD_DISABLE
(
__HANDLE__
Ë()
	`USB_DißbÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

201 
	#__HAL_PCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë((
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë& (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

202 
	#__HAL_PCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
GINTSTS
Ë&(__INTERRUPT__))

	)

203 
	#__HAL_PCD_IS_INVALID_INTERRUPT
(
__HANDLE__
Ë(
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë=0U)

	)

206 
	#__HAL_PCD_UNGATE_PHYCLOCK
(
__HANDLE__
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
Ë&~(
USB_OTG_PCGCCTL_STOPCLK
)

	)

208 
	#__HAL_PCD_GATE_PHYCLOCK
(
__HANDLE__
Ë*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
Ë|
USB_OTG_PCGCCTL_STOPCLK


	)

210 
	#__HAL_PCD_IS_PHY_SUSPENDED
(
__HANDLE__
Ë((*(
__IO
 
uöt32_t
 *)((uöt32_t)((__HANDLE__)->
In°™˚
Ë+ 
USB_OTG_PCGCCTL_BASE
)Ë& 0x10U)

	)

212 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_IT
(Ë
EXTI
->
IMR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

213 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_DISABLE_IT
(Ë
EXTI
->
IMR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

214 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_GET_FLAG
(Ë
EXTI
->
PR
 & (
USB_OTG_FS_WAKEUP_EXTI_LINE
)

	)

215 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
(Ë
EXTI
->
PR
 = 
USB_OTG_FS_WAKEUP_EXTI_LINE


	)

217 
	#__HAL_USB_OTG_FS_WAKEUP_EXTI_ENABLE_RISING_EDGE
() \

219 
EXTI
->
FTSR
 &~(
USB_OTG_FS_WAKEUP_EXTI_LINE
); \

220 
EXTI
->
RTSR
 |
USB_OTG_FS_WAKEUP_EXTI_LINE
; \

221 } 0U)

	)

224 #i‡
deföed
 (
USB
)

225 
	#__HAL_PCD_ENABLE
(
__HANDLE__
Ë()
	`USB_E«bÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

226 
	#__HAL_PCD_DISABLE
(
__HANDLE__
Ë()
	`USB_DißbÀGlobÆI¡
 ((__HANDLE__)->
In°™˚
)

	)

227 
	#__HAL_PCD_GET_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë((
	`USB_RódI¡îru±s
((__HANDLE__)->
In°™˚
Ë& (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

228 
	#__HAL_PCD_CLEAR_FLAG
(
__HANDLE__
, 
__INTERRUPT__
Ë(((__HANDLE__)->
In°™˚
->
ISTR
Ë&(
uöt16_t
)(~(__INTERRUPT__)))

	)

230 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_IT
(Ë
EXTI
->
IMR
 |
USB_WAKEUP_EXTI_LINE


	)

231 
	#__HAL_USB_WAKEUP_EXTI_DISABLE_IT
(Ë
EXTI
->
IMR
 &~(
USB_WAKEUP_EXTI_LINE
)

	)

232 
	#__HAL_USB_WAKEUP_EXTI_GET_FLAG
(Ë
EXTI
->
PR
 & (
USB_WAKEUP_EXTI_LINE
)

	)

233 
	#__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG
(Ë
EXTI
->
PR
 = 
USB_WAKEUP_EXTI_LINE


	)

235 
	#__HAL_USB_WAKEUP_EXTI_ENABLE_RISING_EDGE
() \

237 
EXTI
->
FTSR
 &~(
USB_WAKEUP_EXTI_LINE
); \

238 
EXTI
->
RTSR
 |
USB_WAKEUP_EXTI_LINE
; \

239 } 0U)

	)

256 
HAL_SètusTy≥Def
 
HAL_PCD_Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

257 
HAL_SètusTy≥Def
 
HAL_PCD_DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

258 
HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

259 
HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
);

261 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

268 
HAL_PCD_SOF_CB_ID
 = 0x01,

269 
HAL_PCD_SETUPSTAGE_CB_ID
 = 0x02,

270 
HAL_PCD_RESET_CB_ID
 = 0x03,

271 
HAL_PCD_SUSPEND_CB_ID
 = 0x04,

272 
HAL_PCD_RESUME_CB_ID
 = 0x05,

273 
HAL_PCD_CONNECT_CB_ID
 = 0x06,

274 
HAL_PCD_DISCONNECT_CB_ID
 = 0x07,

276 
HAL_PCD_MSPINIT_CB_ID
 = 0x08,

277 
HAL_PCD_MSPDEINIT_CB_ID
 = 0x09

279 } 
	tHAL_PCD_CÆlbackIDTy≥Def
;

289 (*
pPCD_CÆlbackTy≥Def
)(
	tPCD_H™dÀTy≥Def
 *
	thpcd
);

290 (*
pPCD_D©aOutSègeCÆlbackTy≥Def
)(
	tPCD_H™dÀTy≥Def
 *
	thpcd
, 
	tuöt8_t
 
	tïnum
);

291 (*
pPCD_D©aInSègeCÆlbackTy≥Def
)(
	tPCD_H™dÀTy≥Def
 *
	thpcd
, 
	tuöt8_t
 
	tïnum
);

292 (*
pPCD_IsoOutIn˝…CÆlbackTy≥Def
)(
	tPCD_H™dÀTy≥Def
 *
	thpcd
, 
	tuöt8_t
 
	tïnum
);

293 (*
pPCD_IsoInIn˝…CÆlbackTy≥Def
)(
	tPCD_H™dÀTy≥Def
 *
	thpcd
, 
	tuöt8_t
 
	tïnum
);

299 
HAL_SètusTy≥Def
 
HAL_PCD_Regi°îCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

300 
HAL_PCD_CÆlbackIDTy≥Def
 
CÆlbackID
,

301 
pPCD_CÆlbackTy≥Def
 
pCÆlback
);

303 
HAL_SètusTy≥Def
 
HAL_PCD_UnRegi°îCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

304 
HAL_PCD_CÆlbackIDTy≥Def
 
CÆlbackID
);

306 
HAL_SètusTy≥Def
 
HAL_PCD_Regi°îD©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

307 
pPCD_D©aOutSègeCÆlbackTy≥Def
 
pCÆlback
);

309 
HAL_SètusTy≥Def
 
HAL_PCD_UnRegi°îD©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

311 
HAL_SètusTy≥Def
 
HAL_PCD_Regi°îD©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

312 
pPCD_D©aInSègeCÆlbackTy≥Def
 
pCÆlback
);

314 
HAL_SètusTy≥Def
 
HAL_PCD_UnRegi°îD©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

316 
HAL_SètusTy≥Def
 
HAL_PCD_Regi°îIsoOutIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

317 
pPCD_IsoOutIn˝…CÆlbackTy≥Def
 
pCÆlback
);

319 
HAL_SètusTy≥Def
 
HAL_PCD_UnRegi°îIsoOutIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

321 
HAL_SètusTy≥Def
 
HAL_PCD_Regi°îIsoInIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

322 
pPCD_IsoInIn˝…CÆlbackTy≥Def
 
pCÆlback
);

324 
HAL_SètusTy≥Def
 
HAL_PCD_UnRegi°îIsoInIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

336 
HAL_SètusTy≥Def
 
HAL_PCD_Sèπ
(
PCD_H™dÀTy≥Def
 *
hpcd
);

337 
HAL_SètusTy≥Def
 
HAL_PCD_St›
(
PCD_H™dÀTy≥Def
 *
hpcd
);

338 
HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
);

339 
HAL_PCD_WKUP_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
);

341 
HAL_PCD_SOFCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

342 
HAL_PCD_SëupSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

343 
HAL_PCD_Re£tCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

344 
HAL_PCD_Su•ídCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

345 
HAL_PCD_ResumeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

346 
HAL_PCD_C⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

347 
HAL_PCD_Disc⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
);

349 
HAL_PCD_D©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

350 
HAL_PCD_D©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

351 
HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

352 
HAL_PCD_ISOINIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
);

361 
HAL_SètusTy≥Def
 
HAL_PCD_DevC⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
);

362 
HAL_SètusTy≥Def
 
HAL_PCD_DevDisc⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
);

363 
HAL_SètusTy≥Def
 
HAL_PCD_SëAddªss
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
addªss
);

364 
HAL_SètusTy≥Def
 
HAL_PCD_EP_O≥n
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
,

365 
uöt16_t
 
ï_mps
, 
uöt8_t
 
ï_ty≥
);

367 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Clo£
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

368 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
,

369 
uöt8_t
 *
pBuf
, 
uöt32_t
 
Àn
);

371 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
,

372 
uöt8_t
 *
pBuf
, 
uöt32_t
 
Àn
);

375 
HAL_SètusTy≥Def
 
HAL_PCD_EP_SëSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

376 
HAL_SètusTy≥Def
 
HAL_PCD_EP_CÃSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

377 
HAL_SètusTy≥Def
 
HAL_PCD_EP_Flush
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

378 
HAL_SètusTy≥Def
 
HAL_PCD_A˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
);

379 
HAL_SètusTy≥Def
 
HAL_PCD_DeA˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
);

381 
uöt32_t
 
HAL_PCD_EP_GëRxCou¡
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
);

390 
PCD_SèãTy≥Def
 
HAL_PCD_GëSèã
(
PCD_H™dÀTy≥Def
 *
hpcd
);

406 #i‡
deföed
 (
USB_OTG_FS
)

407 
	#USB_OTG_FS_WAKEUP_EXTI_LINE
 (0x1U << 18Ë

	)

410 #i‡
deföed
 (
USB
)

411 
	#USB_WAKEUP_EXTI_LINE
 (0x1U << 18Ë

	)

417 #i‡
deföed
 (
USB
)

421 
	#PCD_EP0MPS_64
 
EP_MPS_64


	)

422 
	#PCD_EP0MPS_32
 
EP_MPS_32


	)

423 
	#PCD_EP0MPS_16
 
EP_MPS_16


	)

424 
	#PCD_EP0MPS_08
 
EP_MPS_8


	)

432 
	#PCD_ENDP0
 0U

	)

433 
	#PCD_ENDP1
 1U

	)

434 
	#PCD_ENDP2
 2U

	)

435 
	#PCD_ENDP3
 3U

	)

436 
	#PCD_ENDP4
 4U

	)

437 
	#PCD_ENDP5
 5U

	)

438 
	#PCD_ENDP6
 6U

	)

439 
	#PCD_ENDP7
 7U

	)

447 
	#PCD_SNG_BUF
 0U

	)

448 
	#PCD_DBL_BUF
 1U

	)

457 #i‡
deföed
 (
USB_OTG_FS
)

458 #i‚de‡
USB_OTG_DOEPINT_OTEPSPR


459 
	#USB_OTG_DOEPINT_OTEPSPR
 (0x1UL << 5Ë

	)

462 #i‚de‡
USB_OTG_DOEPMSK_OTEPSPRM


463 
	#USB_OTG_DOEPMSK_OTEPSPRM
 (0x1UL << 5Ë

	)

466 #i‚de‡
USB_OTG_DOEPINT_NAK


467 
	#USB_OTG_DOEPINT_NAK
 (0x1UL << 13Ë

	)

470 #i‚de‡
USB_OTG_DOEPMSK_NAKM


471 
	#USB_OTG_DOEPMSK_NAKM
 (0x1UL << 13Ë

	)

474 #i‚de‡
USB_OTG_DOEPINT_STPKTRX


475 
	#USB_OTG_DOEPINT_STPKTRX
 (0x1UL << 15Ë

	)

478 #i‚de‡
USB_OTG_DOEPMSK_NYETM


479 
	#USB_OTG_DOEPMSK_NYETM
 (0x1UL << 14Ë

	)

487 #i‡
deföed
 (
USB
)

489 
	#USB_CNTRX_NBLK_MSK
 (0x1FU << 10)

	)

490 
	#USB_CNTRX_BLSIZE
 (0x1U << 15)

	)

493 
	#PCD_SET_ENDPOINT
(
USBx
, 
bEpNum
, 
wRegVÆue
Ë(*(
__IO
 
uöt16_t
 *)(&(USBx)->
EP0R
 + ((bEpNumË* 2U)Ë(uöt16_t)(wRegVÆue))

	)

496 
	#PCD_GET_ENDPOINT
(
USBx
, 
bEpNum
Ë(*(
__IO
 
uöt16_t
 *)(&(USBx)->
EP0R
 + ((bEpNumË* 2U)))

	)

499 
	#USB_EP0SèπX„r
 
USB_EPSèπX„r


	)

508 
	#PCD_SET_EPTYPE
(
USBx
, 
bEpNum
, 
wTy≥
Ë(
	`PCD_SET_ENDPOINT
((USBx), (bEpNum), ((
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EP_T_MASK
Ë| (wTy≥Ë| 
USB_EP_CTR_TX
 | 
USB_EP_CTR_RX
)))

	)

516 
	#PCD_GET_EPTYPE
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EP_T_FIELD
)

	)

525 
	#PCD_FªeU£rBuf„r
(
USBx
, 
bEpNum
, 
bDú
) \

527 i‡((
bDú
) == 0U) \

530 
	`PCD_TX_DTOG
((
USBx
), (
bEpNum
)); \

532 i‡((
bDú
) == 1U) \

535 
	`PCD_RX_DTOG
((
USBx
), (
bEpNum
)); \

537 } 0)

	)

546 
	#PCD_SET_EP_TX_STATUS
(
USBx
, 
bEpNum
, 
wSèã
) \

548 
uöt16_t
 
_wRegVÆ
; \

550 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPTX_DTOGMASK
; \

552 i‡((
USB_EPTX_DTOG1
 & (
wSèã
))!= 0U) \

554 
_wRegVÆ
 ^
USB_EPTX_DTOG1
; \

557 i‡((
USB_EPTX_DTOG2
 & (
wSèã
))!= 0U) \

559 
_wRegVÆ
 ^
USB_EPTX_DTOG2
; \

561 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

562 } 0Ë

	)

571 
	#PCD_SET_EP_RX_STATUS
(
USBx
, 
bEpNum
,
wSèã
) \

573 
uöt16_t
 
_wRegVÆ
; \

575 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPRX_DTOGMASK
; \

577 i‡((
USB_EPRX_DTOG1
 & (
wSèã
))!= 0U) \

579 
_wRegVÆ
 ^
USB_EPRX_DTOG1
; \

582 i‡((
USB_EPRX_DTOG2
 & (
wSèã
))!= 0U) \

584 
_wRegVÆ
 ^
USB_EPRX_DTOG2
; \

586 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

587 } 0Ë

	)

597 
	#PCD_SET_EP_TXRX_STATUS
(
USBx
, 
bEpNum
, 
wSèãrx
, 
wSèãtx
) \

599 
uöt16_t
 
_wRegVÆ
; \

601 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& (
USB_EPRX_DTOGMASK
 | 
USB_EPTX_STAT
); \

603 i‡((
USB_EPRX_DTOG1
 & (
wSèãrx
))!= 0U) \

605 
_wRegVÆ
 ^
USB_EPRX_DTOG1
; \

608 i‡((
USB_EPRX_DTOG2
 & (
wSèãrx
))!= 0U) \

610 
_wRegVÆ
 ^
USB_EPRX_DTOG2
; \

613 i‡((
USB_EPTX_DTOG1
 & (
wSèãtx
))!= 0U) \

615 
_wRegVÆ
 ^
USB_EPTX_DTOG1
; \

618 i‡((
USB_EPTX_DTOG2
 & (
wSèãtx
))!= 0U) \

620 
_wRegVÆ
 ^
USB_EPTX_DTOG2
; \

623 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

624 } 0Ë

	)

633 
	#PCD_GET_EP_TX_STATUS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EPTX_STAT
)

	)

634 
	#PCD_GET_EP_RX_STATUS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EPRX_STAT
)

	)

642 
	#PCD_SET_EP_TX_VALID
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_EP_TX_STATUS
((USBx), (bEpNum), 
USB_EP_TX_VALID
))

	)

643 
	#PCD_SET_EP_RX_VALID
(
USBx
, 
bEpNum
Ë(
	`PCD_SET_EP_RX_STATUS
((USBx), (bEpNum), 
USB_EP_RX_VALID
))

	)

651 
	#PCD_GET_EP_TX_STALL_STATUS
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_TX_STATUS
((USBx), (bEpNum)Ë=
USB_EP_TX_STALL
)

	)

652 
	#PCD_GET_EP_RX_STALL_STATUS
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_RX_STATUS
((USBx), (bEpNum)Ë=
USB_EP_RX_STALL
)

	)

660 
	#PCD_SET_EP_KIND
(
USBx
, 
bEpNum
) \

662 
uöt16_t
 
_wRegVÆ
; \

664 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPREG_MASK
; \

666 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
 | 
USB_EP_KIND
)); \

667 } 0Ë

	)

669 
	#PCD_CLEAR_EP_KIND
(
USBx
, 
bEpNum
) \

671 
uöt16_t
 
_wRegVÆ
; \

673 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPKIND_MASK
; \

675 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

676 } 0Ë

	)

684 
	#PCD_SET_OUT_STATUS
(
USBx
, 
bEpNum
Ë
	`PCD_SET_EP_KIND
((USBx), (bEpNum))

	)

685 
	#PCD_CLEAR_OUT_STATUS
(
USBx
, 
bEpNum
Ë
	`PCD_CLEAR_EP_KIND
((USBx), (bEpNum))

	)

693 
	#PCD_SET_EP_DBUF
(
USBx
, 
bEpNum
Ë
	`PCD_SET_EP_KIND
((USBx), (bEpNum))

	)

694 
	#PCD_CLEAR_EP_DBUF
(
USBx
, 
bEpNum
Ë
	`PCD_CLEAR_EP_KIND
((USBx), (bEpNum))

	)

702 
	#PCD_CLEAR_RX_EP_CTR
(
USBx
, 
bEpNum
) \

704 
uöt16_t
 
_wRegVÆ
; \

706 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& (0x7FFFU & 
USB_EPREG_MASK
); \

708 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_TX
)); \

709 } 0Ë

	)

711 
	#PCD_CLEAR_TX_EP_CTR
(
USBx
, 
bEpNum
) \

713 
uöt16_t
 
_wRegVÆ
; \

715 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& (0xFF7FU & 
USB_EPREG_MASK
); \

717 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
)); \

718 } 0Ë

	)

726 
	#PCD_RX_DTOG
(
USBx
, 
bEpNum
) \

728 
uöt16_t
 
_wEPVÆ
; \

730 
_wEPVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPREG_MASK
; \

732 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wEPVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
 | 
USB_EP_DTOG_RX
)); \

733 } 0Ë

	)

735 
	#PCD_TX_DTOG
(
USBx
, 
bEpNum
) \

737 
uöt16_t
 
_wEPVÆ
; \

739 
_wEPVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPREG_MASK
; \

741 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wEPVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
 | 
USB_EP_DTOG_TX
)); \

742 } 0Ë

	)

749 
	#PCD_CLEAR_RX_DTOG
(
USBx
, 
bEpNum
) \

751 
uöt16_t
 
_wRegVÆ
; \

753 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)); \

755 i‡((
_wRegVÆ
 & 
USB_EP_DTOG_RX
) != 0U)\

757 
	`PCD_RX_DTOG
((
USBx
), (
bEpNum
)); \

759 } 0Ë

	)

761 
	#PCD_CLEAR_TX_DTOG
(
USBx
, 
bEpNum
) \

763 
uöt16_t
 
_wRegVÆ
; \

765 
_wRegVÆ
 = 
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)); \

767 i‡((
_wRegVÆ
 & 
USB_EP_DTOG_TX
) != 0U)\

769 
	`PCD_TX_DTOG
((
USBx
), (
bEpNum
)); \

771 } 0Ë

	)

780 
	#PCD_SET_EP_ADDRESS
(
USBx
, 
bEpNum
, 
bAddr
) \

782 
uöt16_t
 
_wRegVÆ
; \

784 
_wRegVÆ
 = (
	`PCD_GET_ENDPOINT
((
USBx
), (
bEpNum
)Ë& 
USB_EPREG_MASK
Ë| (
bAddr
); \

786 
	`PCD_SET_ENDPOINT
((
USBx
), (
bEpNum
), (
_wRegVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
)); \

787 } 0Ë

	)

795 
	#PCD_GET_EP_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt8_t
)(
	`PCD_GET_ENDPOINT
((USBx), (bEpNum)Ë& 
USB_EPADDR_FIELD
))

	)

797 
	#PCD_EP_TX_CNT
(
USBx
, 
bEpNum
Ë((
uöt16_t
 *)((((
uöt32_t
)(USBx)->
BTABLE
 + ((uöt32_t)(bEpNumË* 8UË+ 2UË* 
PMA_ACCESS
Ë+ ((uöt32_t)(USBxË+ 0x400U)))

	)

798 
	#PCD_EP_RX_CNT
(
USBx
, 
bEpNum
Ë((
uöt16_t
 *)((((
uöt32_t
)(USBx)->
BTABLE
 + ((uöt32_t)(bEpNumË* 8UË+ 6UË* 
PMA_ACCESS
Ë+ ((uöt32_t)(USBxË+ 0x400U)))

	)

807 
	#PCD_SET_EP_TX_ADDRESS
(
USBx
, 
bEpNum
, 
wAddr
) \

809 
__IO
 
uöt16_t
 *
_wRegVÆ
; \

810 
uöt32_t
 
_wRegBa£
 = (uöt32_t)
USBx
; \

812 
_wRegBa£
 +(
uöt32_t
)(
USBx
)->
BTABLE
; \

813 
_wRegVÆ
 = (
__IO
 
uöt16_t
 *)(
_wRegBa£
 + 0x400U + (((
uöt32_t
)(
bEpNum
Ë* 8UË* 
PMA_ACCESS
)); \

814 *
_wRegVÆ
 = ((
wAddr
) >> 1) << 1; \

815 } 0Ë

	)

817 
	#PCD_SET_EP_RX_ADDRESS
(
USBx
, 
bEpNum
, 
wAddr
) \

819 
__IO
 
uöt16_t
 *
_wRegVÆ
; \

820 
uöt32_t
 
_wRegBa£
 = (uöt32_t)
USBx
; \

822 
_wRegBa£
 +(
uöt32_t
)(
USBx
)->
BTABLE
; \

823 
_wRegVÆ
 = (
__IO
 
uöt16_t
 *)(
_wRegBa£
 + 0x400U + ((((
uöt32_t
)(
bEpNum
Ë* 8UË+ 4UË* 
PMA_ACCESS
)); \

824 *
_wRegVÆ
 = ((
wAddr
) >> 1) << 1; \

825 } 0Ë

	)

833 
	#PCD_GET_EP_TX_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)*
	`PCD_EP_TX_ADDRESS
((USBx), (bEpNum)))

	)

834 
	#PCD_GET_EP_RX_ADDRESS
(
USBx
, 
bEpNum
Ë((
uöt16_t
)*
	`PCD_EP_RX_ADDRESS
((USBx), (bEpNum)))

	)

843 
	#PCD_CALC_BLK32
(
pdwReg
, 
wCou¡
, 
wNBlocks
) \

845 (
wNBlocks
Ë(
wCou¡
) >> 5; \

846 i‡(((
wCou¡
) & 0x1fU) == 0U) \

848 (
wNBlocks
)--; \

850 *(
pdwReg
Ë(
uöt16_t
)(((
wNBlocks
Ë<< 10Ë| 
USB_CNTRX_BLSIZE
); \

851 } 0Ë

	)

853 
	#PCD_CALC_BLK2
(
pdwReg
, 
wCou¡
, 
wNBlocks
) \

855 (
wNBlocks
Ë(
wCou¡
) >> 1; \

856 i‡(((
wCou¡
) & 0x1U) != 0U) \

858 (
wNBlocks
)++; \

860 *(
pdwReg
Ë(
uöt16_t
)((
wNBlocks
) << 10); \

861 } 0Ë

	)

863 
	#PCD_SET_EP_CNT_RX_REG
(
pdwReg
, 
wCou¡
) \

865 
uöt32_t
 
wNBlocks
; \

866 i‡((
wCou¡
) == 0U) \

868 *(
pdwReg
Ë&(
uöt16_t
)~
USB_CNTRX_NBLK_MSK
; \

869 *(
pdwReg
Ë|
USB_CNTRX_BLSIZE
; \

871 if((
wCou¡
) <= 62U) \

873 
	`PCD_CALC_BLK2
((
pdwReg
), (
wCou¡
), 
wNBlocks
); \

877 
	`PCD_CALC_BLK32
((
pdwReg
), (
wCou¡
), 
wNBlocks
); \

879 } 0Ë

	)

881 
	#PCD_SET_EP_RX_DBUF0_CNT
(
USBx
, 
bEpNum
, 
wCou¡
) \

883 
uöt32_t
 
_wRegBa£
 = (uöt32_t)(
USBx
); \

884 
__IO
 
uöt16_t
 *
pdwReg
; \

886 
_wRegBa£
 +(
uöt32_t
)(
USBx
)->
BTABLE
; \

887 
pdwReg
 = (
__IO
 
uöt16_t
 *)(
_wRegBa£
 + 0x400U + ((((
uöt32_t
)(
bEpNum
Ë* 8UË+ 2UË* 
PMA_ACCESS
)); \

888 
	`PCD_SET_EP_CNT_RX_REG
(
pdwReg
, (
wCou¡
)); \

889 } 0)

	)

898 
	#PCD_SET_EP_TX_CNT
(
USBx
, 
bEpNum
, 
wCou¡
) \

900 
uöt32_t
 
_wRegBa£
 = (uöt32_t)(
USBx
); \

901 
__IO
 
uöt16_t
 *
_wRegVÆ
; \

903 
_wRegBa£
 +(
uöt32_t
)(
USBx
)->
BTABLE
; \

904 
_wRegVÆ
 = (
__IO
 
uöt16_t
 *)(
_wRegBa£
 + 0x400U + ((((
uöt32_t
)(
bEpNum
Ë* 8UË+ 2UË* 
PMA_ACCESS
)); \

905 *
_wRegVÆ
 = (
uöt16_t
)(
wCou¡
); \

906 } 0)

	)

908 
	#PCD_SET_EP_RX_CNT
(
USBx
, 
bEpNum
, 
wCou¡
) \

910 
uöt32_t
 
_wRegBa£
 = (uöt32_t)(
USBx
); \

911 
__IO
 
uöt16_t
 *
_wRegVÆ
; \

913 
_wRegBa£
 +(
uöt32_t
)(
USBx
)->
BTABLE
; \

914 
_wRegVÆ
 = (
__IO
 
uöt16_t
 *)(
_wRegBa£
 + 0x400U + ((((
uöt32_t
)(
bEpNum
Ë* 8UË+ 6UË* 
PMA_ACCESS
)); \

915 
	`PCD_SET_EP_CNT_RX_REG
(
_wRegVÆ
, (
wCou¡
)); \

916 } 0)

	)

924 
	#PCD_GET_EP_TX_CNT
(
USBx
, 
bEpNum
Ë((
uöt32_t
)(*
	`PCD_EP_TX_CNT
((USBx), (bEpNum))Ë& 0x3ffU)

	)

925 
	#PCD_GET_EP_RX_CNT
(
USBx
, 
bEpNum
Ë((
uöt32_t
)(*
	`PCD_EP_RX_CNT
((USBx), (bEpNum))Ë& 0x3ffU)

	)

934 
	#PCD_SET_EP_DBUF0_ADDR
(
USBx
, 
bEpNum
, 
wBuf0Addr
) \

936 
	`PCD_SET_EP_TX_ADDRESS
((
USBx
), (
bEpNum
), (
wBuf0Addr
)); \

937 } 0Ë

	)

939 
	#PCD_SET_EP_DBUF1_ADDR
(
USBx
, 
bEpNum
, 
wBuf1Addr
) \

941 
	`PCD_SET_EP_RX_ADDRESS
((
USBx
), (
bEpNum
), (
wBuf1Addr
)); \

942 } 0Ë

	)

952 
	#PCD_SET_EP_DBUF_ADDR
(
USBx
, 
bEpNum
, 
wBuf0Addr
, 
wBuf1Addr
) \

954 
	`PCD_SET_EP_DBUF0_ADDR
((
USBx
), (
bEpNum
), (
wBuf0Addr
)); \

955 
	`PCD_SET_EP_DBUF1_ADDR
((
USBx
), (
bEpNum
), (
wBuf1Addr
)); \

956 } 0Ë

	)

964 
	#PCD_GET_EP_DBUF0_ADDR
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_TX_ADDRESS
((USBx), (bEpNum)))

	)

965 
	#PCD_GET_EP_DBUF1_ADDR
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_RX_ADDRESS
((USBx), (bEpNum)))

	)

976 
	#PCD_SET_EP_DBUF0_CNT
(
USBx
, 
bEpNum
, 
bDú
, 
wCou¡
) \

978 i‡((
bDú
) == 0U) \

981 
	`PCD_SET_EP_RX_DBUF0_CNT
((
USBx
), (
bEpNum
), (
wCou¡
)); \

985 i‡((
bDú
) == 1U) \

988 
	`PCD_SET_EP_TX_CNT
((
USBx
), (
bEpNum
), (
wCou¡
)); \

991 } 0Ë

	)

993 
	#PCD_SET_EP_DBUF1_CNT
(
USBx
, 
bEpNum
, 
bDú
, 
wCou¡
) \

995 
uöt32_t
 
_wBa£
 = (uöt32_t)(
USBx
); \

996 
__IO
 
uöt16_t
 *
_wEPRegVÆ
; \

998 i‡((
bDú
) == 0U) \

1001 
	`PCD_SET_EP_RX_CNT
((
USBx
), (
bEpNum
), (
wCou¡
)); \

1005 i‡((
bDú
) == 1U) \

1008 
_wBa£
 +(
uöt32_t
)(
USBx
)->
BTABLE
; \

1009 
_wEPRegVÆ
 = (
__IO
 
uöt16_t
 *)(
_wBa£
 + 0x400U + ((((
uöt32_t
)(
bEpNum
Ë* 8UË+ 6UË* 
PMA_ACCESS
)); \

1010 *
_wEPRegVÆ
 = (
uöt16_t
)(
wCou¡
); \

1013 } 0Ë

	)

1015 
	#PCD_SET_EP_DBUF_CNT
(
USBx
, 
bEpNum
, 
bDú
, 
wCou¡
) \

1017 
	`PCD_SET_EP_DBUF0_CNT
((
USBx
), (
bEpNum
), (
bDú
), (
wCou¡
)); \

1018 
	`PCD_SET_EP_DBUF1_CNT
((
USBx
), (
bEpNum
), (
bDú
), (
wCou¡
)); \

1019 } 0Ë

	)

1027 
	#PCD_GET_EP_DBUF0_CNT
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_TX_CNT
((USBx), (bEpNum)))

	)

1028 
	#PCD_GET_EP_DBUF1_CNT
(
USBx
, 
bEpNum
Ë(
	`PCD_GET_EP_RX_CNT
((USBx), (bEpNum)))

	)

1045 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd_ex.h

21 #i‚de‡
STM32F1xx_HAL_PCD_EX_H


22 
	#STM32F1xx_HAL_PCD_EX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

31 #i‡
deföed
 (
USB
Ë|| deföed (
USB_OTG_FS
)

50 #i‡
deföed
 (
USB_OTG_FS
)

51 
HAL_SètusTy≥Def
 
HAL_PCDEx_SëTxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
fifo
, 
uöt16_t
 
size
);

52 
HAL_SètusTy≥Def
 
HAL_PCDEx_SëRxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
size
);

55 #i‡
deföed
 (
USB
)

56 
HAL_SètusTy≥Def
 
HAL_PCDEx_PMAC⁄fig
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
ï_addr
,

57 
uöt16_t
 
ï_köd
, 
uöt32_t
 
pmØdªss
);

59 
HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
°©e
);

61 
HAL_PCDEx_LPM_CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_LPM_MsgTy≥Def
 
msg
);

62 
HAL_PCDEx_BCD_CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_BCD_MsgTy≥Def
 
msg
);

81 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pwr.h

21 #i‚de‡
__STM32F1xx_HAL_PWR_H


22 
	#__STM32F1xx_HAL_PWR_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

50 
uöt32_t
 
PVDLevñ
;

53 
uöt32_t
 
Mode
;

55 }
	tPWR_PVDTy≥Def
;

69 
	#PWR_EXTI_LINE_PVD
 ((
uöt32_t
)0x00010000Ë

	)

85 
	#PWR_PVDLEVEL_0
 
PWR_CR_PLS_2V2


	)

86 
	#PWR_PVDLEVEL_1
 
PWR_CR_PLS_2V3


	)

87 
	#PWR_PVDLEVEL_2
 
PWR_CR_PLS_2V4


	)

88 
	#PWR_PVDLEVEL_3
 
PWR_CR_PLS_2V5


	)

89 
	#PWR_PVDLEVEL_4
 
PWR_CR_PLS_2V6


	)

90 
	#PWR_PVDLEVEL_5
 
PWR_CR_PLS_2V7


	)

91 
	#PWR_PVDLEVEL_6
 
PWR_CR_PLS_2V8


	)

92 
	#PWR_PVDLEVEL_7
 
PWR_CR_PLS_2V9


	)

101 
	#PWR_PVD_MODE_NORMAL
 0x00000000U

	)

102 
	#PWR_PVD_MODE_IT_RISING
 0x00010001U

	)

103 
	#PWR_PVD_MODE_IT_FALLING
 0x00010002U

	)

104 
	#PWR_PVD_MODE_IT_RISING_FALLING
 0x00010003U

	)

105 
	#PWR_PVD_MODE_EVENT_RISING
 0x00020001U

	)

106 
	#PWR_PVD_MODE_EVENT_FALLING
 0x00020002U

	)

107 
	#PWR_PVD_MODE_EVENT_RISING_FALLING
 0x00020003U

	)

118 
	#PWR_WAKEUP_PIN1
 
PWR_CSR_EWUP


	)

127 
	#PWR_MAINREGULATOR_ON
 0x00000000U

	)

128 
	#PWR_LOWPOWERREGULATOR_ON
 
PWR_CR_LPDS


	)

137 
	#PWR_SLEEPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

138 
	#PWR_SLEEPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

147 
	#PWR_STOPENTRY_WFI
 ((
uöt8_t
)0x01)

	)

148 
	#PWR_STOPENTRY_WFE
 ((
uöt8_t
)0x02)

	)

157 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

158 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

159 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

190 
	#__HAL_PWR_GET_FLAG
(
__FLAG__
Ë((
PWR
->
CSR
 & (__FLAG__)Ë=(__FLAG__))

	)

198 
	#__HAL_PWR_CLEAR_FLAG
(
__FLAG__
Ë
	`SET_BIT
(
PWR
->
CR
, ((__FLAG__Ë<< 2))

	)

204 
	#__HAL_PWR_PVD_EXTI_ENABLE_IT
(Ë
	`SET_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

210 
	#__HAL_PWR_PVD_EXTI_DISABLE_IT
(Ë
	`CLEAR_BIT
(
EXTI
->
IMR
, 
PWR_EXTI_LINE_PVD
)

	)

216 
	#__HAL_PWR_PVD_EXTI_ENABLE_EVENT
(Ë
	`SET_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

222 
	#__HAL_PWR_PVD_EXTI_DISABLE_EVENT
(Ë
	`CLEAR_BIT
(
EXTI
->
EMR
, 
PWR_EXTI_LINE_PVD
)

	)

229 
	#__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

236 
	#__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
PWR_EXTI_LINE_PVD
)

	)

243 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

250 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
PWR_EXTI_LINE_PVD
)

	)

256 
	#__HAL_PWR_PVD_EXTI_ENABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

	)

263 
	#__HAL_PWR_PVD_EXTI_DISABLE_RISING_FALLING_EDGE
(Ë
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

	)

271 
	#__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & (
PWR_EXTI_LINE_PVD
))

	)

277 
	#__HAL_PWR_PVD_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = (
PWR_EXTI_LINE_PVD
))

	)

283 
	#__HAL_PWR_PVD_EXTI_GENERATE_SWIT
(Ë
	`SET_BIT
(
EXTI
->
SWIER
, 
PWR_EXTI_LINE_PVD
)

	)

292 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLEVEL_0
Ë|| ((LEVELË=
PWR_PVDLEVEL_1
)|| \

293 ((
LEVEL
Ë=
PWR_PVDLEVEL_2
Ë|| ((LEVELË=
PWR_PVDLEVEL_3
)|| \

294 ((
LEVEL
Ë=
PWR_PVDLEVEL_4
Ë|| ((LEVELË=
PWR_PVDLEVEL_5
)|| \

295 ((
LEVEL
Ë=
PWR_PVDLEVEL_6
Ë|| ((LEVELË=
PWR_PVDLEVEL_7
))

	)

298 
	#IS_PWR_PVD_MODE
(
MODE
Ë(((MODEË=
PWR_PVD_MODE_IT_RISING
)|| ((MODEË=
PWR_PVD_MODE_IT_FALLING
) || \

299 ((
MODE
Ë=
PWR_PVD_MODE_IT_RISING_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING
) || \

300 ((
MODE
Ë=
PWR_PVD_MODE_EVENT_FALLING
Ë|| ((MODEË=
PWR_PVD_MODE_EVENT_RISING_FALLING
) || \

301 ((
MODE
Ë=
PWR_PVD_MODE_NORMAL
))

	)

303 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WAKEUP_PIN1
))

	)

305 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_MAINREGULATOR_ON
) || \

306 ((
REGULATOR
Ë=
PWR_LOWPOWERREGULATOR_ON
))

	)

308 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_SLEEPENTRY_WFI
Ë|| ((ENTRYË=
PWR_SLEEPENTRY_WFE
))

	)

310 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPENTRY_WFI
Ë|| ((ENTRYË=
PWR_STOPENTRY_WFE
))

	)

329 
HAL_PWR_DeInô
();

330 
HAL_PWR_E«bÀBkUpAc˚ss
();

331 
HAL_PWR_DißbÀBkUpAc˚ss
();

342 
HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
);

344 
HAL_PWR_E«bÀPVD
();

345 
HAL_PWR_DißbÀPVD
();

348 
HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

349 
HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
);

352 
HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
);

353 
HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
);

354 
HAL_PWR_E¡îSTANDBYMode
();

356 
HAL_PWR_E«bÀSÀïOnExô
();

357 
HAL_PWR_DißbÀSÀïOnExô
();

358 
HAL_PWR_E«bÀSEVOnPíd
();

359 
HAL_PWR_DißbÀSEVOnPíd
();

363 
HAL_PWR_PVD_IRQH™dÀr
();

364 
HAL_PWR_PVDCÆlback
();

381 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h

21 #i‚de‡
__STM32F1xx_HAL_RCC_H


22 
	#__STM32F1xx_HAL_RCC_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

51 
uöt32_t
 
PLLSèã
;

54 
uöt32_t
 
PLLSour˚
;

57 
uöt32_t
 
PLLMUL
;

59 } 
	tRCC_PLLInôTy≥Def
;

66 
uöt32_t
 
ClockTy≥
;

69 
uöt32_t
 
SYSCLKSour˚
;

72 
uöt32_t
 
AHBCLKDividî
;

75 
uöt32_t
 
APB1CLKDividî
;

78 
uöt32_t
 
APB2CLKDividî
;

80 } 
	tRCC_ClkInôTy≥Def
;

95 
	#RCC_PLLSOURCE_HSI_DIV2
 0x00000000U

	)

96 
	#RCC_PLLSOURCE_HSE
 
RCC_CFGR_PLLSRC


	)

105 
	#RCC_OSCILLATORTYPE_NONE
 0x00000000U

	)

106 
	#RCC_OSCILLATORTYPE_HSE
 0x00000001U

	)

107 
	#RCC_OSCILLATORTYPE_HSI
 0x00000002U

	)

108 
	#RCC_OSCILLATORTYPE_LSE
 0x00000004U

	)

109 
	#RCC_OSCILLATORTYPE_LSI
 0x00000008U

	)

117 
	#RCC_HSE_OFF
 0x00000000U

	)

118 
	#RCC_HSE_ON
 
RCC_CR_HSEON


	)

119 
	#RCC_HSE_BYPASS
 ((
uöt32_t
)(
RCC_CR_HSEBYP
 | 
RCC_CR_HSEON
)Ë

	)

127 
	#RCC_LSE_OFF
 0x00000000U

	)

128 
	#RCC_LSE_ON
 
RCC_BDCR_LSEON


	)

129 
	#RCC_LSE_BYPASS
 ((
uöt32_t
)(
RCC_BDCR_LSEBYP
 | 
RCC_BDCR_LSEON
)Ë

	)

138 
	#RCC_HSI_OFF
 0x00000000U

	)

139 
	#RCC_HSI_ON
 
RCC_CR_HSION


	)

141 
	#RCC_HSICALIBRATION_DEFAULT
 0x10U

	)

150 
	#RCC_LSI_OFF
 0x00000000U

	)

151 
	#RCC_LSI_ON
 
RCC_CSR_LSION


	)

160 
	#RCC_PLL_NONE
 0x00000000U

	)

161 
	#RCC_PLL_OFF
 0x00000001U

	)

162 
	#RCC_PLL_ON
 0x00000002U

	)

171 
	#RCC_CLOCKTYPE_SYSCLK
 0x00000001U

	)

172 
	#RCC_CLOCKTYPE_HCLK
 0x00000002U

	)

173 
	#RCC_CLOCKTYPE_PCLK1
 0x00000004U

	)

174 
	#RCC_CLOCKTYPE_PCLK2
 0x00000008U

	)

183 
	#RCC_SYSCLKSOURCE_HSI
 
RCC_CFGR_SW_HSI


	)

184 
	#RCC_SYSCLKSOURCE_HSE
 
RCC_CFGR_SW_HSE


	)

185 
	#RCC_SYSCLKSOURCE_PLLCLK
 
RCC_CFGR_SW_PLL


	)

194 
	#RCC_SYSCLKSOURCE_STATUS_HSI
 
RCC_CFGR_SWS_HSI


	)

195 
	#RCC_SYSCLKSOURCE_STATUS_HSE
 
RCC_CFGR_SWS_HSE


	)

196 
	#RCC_SYSCLKSOURCE_STATUS_PLLCLK
 
RCC_CFGR_SWS_PLL


	)

205 
	#RCC_SYSCLK_DIV1
 
RCC_CFGR_HPRE_DIV1


	)

206 
	#RCC_SYSCLK_DIV2
 
RCC_CFGR_HPRE_DIV2


	)

207 
	#RCC_SYSCLK_DIV4
 
RCC_CFGR_HPRE_DIV4


	)

208 
	#RCC_SYSCLK_DIV8
 
RCC_CFGR_HPRE_DIV8


	)

209 
	#RCC_SYSCLK_DIV16
 
RCC_CFGR_HPRE_DIV16


	)

210 
	#RCC_SYSCLK_DIV64
 
RCC_CFGR_HPRE_DIV64


	)

211 
	#RCC_SYSCLK_DIV128
 
RCC_CFGR_HPRE_DIV128


	)

212 
	#RCC_SYSCLK_DIV256
 
RCC_CFGR_HPRE_DIV256


	)

213 
	#RCC_SYSCLK_DIV512
 
RCC_CFGR_HPRE_DIV512


	)

222 
	#RCC_HCLK_DIV1
 
RCC_CFGR_PPRE1_DIV1


	)

223 
	#RCC_HCLK_DIV2
 
RCC_CFGR_PPRE1_DIV2


	)

224 
	#RCC_HCLK_DIV4
 
RCC_CFGR_PPRE1_DIV4


	)

225 
	#RCC_HCLK_DIV8
 
RCC_CFGR_PPRE1_DIV8


	)

226 
	#RCC_HCLK_DIV16
 
RCC_CFGR_PPRE1_DIV16


	)

235 
	#RCC_RTCCLKSOURCE_NO_CLK
 0x00000000U

	)

236 
	#RCC_RTCCLKSOURCE_LSE
 
RCC_BDCR_RTCSEL_LSE


	)

237 
	#RCC_RTCCLKSOURCE_LSI
 
RCC_BDCR_RTCSEL_LSI


	)

238 
	#RCC_RTCCLKSOURCE_HSE_DIV128
 
RCC_BDCR_RTCSEL_HSE


	)

247 
	#RCC_MCO1
 0x00000000U

	)

248 
	#RCC_MCO
 
RCC_MCO1


	)

257 
	#RCC_MCODIV_1
 0x00000000U

	)

266 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)
RCC_CIR_LSIRDYF
Ë

	)

267 
	#RCC_IT_LSERDY
 ((
uöt8_t
)
RCC_CIR_LSERDYF
Ë

	)

268 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)
RCC_CIR_HSIRDYF
Ë

	)

269 
	#RCC_IT_HSERDY
 ((
uöt8_t
)
RCC_CIR_HSERDYF
Ë

	)

270 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)
RCC_CIR_PLLRDYF
Ë

	)

271 
	#RCC_IT_CSS
 ((
uöt8_t
)
RCC_CIR_CSSF
Ë

	)

286 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_HSIRDY_Pos
)Ë

	)

287 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_HSERDY_Pos
)Ë

	)

288 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_PLLRDY_Pos
)Ë

	)

291 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_LSIRDY_Pos
)Ë

	)

292 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_PINRSTF_Pos
)Ë

	)

293 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_PORRSTF_Pos
)Ë

	)

294 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_SFTRSTF_Pos
)Ë

	)

295 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_IWDGRSTF_Pos
)Ë

	)

296 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_WWDGRSTF_Pos
)Ë

	)

297 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)((
CSR_REG_INDEX
 << 5UË| 
RCC_CSR_LPWRRSTF_Pos
)Ë

	)

300 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)((
BDCR_REG_INDEX
 << 5UË| 
RCC_BDCR_LSERDY_Pos
)Ë

	)

323 
	#__HAL_RCC_DMA1_CLK_ENABLE
() do { \

324 
__IO
 
uöt32_t
 
tm¥eg
; \

325 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

327 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA1EN
);\

328 
	`UNUSED
(
tm¥eg
); \

329 } 0U)

	)

331 
	#__HAL_RCC_SRAM_CLK_ENABLE
() do { \

332 
__IO
 
uöt32_t
 
tm¥eg
; \

333 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

335 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SRAMEN
);\

336 
	`UNUSED
(
tm¥eg
); \

337 } 0U)

	)

339 
	#__HAL_RCC_FLITF_CLK_ENABLE
() do { \

340 
__IO
 
uöt32_t
 
tm¥eg
; \

341 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

343 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FLITFEN
);\

344 
	`UNUSED
(
tm¥eg
); \

345 } 0U)

	)

347 
	#__HAL_RCC_CRC_CLK_ENABLE
() do { \

348 
__IO
 
uöt32_t
 
tm¥eg
; \

349 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

351 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_CRCEN
);\

352 
	`UNUSED
(
tm¥eg
); \

353 } 0U)

	)

355 
	#__HAL_RCC_DMA1_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_DMA1EN
))

	)

356 
	#__HAL_RCC_SRAM_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_SRAMEN
))

	)

357 
	#__HAL_RCC_FLITF_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_FLITFEN
))

	)

358 
	#__HAL_RCC_CRC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_CRCEN
))

	)

372 
	#__HAL_RCC_DMA1_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)Ë!
RESET
)

	)

373 
	#__HAL_RCC_DMA1_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA1EN
)Ë=
RESET
)

	)

374 
	#__HAL_RCC_SRAM_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)Ë!
RESET
)

	)

375 
	#__HAL_RCC_SRAM_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SRAMEN
)Ë=
RESET
)

	)

376 
	#__HAL_RCC_FLITF_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)Ë!
RESET
)

	)

377 
	#__HAL_RCC_FLITF_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FLITFEN
)Ë=
RESET
)

	)

378 
	#__HAL_RCC_CRC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)Ë!
RESET
)

	)

379 
	#__HAL_RCC_CRC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_CRCEN
)Ë=
RESET
)

	)

392 
	#__HAL_RCC_TIM2_CLK_ENABLE
() do { \

393 
__IO
 
uöt32_t
 
tm¥eg
; \

394 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

396 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM2EN
);\

397 
	`UNUSED
(
tm¥eg
); \

398 } 0U)

	)

400 
	#__HAL_RCC_TIM3_CLK_ENABLE
() do { \

401 
__IO
 
uöt32_t
 
tm¥eg
; \

402 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

404 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM3EN
);\

405 
	`UNUSED
(
tm¥eg
); \

406 } 0U)

	)

408 
	#__HAL_RCC_WWDG_CLK_ENABLE
() do { \

409 
__IO
 
uöt32_t
 
tm¥eg
; \

410 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

412 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_WWDGEN
);\

413 
	`UNUSED
(
tm¥eg
); \

414 } 0U)

	)

416 
	#__HAL_RCC_USART2_CLK_ENABLE
() do { \

417 
__IO
 
uöt32_t
 
tm¥eg
; \

418 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

420 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART2EN
);\

421 
	`UNUSED
(
tm¥eg
); \

422 } 0U)

	)

424 
	#__HAL_RCC_I2C1_CLK_ENABLE
() do { \

425 
__IO
 
uöt32_t
 
tm¥eg
; \

426 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

428 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C1EN
);\

429 
	`UNUSED
(
tm¥eg
); \

430 } 0U)

	)

432 
	#__HAL_RCC_BKP_CLK_ENABLE
() do { \

433 
__IO
 
uöt32_t
 
tm¥eg
; \

434 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

436 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_BKPEN
);\

437 
	`UNUSED
(
tm¥eg
); \

438 } 0U)

	)

440 
	#__HAL_RCC_PWR_CLK_ENABLE
() do { \

441 
__IO
 
uöt32_t
 
tm¥eg
; \

442 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

444 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_PWREN
);\

445 
	`UNUSED
(
tm¥eg
); \

446 } 0U)

	)

448 
	#__HAL_RCC_TIM2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM2EN
))

	)

449 
	#__HAL_RCC_TIM3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM3EN
))

	)

450 
	#__HAL_RCC_WWDG_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_WWDGEN
))

	)

451 
	#__HAL_RCC_USART2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART2EN
))

	)

452 
	#__HAL_RCC_I2C1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C1EN
))

	)

454 
	#__HAL_RCC_BKP_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_BKPEN
))

	)

455 
	#__HAL_RCC_PWR_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_PWREN
))

	)

469 
	#__HAL_RCC_TIM2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)Ë!
RESET
)

	)

470 
	#__HAL_RCC_TIM2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM2EN
)Ë=
RESET
)

	)

471 
	#__HAL_RCC_TIM3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)Ë!
RESET
)

	)

472 
	#__HAL_RCC_TIM3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM3EN
)Ë=
RESET
)

	)

473 
	#__HAL_RCC_WWDG_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)Ë!
RESET
)

	)

474 
	#__HAL_RCC_WWDG_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_WWDGEN
)Ë=
RESET
)

	)

475 
	#__HAL_RCC_USART2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)Ë!
RESET
)

	)

476 
	#__HAL_RCC_USART2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART2EN
)Ë=
RESET
)

	)

477 
	#__HAL_RCC_I2C1_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)Ë!
RESET
)

	)

478 
	#__HAL_RCC_I2C1_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C1EN
)Ë=
RESET
)

	)

479 
	#__HAL_RCC_BKP_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)Ë!
RESET
)

	)

480 
	#__HAL_RCC_BKP_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_BKPEN
)Ë=
RESET
)

	)

481 
	#__HAL_RCC_PWR_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)Ë!
RESET
)

	)

482 
	#__HAL_RCC_PWR_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_PWREN
)Ë=
RESET
)

	)

495 
	#__HAL_RCC_AFIO_CLK_ENABLE
() do { \

496 
__IO
 
uöt32_t
 
tm¥eg
; \

497 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

499 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_AFIOEN
);\

500 
	`UNUSED
(
tm¥eg
); \

501 } 0U)

	)

503 
	#__HAL_RCC_GPIOA_CLK_ENABLE
() do { \

504 
__IO
 
uöt32_t
 
tm¥eg
; \

505 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

507 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPAEN
);\

508 
	`UNUSED
(
tm¥eg
); \

509 } 0U)

	)

511 
	#__HAL_RCC_GPIOB_CLK_ENABLE
() do { \

512 
__IO
 
uöt32_t
 
tm¥eg
; \

513 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

515 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPBEN
);\

516 
	`UNUSED
(
tm¥eg
); \

517 } 0U)

	)

519 
	#__HAL_RCC_GPIOC_CLK_ENABLE
() do { \

520 
__IO
 
uöt32_t
 
tm¥eg
; \

521 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

523 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPCEN
);\

524 
	`UNUSED
(
tm¥eg
); \

525 } 0U)

	)

527 
	#__HAL_RCC_GPIOD_CLK_ENABLE
() do { \

528 
__IO
 
uöt32_t
 
tm¥eg
; \

529 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

531 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);\

532 
	`UNUSED
(
tm¥eg
); \

533 } 0U)

	)

535 
	#__HAL_RCC_ADC1_CLK_ENABLE
() do { \

536 
__IO
 
uöt32_t
 
tm¥eg
; \

537 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

539 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC1EN
);\

540 
	`UNUSED
(
tm¥eg
); \

541 } 0U)

	)

543 
	#__HAL_RCC_TIM1_CLK_ENABLE
() do { \

544 
__IO
 
uöt32_t
 
tm¥eg
; \

545 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

547 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM1EN
);\

548 
	`UNUSED
(
tm¥eg
); \

549 } 0U)

	)

551 
	#__HAL_RCC_SPI1_CLK_ENABLE
() do { \

552 
__IO
 
uöt32_t
 
tm¥eg
; \

553 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

555 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_SPI1EN
);\

556 
	`UNUSED
(
tm¥eg
); \

557 } 0U)

	)

559 
	#__HAL_RCC_USART1_CLK_ENABLE
() do { \

560 
__IO
 
uöt32_t
 
tm¥eg
; \

561 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

563 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_USART1EN
);\

564 
	`UNUSED
(
tm¥eg
); \

565 } 0U)

	)

567 
	#__HAL_RCC_AFIO_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_AFIOEN
))

	)

568 
	#__HAL_RCC_GPIOA_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPAEN
))

	)

569 
	#__HAL_RCC_GPIOB_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPBEN
))

	)

570 
	#__HAL_RCC_GPIOC_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPCEN
))

	)

571 
	#__HAL_RCC_GPIOD_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPDEN
))

	)

572 
	#__HAL_RCC_ADC1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC1EN
))

	)

574 
	#__HAL_RCC_TIM1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM1EN
))

	)

575 
	#__HAL_RCC_SPI1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_SPI1EN
))

	)

576 
	#__HAL_RCC_USART1_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_USART1EN
))

	)

590 
	#__HAL_RCC_AFIO_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)Ë!
RESET
)

	)

591 
	#__HAL_RCC_AFIO_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_AFIOEN
)Ë=
RESET
)

	)

592 
	#__HAL_RCC_GPIOA_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)Ë!
RESET
)

	)

593 
	#__HAL_RCC_GPIOA_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPAEN
)Ë=
RESET
)

	)

594 
	#__HAL_RCC_GPIOB_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)Ë!
RESET
)

	)

595 
	#__HAL_RCC_GPIOB_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPBEN
)Ë=
RESET
)

	)

596 
	#__HAL_RCC_GPIOC_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)Ë!
RESET
)

	)

597 
	#__HAL_RCC_GPIOC_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPCEN
)Ë=
RESET
)

	)

598 
	#__HAL_RCC_GPIOD_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)Ë!
RESET
)

	)

599 
	#__HAL_RCC_GPIOD_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPDEN
)Ë=
RESET
)

	)

600 
	#__HAL_RCC_ADC1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)Ë!
RESET
)

	)

601 
	#__HAL_RCC_ADC1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC1EN
)Ë=
RESET
)

	)

602 
	#__HAL_RCC_TIM1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)Ë!
RESET
)

	)

603 
	#__HAL_RCC_TIM1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM1EN
)Ë=
RESET
)

	)

604 
	#__HAL_RCC_SPI1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)Ë!
RESET
)

	)

605 
	#__HAL_RCC_SPI1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_SPI1EN
)Ë=
RESET
)

	)

606 
	#__HAL_RCC_USART1_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)Ë!
RESET
)

	)

607 
	#__HAL_RCC_USART1_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_USART1EN
)Ë=
RESET
)

	)

617 
	#__HAL_RCC_APB1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFFU)

	)

618 
	#__HAL_RCC_TIM2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM2RST
))

	)

619 
	#__HAL_RCC_TIM3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM3RST
))

	)

620 
	#__HAL_RCC_WWDG_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_WWDGRST
))

	)

621 
	#__HAL_RCC_USART2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART2RST
))

	)

622 
	#__HAL_RCC_I2C1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C1RST
))

	)

624 
	#__HAL_RCC_BKP_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_BKPRST
))

	)

625 
	#__HAL_RCC_PWR_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_PWRRST
))

	)

627 
	#__HAL_RCC_APB1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 = 0x00)

	)

628 
	#__HAL_RCC_TIM2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM2RST
))

	)

629 
	#__HAL_RCC_TIM3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM3RST
))

	)

630 
	#__HAL_RCC_WWDG_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_WWDGRST
))

	)

631 
	#__HAL_RCC_USART2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART2RST
))

	)

632 
	#__HAL_RCC_I2C1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C1RST
))

	)

634 
	#__HAL_RCC_BKP_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_BKPRST
))

	)

635 
	#__HAL_RCC_PWR_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_PWRRST
))

	)

645 
	#__HAL_RCC_APB2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0xFFFFFFFFU)

	)

646 
	#__HAL_RCC_AFIO_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_AFIORST
))

	)

647 
	#__HAL_RCC_GPIOA_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPARST
))

	)

648 
	#__HAL_RCC_GPIOB_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPBRST
))

	)

649 
	#__HAL_RCC_GPIOC_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPCRST
))

	)

650 
	#__HAL_RCC_GPIOD_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPDRST
))

	)

651 
	#__HAL_RCC_ADC1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC1RST
))

	)

653 
	#__HAL_RCC_TIM1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM1RST
))

	)

654 
	#__HAL_RCC_SPI1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_SPI1RST
))

	)

655 
	#__HAL_RCC_USART1_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_USART1RST
))

	)

657 
	#__HAL_RCC_APB2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 = 0x00)

	)

658 
	#__HAL_RCC_AFIO_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_AFIORST
))

	)

659 
	#__HAL_RCC_GPIOA_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPARST
))

	)

660 
	#__HAL_RCC_GPIOB_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPBRST
))

	)

661 
	#__HAL_RCC_GPIOC_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPCRST
))

	)

662 
	#__HAL_RCC_GPIOD_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPDRST
))

	)

663 
	#__HAL_RCC_ADC1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC1RST
))

	)

665 
	#__HAL_RCC_TIM1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM1RST
))

	)

666 
	#__HAL_RCC_SPI1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_SPI1RST
))

	)

667 
	#__HAL_RCC_USART1_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_USART1RST
))

	)

687 
	#__HAL_RCC_HSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
ENABLE
)

	)

688 
	#__HAL_RCC_HSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_HSION_BB
 = 
DISABLE
)

	)

697 
	#__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
_HSICALIBRATIONVALUE_
) \

698 (
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, (
uöt32_t
)(
_HSICALIBRATIONVALUE_
Ë<< 
RCC_CR_HSITRIM_Pos
))

	)

713 
	#__HAL_RCC_LSI_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
ENABLE
)

	)

720 
	#__HAL_RCC_LSI_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CSR_LSION_BB
 = 
DISABLE
)

	)

752 
	#__HAL_RCC_HSE_CONFIG
(
__STATE__
) \

754 i‡((
__STATE__
Ë=
RCC_HSE_ON
) \

756 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

758 i‡((
__STATE__
Ë=
RCC_HSE_OFF
) \

760 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

761 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

763 i‡((
__STATE__
Ë=
RCC_HSE_BYPASS
) \

765 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

766 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

770 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
); \

771 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
); \

773 }0U)

	)

800 
	#__HAL_RCC_LSE_CONFIG
(
__STATE__
) \

802 i‡((
__STATE__
Ë=
RCC_LSE_ON
) \

804 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

806 i‡((
__STATE__
Ë=
RCC_LSE_OFF
) \

808 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

809 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

811 i‡((
__STATE__
Ë=
RCC_LSE_BYPASS
) \

813 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

814 
	`SET_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

818 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEON
); \

819 
	`CLEAR_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_LSEBYP
); \

821 }0U)

	)

837 
	#__HAL_RCC_PLL_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
ENABLE
)

	)

842 
	#__HAL_RCC_PLL_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLON_BB
 = 
DISABLE
)

	)

874 
	#__HAL_RCC_PLL_CONFIG
(
__RCC_PLLSOURCE__
, 
__PLLMUL__
)\

875 
	`MODIFY_REG
(
RCC
->
CFGR
, (
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLMULL
),((
__RCC_PLLSOURCE__
Ë| (
__PLLMUL__
Ë))

	)

883 
	#__HAL_RCC_GET_PLL_OSCSOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLSRC
)))

	)

901 
	#__HAL_RCC_SYSCLK_CONFIG
(
__SYSCLKSOURCE__
) \

902 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_SW
, (
__SYSCLKSOURCE__
))

	)

911 
	#__HAL_RCC_GET_SYSCLK_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
,
RCC_CFGR_SWS
)))

	)

921 #i‡ 
deföed
(
RCC_CFGR_MCO_3
)

953 
	#__HAL_RCC_MCO1_CONFIG
(
__MCOCLKSOURCE__
, 
__MCODIV__
) \

954 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_MCO
, (
__MCOCLKSOURCE__
))

	)

987 
	#__HAL_RCC_RTC_CONFIG
(
__RTC_CLKSOURCE__
Ë
	`MODIFY_REG
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
, (__RTC_CLKSOURCE__))

	)

996 
	#__HAL_RCC_GET_RTC_SOURCE
(Ë(
	`READ_BIT
(
RCC
->
BDCR
, 
RCC_BDCR_RTCSEL
))

	)

1001 
	#__HAL_RCC_RTC_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
ENABLE
)

	)

1006 
	#__HAL_RCC_RTC_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_RTCEN_BB
 = 
DISABLE
)

	)

1012 
	#__HAL_RCC_BACKUPRESET_FORCE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
ENABLE
)

	)

1016 
	#__HAL_RCC_BACKUPRESET_RELEASE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_BDCR_BDRST_BB
 = 
DISABLE
)

	)

1043 
	#__HAL_RCC_ENABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 |(__INTERRUPT__))

	)

1061 
	#__HAL_RCC_DISABLE_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE1_ADDRESS
 &(uöt8_t)(~(__INTERRUPT__)))

	)

1080 
	#__HAL_RCC_CLEAR_IT
(
__INTERRUPT__
Ë(*(
__IO
 
uöt8_t
 *Ë
RCC_CIR_BYTE2_ADDRESS
 = (__INTERRUPT__))

	)

1100 
	#__HAL_RCC_GET_IT
(
__INTERRUPT__
Ë((
RCC
->
CIR
 & (__INTERRUPT__)Ë=(__INTERRUPT__))

	)

1106 
	#__HAL_RCC_CLEAR_RESET_FLAGS
(Ë(*(
__IO
 
uöt32_t
 *)
RCC_CSR_RMVF_BB
 = 
ENABLE
)

	)

1131 
	#__HAL_RCC_GET_FLAG
(
__FLAG__
Ë(((((__FLAG__Ë>> 5UË=
CR_REG_INDEX
)? 
RCC
->
CR
 : \

1132 ((((
__FLAG__
Ë>> 5UË=
BDCR_REG_INDEX
)? 
RCC
->
BDCR
 : \

1133 
RCC
->
CSR
)Ë& (1U << ((
__FLAG__
Ë& 
RCC_FLAG_MASK
)))

	)

1144 
	~"°m32f1xx_hÆ_rcc_ex.h
"

1156 
HAL_SètusTy≥Def
 
HAL_RCC_DeInô
();

1157 
HAL_SètusTy≥Def
 
HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1158 
HAL_SètusTy≥Def
 
HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
);

1169 
HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
);

1170 
HAL_RCC_E«bÀCSS
();

1171 
HAL_RCC_DißbÀCSS
();

1172 
uöt32_t
 
HAL_RCC_GëSysClockFªq
();

1173 
uöt32_t
 
HAL_RCC_GëHCLKFªq
();

1174 
uöt32_t
 
HAL_RCC_GëPCLK1Fªq
();

1175 
uöt32_t
 
HAL_RCC_GëPCLK2Fªq
();

1176 
HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
);

1177 
HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
);

1180 
HAL_RCC_NMI_IRQH™dÀr
();

1183 
HAL_RCC_CSSCÆlback
();

1202 
	#RCC_DBP_TIMEOUT_VALUE
 100U

	)

1204 
	#RCC_LSE_TIMEOUT_VALUE
 
LSE_STARTUP_TIMEOUT


	)

1205 
	#CLOCKSWITCH_TIMEOUT_VALUE
 5000

	)

1206 
	#HSE_TIMEOUT_VALUE
 
HSE_STARTUP_TIMEOUT


	)

1207 
	#HSI_TIMEOUT_VALUE
 2U

	)

1208 
	#LSI_TIMEOUT_VALUE
 2U

	)

1209 
	#PLL_TIMEOUT_VALUE
 2U

	)

1218 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

1219 
	#RCC_CR_OFFSET
 0x00U

	)

1220 
	#RCC_CFGR_OFFSET
 0x04U

	)

1221 
	#RCC_CIR_OFFSET
 0x08U

	)

1222 
	#RCC_BDCR_OFFSET
 0x20U

	)

1223 
	#RCC_CSR_OFFSET
 0x24U

	)

1233 
	#RCC_CR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CR_OFFSET
)

	)

1234 
	#RCC_CFGR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CFGR_OFFSET
)

	)

1235 
	#RCC_CIR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CIR_OFFSET
)

	)

1236 
	#RCC_BDCR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_BDCR_OFFSET
)

	)

1237 
	#RCC_CSR_OFFSET_BB
 (
RCC_OFFSET
 + 
RCC_CSR_OFFSET
)

	)

1241 
	#RCC_HSION_BIT_NUMBER
 
RCC_CR_HSION_Pos


	)

1242 
	#RCC_CR_HSION_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_HSION_BIT_NUMBER
 * 4U)))

	)

1244 
	#RCC_HSEON_BIT_NUMBER
 
RCC_CR_HSEON_Pos


	)

1245 
	#RCC_CR_HSEON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_HSEON_BIT_NUMBER
 * 4U)))

	)

1247 
	#RCC_CSSON_BIT_NUMBER
 
RCC_CR_CSSON_Pos


	)

1248 
	#RCC_CR_CSSON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_CSSON_BIT_NUMBER
 * 4U)))

	)

1250 
	#RCC_PLLON_BIT_NUMBER
 
RCC_CR_PLLON_Pos


	)

1251 
	#RCC_CR_PLLON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
RCC_PLLON_BIT_NUMBER
 * 4U)))

	)

1255 
	#RCC_LSION_BIT_NUMBER
 
RCC_CSR_LSION_Pos


	)

1256 
	#RCC_CSR_LSION_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32UË+ (
RCC_LSION_BIT_NUMBER
 * 4U)))

	)

1259 
	#RCC_RMVF_BIT_NUMBER
 
RCC_CSR_RMVF_Pos


	)

1260 
	#RCC_CSR_RMVF_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CSR_OFFSET_BB
 * 32UË+ (
RCC_RMVF_BIT_NUMBER
 * 4U)))

	)

1264 
	#RCC_LSEON_BIT_NUMBER
 
RCC_BDCR_LSEON_Pos


	)

1265 
	#RCC_BDCR_LSEON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_LSEON_BIT_NUMBER
 * 4U)))

	)

1268 
	#RCC_LSEBYP_BIT_NUMBER
 
RCC_BDCR_LSEBYP_Pos


	)

1269 
	#RCC_BDCR_LSEBYP_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_LSEBYP_BIT_NUMBER
 * 4U)))

	)

1272 
	#RCC_RTCEN_BIT_NUMBER
 
RCC_BDCR_RTCEN_Pos


	)

1273 
	#RCC_BDCR_RTCEN_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_RTCEN_BIT_NUMBER
 * 4U)))

	)

1276 
	#RCC_BDRST_BIT_NUMBER
 
RCC_BDCR_BDRST_Pos


	)

1277 
	#RCC_BDCR_BDRST_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_BDCR_OFFSET_BB
 * 32UË+ (
RCC_BDRST_BIT_NUMBER
 * 4U)))

	)

1284 
	#RCC_CR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CR_OFFSET
 + 0x02U))

	)

1287 
	#RCC_CIR_BYTE1_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x01U))

	)

1290 
	#RCC_CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 
RCC_CIR_OFFSET
 + 0x02U))

	)

1293 
	#CR_REG_INDEX
 ((
uöt8_t
)1)

	)

1294 
	#BDCR_REG_INDEX
 ((
uöt8_t
)2)

	)

1295 
	#CSR_REG_INDEX
 ((
uöt8_t
)3)

	)

1297 
	#RCC_FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

1309 
	#__HAL_RCC_SYSCFG_CLK_DISABLE
 
__HAL_RCC_AFIO_CLK_DISABLE


	)

1310 
	#__HAL_RCC_SYSCFG_CLK_ENABLE
 
__HAL_RCC_AFIO_CLK_ENABLE


	)

1311 
	#__HAL_RCC_SYSCFG_FORCE_RESET
 
__HAL_RCC_AFIO_FORCE_RESET


	)

1312 
	#__HAL_RCC_SYSCFG_RELEASE_RESET
 
__HAL_RCC_AFIO_RELEASE_RESET


	)

1317 
	#IS_RCC_PLLSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_PLLSOURCE_HSI_DIV2
) || \

1318 ((
__SOURCE__
Ë=
RCC_PLLSOURCE_HSE
))

	)

1319 
	#IS_RCC_OSCILLATORTYPE
(
__OSCILLATOR__
Ë(((__OSCILLATOR__Ë=
RCC_OSCILLATORTYPE_NONE
) || \

1320 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE) || \

1321 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI) || \

1322 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI) || \

1323 (((
__OSCILLATOR__
Ë& 
RCC_OSCILLATORTYPE_LSE
Ë=RCC_OSCILLATORTYPE_LSE))

	)

1324 
	#IS_RCC_HSE
(
__HSE__
Ë(((__HSE__Ë=
RCC_HSE_OFF
Ë|| ((__HSE__Ë=
RCC_HSE_ON
) || \

1325 ((
__HSE__
Ë=
RCC_HSE_BYPASS
))

	)

1326 
	#IS_RCC_LSE
(
__LSE__
Ë(((__LSE__Ë=
RCC_LSE_OFF
Ë|| ((__LSE__Ë=
RCC_LSE_ON
) || \

1327 ((
__LSE__
Ë=
RCC_LSE_BYPASS
))

	)

1328 
	#IS_RCC_HSI
(
__HSI__
Ë(((__HSI__Ë=
RCC_HSI_OFF
Ë|| ((__HSI__Ë=
RCC_HSI_ON
))

	)

1329 
	#IS_RCC_CALIBRATION_VALUE
(
__VALUE__
Ë((__VALUE__Ë<0x1FU)

	)

1330 
	#IS_RCC_LSI
(
__LSI__
Ë(((__LSI__Ë=
RCC_LSI_OFF
Ë|| ((__LSI__Ë=
RCC_LSI_ON
))

	)

1331 
	#IS_RCC_PLL
(
__PLL__
Ë(((__PLL__Ë=
RCC_PLL_NONE
Ë|| ((__PLL__Ë=
RCC_PLL_OFF
) || \

1332 ((
__PLL__
Ë=
RCC_PLL_ON
))

	)

1334 
	#IS_RCC_CLOCKTYPE
(
CLK
Ë((((CLKË& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK) || \

1335 (((
CLK
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK) || \

1336 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1) || \

1337 (((
CLK
Ë& 
RCC_CLOCKTYPE_PCLK2
Ë=RCC_CLOCKTYPE_PCLK2))

	)

1338 
	#IS_RCC_SYSCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_HSI
) || \

1339 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_HSE
) || \

1340 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_PLLCLK
))

	)

1341 
	#IS_RCC_SYSCLKSOURCE_STATUS
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
) || \

1342 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
) || \

1343 ((
__SOURCE__
Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
))

	)

1344 
	#IS_RCC_HCLK
(
__HCLK__
Ë(((__HCLK__Ë=
RCC_SYSCLK_DIV1
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV2
) || \

1345 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV4
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV8
) || \

1346 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV16
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV64
) || \

1347 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV128
Ë|| ((__HCLK__Ë=
RCC_SYSCLK_DIV256
) || \

1348 ((
__HCLK__
Ë=
RCC_SYSCLK_DIV512
))

	)

1349 
	#IS_RCC_PCLK
(
__PCLK__
Ë(((__PCLK__Ë=
RCC_HCLK_DIV1
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV2
) || \

1350 ((
__PCLK__
Ë=
RCC_HCLK_DIV4
Ë|| ((__PCLK__Ë=
RCC_HCLK_DIV8
) || \

1351 ((
__PCLK__
Ë=
RCC_HCLK_DIV16
))

	)

1352 
	#IS_RCC_MCO
(
__MCO__
Ë((__MCO__Ë=
RCC_MCO
)

	)

1353 
	#IS_RCC_MCODIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_MCODIV_1
))

	)

1354 
	#IS_RCC_RTCCLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_RTCCLKSOURCE_NO_CLK
) || \

1355 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSE
) || \

1356 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_LSI
) || \

1357 ((
__SOURCE__
Ë=
RCC_RTCCLKSOURCE_HSE_DIV128
))

	)

1371 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc_ex.h

21 #i‚de‡
__STM32F1xx_HAL_RCC_EX_H


22 
	#__STM32F1xx_HAL_RCC_EX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

43 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

46 
	#PLLI2SON_BITNUMBER
 
RCC_CR_PLL3ON_Pos


	)

47 
	#RCC_CR_PLLI2SON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
PLLI2SON_BITNUMBER
 * 4U)))

	)

49 
	#PLL2ON_BITNUMBER
 
RCC_CR_PLL2ON_Pos


	)

50 
	#RCC_CR_PLL2ON_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
RCC_CR_OFFSET_BB
 * 32UË+ (
PLL2ON_BITNUMBER
 * 4U)))

	)

52 
	#PLLI2S_TIMEOUT_VALUE
 100U

	)

53 
	#PLL2_TIMEOUT_VALUE
 100U

	)

58 
	#CR_REG_INDEX
 ((
uöt8_t
)1)

	)

68 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

69 
	#IS_RCC_PREDIV1_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_PREDIV1_SOURCE_HSE
) || \

70 ((
__SOURCE__
Ë=
RCC_PREDIV1_SOURCE_PLL2
))

	)

73 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

74 || 
deföed
(
STM32F100xE
)

75 
	#IS_RCC_HSE_PREDIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV2
) || \

76 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV3
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV4
) || \

77 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV5
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV6
) || \

78 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV7
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV8
) || \

79 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV9
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV10
) || \

80 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV11
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV12
) || \

81 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV13
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV14
) || \

82 ((
__DIV__
Ë=
RCC_HSE_PREDIV_DIV15
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV16
))

	)

85 
	#IS_RCC_HSE_PREDIV
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV_DIV2
))

	)

88 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

89 
	#IS_RCC_PLL_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL_MUL4
Ë|| ((__MUL__Ë=
RCC_PLL_MUL5
) || \

90 ((
__MUL__
Ë=
RCC_PLL_MUL6
Ë|| ((__MUL__Ë=
RCC_PLL_MUL7
) || \

91 ((
__MUL__
Ë=
RCC_PLL_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL_MUL9
) || \

92 ((
__MUL__
Ë=
RCC_PLL_MUL6_5
))

	)

94 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_HSI
) \

95 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) \

96 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_PLL2CLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLL3CLK
) \

97 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_PLL3CLK_DIV2
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_EXT_HSE
) \

98 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_NOCLOCK
))

	)

101 
	#IS_RCC_PLL_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL_MUL2
Ë|| ((__MUL__Ë=
RCC_PLL_MUL3
) || \

102 ((
__MUL__
Ë=
RCC_PLL_MUL4
Ë|| ((__MUL__Ë=
RCC_PLL_MUL5
) || \

103 ((
__MUL__
Ë=
RCC_PLL_MUL6
Ë|| ((__MUL__Ë=
RCC_PLL_MUL7
) || \

104 ((
__MUL__
Ë=
RCC_PLL_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL_MUL9
) || \

105 ((
__MUL__
Ë=
RCC_PLL_MUL10
Ë|| ((__MUL__Ë=
RCC_PLL_MUL11
) || \

106 ((
__MUL__
Ë=
RCC_PLL_MUL12
Ë|| ((__MUL__Ë=
RCC_PLL_MUL13
) || \

107 ((
__MUL__
Ë=
RCC_PLL_MUL14
Ë|| ((__MUL__Ë=
RCC_PLL_MUL15
) || \

108 ((
__MUL__
Ë=
RCC_PLL_MUL16
))

	)

110 
	#IS_RCC_MCO1SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_MCO1SOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_HSI
) \

111 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_HSE
Ë|| ((__SOURCE__Ë=
RCC_MCO1SOURCE_PLLCLK
) \

112 || ((
__SOURCE__
Ë=
RCC_MCO1SOURCE_NOCLOCK
))

	)

116 
	#IS_RCC_ADCPLLCLK_DIV
(
__ADCCLK__
Ë(((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV2
Ë|| ((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV4
) || \

117 ((
__ADCCLK__
Ë=
RCC_ADCPCLK2_DIV6
Ë|| ((__ADCCLK__Ë=
RCC_ADCPCLK2_DIV8
))

	)

119 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

120 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_PLLI2S_VCO
))

	)

122 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_SYSCLK
Ë|| ((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_PLLI2S_VCO
))

	)

124 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
Ë(((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV2
Ë|| ((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV3
))

	)

126 
	#IS_RCC_PLLI2S_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLLI2S_MUL8
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL9
) || \

127 ((
__MUL__
Ë=
RCC_PLLI2S_MUL10
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL11
) || \

128 ((
__MUL__
Ë=
RCC_PLLI2S_MUL12
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL13
) || \

129 ((
__MUL__
Ë=
RCC_PLLI2S_MUL14
Ë|| ((__MUL__Ë=
RCC_PLLI2S_MUL16
) || \

130 ((
__MUL__
Ë=
RCC_PLLI2S_MUL20
))

	)

132 
	#IS_RCC_HSE_PREDIV2
(
__DIV__
Ë(((__DIV__Ë=
RCC_HSE_PREDIV2_DIV1
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV2
) || \

133 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV3
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV4
) || \

134 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV5
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV6
) || \

135 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV7
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV8
) || \

136 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV9
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV10
) || \

137 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV11
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV12
) || \

138 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV13
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV14
) || \

139 ((
__DIV__
Ë=
RCC_HSE_PREDIV2_DIV15
Ë|| ((__DIV__Ë=
RCC_HSE_PREDIV2_DIV16
))

	)

141 
	#IS_RCC_PLL2
(
__PLL__
Ë(((__PLL__Ë=
RCC_PLL2_NONE
Ë|| ((__PLL__Ë=
RCC_PLL2_OFF
) || \

142 ((
__PLL__
Ë=
RCC_PLL2_ON
))

	)

144 
	#IS_RCC_PLL2_MUL
(
__MUL__
Ë(((__MUL__Ë=
RCC_PLL2_MUL8
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL9
) || \

145 ((
__MUL__
Ë=
RCC_PLL2_MUL10
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL11
) || \

146 ((
__MUL__
Ë=
RCC_PLL2_MUL12
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL13
) || \

147 ((
__MUL__
Ë=
RCC_PLL2_MUL14
Ë|| ((__MUL__Ë=
RCC_PLL2_MUL16
) || \

148 ((
__MUL__
Ë=
RCC_PLL2_MUL20
))

	)

150 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

151 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

152 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

153 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

154 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

155 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

157 #ñi‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

159 
	#IS_RCC_I2S2CLKSOURCE
(
__SOURCE__
Ë((__SOURCE__Ë=
RCC_I2S2CLKSOURCE_SYSCLK
)

	)

161 
	#IS_RCC_I2S3CLKSOURCE
(
__SOURCE__
Ë((__SOURCE__Ë=
RCC_I2S3CLKSOURCE_SYSCLK
)

	)

163 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

164 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

165 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

166 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2) || \

167 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3) || \

168 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

171 #ñi‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

172 || 
deföed
(
STM32F103xB
)

174 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

175 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

176 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC) || \

177 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_USB
Ë=RCC_PERIPHCLK_USB))

	)

181 
	#IS_RCC_PERIPHCLOCK
(
__SELECTION__
) \

182 ((((
__SELECTION__
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC) || \

183 (((
__SELECTION__
Ë& 
RCC_PERIPHCLK_ADC
Ë=RCC_PERIPHCLK_ADC))

	)

187 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

188 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

190 
	#IS_RCC_USBPLLCLK_DIV
(
__USBCLK__
Ë(((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL
Ë|| ((__USBCLK__Ë=
RCC_USBCLKSOURCE_PLL_DIV1_5
))

	)

204 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

210 
uöt32_t
 
PLL2Sèã
;

213 
uöt32_t
 
PLL2MUL
;

216 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

217 
uöt32_t
 
HSEPªdiv2VÆue
;

221 } 
	tRCC_PLL2InôTy≥Def
;

230 
uöt32_t
 
Oscûœt‹Ty≥
;

233 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

234 
uöt32_t
 
Pªdiv1Sour˚
;

238 
uöt32_t
 
HSESèã
;

241 
uöt32_t
 
HSEPªdivVÆue
;

244 
uöt32_t
 
LSESèã
;

247 
uöt32_t
 
HSISèã
;

250 
uöt32_t
 
HSICÆibøti⁄VÆue
;

253 
uöt32_t
 
LSISèã
;

256 
RCC_PLLInôTy≥Def
 
PLL
;

258 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

259 
RCC_PLL2InôTy≥Def
 
PLL2
;

261 } 
	tRCC_OscInôTy≥Def
;

263 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

269 
uöt32_t
 
PLLI2SMUL
;

272 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

273 
uöt32_t
 
HSEPªdiv2VÆue
;

277 } 
	tRCC_PLLI2SInôTy≥Def
;

285 
uöt32_t
 
PîùhClockSñe˘i⁄
;

288 
uöt32_t
 
RTCClockSñe˘i⁄
;

291 
uöt32_t
 
AdcClockSñe˘i⁄
;

294 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

295 || 
deföed
(
STM32F107xC
)

296 
uöt32_t
 
I2s2ClockSñe˘i⁄
;

299 
uöt32_t
 
I2s3ClockSñe˘i⁄
;

302 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

303 
RCC_PLLI2SInôTy≥Def
 
PLLI2S
;

309 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

310 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

311 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

312 
uöt32_t
 
UsbClockSñe˘i⁄
;

316 } 
	tRCC_PîùhCLKInôTy≥Def
;

331 
	#RCC_PERIPHCLK_RTC
 0x00000001U

	)

332 
	#RCC_PERIPHCLK_ADC
 0x00000002U

	)

333 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
)\

334 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

335 
	#RCC_PERIPHCLK_I2S2
 0x00000004U

	)

336 
	#RCC_PERIPHCLK_I2S3
 0x00000008U

	)

338 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

339 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

340 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

341 
	#RCC_PERIPHCLK_USB
 0x00000010U

	)

351 
	#RCC_ADCPCLK2_DIV2
 
RCC_CFGR_ADCPRE_DIV2


	)

352 
	#RCC_ADCPCLK2_DIV4
 
RCC_CFGR_ADCPRE_DIV4


	)

353 
	#RCC_ADCPCLK2_DIV6
 
RCC_CFGR_ADCPRE_DIV6


	)

354 
	#RCC_ADCPCLK2_DIV8
 
RCC_CFGR_ADCPRE_DIV8


	)

360 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

361 || 
deföed
(
STM32F107xC
)

365 
	#RCC_I2S2CLKSOURCE_SYSCLK
 0x00000000U

	)

366 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

367 
	#RCC_I2S2CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S2SRC


	)

377 
	#RCC_I2S3CLKSOURCE_SYSCLK
 0x00000000U

	)

378 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

379 
	#RCC_I2S3CLKSOURCE_PLLI2S_VCO
 
RCC_CFGR2_I2S3SRC


	)

388 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

389 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

394 
	#RCC_USBCLKSOURCE_PLL
 
RCC_CFGR_USBPRE


	)

395 
	#RCC_USBCLKSOURCE_PLL_DIV1_5
 0x00000000U

	)

404 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

408 
	#RCC_USBCLKSOURCE_PLL_DIV2
 
RCC_CFGR_OTGFSPRE


	)

409 
	#RCC_USBCLKSOURCE_PLL_DIV3
 0x00000000U

	)

419 
	#RCC_PLLI2S_MUL8
 
RCC_CFGR2_PLL3MUL8


	)

420 
	#RCC_PLLI2S_MUL9
 
RCC_CFGR2_PLL3MUL9


	)

421 
	#RCC_PLLI2S_MUL10
 
RCC_CFGR2_PLL3MUL10


	)

422 
	#RCC_PLLI2S_MUL11
 
RCC_CFGR2_PLL3MUL11


	)

423 
	#RCC_PLLI2S_MUL12
 
RCC_CFGR2_PLL3MUL12


	)

424 
	#RCC_PLLI2S_MUL13
 
RCC_CFGR2_PLL3MUL13


	)

425 
	#RCC_PLLI2S_MUL14
 
RCC_CFGR2_PLL3MUL14


	)

426 
	#RCC_PLLI2S_MUL16
 
RCC_CFGR2_PLL3MUL16


	)

427 
	#RCC_PLLI2S_MUL20
 
RCC_CFGR2_PLL3MUL20


	)

434 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

439 
	#RCC_PREDIV1_SOURCE_HSE
 
RCC_CFGR2_PREDIV1SRC_HSE


	)

440 
	#RCC_PREDIV1_SOURCE_PLL2
 
RCC_CFGR2_PREDIV1SRC_PLL2


	)

451 
	#RCC_HSE_PREDIV_DIV1
 0x00000000U

	)

453 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

454 || 
deföed
(
STM32F100xE
)

455 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR2_PREDIV1_DIV2


	)

456 
	#RCC_HSE_PREDIV_DIV3
 
RCC_CFGR2_PREDIV1_DIV3


	)

457 
	#RCC_HSE_PREDIV_DIV4
 
RCC_CFGR2_PREDIV1_DIV4


	)

458 
	#RCC_HSE_PREDIV_DIV5
 
RCC_CFGR2_PREDIV1_DIV5


	)

459 
	#RCC_HSE_PREDIV_DIV6
 
RCC_CFGR2_PREDIV1_DIV6


	)

460 
	#RCC_HSE_PREDIV_DIV7
 
RCC_CFGR2_PREDIV1_DIV7


	)

461 
	#RCC_HSE_PREDIV_DIV8
 
RCC_CFGR2_PREDIV1_DIV8


	)

462 
	#RCC_HSE_PREDIV_DIV9
 
RCC_CFGR2_PREDIV1_DIV9


	)

463 
	#RCC_HSE_PREDIV_DIV10
 
RCC_CFGR2_PREDIV1_DIV10


	)

464 
	#RCC_HSE_PREDIV_DIV11
 
RCC_CFGR2_PREDIV1_DIV11


	)

465 
	#RCC_HSE_PREDIV_DIV12
 
RCC_CFGR2_PREDIV1_DIV12


	)

466 
	#RCC_HSE_PREDIV_DIV13
 
RCC_CFGR2_PREDIV1_DIV13


	)

467 
	#RCC_HSE_PREDIV_DIV14
 
RCC_CFGR2_PREDIV1_DIV14


	)

468 
	#RCC_HSE_PREDIV_DIV15
 
RCC_CFGR2_PREDIV1_DIV15


	)

469 
	#RCC_HSE_PREDIV_DIV16
 
RCC_CFGR2_PREDIV1_DIV16


	)

471 
	#RCC_HSE_PREDIV_DIV2
 
RCC_CFGR_PLLXTPRE


	)

478 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

483 
	#RCC_HSE_PREDIV2_DIV1
 
RCC_CFGR2_PREDIV2_DIV1


	)

484 
	#RCC_HSE_PREDIV2_DIV2
 
RCC_CFGR2_PREDIV2_DIV2


	)

485 
	#RCC_HSE_PREDIV2_DIV3
 
RCC_CFGR2_PREDIV2_DIV3


	)

486 
	#RCC_HSE_PREDIV2_DIV4
 
RCC_CFGR2_PREDIV2_DIV4


	)

487 
	#RCC_HSE_PREDIV2_DIV5
 
RCC_CFGR2_PREDIV2_DIV5


	)

488 
	#RCC_HSE_PREDIV2_DIV6
 
RCC_CFGR2_PREDIV2_DIV6


	)

489 
	#RCC_HSE_PREDIV2_DIV7
 
RCC_CFGR2_PREDIV2_DIV7


	)

490 
	#RCC_HSE_PREDIV2_DIV8
 
RCC_CFGR2_PREDIV2_DIV8


	)

491 
	#RCC_HSE_PREDIV2_DIV9
 
RCC_CFGR2_PREDIV2_DIV9


	)

492 
	#RCC_HSE_PREDIV2_DIV10
 
RCC_CFGR2_PREDIV2_DIV10


	)

493 
	#RCC_HSE_PREDIV2_DIV11
 
RCC_CFGR2_PREDIV2_DIV11


	)

494 
	#RCC_HSE_PREDIV2_DIV12
 
RCC_CFGR2_PREDIV2_DIV12


	)

495 
	#RCC_HSE_PREDIV2_DIV13
 
RCC_CFGR2_PREDIV2_DIV13


	)

496 
	#RCC_HSE_PREDIV2_DIV14
 
RCC_CFGR2_PREDIV2_DIV14


	)

497 
	#RCC_HSE_PREDIV2_DIV15
 
RCC_CFGR2_PREDIV2_DIV15


	)

498 
	#RCC_HSE_PREDIV2_DIV16
 
RCC_CFGR2_PREDIV2_DIV16


	)

507 
	#RCC_PLL2_NONE
 0x00000000U

	)

508 
	#RCC_PLL2_OFF
 0x00000001U

	)

509 
	#RCC_PLL2_ON
 0x00000002U

	)

519 
	#RCC_PLL2_MUL8
 
RCC_CFGR2_PLL2MUL8


	)

520 
	#RCC_PLL2_MUL9
 
RCC_CFGR2_PLL2MUL9


	)

521 
	#RCC_PLL2_MUL10
 
RCC_CFGR2_PLL2MUL10


	)

522 
	#RCC_PLL2_MUL11
 
RCC_CFGR2_PLL2MUL11


	)

523 
	#RCC_PLL2_MUL12
 
RCC_CFGR2_PLL2MUL12


	)

524 
	#RCC_PLL2_MUL13
 
RCC_CFGR2_PLL2MUL13


	)

525 
	#RCC_PLL2_MUL14
 
RCC_CFGR2_PLL2MUL14


	)

526 
	#RCC_PLL2_MUL16
 
RCC_CFGR2_PLL2MUL16


	)

527 
	#RCC_PLL2_MUL20
 
RCC_CFGR2_PLL2MUL20


	)

539 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

541 
	#RCC_PLL_MUL2
 
RCC_CFGR_PLLMULL2


	)

542 
	#RCC_PLL_MUL3
 
RCC_CFGR_PLLMULL3


	)

544 
	#RCC_PLL_MUL4
 
RCC_CFGR_PLLMULL4


	)

545 
	#RCC_PLL_MUL5
 
RCC_CFGR_PLLMULL5


	)

546 
	#RCC_PLL_MUL6
 
RCC_CFGR_PLLMULL6


	)

547 
	#RCC_PLL_MUL7
 
RCC_CFGR_PLLMULL7


	)

548 
	#RCC_PLL_MUL8
 
RCC_CFGR_PLLMULL8


	)

549 
	#RCC_PLL_MUL9
 
RCC_CFGR_PLLMULL9


	)

550 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

551 
	#RCC_PLL_MUL6_5
 
RCC_CFGR_PLLMULL6_5


	)

553 
	#RCC_PLL_MUL10
 
RCC_CFGR_PLLMULL10


	)

554 
	#RCC_PLL_MUL11
 
RCC_CFGR_PLLMULL11


	)

555 
	#RCC_PLL_MUL12
 
RCC_CFGR_PLLMULL12


	)

556 
	#RCC_PLL_MUL13
 
RCC_CFGR_PLLMULL13


	)

557 
	#RCC_PLL_MUL14
 
RCC_CFGR_PLLMULL14


	)

558 
	#RCC_PLL_MUL15
 
RCC_CFGR_PLLMULL15


	)

559 
	#RCC_PLL_MUL16
 
RCC_CFGR_PLLMULL16


	)

569 
	#RCC_MCO1SOURCE_NOCLOCK
 ((
uöt32_t
)
RCC_CFGR_MCO_NOCLOCK
)

	)

570 
	#RCC_MCO1SOURCE_SYSCLK
 ((
uöt32_t
)
RCC_CFGR_MCO_SYSCLK
)

	)

571 
	#RCC_MCO1SOURCE_HSI
 ((
uöt32_t
)
RCC_CFGR_MCO_HSI
)

	)

572 
	#RCC_MCO1SOURCE_HSE
 ((
uöt32_t
)
RCC_CFGR_MCO_HSE
)

	)

573 
	#RCC_MCO1SOURCE_PLLCLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLLCLK_DIV2
)

	)

574 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

575 
	#RCC_MCO1SOURCE_PLL2CLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL2CLK
)

	)

576 
	#RCC_MCO1SOURCE_PLL3CLK_DIV2
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL3CLK_DIV2
)

	)

577 
	#RCC_MCO1SOURCE_EXT_HSE
 ((
uöt32_t
)
RCC_CFGR_MCO_EXT_HSE
)

	)

578 
	#RCC_MCO1SOURCE_PLL3CLK
 ((
uöt32_t
)
RCC_CFGR_MCO_PLL3CLK
)

	)

584 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

588 
	#RCC_IT_PLL2RDY
 ((
uöt8_t
)
RCC_CIR_PLL2RDYF
)

	)

589 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)
RCC_CIR_PLL3RDYF
)

	)

602 
	#RCC_FLAG_PLL2RDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_PLL2RDY_Pos
))

	)

603 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)((
CR_REG_INDEX
 << 5UË| 
RCC_CR_PLL3RDY_Pos
))

	)

626 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

627 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed (
STM32F107xC
)\

628 || 
deföed
 (
STM32F100xE
)

629 
	#__HAL_RCC_DMA2_CLK_ENABLE
() do { \

630 
__IO
 
uöt32_t
 
tm¥eg
; \

631 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

633 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_DMA2EN
);\

634 
	`UNUSED
(
tm¥eg
); \

635 } 0U)

	)

637 
	#__HAL_RCC_DMA2_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_DMA2EN
))

	)

640 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

641 || 
deföed
(
STM32F103xG
Ë|| deföed (
STM32F100xE
)

642 
	#__HAL_RCC_FSMC_CLK_ENABLE
() do { \

643 
__IO
 
uöt32_t
 
tm¥eg
; \

644 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

646 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);\

647 
	`UNUSED
(
tm¥eg
); \

648 } 0U)

	)

650 
	#__HAL_RCC_FSMC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_FSMCEN
))

	)

653 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

654 
	#__HAL_RCC_SDIO_CLK_ENABLE
() do { \

655 
__IO
 
uöt32_t
 
tm¥eg
; \

656 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

658 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_SDIOEN
);\

659 
	`UNUSED
(
tm¥eg
); \

660 } 0U)

	)

663 
	#__HAL_RCC_SDIO_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_SDIOEN
))

	)

666 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

667 
	#__HAL_RCC_USB_OTG_FS_CLK_ENABLE
() do { \

668 
__IO
 
uöt32_t
 
tm¥eg
; \

669 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

671 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_OTGFSEN
);\

672 
	`UNUSED
(
tm¥eg
); \

673 } 0U)

	)

676 
	#__HAL_RCC_USB_OTG_FS_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_OTGFSEN
))

	)

679 #i‡
deföed
(
STM32F107xC
)

680 
	#__HAL_RCC_ETHMAC_CLK_ENABLE
() do { \

681 
__IO
 
uöt32_t
 
tm¥eg
; \

682 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

684 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACEN
);\

685 
	`UNUSED
(
tm¥eg
); \

686 } 0U)

	)

688 
	#__HAL_RCC_ETHMACTX_CLK_ENABLE
() do { \

689 
__IO
 
uöt32_t
 
tm¥eg
; \

690 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

692 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACTXEN
);\

693 
	`UNUSED
(
tm¥eg
); \

694 } 0U)

	)

696 
	#__HAL_RCC_ETHMACRX_CLK_ENABLE
() do { \

697 
__IO
 
uöt32_t
 
tm¥eg
; \

698 
	`SET_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

700 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_ETHMACRXEN
);\

701 
	`UNUSED
(
tm¥eg
); \

702 } 0U)

	)

704 
	#__HAL_RCC_ETHMAC_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACEN
))

	)

705 
	#__HAL_RCC_ETHMACTX_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACTXEN
))

	)

706 
	#__HAL_RCC_ETHMACRX_CLK_DISABLE
(Ë(
RCC
->
AHBENR
 &~(
RCC_AHBENR_ETHMACRXEN
))

	)

711 
	#__HAL_RCC_ETH_CLK_ENABLE
() do { \

712 
	`__HAL_RCC_ETHMAC_CLK_ENABLE
(); \

713 
	`__HAL_RCC_ETHMACTX_CLK_ENABLE
(); \

714 
	`__HAL_RCC_ETHMACRX_CLK_ENABLE
(); \

715 } 0U)

	)

719 
	#__HAL_RCC_ETH_CLK_DISABLE
() do { \

720 
	`__HAL_RCC_ETHMACTX_CLK_DISABLE
(); \

721 
	`__HAL_RCC_ETHMACRX_CLK_DISABLE
(); \

722 
	`__HAL_RCC_ETHMAC_CLK_DISABLE
(); \

723 } 0U)

	)

739 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

740 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed (
STM32F107xC
)\

741 || 
deföed
 (
STM32F100xE
)

742 
	#__HAL_RCC_DMA2_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)Ë!
RESET
)

	)

743 
	#__HAL_RCC_DMA2_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_DMA2EN
)Ë=
RESET
)

	)

745 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

746 || 
deföed
(
STM32F103xG
Ë|| deföed (
STM32F100xE
)

747 
	#__HAL_RCC_FSMC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)Ë!
RESET
)

	)

748 
	#__HAL_RCC_FSMC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_FSMCEN
)Ë=
RESET
)

	)

750 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

751 
	#__HAL_RCC_SDIO_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)Ë!
RESET
)

	)

752 
	#__HAL_RCC_SDIO_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_SDIOEN
)Ë=
RESET
)

	)

754 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

755 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)Ë!
RESET
)

	)

756 
	#__HAL_RCC_USB_OTG_FS_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_OTGFSEN
)Ë=
RESET
)

	)

758 #i‡
deföed
(
STM32F107xC
)

759 
	#__HAL_RCC_ETHMAC_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)Ë!
RESET
)

	)

760 
	#__HAL_RCC_ETHMAC_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACEN
)Ë=
RESET
)

	)

761 
	#__HAL_RCC_ETHMACTX_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)Ë!
RESET
)

	)

762 
	#__HAL_RCC_ETHMACTX_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACTXEN
)Ë=
RESET
)

	)

763 
	#__HAL_RCC_ETHMACRX_IS_CLK_ENABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)Ë!
RESET
)

	)

764 
	#__HAL_RCC_ETHMACRX_IS_CLK_DISABLED
(Ë((
RCC
->
AHBENR
 & (
RCC_AHBENR_ETHMACRXEN
)Ë=
RESET
)

	)

779 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

780 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

781 
	#__HAL_RCC_CAN1_CLK_ENABLE
() do { \

782 
__IO
 
uöt32_t
 
tm¥eg
; \

783 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

785 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN1EN
);\

786 
	`UNUSED
(
tm¥eg
); \

787 } 0U)

	)

789 
	#__HAL_RCC_CAN1_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN1EN
))

	)

792 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

793 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

794 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

795 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

796 
	#__HAL_RCC_TIM4_CLK_ENABLE
() do { \

797 
__IO
 
uöt32_t
 
tm¥eg
; \

798 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

800 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM4EN
);\

801 
	`UNUSED
(
tm¥eg
); \

802 } 0U)

	)

804 
	#__HAL_RCC_SPI2_CLK_ENABLE
() do { \

805 
__IO
 
uöt32_t
 
tm¥eg
; \

806 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

808 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI2EN
);\

809 
	`UNUSED
(
tm¥eg
); \

810 } 0U)

	)

812 
	#__HAL_RCC_USART3_CLK_ENABLE
() do { \

813 
__IO
 
uöt32_t
 
tm¥eg
; \

814 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

816 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USART3EN
);\

817 
	`UNUSED
(
tm¥eg
); \

818 } 0U)

	)

820 
	#__HAL_RCC_I2C2_CLK_ENABLE
() do { \

821 
__IO
 
uöt32_t
 
tm¥eg
; \

822 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

824 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_I2C2EN
);\

825 
	`UNUSED
(
tm¥eg
); \

826 } 0U)

	)

828 
	#__HAL_RCC_TIM4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM4EN
))

	)

829 
	#__HAL_RCC_SPI2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI2EN
))

	)

830 
	#__HAL_RCC_USART3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USART3EN
))

	)

831 
	#__HAL_RCC_I2C2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_I2C2EN
))

	)

834 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

835 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

836 
	#__HAL_RCC_USB_CLK_ENABLE
() do { \

837 
__IO
 
uöt32_t
 
tm¥eg
; \

838 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

840 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_USBEN
);\

841 
	`UNUSED
(
tm¥eg
); \

842 } 0U)

	)

844 
	#__HAL_RCC_USB_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_USBEN
))

	)

847 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

848 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

849 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

850 
__IO
 
uöt32_t
 
tm¥eg
; \

851 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

853 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

854 
	`UNUSED
(
tm¥eg
); \

855 } 0U)

	)

857 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

858 
__IO
 
uöt32_t
 
tm¥eg
; \

859 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

861 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

862 
	`UNUSED
(
tm¥eg
); \

863 } 0U)

	)

865 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

866 
__IO
 
uöt32_t
 
tm¥eg
; \

867 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

869 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

870 
	`UNUSED
(
tm¥eg
); \

871 } 0U)

	)

873 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

874 
__IO
 
uöt32_t
 
tm¥eg
; \

875 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

877 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

878 
	`UNUSED
(
tm¥eg
); \

879 } 0U)

	)

881 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

882 
__IO
 
uöt32_t
 
tm¥eg
; \

883 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

885 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

886 
	`UNUSED
(
tm¥eg
); \

887 } 0U)

	)

889 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

890 
__IO
 
uöt32_t
 
tm¥eg
; \

891 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

893 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

894 
	`UNUSED
(
tm¥eg
); \

895 } 0U)

	)

897 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

898 
__IO
 
uöt32_t
 
tm¥eg
; \

899 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

901 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

902 
	`UNUSED
(
tm¥eg
); \

903 } 0U)

	)

905 
	#__HAL_RCC_TIM5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM5EN
))

	)

906 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

907 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

908 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

909 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

910 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

911 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

914 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

915 
	#__HAL_RCC_TIM6_CLK_ENABLE
() do { \

916 
__IO
 
uöt32_t
 
tm¥eg
; \

917 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

919 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM6EN
);\

920 
	`UNUSED
(
tm¥eg
); \

921 } 0U)

	)

923 
	#__HAL_RCC_TIM7_CLK_ENABLE
() do { \

924 
__IO
 
uöt32_t
 
tm¥eg
; \

925 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

927 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM7EN
);\

928 
	`UNUSED
(
tm¥eg
); \

929 } 0U)

	)

931 
	#__HAL_RCC_DAC_CLK_ENABLE
() do { \

932 
__IO
 
uöt32_t
 
tm¥eg
; \

933 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

935 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_DACEN
);\

936 
	`UNUSED
(
tm¥eg
); \

937 } 0U)

	)

939 
	#__HAL_RCC_CEC_CLK_ENABLE
() do { \

940 
__IO
 
uöt32_t
 
tm¥eg
; \

941 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

943 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CECEN
);\

944 
	`UNUSED
(
tm¥eg
); \

945 } 0U)

	)

947 
	#__HAL_RCC_TIM6_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM6EN
))

	)

948 
	#__HAL_RCC_TIM7_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM7EN
))

	)

949 
	#__HAL_RCC_DAC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_DACEN
))

	)

950 
	#__HAL_RCC_CEC_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CECEN
))

	)

953 #ifde‡
STM32F100xE


954 
	#__HAL_RCC_TIM5_CLK_ENABLE
() do { \

955 
__IO
 
uöt32_t
 
tm¥eg
; \

956 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

958 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM5EN
);\

959 
	`UNUSED
(
tm¥eg
); \

960 } 0U)

	)

962 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

963 
__IO
 
uöt32_t
 
tm¥eg
; \

964 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

966 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

967 
	`UNUSED
(
tm¥eg
); \

968 } 0U)

	)

970 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

971 
__IO
 
uöt32_t
 
tm¥eg
; \

972 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

974 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

975 
	`UNUSED
(
tm¥eg
); \

976 } 0U)

	)

978 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

979 
__IO
 
uöt32_t
 
tm¥eg
; \

980 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

982 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

983 
	`UNUSED
(
tm¥eg
); \

984 } 0U)

	)

986 
	#__HAL_RCC_SPI3_CLK_ENABLE
() do { \

987 
__IO
 
uöt32_t
 
tm¥eg
; \

988 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

990 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_SPI3EN
);\

991 
	`UNUSED
(
tm¥eg
); \

992 } 0U)

	)

994 
	#__HAL_RCC_UART4_CLK_ENABLE
() do { \

995 
__IO
 
uöt32_t
 
tm¥eg
; \

996 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

998 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART4EN
);\

999 
	`UNUSED
(
tm¥eg
); \

1000 } 0U)

	)

1002 
	#__HAL_RCC_UART5_CLK_ENABLE
() do { \

1003 
__IO
 
uöt32_t
 
tm¥eg
; \

1004 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1006 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_UART5EN
);\

1007 
	`UNUSED
(
tm¥eg
); \

1008 } 0U)

	)

1010 
	#__HAL_RCC_TIM5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM5EN
))

	)

1011 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1012 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1013 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1014 
	#__HAL_RCC_SPI3_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_SPI3EN
))

	)

1015 
	#__HAL_RCC_UART4_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART4EN
))

	)

1016 
	#__HAL_RCC_UART5_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_UART5EN
))

	)

1019 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1020 
	#__HAL_RCC_CAN2_CLK_ENABLE
() do { \

1021 
__IO
 
uöt32_t
 
tm¥eg
; \

1022 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1024 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_CAN2EN
);\

1025 
	`UNUSED
(
tm¥eg
); \

1026 } 0U)

	)

1028 
	#__HAL_RCC_CAN2_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_CAN2EN
))

	)

1031 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1032 
	#__HAL_RCC_TIM12_CLK_ENABLE
() do { \

1033 
__IO
 
uöt32_t
 
tm¥eg
; \

1034 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1036 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM12EN
);\

1037 
	`UNUSED
(
tm¥eg
); \

1038 } 0U)

	)

1040 
	#__HAL_RCC_TIM13_CLK_ENABLE
() do { \

1041 
__IO
 
uöt32_t
 
tm¥eg
; \

1042 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1044 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM13EN
);\

1045 
	`UNUSED
(
tm¥eg
); \

1046 } 0U)

	)

1048 
	#__HAL_RCC_TIM14_CLK_ENABLE
() do { \

1049 
__IO
 
uöt32_t
 
tm¥eg
; \

1050 
	`SET_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1052 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB1ENR
, 
RCC_APB1ENR_TIM14EN
);\

1053 
	`UNUSED
(
tm¥eg
); \

1054 } 0U)

	)

1056 
	#__HAL_RCC_TIM12_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM12EN
))

	)

1057 
	#__HAL_RCC_TIM13_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM13EN
))

	)

1058 
	#__HAL_RCC_TIM14_CLK_DISABLE
(Ë(
RCC
->
APB1ENR
 &~(
RCC_APB1ENR_TIM14EN
))

	)

1073 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

1074 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

1075 
	#__HAL_RCC_CAN1_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)Ë!
RESET
)

	)

1076 
	#__HAL_RCC_CAN1_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN1EN
)Ë=
RESET
)

	)

1078 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

1079 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

1080 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

1081 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1082 
	#__HAL_RCC_TIM4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)Ë!
RESET
)

	)

1083 
	#__HAL_RCC_TIM4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM4EN
)Ë=
RESET
)

	)

1084 
	#__HAL_RCC_SPI2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)Ë!
RESET
)

	)

1085 
	#__HAL_RCC_SPI2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI2EN
)Ë=
RESET
)

	)

1086 
	#__HAL_RCC_USART3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)Ë!
RESET
)

	)

1087 
	#__HAL_RCC_USART3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USART3EN
)Ë=
RESET
)

	)

1088 
	#__HAL_RCC_I2C2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)Ë!
RESET
)

	)

1089 
	#__HAL_RCC_I2C2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_I2C2EN
)Ë=
RESET
)

	)

1091 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1092 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1093 
	#__HAL_RCC_USB_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)Ë!
RESET
)

	)

1094 
	#__HAL_RCC_USB_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_USBEN
)Ë=
RESET
)

	)

1096 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1097 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1098 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë!
RESET
)

	)

1099 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë=
RESET
)

	)

1100 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë!
RESET
)

	)

1101 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë=
RESET
)

	)

1102 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë!
RESET
)

	)

1103 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë=
RESET
)

	)

1104 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë!
RESET
)

	)

1105 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë=
RESET
)

	)

1106 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë!
RESET
)

	)

1107 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë=
RESET
)

	)

1108 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë!
RESET
)

	)

1109 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë=
RESET
)

	)

1110 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë!
RESET
)

	)

1111 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë=
RESET
)

	)

1113 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

1114 
	#__HAL_RCC_TIM6_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë!
RESET
)

	)

1115 
	#__HAL_RCC_TIM6_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM6EN
)Ë=
RESET
)

	)

1116 
	#__HAL_RCC_TIM7_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë!
RESET
)

	)

1117 
	#__HAL_RCC_TIM7_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM7EN
)Ë=
RESET
)

	)

1118 
	#__HAL_RCC_DAC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë!
RESET
)

	)

1119 
	#__HAL_RCC_DAC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_DACEN
)Ë=
RESET
)

	)

1120 
	#__HAL_RCC_CEC_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)Ë!
RESET
)

	)

1121 
	#__HAL_RCC_CEC_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CECEN
)Ë=
RESET
)

	)

1123 #ifde‡
STM32F100xE


1124 
	#__HAL_RCC_TIM5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë!
RESET
)

	)

1125 
	#__HAL_RCC_TIM5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM5EN
)Ë=
RESET
)

	)

1126 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë!
RESET
)

	)

1127 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë=
RESET
)

	)

1128 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë!
RESET
)

	)

1129 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë=
RESET
)

	)

1130 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë!
RESET
)

	)

1131 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë=
RESET
)

	)

1132 
	#__HAL_RCC_SPI3_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë!
RESET
)

	)

1133 
	#__HAL_RCC_SPI3_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_SPI3EN
)Ë=
RESET
)

	)

1134 
	#__HAL_RCC_UART4_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë!
RESET
)

	)

1135 
	#__HAL_RCC_UART4_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART4EN
)Ë=
RESET
)

	)

1136 
	#__HAL_RCC_UART5_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë!
RESET
)

	)

1137 
	#__HAL_RCC_UART5_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_UART5EN
)Ë=
RESET
)

	)

1138 
	#__HAL_RCC_CAN2_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)Ë!
RESET
)

	)

1139 
	#__HAL_RCC_CAN2_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_CAN2EN
)Ë=
RESET
)

	)

1141 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1142 
	#__HAL_RCC_TIM12_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë!
RESET
)

	)

1143 
	#__HAL_RCC_TIM12_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM12EN
)Ë=
RESET
)

	)

1145 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1146 
	#__HAL_RCC_TIM13_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë!
RESET
)

	)

1147 
	#__HAL_RCC_TIM13_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM13EN
)Ë=
RESET
)

	)

1148 
	#__HAL_RCC_TIM14_IS_CLK_ENABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë!
RESET
)

	)

1149 
	#__HAL_RCC_TIM14_IS_CLK_DISABLED
(Ë((
RCC
->
APB1ENR
 & (
RCC_APB1ENR_TIM14EN
)Ë=
RESET
)

	)

1164 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1165 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1166 || 
deföed
(
STM32F103xG
)

1167 
	#__HAL_RCC_ADC2_CLK_ENABLE
() do { \

1168 
__IO
 
uöt32_t
 
tm¥eg
; \

1169 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1171 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC2EN
);\

1172 
	`UNUSED
(
tm¥eg
); \

1173 } 0U)

	)

1175 
	#__HAL_RCC_ADC2_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC2EN
))

	)

1178 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1179 
	#__HAL_RCC_TIM15_CLK_ENABLE
() do { \

1180 
__IO
 
uöt32_t
 
tm¥eg
; \

1181 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1183 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM15EN
);\

1184 
	`UNUSED
(
tm¥eg
); \

1185 } 0U)

	)

1187 
	#__HAL_RCC_TIM16_CLK_ENABLE
() do { \

1188 
__IO
 
uöt32_t
 
tm¥eg
; \

1189 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1191 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM16EN
);\

1192 
	`UNUSED
(
tm¥eg
); \

1193 } 0U)

	)

1195 
	#__HAL_RCC_TIM17_CLK_ENABLE
() do { \

1196 
__IO
 
uöt32_t
 
tm¥eg
; \

1197 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1199 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM17EN
);\

1200 
	`UNUSED
(
tm¥eg
); \

1201 } 0U)

	)

1203 
	#__HAL_RCC_TIM15_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM15EN
))

	)

1204 
	#__HAL_RCC_TIM16_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM16EN
))

	)

1205 
	#__HAL_RCC_TIM17_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM17EN
))

	)

1208 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1209 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1210 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1211 || 
deföed
(
STM32F107xC
)

1212 
	#__HAL_RCC_GPIOE_CLK_ENABLE
() do { \

1213 
__IO
 
uöt32_t
 
tm¥eg
; \

1214 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1216 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPEEN
);\

1217 
	`UNUSED
(
tm¥eg
); \

1218 } 0U)

	)

1220 
	#__HAL_RCC_GPIOE_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPEEN
))

	)

1223 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1224 || 
deföed
(
STM32F103xG
)

1225 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1226 
__IO
 
uöt32_t
 
tm¥eg
; \

1227 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1229 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1230 
	`UNUSED
(
tm¥eg
); \

1231 } 0U)

	)

1233 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1234 
__IO
 
uöt32_t
 
tm¥eg
; \

1235 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1237 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1238 
	`UNUSED
(
tm¥eg
); \

1239 } 0U)

	)

1241 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPFEN
))

	)

1242 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPGEN
))

	)

1245 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1246 
	#__HAL_RCC_TIM8_CLK_ENABLE
() do { \

1247 
__IO
 
uöt32_t
 
tm¥eg
; \

1248 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1250 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM8EN
);\

1251 
	`UNUSED
(
tm¥eg
); \

1252 } 0U)

	)

1254 
	#__HAL_RCC_ADC3_CLK_ENABLE
() do { \

1255 
__IO
 
uöt32_t
 
tm¥eg
; \

1256 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1258 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_ADC3EN
);\

1259 
	`UNUSED
(
tm¥eg
); \

1260 } 0U)

	)

1262 
	#__HAL_RCC_TIM8_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM8EN
))

	)

1263 
	#__HAL_RCC_ADC3_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_ADC3EN
))

	)

1266 #i‡
deföed
(
STM32F100xE
)

1267 
	#__HAL_RCC_GPIOF_CLK_ENABLE
() do { \

1268 
__IO
 
uöt32_t
 
tm¥eg
; \

1269 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1271 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPFEN
);\

1272 
	`UNUSED
(
tm¥eg
); \

1273 } 0U)

	)

1275 
	#__HAL_RCC_GPIOG_CLK_ENABLE
() do { \

1276 
__IO
 
uöt32_t
 
tm¥eg
; \

1277 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1279 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPGEN
);\

1280 
	`UNUSED
(
tm¥eg
); \

1281 } 0U)

	)

1283 
	#__HAL_RCC_GPIOF_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPFEN
))

	)

1284 
	#__HAL_RCC_GPIOG_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_IOPGEN
))

	)

1287 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1288 
	#__HAL_RCC_TIM9_CLK_ENABLE
() do { \

1289 
__IO
 
uöt32_t
 
tm¥eg
; \

1290 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1292 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM9EN
);\

1293 
	`UNUSED
(
tm¥eg
); \

1294 } 0U)

	)

1296 
	#__HAL_RCC_TIM10_CLK_ENABLE
() do { \

1297 
__IO
 
uöt32_t
 
tm¥eg
; \

1298 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1300 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM10EN
);\

1301 
	`UNUSED
(
tm¥eg
); \

1302 } 0U)

	)

1304 
	#__HAL_RCC_TIM11_CLK_ENABLE
() do { \

1305 
__IO
 
uöt32_t
 
tm¥eg
; \

1306 
	`SET_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1308 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_TIM11EN
);\

1309 
	`UNUSED
(
tm¥eg
); \

1310 } 0U)

	)

1312 
	#__HAL_RCC_TIM9_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM9EN
))

	)

1313 
	#__HAL_RCC_TIM10_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM10EN
))

	)

1314 
	#__HAL_RCC_TIM11_CLK_DISABLE
(Ë(
RCC
->
APB2ENR
 &~(
RCC_APB2ENR_TIM11EN
))

	)

1329 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1330 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1331 || 
deföed
(
STM32F103xG
)

1332 
	#__HAL_RCC_ADC2_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)Ë!
RESET
)

	)

1333 
	#__HAL_RCC_ADC2_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC2EN
)Ë=
RESET
)

	)

1335 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1336 
	#__HAL_RCC_TIM15_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)Ë!
RESET
)

	)

1337 
	#__HAL_RCC_TIM15_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM15EN
)Ë=
RESET
)

	)

1338 
	#__HAL_RCC_TIM16_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)Ë!
RESET
)

	)

1339 
	#__HAL_RCC_TIM16_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM16EN
)Ë=
RESET
)

	)

1340 
	#__HAL_RCC_TIM17_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)Ë!
RESET
)

	)

1341 
	#__HAL_RCC_TIM17_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM17EN
)Ë=
RESET
)

	)

1343 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1344 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1345 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1346 || 
deföed
(
STM32F107xC
)

1347 
	#__HAL_RCC_GPIOE_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)Ë!
RESET
)

	)

1348 
	#__HAL_RCC_GPIOE_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPEEN
)Ë=
RESET
)

	)

1350 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1351 || 
deföed
(
STM32F103xG
)

1352 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë!
RESET
)

	)

1353 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë=
RESET
)

	)

1354 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë!
RESET
)

	)

1355 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë=
RESET
)

	)

1357 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1358 
	#__HAL_RCC_TIM8_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)Ë!
RESET
)

	)

1359 
	#__HAL_RCC_TIM8_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM8EN
)Ë=
RESET
)

	)

1360 
	#__HAL_RCC_ADC3_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)Ë!
RESET
)

	)

1361 
	#__HAL_RCC_ADC3_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_ADC3EN
)Ë=
RESET
)

	)

1363 #i‡
deföed
(
STM32F100xE
)

1364 
	#__HAL_RCC_GPIOF_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë!
RESET
)

	)

1365 
	#__HAL_RCC_GPIOF_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPFEN
)Ë=
RESET
)

	)

1366 
	#__HAL_RCC_GPIOG_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë!
RESET
)

	)

1367 
	#__HAL_RCC_GPIOG_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_IOPGEN
)Ë=
RESET
)

	)

1369 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1370 
	#__HAL_RCC_TIM9_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)Ë!
RESET
)

	)

1371 
	#__HAL_RCC_TIM9_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM9EN
)Ë=
RESET
)

	)

1372 
	#__HAL_RCC_TIM10_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)Ë!
RESET
)

	)

1373 
	#__HAL_RCC_TIM10_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM10EN
)Ë=
RESET
)

	)

1374 
	#__HAL_RCC_TIM11_IS_CLK_ENABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)Ë!
RESET
)

	)

1375 
	#__HAL_RCC_TIM11_IS_CLK_DISABLED
(Ë((
RCC
->
APB2ENR
 & (
RCC_APB2ENR_TIM11EN
)Ë=
RESET
)

	)

1382 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1387 
	#__HAL_RCC_AHB_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0xFFFFFFFFU)

	)

1388 
	#__HAL_RCC_USB_OTG_FS_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 |(
RCC_AHBRSTR_OTGFSRST
))

	)

1389 #i‡
deföed
(
STM32F107xC
)

1390 
	#__HAL_RCC_ETHMAC_FORCE_RESET
(Ë(
RCC
->
AHBRSTR
 |(
RCC_AHBRSTR_ETHMACRST
))

	)

1393 
	#__HAL_RCC_AHB_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 = 0x00)

	)

1394 
	#__HAL_RCC_USB_OTG_FS_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 &~(
RCC_AHBRSTR_OTGFSRST
))

	)

1395 #i‡
deföed
(
STM32F107xC
)

1396 
	#__HAL_RCC_ETHMAC_RELEASE_RESET
(Ë(
RCC
->
AHBRSTR
 &~(
RCC_AHBRSTR_ETHMACRST
))

	)

1409 #i‡
deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
)\

1410 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë||deföed(
STM32F107xC
)

1411 
	#__HAL_RCC_CAN1_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN1RST
))

	)

1413 
	#__HAL_RCC_CAN1_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN1RST
))

	)

1416 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
Ë|| deföed(
STM32F101xB
)\

1417 || 
deföed
(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F102xB
)\

1418 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

1419 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1420 
	#__HAL_RCC_TIM4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM4RST
))

	)

1421 
	#__HAL_RCC_SPI2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI2RST
))

	)

1422 
	#__HAL_RCC_USART3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USART3RST
))

	)

1423 
	#__HAL_RCC_I2C2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_I2C2RST
))

	)

1425 
	#__HAL_RCC_TIM4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM4RST
))

	)

1426 
	#__HAL_RCC_SPI2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI2RST
))

	)

1427 
	#__HAL_RCC_USART3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USART3RST
))

	)

1428 
	#__HAL_RCC_I2C2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_I2C2RST
))

	)

1431 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1432 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1433 
	#__HAL_RCC_USB_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_USBRST
))

	)

1434 
	#__HAL_RCC_USB_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_USBRST
))

	)

1437 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1438 || 
deföed
(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1439 
	#__HAL_RCC_TIM5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM5RST
))

	)

1440 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

1441 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

1442 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

1443 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

1444 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

1445 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

1447 
	#__HAL_RCC_TIM5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM5RST
))

	)

1448 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

1449 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

1450 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

1451 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

1452 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

1453 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

1456 #i‡
deföed
(
STM32F100xB
Ë|| deföed (
STM32F100xE
)

1457 
	#__HAL_RCC_TIM6_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM6RST
))

	)

1458 
	#__HAL_RCC_TIM7_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM7RST
))

	)

1459 
	#__HAL_RCC_DAC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_DACRST
))

	)

1460 
	#__HAL_RCC_CEC_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CECRST
))

	)

1462 
	#__HAL_RCC_TIM6_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM6RST
))

	)

1463 
	#__HAL_RCC_TIM7_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM7RST
))

	)

1464 
	#__HAL_RCC_DAC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_DACRST
))

	)

1465 
	#__HAL_RCC_CEC_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CECRST
))

	)

1468 #i‡
deföed
 (
STM32F100xE
)

1469 
	#__HAL_RCC_TIM5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM5RST
))

	)

1470 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

1471 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

1472 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

1473 
	#__HAL_RCC_SPI3_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_SPI3RST
))

	)

1474 
	#__HAL_RCC_UART4_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART4RST
))

	)

1475 
	#__HAL_RCC_UART5_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_UART5RST
))

	)

1477 
	#__HAL_RCC_TIM5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM5RST
))

	)

1478 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

1479 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

1480 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

1481 
	#__HAL_RCC_SPI3_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_SPI3RST
))

	)

1482 
	#__HAL_RCC_UART4_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART4RST
))

	)

1483 
	#__HAL_RCC_UART5_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_UART5RST
))

	)

1486 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1487 
	#__HAL_RCC_CAN2_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_CAN2RST
))

	)

1489 
	#__HAL_RCC_CAN2_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_CAN2RST
))

	)

1492 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1493 
	#__HAL_RCC_TIM12_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM12RST
))

	)

1494 
	#__HAL_RCC_TIM13_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM13RST
))

	)

1495 
	#__HAL_RCC_TIM14_FORCE_RESET
(Ë(
RCC
->
APB1RSTR
 |(
RCC_APB1RSTR_TIM14RST
))

	)

1497 
	#__HAL_RCC_TIM12_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM12RST
))

	)

1498 
	#__HAL_RCC_TIM13_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM13RST
))

	)

1499 
	#__HAL_RCC_TIM14_RELEASE_RESET
(Ë(
RCC
->
APB1RSTR
 &~(
RCC_APB1RSTR_TIM14RST
))

	)

1511 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103x6
Ë|| deföed(
STM32F103xB
)\

1512 || 
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F103xE
)\

1513 || 
deföed
(
STM32F103xG
)

1514 
	#__HAL_RCC_ADC2_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC2RST
))

	)

1516 
	#__HAL_RCC_ADC2_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC2RST
))

	)

1519 #i‡
deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

1520 
	#__HAL_RCC_TIM15_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM15RST
))

	)

1521 
	#__HAL_RCC_TIM16_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM16RST
))

	)

1522 
	#__HAL_RCC_TIM17_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM17RST
))

	)

1524 
	#__HAL_RCC_TIM15_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM15RST
))

	)

1525 
	#__HAL_RCC_TIM16_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM16RST
))

	)

1526 
	#__HAL_RCC_TIM17_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM17RST
))

	)

1529 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
)\

1530 || 
deföed
(
STM32F101xG
Ë|| deföed(
STM32F100xB
Ë|| deföed(
STM32F103xB
)\

1531 || 
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
)\

1532 || 
deföed
(
STM32F107xC
)

1533 
	#__HAL_RCC_GPIOE_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPERST
))

	)

1535 
	#__HAL_RCC_GPIOE_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPERST
))

	)

1538 #i‡
deföed
(
STM32F101xE
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F101xG
)\

1539 || 
deföed
(
STM32F103xG
)

1540 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPFRST
))

	)

1541 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPGRST
))

	)

1543 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPFRST
))

	)

1544 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPGRST
))

	)

1547 #i‡
deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1548 
	#__HAL_RCC_TIM8_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM8RST
))

	)

1549 
	#__HAL_RCC_ADC3_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_ADC3RST
))

	)

1551 
	#__HAL_RCC_TIM8_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM8RST
))

	)

1552 
	#__HAL_RCC_ADC3_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_ADC3RST
))

	)

1555 #i‡
deföed
(
STM32F100xE
)

1556 
	#__HAL_RCC_GPIOF_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPFRST
))

	)

1557 
	#__HAL_RCC_GPIOG_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_IOPGRST
))

	)

1559 
	#__HAL_RCC_GPIOF_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPFRST
))

	)

1560 
	#__HAL_RCC_GPIOG_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_IOPGRST
))

	)

1563 #i‡
deföed
(
STM32F101xG
Ë|| deföed(
STM32F103xG
)

1564 
	#__HAL_RCC_TIM9_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM9RST
))

	)

1565 
	#__HAL_RCC_TIM10_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM10RST
))

	)

1566 
	#__HAL_RCC_TIM11_FORCE_RESET
(Ë(
RCC
->
APB2RSTR
 |(
RCC_APB2RSTR_TIM11RST
))

	)

1568 
	#__HAL_RCC_TIM9_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM9RST
))

	)

1569 
	#__HAL_RCC_TIM10_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM10RST
))

	)

1570 
	#__HAL_RCC_TIM11_RELEASE_RESET
(Ë(
RCC
->
APB2RSTR
 &~(
RCC_APB2RSTR_TIM11RST
))

	)

1581 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

1582 || 
deföed
(
STM32F100xE
)

1591 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
Ë
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
, (
uöt32_t
)(__HSE_PREDIV_VALUE__))

	)

1601 
	#__HAL_RCC_HSE_PREDIV_CONFIG
(
__HSE_PREDIV_VALUE__
) \

1602 
	`MODIFY_REG
(
RCC
->
CFGR
,
RCC_CFGR_PLLXTPRE
, (
uöt32_t
)(
__HSE_PREDIV_VALUE__
))

	)

1606 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

1607 || 
deföed
(
STM32F100xE
)

1611 
	#__HAL_RCC_HSE_GET_PREDIV
(Ë
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1
)

	)

1617 
	#__HAL_RCC_HSE_GET_PREDIV
(Ë
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_PLLXTPRE
)

	)

1625 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1636 
	#__HAL_RCC_PLLI2S_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
ENABLE
)

	)

1641 
	#__HAL_RCC_PLLI2S_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLLI2SON_BB
 = 
DISABLE
)

	)

1659 
	#__HAL_RCC_PLLI2S_CONFIG
(
__PLLI2SMUL__
)\

1660 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
,(
__PLLI2SMUL__
))

	)

1673 #i‡
deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

1674 || 
deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

1681 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1682 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
, (
uöt32_t
)(
__USBCLKSOURCE__
))

	)

1689 
	#__HAL_RCC_GET_USB_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_USBPRE
)))

	)

1693 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1701 
	#__HAL_RCC_USB_CONFIG
(
__USBCLKSOURCE__
) \

1702 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
, (
uöt32_t
)(
__USBCLKSOURCE__
))

	)

1709 
	#__HAL_RCC_GET_USB_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_OTGFSPRE
)))

	)

1721 
	#__HAL_RCC_ADC_CONFIG
(
__ADCCLKSOURCE__
) \

1722 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
, (
uöt32_t
)(
__ADCCLKSOURCE__
))

	)

1731 
	#__HAL_RCC_GET_ADC_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_ADCPRE
)))

	)

1737 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1751 
	#__HAL_RCC_HSE_PREDIV2_CONFIG
(
__HSE_PREDIV2_VALUE__
) \

1752 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
, (
uöt32_t
)(
__HSE_PREDIV2_VALUE__
))

	)

1757 
	#__HAL_RCC_HSE_GET_PREDIV2
(Ë
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV2
)

	)

1773 
	#__HAL_RCC_PLL2_ENABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLL2ON_BB
 = 
ENABLE
)

	)

1779 
	#__HAL_RCC_PLL2_DISABLE
(Ë(*(
__IO
 
uöt32_t
 *Ë
RCC_CR_PLL2ON_BB
 = 
DISABLE
)

	)

1797 
	#__HAL_RCC_PLL2_CONFIG
(
__PLL2MUL__
)\

1798 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL2MUL
,(
__PLL2MUL__
))

	)

1815 
	#__HAL_RCC_I2S2_CONFIG
(
__I2S2CLKSOURCE__
) \

1816 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
, (
uöt32_t
)(
__I2S2CLKSOURCE__
))

	)

1823 
	#__HAL_RCC_GET_I2S2_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
)))

	)

1831 
	#__HAL_RCC_I2S3_CONFIG
(
__I2S2CLKSOURCE__
) \

1832 
	`MODIFY_REG
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
, (
uöt32_t
)(
__I2S2CLKSOURCE__
))

	)

1839 
	#__HAL_RCC_GET_I2S3_SOURCE
(Ë((
uöt32_t
)(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S3SRC
)))

	)

1859 
HAL_SètusTy≥Def
 
HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1860 
HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
);

1861 
uöt32_t
 
HAL_RCCEx_GëPîùhCLKFªq
(uöt32_à
PîùhClk
);

1867 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

1871 
HAL_SètusTy≥Def
 
HAL_RCCEx_E«bÀPLLI2S
(
RCC_PLLI2SInôTy≥Def
 *
PLLI2SInô
);

1872 
HAL_SètusTy≥Def
 
HAL_RCCEx_DißbÀPLLI2S
();

1881 
HAL_SètusTy≥Def
 
HAL_RCCEx_E«bÀPLL2
(
RCC_PLL2InôTy≥Def
 *
PLL2Inô
);

1882 
HAL_SètusTy≥Def
 
HAL_RCCEx_DißbÀPLL2
();

1901 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc.h

21 #i‚de‡
__STM32F1xx_HAL_RTC_H


22 
	#__STM32F1xx_HAL_RTC_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

43 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë(((PREDIVË<0xFFFFFUË|| ((PREDIVË=
RTC_AUTO_1_SECOND
))

	)

44 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23U)

	)

45 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59U)

	)

46 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59U)

	)

47 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_FORMAT_BIN
Ë|| ((FORMATË=
RTC_FORMAT_BCD
))

	)

48 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99U)

	)

49 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1UË&& ((MONTHË<12U))

	)

50 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1UË&& ((DATEË<31U))

	)

51 
	#IS_RTC_ALARM
(
ALARM
Ë((ALARMË=
RTC_ALARM_A
)

	)

52 
	#IS_RTC_CALIB_OUTPUT
(
__OUTPUT__
Ë(((__OUTPUT__Ë=
RTC_OUTPUTSOURCE_NONE
) || \

53 ((
__OUTPUT__
Ë=
RTC_OUTPUTSOURCE_CALIBCLOCK
) || \

54 ((
__OUTPUT__
Ë=
RTC_OUTPUTSOURCE_ALARM
) || \

55 ((
__OUTPUT__
Ë=
RTC_OUTPUTSOURCE_SECOND
))

	)

68 
	#RTC_TIMEOUT_VALUE
 1000U

	)

76 
	#RTC_EXTI_LINE_ALARM_EVENT
 ((
uöt32_t
)
EXTI_IMR_MR17
Ë

	)

95 
uöt8_t
 
Hours
;

98 
uöt8_t
 
Möuãs
;

101 
uöt8_t
 
Sec⁄ds
;

104 } 
	tRTC_TimeTy≥Def
;

111 
RTC_TimeTy≥Def
 
AœrmTime
;

113 
uöt32_t
 
Aœrm
;

115 } 
	tRTC_AœrmTy≥Def
;

122 
HAL_RTC_STATE_RESET
 = 0x00U,

123 
HAL_RTC_STATE_READY
 = 0x01U,

124 
HAL_RTC_STATE_BUSY
 = 0x02U,

125 
HAL_RTC_STATE_TIMEOUT
 = 0x03U,

126 
HAL_RTC_STATE_ERROR
 = 0x04U

128 } 
	tHAL_RTCSèãTy≥Def
;

135 
uöt32_t
 
AsynchPªdiv
;

139 
uöt32_t
 
OutPut
;

142 } 
	tRTC_InôTy≥Def
;

149 
uöt8_t
 
WìkDay
;

152 
uöt8_t
 
M⁄th
;

155 
uöt8_t
 
D©e
;

158 
uöt8_t
 
Yór
;

161 } 
	tRTC_D©eTy≥Def
;

166 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

167 
__RTC_H™dÀTy≥Def


172 
RTC_Ty≥Def
 *
In°™˚
;

174 
RTC_InôTy≥Def
 
Inô
;

176 
RTC_D©eTy≥Def
 
D©eToUpd©e
;

178 
HAL_LockTy≥Def
 
Lock
;

180 
__IO
 
HAL_RTCSèãTy≥Def
 
Sèã
;

182 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

183 (* 
AœrmAEvítCÆlback
)(
__RTC_H™dÀTy≥Def
 *
hπc
);

185 (* 
Tam≥r1EvítCÆlback
)(
__RTC_H™dÀTy≥Def
 *
hπc
);

187 (* 
M•InôCÆlback
)(
__RTC_H™dÀTy≥Def
 *
hπc
);

189 (* 
M•DeInôCÆlback
)(
__RTC_H™dÀTy≥Def
 *
hπc
);

193 } 
	tRTC_H™dÀTy≥Def
;

195 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

201 
HAL_RTC_ALARM_A_EVENT_CB_ID
 = 0x00u,

202 
HAL_RTC_TAMPER1_EVENT_CB_ID
 = 0x04u,

203 
HAL_RTC_MSPINIT_CB_ID
 = 0x0Eu,

204 
HAL_RTC_MSPDEINIT_CB_ID
 = 0x0Fu

205 } 
	tHAL_RTC_CÆlbackIDTy≥Def
;

210 (*
pRTC_CÆlbackTy≥Def
)(
	tRTC_H™dÀTy≥Def
 *
	thπc
);

225 
	#RTC_AUTO_1_SECOND
 0xFFFFFFFFU

	)

234 
	#RTC_FORMAT_BIN
 0x000000000U

	)

235 
	#RTC_FORMAT_BCD
 0x000000001U

	)

246 
	#RTC_MONTH_JANUARY
 ((
uöt8_t
)0x01)

	)

247 
	#RTC_MONTH_FEBRUARY
 ((
uöt8_t
)0x02)

	)

248 
	#RTC_MONTH_MARCH
 ((
uöt8_t
)0x03)

	)

249 
	#RTC_MONTH_APRIL
 ((
uöt8_t
)0x04)

	)

250 
	#RTC_MONTH_MAY
 ((
uöt8_t
)0x05)

	)

251 
	#RTC_MONTH_JUNE
 ((
uöt8_t
)0x06)

	)

252 
	#RTC_MONTH_JULY
 ((
uöt8_t
)0x07)

	)

253 
	#RTC_MONTH_AUGUST
 ((
uöt8_t
)0x08)

	)

254 
	#RTC_MONTH_SEPTEMBER
 ((
uöt8_t
)0x09)

	)

255 
	#RTC_MONTH_OCTOBER
 ((
uöt8_t
)0x10)

	)

256 
	#RTC_MONTH_NOVEMBER
 ((
uöt8_t
)0x11)

	)

257 
	#RTC_MONTH_DECEMBER
 ((
uöt8_t
)0x12)

	)

266 
	#RTC_WEEKDAY_MONDAY
 ((
uöt8_t
)0x01)

	)

267 
	#RTC_WEEKDAY_TUESDAY
 ((
uöt8_t
)0x02)

	)

268 
	#RTC_WEEKDAY_WEDNESDAY
 ((
uöt8_t
)0x03)

	)

269 
	#RTC_WEEKDAY_THURSDAY
 ((
uöt8_t
)0x04)

	)

270 
	#RTC_WEEKDAY_FRIDAY
 ((
uöt8_t
)0x05)

	)

271 
	#RTC_WEEKDAY_SATURDAY
 ((
uöt8_t
)0x06)

	)

272 
	#RTC_WEEKDAY_SUNDAY
 ((
uöt8_t
)0x00)

	)

281 
	#RTC_ALARM_A
 0U

	)

292 
	#RTC_OUTPUTSOURCE_NONE
 0x00000000U

	)

293 
	#RTC_OUTPUTSOURCE_CALIBCLOCK
 
BKP_RTCCR_CCO


	)

294 
	#RTC_OUTPUTSOURCE_ALARM
 
BKP_RTCCR_ASOE


	)

295 
	#RTC_OUTPUTSOURCE_SECOND
 (
BKP_RTCCR_ASOS
 | 
BKP_RTCCR_ASOE
Ë

	)

304 
	#RTC_IT_OW
 
RTC_CRH_OWIE


	)

305 
	#RTC_IT_ALRA
 
RTC_CRH_ALRIE


	)

306 
	#RTC_IT_SEC
 
RTC_CRH_SECIE


	)

307 
	#RTC_IT_TAMP1
 
BKP_CSR_TPIE


	)

315 
	#RTC_FLAG_RTOFF
 
RTC_CRL_RTOFF


	)

316 
	#RTC_FLAG_RSF
 
RTC_CRL_RSF


	)

317 
	#RTC_FLAG_OW
 
RTC_CRL_OWF


	)

318 
	#RTC_FLAG_ALRAF
 
RTC_CRL_ALRF


	)

319 
	#RTC_FLAG_SEC
 
RTC_CRL_SECF


	)

320 
	#RTC_FLAG_TAMP1F
 
BKP_CSR_TEF


	)

339 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

340 
	#__HAL_RTC_RESET_HANDLE_STATE
(
__HANDLE__
) do{\

341 (
__HANDLE__
)->
Sèã
 = 
HAL_RTC_STATE_RESET
;\

342 (
__HANDLE__
)->
M•InôCÆlback
 = 
NULL
;\

343 (
__HANDLE__
)->
M•DeInôCÆlback
 = 
NULL
;\

344 }0u)

	)

346 
	#__HAL_RTC_RESET_HANDLE_STATE
(
__HANDLE__
Ë((__HANDLE__)->
Sèã
 = 
HAL_RTC_STATE_RESET
)

	)

354 
	#__HAL_RTC_WRITEPROTECTION_DISABLE
(
__HANDLE__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CRL
, 
RTC_CRL_CNF
)

	)

361 
	#__HAL_RTC_WRITEPROTECTION_ENABLE
(
__HANDLE__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CRL
, 
RTC_CRL_CNF
)

	)

371 
	#__HAL_RTC_ALARM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CRH
, (__INTERRUPT__))

	)

381 
	#__HAL_RTC_ALARM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CRH
, (__INTERRUPT__))

	)

391 
	#__HAL_RTC_ALARM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((((__HANDLE__)->
In°™˚
->
CRH
)& ((__INTERRUPT__)))Ë!
RESET
)? 
SET
 : RESET)

	)

401 
	#__HAL_RTC_ALARM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
CRL
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

411 
	#__HAL_RTC_ALARM_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë(((((__HANDLE__)->
In°™˚
->
CRL
Ë& (__INTERRUPT__)Ë!
RESET
)? 
SET
 : RESET)

	)

421 
	#__HAL_RTC_ALARM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
CRL
Ë~(__FLAG__)

	)

427 
	#__HAL_RTC_ALARM_EXTI_ENABLE_IT
(Ë
	`SET_BIT
(
EXTI
->
IMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

433 
	#__HAL_RTC_ALARM_EXTI_DISABLE_IT
(Ë
	`CLEAR_BIT
(
EXTI
->
IMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

439 
	#__HAL_RTC_ALARM_EXTI_ENABLE_EVENT
(Ë
	`SET_BIT
(
EXTI
->
EMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

445 
	#__HAL_RTC_ALARM_EXTI_DISABLE_EVENT
(Ë
	`CLEAR_BIT
(
EXTI
->
EMR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

452 
	#__HAL_RTC_ALARM_EXTI_ENABLE_FALLING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
FTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

459 
	#__HAL_RTC_ALARM_EXTI_DISABLE_FALLING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

466 
	#__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
(Ë
	`SET_BIT
(
EXTI
->
RTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

473 
	#__HAL_RTC_ALARM_EXTI_DISABLE_RISING_EDGE
(Ë
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

479 
	#__HAL_RTC_ALARM_EXTI_ENABLE_RISING_FALLING_EDGE
() \

481 
	`__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
(); \

482 
	`__HAL_RTC_ALARM_EXTI_ENABLE_FALLING_EDGE
(); \

483 } 0U)

	)

490 
	#__HAL_RTC_ALARM_EXTI_DISABLE_RISING_FALLING_EDGE
() \

492 
	`__HAL_RTC_ALARM_EXTI_DISABLE_RISING_EDGE
(); \

493 
	`__HAL_RTC_ALARM_EXTI_DISABLE_FALLING_EDGE
(); \

494 } 0U)

	)

500 
	#__HAL_RTC_ALARM_EXTI_GET_FLAG
(Ë(
EXTI
->
PR
 & (
RTC_EXTI_LINE_ALARM_EVENT
))

	)

506 
	#__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
(Ë(
EXTI
->
PR
 = (
RTC_EXTI_LINE_ALARM_EVENT
))

	)

512 
	#__HAL_RTC_ALARM_EXTI_GENERATE_SWIT
(Ë
	`SET_BIT
(
EXTI
->
SWIER
, 
RTC_EXTI_LINE_ALARM_EVENT
)

	)

518 
	~"°m32f1xx_hÆ_πc_ex.h
"

530 
HAL_SètusTy≥Def
 
HAL_RTC_Inô
(
RTC_H™dÀTy≥Def
 *
hπc
);

531 
HAL_SètusTy≥Def
 
HAL_RTC_DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
);

532 
HAL_RTC_M•Inô
(
RTC_H™dÀTy≥Def
 *
hπc
);

533 
HAL_RTC_M•DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
);

536 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

537 
HAL_SètusTy≥Def
 
HAL_RTC_Regi°îCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
, 
HAL_RTC_CÆlbackIDTy≥Def
 
CÆlbackID
, 
pRTC_CÆlbackTy≥Def
 
pCÆlback
);

538 
HAL_SètusTy≥Def
 
HAL_RTC_UnRegi°îCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
, 
HAL_RTC_CÆlbackIDTy≥Def
 
CÆlbackID
);

548 
HAL_SètusTy≥Def
 
HAL_RTC_SëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
);

549 
HAL_SètusTy≥Def
 
HAL_RTC_GëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
);

550 
HAL_SètusTy≥Def
 
HAL_RTC_SëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
);

551 
HAL_SètusTy≥Def
 
HAL_RTC_GëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
);

560 
HAL_SètusTy≥Def
 
HAL_RTC_SëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
);

561 
HAL_SètusTy≥Def
 
HAL_RTC_SëAœrm_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
);

562 
HAL_SètusTy≥Def
 
HAL_RTC_Dó˘iv©eAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Aœrm
);

563 
HAL_SètusTy≥Def
 
HAL_RTC_GëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
Aœrm
, uöt32_à
F‹m©
);

564 
HAL_RTC_AœrmIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
);

565 
HAL_SètusTy≥Def
 
HAL_RTC_PﬁlF‹AœrmAEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

566 
HAL_RTC_AœrmAEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

575 
HAL_RTCSèãTy≥Def
 
HAL_RTC_GëSèã
(
RTC_H™dÀTy≥Def
 *
hπc
);

584 
HAL_SètusTy≥Def
 
HAL_RTC_WaôF‹Synchro
(
RTC_H™dÀTy≥Def
 *
hπc
);

601 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc_ex.h

21 #i‚de‡
__STM32F1xx_HAL_RTC_EX_H


22 
	#__STM32F1xx_HAL_RTC_EX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

46 
	#HAL_RTCEx_Tam≥rTimeSèmpIRQH™dÀr
 
HAL_RTCEx_Tam≥rIRQH™dÀr


	)

55 
	#IS_RTC_TAMPER
(
__TAMPER__
Ë((__TAMPER__Ë=
RTC_TAMPER_1
)

	)

57 
	#IS_RTC_TAMPER_TRIGGER
(
__TRIGGER__
Ë(((__TRIGGER__Ë=
RTC_TAMPERTRIGGER_LOWLEVEL
) || \

58 ((
__TRIGGER__
Ë=
RTC_TAMPERTRIGGER_HIGHLEVEL
))

	)

60 #i‡
RTC_BKP_NUMBER
 > 10U

61 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË<(
uöt32_t
)
RTC_BKP_DR10
Ë|| (((BKPË>(uöt32_t)
RTC_BKP_DR11
Ë&& ((BKPË<(uöt32_t)
RTC_BKP_DR42
)))

	)

63 
	#IS_RTC_BKP
(
BKP
Ë((BKPË<(
uöt32_t
)
RTC_BKP_NUMBER
)

	)

65 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
__VALUE__
Ë((__VALUE__Ë<0x0000007FU)

	)

84 
uöt32_t
 
Tam≥r
;

87 
uöt32_t
 
Triggî
;

90 } 
	tRTC_Tam≥rTy≥Def
;

104 
	#RTC_TAMPER_1
 
BKP_CR_TPE


	)

113 
	#RTC_TAMPERTRIGGER_LOWLEVEL
 
BKP_CR_TPAL


	)

114 
	#RTC_TAMPERTRIGGER_HIGHLEVEL
 0x00000000U

	)

123 #i‡
RTC_BKP_NUMBER
 > 0U

124 
	#RTC_BKP_DR1
 0x00000001U

	)

125 
	#RTC_BKP_DR2
 0x00000002U

	)

126 
	#RTC_BKP_DR3
 0x00000003U

	)

127 
	#RTC_BKP_DR4
 0x00000004U

	)

128 
	#RTC_BKP_DR5
 0x00000005U

	)

129 
	#RTC_BKP_DR6
 0x00000006U

	)

130 
	#RTC_BKP_DR7
 0x00000007U

	)

131 
	#RTC_BKP_DR8
 0x00000008U

	)

132 
	#RTC_BKP_DR9
 0x00000009U

	)

133 
	#RTC_BKP_DR10
 0x0000000AU

	)

136 #i‡
RTC_BKP_NUMBER
 > 10U

137 
	#RTC_BKP_DR11
 0x00000010U

	)

138 
	#RTC_BKP_DR12
 0x00000011U

	)

139 
	#RTC_BKP_DR13
 0x00000012U

	)

140 
	#RTC_BKP_DR14
 0x00000013U

	)

141 
	#RTC_BKP_DR15
 0x00000014U

	)

142 
	#RTC_BKP_DR16
 0x00000015U

	)

143 
	#RTC_BKP_DR17
 0x00000016U

	)

144 
	#RTC_BKP_DR18
 0x00000017U

	)

145 
	#RTC_BKP_DR19
 0x00000018U

	)

146 
	#RTC_BKP_DR20
 0x00000019U

	)

147 
	#RTC_BKP_DR21
 0x0000001AU

	)

148 
	#RTC_BKP_DR22
 0x0000001BU

	)

149 
	#RTC_BKP_DR23
 0x0000001CU

	)

150 
	#RTC_BKP_DR24
 0x0000001DU

	)

151 
	#RTC_BKP_DR25
 0x0000001EU

	)

152 
	#RTC_BKP_DR26
 0x0000001FU

	)

153 
	#RTC_BKP_DR27
 0x00000020U

	)

154 
	#RTC_BKP_DR28
 0x00000021U

	)

155 
	#RTC_BKP_DR29
 0x00000022U

	)

156 
	#RTC_BKP_DR30
 0x00000023U

	)

157 
	#RTC_BKP_DR31
 0x00000024U

	)

158 
	#RTC_BKP_DR32
 0x00000025U

	)

159 
	#RTC_BKP_DR33
 0x00000026U

	)

160 
	#RTC_BKP_DR34
 0x00000027U

	)

161 
	#RTC_BKP_DR35
 0x00000028U

	)

162 
	#RTC_BKP_DR36
 0x00000029U

	)

163 
	#RTC_BKP_DR37
 0x0000002AU

	)

164 
	#RTC_BKP_DR38
 0x0000002BU

	)

165 
	#RTC_BKP_DR39
 0x0000002CU

	)

166 
	#RTC_BKP_DR40
 0x0000002DU

	)

167 
	#RTC_BKP_DR41
 0x0000002EU

	)

168 
	#RTC_BKP_DR42
 0x0000002FU

	)

192 
	#__HAL_RTC_TAMPER_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
(
BKP
->
CSR
, (__INTERRUPT__))

	)

202 
	#__HAL_RTC_TAMPER_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`CLEAR_BIT
(
BKP
->
CSR
, (__INTERRUPT__))

	)

212 
	#__HAL_RTC_TAMPER_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((
BKP
->
CSR
Ë& ((__INTERRUPT__))Ë!
RESET
)? 
SET
 : RESET)

	)

222 
	#__HAL_RTC_TAMPER_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((((
BKP
->
CSR
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

232 
	#__HAL_RTC_TAMPER_GET_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((((
BKP
->
CSR
Ë& (
BKP_CSR_TEF
)Ë!
RESET
)? 
SET
 : RESET)

	)

242 
	#__HAL_RTC_TAMPER_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë
	`SET_BIT
(
BKP
->
CSR
, 
BKP_CSR_CTE
 | 
BKP_CSR_CTI
)

	)

252 
	#__HAL_RTC_SECOND_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CRH
, (__INTERRUPT__))

	)

262 
	#__HAL_RTC_SECOND_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CRH
, (__INTERRUPT__))

	)

272 
	#__HAL_RTC_SECOND_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((((__HANDLE__)->
In°™˚
->
CRH
)& ((__INTERRUPT__)))Ë!
RESET
)? 
SET
 : RESET)

	)

282 
	#__HAL_RTC_SECOND_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
CRL
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

292 
	#__HAL_RTC_SECOND_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
CRL
Ë~(__FLAG__)

	)

302 
	#__HAL_RTC_OVERFLOW_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`SET_BIT
((__HANDLE__)->
In°™˚
->
CRH
, (__INTERRUPT__))

	)

312 
	#__HAL_RTC_OVERFLOW_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë
	`CLEAR_BIT
((__HANDLE__)->
In°™˚
->
CRH
, (__INTERRUPT__))

	)

322 
	#__HAL_RTC_OVERFLOW_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((((__HANDLE__)->
In°™˚
->
CRH
)& ((__INTERRUPT__))ËË!
RESET
)? 
SET
 : RESET)

	)

332 
	#__HAL_RTC_OVERFLOW_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((((__HANDLE__)->
In°™˚
->
CRL
Ë& (__FLAG__)Ë!
RESET
)? 
SET
 : RESET)

	)

342 
	#__HAL_RTC_OVERFLOW_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
CRL
Ë~(__FLAG__)

	)

357 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
 *
sTam≥r
);

358 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëTam≥r_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
 *
sTam≥r
);

359 
HAL_SètusTy≥Def
 
HAL_RTCEx_Dó˘iv©eTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Tam≥r
);

360 
HAL_RTCEx_Tam≥rIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
);

361 
HAL_RTCEx_Tam≥r1EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

362 
HAL_SètusTy≥Def
 
HAL_RTCEx_PﬁlF‹Tam≥r1Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
);

372 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëSec⁄d_IT
(
RTC_H™dÀTy≥Def
 *
hπc
);

373 
HAL_SètusTy≥Def
 
HAL_RTCEx_Dó˘iv©eSec⁄d
(
RTC_H™dÀTy≥Def
 *
hπc
);

374 
HAL_RTCEx_RTCIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
);

375 
HAL_RTCEx_RTCEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

376 
HAL_RTCEx_RTCEvítEº‹CÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
);

386 
HAL_RTCEx_BKUPWrôe
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
, uöt32_à
D©a
);

387 
uöt32_t
 
HAL_RTCEx_BKUPRód
(
RTC_H™dÀTy≥Def
 *
hπc
, uöt32_à
BackupRegi°î
);

389 
HAL_SètusTy≥Def
 
HAL_RTCEx_SëSmoŸhCÆib
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
SmoŸhCÆibPîiod
, uöt32_à
SmoŸhCÆibPlusPul£s
, uöt32_à
SmouthCÆibMöusPul£sVÆue
);

406 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim.h

21 #i‚de‡
STM32F1xx_HAL_TIM_H


22 
	#STM32F1xx_HAL_TIM_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

49 
uöt32_t
 
PªsˇÀr
;

52 
uöt32_t
 
Cou¡îMode
;

55 
uöt32_t
 
Pîiod
;

59 
uöt32_t
 
ClockDivisi⁄
;

62 
uöt32_t
 
Rïëôi⁄Cou¡î
;

71 
uöt32_t
 
AutoRñﬂdPªlﬂd
;

73 } 
	tTIM_Ba£_InôTy≥Def
;

80 
uöt32_t
 
OCMode
;

83 
uöt32_t
 
Pul£
;

86 
uöt32_t
 
OCPﬁ¨ôy
;

89 
uöt32_t
 
OCNPﬁ¨ôy
;

93 
uöt32_t
 
OCFa°Mode
;

98 
uöt32_t
 
OCIdÀSèã
;

102 
uöt32_t
 
OCNIdÀSèã
;

105 } 
	tTIM_OC_InôTy≥Def
;

112 
uöt32_t
 
OCMode
;

115 
uöt32_t
 
Pul£
;

118 
uöt32_t
 
OCPﬁ¨ôy
;

121 
uöt32_t
 
OCNPﬁ¨ôy
;

125 
uöt32_t
 
OCIdÀSèã
;

129 
uöt32_t
 
OCNIdÀSèã
;

133 
uöt32_t
 
ICPﬁ¨ôy
;

136 
uöt32_t
 
ICSñe˘i⁄
;

139 
uöt32_t
 
ICFûãr
;

141 } 
	tTIM_O√Pul£_InôTy≥Def
;

148 
uöt32_t
 
ICPﬁ¨ôy
;

151 
uöt32_t
 
ICSñe˘i⁄
;

154 
uöt32_t
 
ICPªsˇÀr
;

157 
uöt32_t
 
ICFûãr
;

159 } 
	tTIM_IC_InôTy≥Def
;

166 
uöt32_t
 
EncodîMode
;

169 
uöt32_t
 
IC1Pﬁ¨ôy
;

172 
uöt32_t
 
IC1Sñe˘i⁄
;

175 
uöt32_t
 
IC1PªsˇÀr
;

178 
uöt32_t
 
IC1Fûãr
;

181 
uöt32_t
 
IC2Pﬁ¨ôy
;

184 
uöt32_t
 
IC2Sñe˘i⁄
;

187 
uöt32_t
 
IC2PªsˇÀr
;

190 
uöt32_t
 
IC2Fûãr
;

192 } 
	tTIM_Encodî_InôTy≥Def
;

199 
uöt32_t
 
ClockSour˚
;

201 
uöt32_t
 
ClockPﬁ¨ôy
;

203 
uöt32_t
 
ClockPªsˇÀr
;

205 
uöt32_t
 
ClockFûãr
;

207 } 
	tTIM_ClockC⁄figTy≥Def
;

214 
uöt32_t
 
CÀ¨I≈utSèã
;

216 
uöt32_t
 
CÀ¨I≈utSour˚
;

218 
uöt32_t
 
CÀ¨I≈utPﬁ¨ôy
;

220 
uöt32_t
 
CÀ¨I≈utPªsˇÀr
;

222 
uöt32_t
 
CÀ¨I≈utFûãr
;

224 } 
	tTIM_CÀ¨I≈utC⁄figTy≥Def
;

231 
uöt32_t
 
Ma°îOuçutTriggî
;

233 
uöt32_t
 
Ma°îSœveMode
;

240 } 
	tTIM_Ma°îC⁄figTy≥Def
;

247 
uöt32_t
 
SœveMode
;

249 
uöt32_t
 
I≈utTriggî
;

251 
uöt32_t
 
TriggîPﬁ¨ôy
;

253 
uöt32_t
 
TriggîPªsˇÀr
;

255 
uöt32_t
 
TriggîFûãr
;

258 } 
	tTIM_SœveC⁄figTy≥Def
;

267 
uöt32_t
 
OffSèãRunMode
;

269 
uöt32_t
 
OffSèãIDLEMode
;

271 
uöt32_t
 
LockLevñ
;

273 
uöt32_t
 
DódTime
;

275 
uöt32_t
 
BªakSèã
;

277 
uöt32_t
 
BªakPﬁ¨ôy
;

279 
uöt32_t
 
BªakFûãr
;

281 
uöt32_t
 
Autom©icOuçut
;

283 } 
	tTIM_BªakDódTimeC⁄figTy≥Def
;

290 
HAL_TIM_STATE_RESET
 = 0x00U,

291 
HAL_TIM_STATE_READY
 = 0x01U,

292 
HAL_TIM_STATE_BUSY
 = 0x02U,

293 
HAL_TIM_STATE_TIMEOUT
 = 0x03U,

294 
HAL_TIM_STATE_ERROR
 = 0x04U

295 } 
	tHAL_TIM_SèãTy≥Def
;

302 
HAL_TIM_CHANNEL_STATE_RESET
 = 0x00U,

303 
HAL_TIM_CHANNEL_STATE_READY
 = 0x01U,

304 
HAL_TIM_CHANNEL_STATE_BUSY
 = 0x02U,

305 } 
	tHAL_TIM_Ch™√lSèãTy≥Def
;

312 
HAL_DMA_BURST_STATE_RESET
 = 0x00U,

313 
HAL_DMA_BURST_STATE_READY
 = 0x01U,

314 
HAL_DMA_BURST_STATE_BUSY
 = 0x02U,

315 } 
	tHAL_TIM_DMABur°SèãTy≥Def
;

322 
HAL_TIM_ACTIVE_CHANNEL_1
 = 0x01U,

323 
HAL_TIM_ACTIVE_CHANNEL_2
 = 0x02U,

324 
HAL_TIM_ACTIVE_CHANNEL_3
 = 0x04U,

325 
HAL_TIM_ACTIVE_CHANNEL_4
 = 0x08U,

326 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
 = 0x00U

327 } 
	tHAL_TIM_A˘iveCh™√l
;

332 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

333 
__TIM_H™dÀTy≥Def


338 
TIM_Ty≥Def
 *
In°™˚
;

339 
TIM_Ba£_InôTy≥Def
 
Inô
;

340 
HAL_TIM_A˘iveCh™√l
 
Ch™√l
;

341 
DMA_H™dÀTy≥Def
 *
hdma
[7];

343 
HAL_LockTy≥Def
 
Lock
;

344 
__IO
 
HAL_TIM_SèãTy≥Def
 
Sèã
;

345 
__IO
 
HAL_TIM_Ch™√lSèãTy≥Def
 
Ch™√lSèã
[4];

346 
__IO
 
HAL_TIM_Ch™√lSèãTy≥Def
 
Ch™√lNSèã
[4];

347 
__IO
 
HAL_TIM_DMABur°SèãTy≥Def
 
DMABur°Sèã
;

349 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

350 (* 
Ba£_M•InôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

351 (* 
Ba£_M•DeInôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

352 (* 
IC_M•InôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

353 (* 
IC_M•DeInôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

354 (* 
OC_M•InôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

355 (* 
OC_M•DeInôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

356 (* 
PWM_M•InôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

357 (* 
PWM_M•DeInôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

358 (* 
O√Pul£_M•InôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

359 (* 
O√Pul£_M•DeInôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

360 (* 
Encodî_M•InôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

361 (* 
Encodî_M•DeInôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

362 (* 
HÆlSís‹_M•InôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

363 (* 
HÆlSís‹_M•DeInôCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

364 (* 
PîiodEœp£dCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

365 (* 
PîiodEœp£dHÆfC∂tCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

366 (* 
TriggîCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

367 (* 
TriggîHÆfC∂tCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

368 (* 
IC_C≠tuªCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

369 (* 
IC_C≠tuªHÆfC∂tCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

370 (* 
OC_DñayEœp£dCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

371 (* 
PWM_Pul£FöishedCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

372 (* 
PWM_Pul£FöishedHÆfC∂tCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

373 (* 
Eº‹CÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

374 (* 
Commuèti⁄CÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

375 (* 
Commuèti⁄HÆfC∂tCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

376 (* 
BªakCÆlback
)(
__TIM_H™dÀTy≥Def
 *
htim
);

378 } 
	tTIM_H™dÀTy≥Def
;

380 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

386 
HAL_TIM_BASE_MSPINIT_CB_ID
 = 0x00U

387 , 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 = 0x01U

388 , 
HAL_TIM_IC_MSPINIT_CB_ID
 = 0x02U

389 , 
HAL_TIM_IC_MSPDEINIT_CB_ID
 = 0x03U

390 , 
HAL_TIM_OC_MSPINIT_CB_ID
 = 0x04U

391 , 
HAL_TIM_OC_MSPDEINIT_CB_ID
 = 0x05U

392 , 
HAL_TIM_PWM_MSPINIT_CB_ID
 = 0x06U

393 , 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 = 0x07U

394 , 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 = 0x08U

395 , 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 = 0x09U

396 , 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 = 0x0AU

397 , 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 = 0x0BU

398 , 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 = 0x0CU

399 , 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 = 0x0DU

400 , 
HAL_TIM_PERIOD_ELAPSED_CB_ID
 = 0x0EU

401 , 
HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID
 = 0x0FU

402 , 
HAL_TIM_TRIGGER_CB_ID
 = 0x10U

403 , 
HAL_TIM_TRIGGER_HALF_CB_ID
 = 0x11U

405 , 
HAL_TIM_IC_CAPTURE_CB_ID
 = 0x12U

406 , 
HAL_TIM_IC_CAPTURE_HALF_CB_ID
 = 0x13U

407 , 
HAL_TIM_OC_DELAY_ELAPSED_CB_ID
 = 0x14U

408 , 
HAL_TIM_PWM_PULSE_FINISHED_CB_ID
 = 0x15U

409 , 
HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID
 = 0x16U

410 , 
HAL_TIM_ERROR_CB_ID
 = 0x17U

411 , 
HAL_TIM_COMMUTATION_CB_ID
 = 0x18U

412 , 
HAL_TIM_COMMUTATION_HALF_CB_ID
 = 0x19U

413 , 
HAL_TIM_BREAK_CB_ID
 = 0x1AU

414 } 
	tHAL_TIM_CÆlbackIDTy≥Def
;

419 (*
pTIM_CÆlbackTy≥Def
)(
	tTIM_H™dÀTy≥Def
 *
	thtim
);

436 
	#TIM_CLEARINPUTSOURCE_NONE
 0x00000000U

	)

437 
	#TIM_CLEARINPUTSOURCE_ETR
 0x00000001U

	)

445 
	#TIM_DMABASE_CR1
 0x00000000U

	)

446 
	#TIM_DMABASE_CR2
 0x00000001U

	)

447 
	#TIM_DMABASE_SMCR
 0x00000002U

	)

448 
	#TIM_DMABASE_DIER
 0x00000003U

	)

449 
	#TIM_DMABASE_SR
 0x00000004U

	)

450 
	#TIM_DMABASE_EGR
 0x00000005U

	)

451 
	#TIM_DMABASE_CCMR1
 0x00000006U

	)

452 
	#TIM_DMABASE_CCMR2
 0x00000007U

	)

453 
	#TIM_DMABASE_CCER
 0x00000008U

	)

454 
	#TIM_DMABASE_CNT
 0x00000009U

	)

455 
	#TIM_DMABASE_PSC
 0x0000000AU

	)

456 
	#TIM_DMABASE_ARR
 0x0000000BU

	)

457 
	#TIM_DMABASE_RCR
 0x0000000CU

	)

458 
	#TIM_DMABASE_CCR1
 0x0000000DU

	)

459 
	#TIM_DMABASE_CCR2
 0x0000000EU

	)

460 
	#TIM_DMABASE_CCR3
 0x0000000FU

	)

461 
	#TIM_DMABASE_CCR4
 0x00000010U

	)

462 
	#TIM_DMABASE_BDTR
 0x00000011U

	)

463 
	#TIM_DMABASE_DCR
 0x00000012U

	)

464 
	#TIM_DMABASE_DMAR
 0x00000013U

	)

472 
	#TIM_EVENTSOURCE_UPDATE
 
TIM_EGR_UG


	)

473 
	#TIM_EVENTSOURCE_CC1
 
TIM_EGR_CC1G


	)

474 
	#TIM_EVENTSOURCE_CC2
 
TIM_EGR_CC2G


	)

475 
	#TIM_EVENTSOURCE_CC3
 
TIM_EGR_CC3G


	)

476 
	#TIM_EVENTSOURCE_CC4
 
TIM_EGR_CC4G


	)

477 
	#TIM_EVENTSOURCE_COM
 
TIM_EGR_COMG


	)

478 
	#TIM_EVENTSOURCE_TRIGGER
 
TIM_EGR_TG


	)

479 
	#TIM_EVENTSOURCE_BREAK
 
TIM_EGR_BG


	)

487 
	#TIM_INPUTCHANNELPOLARITY_RISING
 0x00000000U

	)

488 
	#TIM_INPUTCHANNELPOLARITY_FALLING
 
TIM_CCER_CC1P


	)

489 
	#TIM_INPUTCHANNELPOLARITY_BOTHEDGE
 (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
Ë

	)

497 
	#TIM_ETRPOLARITY_INVERTED
 
TIM_SMCR_ETP


	)

498 
	#TIM_ETRPOLARITY_NONINVERTED
 0x00000000U

	)

506 
	#TIM_ETRPRESCALER_DIV1
 0x00000000U

	)

507 
	#TIM_ETRPRESCALER_DIV2
 
TIM_SMCR_ETPS_0


	)

508 
	#TIM_ETRPRESCALER_DIV4
 
TIM_SMCR_ETPS_1


	)

509 
	#TIM_ETRPRESCALER_DIV8
 
TIM_SMCR_ETPS


	)

517 
	#TIM_COUNTERMODE_UP
 0x00000000U

	)

518 
	#TIM_COUNTERMODE_DOWN
 
TIM_CR1_DIR


	)

519 
	#TIM_COUNTERMODE_CENTERALIGNED1
 
TIM_CR1_CMS_0


	)

520 
	#TIM_COUNTERMODE_CENTERALIGNED2
 
TIM_CR1_CMS_1


	)

521 
	#TIM_COUNTERMODE_CENTERALIGNED3
 
TIM_CR1_CMS


	)

529 
	#TIM_CLOCKDIVISION_DIV1
 0x00000000U

	)

530 
	#TIM_CLOCKDIVISION_DIV2
 
TIM_CR1_CKD_0


	)

531 
	#TIM_CLOCKDIVISION_DIV4
 
TIM_CR1_CKD_1


	)

539 
	#TIM_OUTPUTSTATE_DISABLE
 0x00000000U

	)

540 
	#TIM_OUTPUTSTATE_ENABLE
 
TIM_CCER_CC1E


	)

548 
	#TIM_AUTORELOAD_PRELOAD_DISABLE
 0x00000000U

	)

549 
	#TIM_AUTORELOAD_PRELOAD_ENABLE
 
TIM_CR1_ARPE


	)

558 
	#TIM_OCFAST_DISABLE
 0x00000000U

	)

559 
	#TIM_OCFAST_ENABLE
 
TIM_CCMR1_OC1FE


	)

567 
	#TIM_OUTPUTNSTATE_DISABLE
 0x00000000U

	)

568 
	#TIM_OUTPUTNSTATE_ENABLE
 
TIM_CCER_CC1NE


	)

576 
	#TIM_OCPOLARITY_HIGH
 0x00000000U

	)

577 
	#TIM_OCPOLARITY_LOW
 
TIM_CCER_CC1P


	)

585 
	#TIM_OCNPOLARITY_HIGH
 0x00000000U

	)

586 
	#TIM_OCNPOLARITY_LOW
 
TIM_CCER_CC1NP


	)

594 
	#TIM_OCIDLESTATE_SET
 
TIM_CR2_OIS1


	)

595 
	#TIM_OCIDLESTATE_RESET
 0x00000000U

	)

603 
	#TIM_OCNIDLESTATE_SET
 
TIM_CR2_OIS1N


	)

604 
	#TIM_OCNIDLESTATE_RESET
 0x00000000U

	)

612 
	#TIM_ICPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

613 
	#TIM_ICPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

614 
	#TIM_ICPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

622 
	#TIM_ENCODERINPUTPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

623 
	#TIM_ENCODERINPUTPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

631 
	#TIM_ICSELECTION_DIRECTTI
 
TIM_CCMR1_CC1S_0


	)

633 
	#TIM_ICSELECTION_INDIRECTTI
 
TIM_CCMR1_CC1S_1


	)

635 
	#TIM_ICSELECTION_TRC
 
TIM_CCMR1_CC1S


	)

643 
	#TIM_ICPSC_DIV1
 0x00000000U

	)

644 
	#TIM_ICPSC_DIV2
 
TIM_CCMR1_IC1PSC_0


	)

645 
	#TIM_ICPSC_DIV4
 
TIM_CCMR1_IC1PSC_1


	)

646 
	#TIM_ICPSC_DIV8
 
TIM_CCMR1_IC1PSC


	)

654 
	#TIM_OPMODE_SINGLE
 
TIM_CR1_OPM


	)

655 
	#TIM_OPMODE_REPETITIVE
 0x00000000U

	)

663 
	#TIM_ENCODERMODE_TI1
 
TIM_SMCR_SMS_0


	)

664 
	#TIM_ENCODERMODE_TI2
 
TIM_SMCR_SMS_1


	)

665 
	#TIM_ENCODERMODE_TI12
 (
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
Ë

	)

673 
	#TIM_IT_UPDATE
 
TIM_DIER_UIE


	)

674 
	#TIM_IT_CC1
 
TIM_DIER_CC1IE


	)

675 
	#TIM_IT_CC2
 
TIM_DIER_CC2IE


	)

676 
	#TIM_IT_CC3
 
TIM_DIER_CC3IE


	)

677 
	#TIM_IT_CC4
 
TIM_DIER_CC4IE


	)

678 
	#TIM_IT_COM
 
TIM_DIER_COMIE


	)

679 
	#TIM_IT_TRIGGER
 
TIM_DIER_TIE


	)

680 
	#TIM_IT_BREAK
 
TIM_DIER_BIE


	)

688 
	#TIM_COMMUTATION_TRGI
 
TIM_CR2_CCUS


	)

689 
	#TIM_COMMUTATION_SOFTWARE
 0x00000000U

	)

697 
	#TIM_DMA_UPDATE
 
TIM_DIER_UDE


	)

698 
	#TIM_DMA_CC1
 
TIM_DIER_CC1DE


	)

699 
	#TIM_DMA_CC2
 
TIM_DIER_CC2DE


	)

700 
	#TIM_DMA_CC3
 
TIM_DIER_CC3DE


	)

701 
	#TIM_DMA_CC4
 
TIM_DIER_CC4DE


	)

702 
	#TIM_DMA_COM
 
TIM_DIER_COMDE


	)

703 
	#TIM_DMA_TRIGGER
 
TIM_DIER_TDE


	)

711 
	#TIM_FLAG_UPDATE
 
TIM_SR_UIF


	)

712 
	#TIM_FLAG_CC1
 
TIM_SR_CC1IF


	)

713 
	#TIM_FLAG_CC2
 
TIM_SR_CC2IF


	)

714 
	#TIM_FLAG_CC3
 
TIM_SR_CC3IF


	)

715 
	#TIM_FLAG_CC4
 
TIM_SR_CC4IF


	)

716 
	#TIM_FLAG_COM
 
TIM_SR_COMIF


	)

717 
	#TIM_FLAG_TRIGGER
 
TIM_SR_TIF


	)

718 
	#TIM_FLAG_BREAK
 
TIM_SR_BIF


	)

719 
	#TIM_FLAG_CC1OF
 
TIM_SR_CC1OF


	)

720 
	#TIM_FLAG_CC2OF
 
TIM_SR_CC2OF


	)

721 
	#TIM_FLAG_CC3OF
 
TIM_SR_CC3OF


	)

722 
	#TIM_FLAG_CC4OF
 
TIM_SR_CC4OF


	)

730 
	#TIM_CHANNEL_1
 0x00000000U

	)

731 
	#TIM_CHANNEL_2
 0x00000004U

	)

732 
	#TIM_CHANNEL_3
 0x00000008U

	)

733 
	#TIM_CHANNEL_4
 0x0000000CU

	)

734 
	#TIM_CHANNEL_ALL
 0x0000003CU

	)

742 
	#TIM_CLOCKSOURCE_ETRMODE2
 
TIM_SMCR_ETPS_1


	)

743 
	#TIM_CLOCKSOURCE_INTERNAL
 
TIM_SMCR_ETPS_0


	)

744 
	#TIM_CLOCKSOURCE_ITR0
 
TIM_TS_ITR0


	)

745 
	#TIM_CLOCKSOURCE_ITR1
 
TIM_TS_ITR1


	)

746 
	#TIM_CLOCKSOURCE_ITR2
 
TIM_TS_ITR2


	)

747 
	#TIM_CLOCKSOURCE_ITR3
 
TIM_TS_ITR3


	)

748 
	#TIM_CLOCKSOURCE_TI1ED
 
TIM_TS_TI1F_ED


	)

749 
	#TIM_CLOCKSOURCE_TI1
 
TIM_TS_TI1FP1


	)

750 
	#TIM_CLOCKSOURCE_TI2
 
TIM_TS_TI2FP2


	)

751 
	#TIM_CLOCKSOURCE_ETRMODE1
 
TIM_TS_ETRF


	)

759 
	#TIM_CLOCKPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

760 
	#TIM_CLOCKPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

761 
	#TIM_CLOCKPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

762 
	#TIM_CLOCKPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

763 
	#TIM_CLOCKPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

771 
	#TIM_CLOCKPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

772 
	#TIM_CLOCKPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

773 
	#TIM_CLOCKPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

774 
	#TIM_CLOCKPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

782 
	#TIM_CLEARINPUTPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

783 
	#TIM_CLEARINPUTPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

791 
	#TIM_CLEARINPUTPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

792 
	#TIM_CLEARINPUTPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

793 
	#TIM_CLEARINPUTPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

794 
	#TIM_CLEARINPUTPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

802 
	#TIM_OSSR_ENABLE
 
TIM_BDTR_OSSR


	)

803 
	#TIM_OSSR_DISABLE
 0x00000000U

	)

811 
	#TIM_OSSI_ENABLE
 
TIM_BDTR_OSSI


	)

812 
	#TIM_OSSI_DISABLE
 0x00000000U

	)

819 
	#TIM_LOCKLEVEL_OFF
 0x00000000U

	)

820 
	#TIM_LOCKLEVEL_1
 
TIM_BDTR_LOCK_0


	)

821 
	#TIM_LOCKLEVEL_2
 
TIM_BDTR_LOCK_1


	)

822 
	#TIM_LOCKLEVEL_3
 
TIM_BDTR_LOCK


	)

830 
	#TIM_BREAK_ENABLE
 
TIM_BDTR_BKE


	)

831 
	#TIM_BREAK_DISABLE
 0x00000000U

	)

839 
	#TIM_BREAKPOLARITY_LOW
 0x00000000U

	)

840 
	#TIM_BREAKPOLARITY_HIGH
 
TIM_BDTR_BKP


	)

848 
	#TIM_AUTOMATICOUTPUT_DISABLE
 0x00000000U

	)

849 
	#TIM_AUTOMATICOUTPUT_ENABLE
 
TIM_BDTR_AOE


	)

858 
	#TIM_TRGO_RESET
 0x00000000U

	)

859 
	#TIM_TRGO_ENABLE
 
TIM_CR2_MMS_0


	)

860 
	#TIM_TRGO_UPDATE
 
TIM_CR2_MMS_1


	)

861 
	#TIM_TRGO_OC1
 (
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
Ë

	)

862 
	#TIM_TRGO_OC1REF
 
TIM_CR2_MMS_2


	)

863 
	#TIM_TRGO_OC2REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_0
Ë

	)

864 
	#TIM_TRGO_OC3REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
Ë

	)

865 
	#TIM_TRGO_OC4REF
 (
TIM_CR2_MMS_2
 | 
TIM_CR2_MMS_1
 | 
TIM_CR2_MMS_0
Ë

	)

873 
	#TIM_MASTERSLAVEMODE_ENABLE
 
TIM_SMCR_MSM


	)

874 
	#TIM_MASTERSLAVEMODE_DISABLE
 0x00000000U

	)

882 
	#TIM_SLAVEMODE_DISABLE
 0x00000000U

	)

883 
	#TIM_SLAVEMODE_RESET
 
TIM_SMCR_SMS_2


	)

884 
	#TIM_SLAVEMODE_GATED
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_0
Ë

	)

885 
	#TIM_SLAVEMODE_TRIGGER
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_1
Ë

	)

886 
	#TIM_SLAVEMODE_EXTERNAL1
 (
TIM_SMCR_SMS_2
 | 
TIM_SMCR_SMS_1
 | 
TIM_SMCR_SMS_0
Ë

	)

894 
	#TIM_OCMODE_TIMING
 0x00000000U

	)

895 
	#TIM_OCMODE_ACTIVE
 
TIM_CCMR1_OC1M_0


	)

896 
	#TIM_OCMODE_INACTIVE
 
TIM_CCMR1_OC1M_1


	)

897 
	#TIM_OCMODE_TOGGLE
 (
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_0
Ë

	)

898 
	#TIM_OCMODE_PWM1
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_1
Ë

	)

899 
	#TIM_OCMODE_PWM2
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_1
 | 
TIM_CCMR1_OC1M_0
Ë

	)

900 
	#TIM_OCMODE_FORCED_ACTIVE
 (
TIM_CCMR1_OC1M_2
 | 
TIM_CCMR1_OC1M_0
Ë

	)

901 
	#TIM_OCMODE_FORCED_INACTIVE
 
TIM_CCMR1_OC1M_2


	)

909 
	#TIM_TS_ITR0
 0x00000000U

	)

910 
	#TIM_TS_ITR1
 
TIM_SMCR_TS_0


	)

911 
	#TIM_TS_ITR2
 
TIM_SMCR_TS_1


	)

912 
	#TIM_TS_ITR3
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_1
Ë

	)

913 
	#TIM_TS_TI1F_ED
 
TIM_SMCR_TS_2


	)

914 
	#TIM_TS_TI1FP1
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_2
Ë

	)

915 
	#TIM_TS_TI2FP2
 (
TIM_SMCR_TS_1
 | 
TIM_SMCR_TS_2
Ë

	)

916 
	#TIM_TS_ETRF
 (
TIM_SMCR_TS_0
 | 
TIM_SMCR_TS_1
 | 
TIM_SMCR_TS_2
Ë

	)

917 
	#TIM_TS_NONE
 0x0000FFFFU

	)

925 
	#TIM_TRIGGERPOLARITY_INVERTED
 
TIM_ETRPOLARITY_INVERTED


	)

926 
	#TIM_TRIGGERPOLARITY_NONINVERTED
 
TIM_ETRPOLARITY_NONINVERTED


	)

927 
	#TIM_TRIGGERPOLARITY_RISING
 
TIM_INPUTCHANNELPOLARITY_RISING


	)

928 
	#TIM_TRIGGERPOLARITY_FALLING
 
TIM_INPUTCHANNELPOLARITY_FALLING


	)

929 
	#TIM_TRIGGERPOLARITY_BOTHEDGE
 
TIM_INPUTCHANNELPOLARITY_BOTHEDGE


	)

937 
	#TIM_TRIGGERPRESCALER_DIV1
 
TIM_ETRPRESCALER_DIV1


	)

938 
	#TIM_TRIGGERPRESCALER_DIV2
 
TIM_ETRPRESCALER_DIV2


	)

939 
	#TIM_TRIGGERPRESCALER_DIV4
 
TIM_ETRPRESCALER_DIV4


	)

940 
	#TIM_TRIGGERPRESCALER_DIV8
 
TIM_ETRPRESCALER_DIV8


	)

948 
	#TIM_TI1SELECTION_CH1
 0x00000000U

	)

949 
	#TIM_TI1SELECTION_XORCOMBINATION
 
TIM_CR2_TI1S


	)

957 
	#TIM_DMABURSTLENGTH_1TRANSFER
 0x00000000U

	)

958 
	#TIM_DMABURSTLENGTH_2TRANSFERS
 0x00000100U

	)

959 
	#TIM_DMABURSTLENGTH_3TRANSFERS
 0x00000200U

	)

960 
	#TIM_DMABURSTLENGTH_4TRANSFERS
 0x00000300U

	)

961 
	#TIM_DMABURSTLENGTH_5TRANSFERS
 0x00000400U

	)

962 
	#TIM_DMABURSTLENGTH_6TRANSFERS
 0x00000500U

	)

963 
	#TIM_DMABURSTLENGTH_7TRANSFERS
 0x00000600U

	)

964 
	#TIM_DMABURSTLENGTH_8TRANSFERS
 0x00000700U

	)

965 
	#TIM_DMABURSTLENGTH_9TRANSFERS
 0x00000800U

	)

966 
	#TIM_DMABURSTLENGTH_10TRANSFERS
 0x00000900U

	)

967 
	#TIM_DMABURSTLENGTH_11TRANSFERS
 0x00000A00U

	)

968 
	#TIM_DMABURSTLENGTH_12TRANSFERS
 0x00000B00U

	)

969 
	#TIM_DMABURSTLENGTH_13TRANSFERS
 0x00000C00U

	)

970 
	#TIM_DMABURSTLENGTH_14TRANSFERS
 0x00000D00U

	)

971 
	#TIM_DMABURSTLENGTH_15TRANSFERS
 0x00000E00U

	)

972 
	#TIM_DMABURSTLENGTH_16TRANSFERS
 0x00000F00U

	)

973 
	#TIM_DMABURSTLENGTH_17TRANSFERS
 0x00001000U

	)

974 
	#TIM_DMABURSTLENGTH_18TRANSFERS
 0x00001100U

	)

982 
	#TIM_DMA_ID_UPDATE
 ((
uöt16_t
Ë0x0000Ë

	)

983 
	#TIM_DMA_ID_CC1
 ((
uöt16_t
Ë0x0001Ë

	)

984 
	#TIM_DMA_ID_CC2
 ((
uöt16_t
Ë0x0002Ë

	)

985 
	#TIM_DMA_ID_CC3
 ((
uöt16_t
Ë0x0003Ë

	)

986 
	#TIM_DMA_ID_CC4
 ((
uöt16_t
Ë0x0004Ë

	)

987 
	#TIM_DMA_ID_COMMUTATION
 ((
uöt16_t
Ë0x0005Ë

	)

988 
	#TIM_DMA_ID_TRIGGER
 ((
uöt16_t
Ë0x0006Ë

	)

996 
	#TIM_CCx_ENABLE
 0x00000001U

	)

997 
	#TIM_CCx_DISABLE
 0x00000000U

	)

998 
	#TIM_CCxN_ENABLE
 0x00000004U

	)

999 
	#TIM_CCxN_DISABLE
 0x00000000U

	)

1018 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1019 
	#__HAL_TIM_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

1020 (
__HANDLE__
)->
Sèã
 = 
HAL_TIM_STATE_RESET
; \

1021 (
__HANDLE__
)->
Ch™√lSèã
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1022 (
__HANDLE__
)->
Ch™√lSèã
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1023 (
__HANDLE__
)->
Ch™√lSèã
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1024 (
__HANDLE__
)->
Ch™√lSèã
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1025 (
__HANDLE__
)->
Ch™√lNSèã
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1026 (
__HANDLE__
)->
Ch™√lNSèã
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1027 (
__HANDLE__
)->
Ch™√lNSèã
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1028 (
__HANDLE__
)->
Ch™√lNSèã
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1029 (
__HANDLE__
)->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
; \

1030 (
__HANDLE__
)->
Ba£_M•InôCÆlback
 = 
NULL
; \

1031 (
__HANDLE__
)->
Ba£_M•DeInôCÆlback
 = 
NULL
; \

1032 (
__HANDLE__
)->
IC_M•InôCÆlback
 = 
NULL
; \

1033 (
__HANDLE__
)->
IC_M•DeInôCÆlback
 = 
NULL
; \

1034 (
__HANDLE__
)->
OC_M•InôCÆlback
 = 
NULL
; \

1035 (
__HANDLE__
)->
OC_M•DeInôCÆlback
 = 
NULL
; \

1036 (
__HANDLE__
)->
PWM_M•InôCÆlback
 = 
NULL
; \

1037 (
__HANDLE__
)->
PWM_M•DeInôCÆlback
 = 
NULL
; \

1038 (
__HANDLE__
)->
O√Pul£_M•InôCÆlback
 = 
NULL
; \

1039 (
__HANDLE__
)->
O√Pul£_M•DeInôCÆlback
 = 
NULL
; \

1040 (
__HANDLE__
)->
Encodî_M•InôCÆlback
 = 
NULL
; \

1041 (
__HANDLE__
)->
Encodî_M•DeInôCÆlback
 = 
NULL
; \

1042 (
__HANDLE__
)->
HÆlSís‹_M•InôCÆlback
 = 
NULL
; \

1043 (
__HANDLE__
)->
HÆlSís‹_M•DeInôCÆlback
 = 
NULL
; \

1044 } 0)

	)

1046 
	#__HAL_TIM_RESET_HANDLE_STATE
(
__HANDLE__
) do { \

1047 (
__HANDLE__
)->
Sèã
 = 
HAL_TIM_STATE_RESET
; \

1048 (
__HANDLE__
)->
Ch™√lSèã
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1049 (
__HANDLE__
)->
Ch™√lSèã
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1050 (
__HANDLE__
)->
Ch™√lSèã
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1051 (
__HANDLE__
)->
Ch™√lSèã
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1052 (
__HANDLE__
)->
Ch™√lNSèã
[0] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1053 (
__HANDLE__
)->
Ch™√lNSèã
[1] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1054 (
__HANDLE__
)->
Ch™√lNSèã
[2] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1055 (
__HANDLE__
)->
Ch™√lNSèã
[3] = 
HAL_TIM_CHANNEL_STATE_RESET
; \

1056 (
__HANDLE__
)->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
; \

1057 } 0)

	)

1065 
	#__HAL_TIM_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
|=(
TIM_CR1_CEN
))

	)

1072 
	#__HAL_TIM_MOE_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
BDTR
|=(
TIM_BDTR_MOE
))

	)

1079 
	#__HAL_TIM_DISABLE
(
__HANDLE__
) \

1081 i‡(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxE_MASK
) == 0UL) \

1083 if(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxNE_MASK
) == 0UL) \

1085 (
__HANDLE__
)->
In°™˚
->
CR1
 &~(
TIM_CR1_CEN
); \

1088 } 0)

	)

1096 
	#__HAL_TIM_MOE_DISABLE
(
__HANDLE__
) \

1098 i‡(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxE_MASK
) == 0UL) \

1100 if(((
__HANDLE__
)->
In°™˚
->
CCER
 & 
TIM_CCER_CCxNE_MASK
) == 0UL) \

1102 (
__HANDLE__
)->
In°™˚
->
BDTR
 &~(
TIM_BDTR_MOE
); \

1105 } 0)

	)

1113 
	#__HAL_TIM_MOE_DISABLE_UNCONDITIONALLY
(
__HANDLE__
Ë(__HANDLE__)->
In°™˚
->
BDTR
 &~(
TIM_BDTR_MOE
)

	)

1129 
	#__HAL_TIM_ENABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DIER
 |(__INTERRUPT__))

	)

1145 
	#__HAL_TIM_DISABLE_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
DIER
 &~(__INTERRUPT__))

	)

1160 
	#__HAL_TIM_ENABLE_DMA
(
__HANDLE__
, 
__DMA__
Ë((__HANDLE__)->
In°™˚
->
DIER
 |(__DMA__))

	)

1175 
	#__HAL_TIM_DISABLE_DMA
(
__HANDLE__
, 
__DMA__
Ë((__HANDLE__)->
In°™˚
->
DIER
 &~(__DMA__))

	)

1195 
	#__HAL_TIM_GET_FLAG
(
__HANDLE__
, 
__FLAG__
Ë(((__HANDLE__)->
In°™˚
->
SR
 &(__FLAG__)Ë=(__FLAG__))

	)

1215 
	#__HAL_TIM_CLEAR_FLAG
(
__HANDLE__
, 
__FLAG__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__FLAG__))

	)

1232 
	#__HAL_TIM_GET_IT_SOURCE
(
__HANDLE__
, 
__INTERRUPT__
Ë((((__HANDLE__)->
In°™˚
->
DIER
 & (__INTERRUPT__)) \

1233 =(
__INTERRUPT__
)Ë? 
SET
 : 
RESET
)

	)

1249 
	#__HAL_TIM_CLEAR_IT
(
__HANDLE__
, 
__INTERRUPT__
Ë((__HANDLE__)->
In°™˚
->
SR
 = ~(__INTERRUPT__))

	)

1258 
	#__HAL_TIM_IS_TIM_COUNTING_DOWN
(
__HANDLE__
Ë(((__HANDLE__)->
In°™˚
->
CR1
 &(
TIM_CR1_DIR
)Ë=(TIM_CR1_DIR))

	)

1266 
	#__HAL_TIM_SET_PRESCALER
(
__HANDLE__
, 
__PRESC__
Ë((__HANDLE__)->
In°™˚
->
PSC
 = (__PRESC__))

	)

1274 
	#__HAL_TIM_SET_COUNTER
(
__HANDLE__
, 
__COUNTER__
Ë((__HANDLE__)->
In°™˚
->
CNT
 = (__COUNTER__))

	)

1281 
	#__HAL_TIM_GET_COUNTER
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CNT
)

	)

1289 
	#__HAL_TIM_SET_AUTORELOAD
(
__HANDLE__
, 
__AUTORELOAD__
) \

1291 (
__HANDLE__
)->
In°™˚
->
ARR
 = (
__AUTORELOAD__
); \

1292 (
__HANDLE__
)->
Inô
.
Pîiod
 = (
__AUTORELOAD__
); \

1293 } 0)

	)

1300 
	#__HAL_TIM_GET_AUTORELOAD
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
ARR
)

	)

1312 
	#__HAL_TIM_SET_CLOCKDIVISION
(
__HANDLE__
, 
__CKD__
) \

1314 (
__HANDLE__
)->
In°™˚
->
CR1
 &(~
TIM_CR1_CKD
); \

1315 (
__HANDLE__
)->
In°™˚
->
CR1
 |(
__CKD__
); \

1316 (
__HANDLE__
)->
Inô
.
ClockDivisi⁄
 = (
__CKD__
); \

1317 } 0)

	)

1327 
	#__HAL_TIM_GET_CLOCKDIVISION
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
 & 
TIM_CR1_CKD
)

	)

1346 
	#__HAL_TIM_SET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
) \

1348 
	`TIM_RESET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
)); \

1349 
	`TIM_SET_ICPRESCALERVALUE
((
__HANDLE__
), (
__CHANNEL__
), (
__ICPSC__
)); \

1350 } 0)

	)

1367 
	#__HAL_TIM_GET_ICPRESCALER
(
__HANDLE__
, 
__CHANNEL__
) \

1368 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_IC1PSC
) :\

1369 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? (((
__HANDLE__
)->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_IC2PSC
) >> 8U) :\

1370 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_IC3PSC
) :\

1371 (((
__HANDLE__
)->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_IC4PSC
)Ë>> 8U)

	)

1385 
	#__HAL_TIM_SET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
, 
__COMPARE__
) \

1386 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCR1
 = (
__COMPARE__
)) :\

1387 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCR2
 = (
__COMPARE__
)) :\

1388 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCR3
 = (
__COMPARE__
)) :\

1389 ((
__HANDLE__
)->
In°™˚
->
CCR4
 = (
__COMPARE__
)))

	)

1402 
	#__HAL_TIM_GET_COMPARE
(
__HANDLE__
, 
__CHANNEL__
) \

1403 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCR1
) :\

1404 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCR2
) :\

1405 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCR3
) :\

1406 ((
__HANDLE__
)->
In°™˚
->
CCR4
))

	)

1419 
	#__HAL_TIM_ENABLE_OCxPRELOAD
(
__HANDLE__
, 
__CHANNEL__
) \

1420 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC1PE
) :\

1421 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC2PE
) :\

1422 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC3PE
) :\

1423 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC4PE
))

	)

1436 
	#__HAL_TIM_DISABLE_OCxPRELOAD
(
__HANDLE__
, 
__CHANNEL__
) \

1437 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC1PE
) :\

1438 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC2PE
) :\

1439 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC3PE
) :\

1440 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC4PE
))

	)

1457 
	#__HAL_TIM_ENABLE_OCxFAST
(
__HANDLE__
, 
__CHANNEL__
) \

1458 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC1FE
) :\

1459 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC2FE
) :\

1460 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC3FE
) :\

1461 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC4FE
))

	)

1478 
	#__HAL_TIM_DISABLE_OCxFAST
(
__HANDLE__
, 
__CHANNEL__
) \

1479 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC1FE
) :\

1480 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC2FE
) :\

1481 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC3FE
) :\

1482 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC4FE
))

	)

1492 
	#__HAL_TIM_URS_ENABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
|
TIM_CR1_URS
)

	)

1505 
	#__HAL_TIM_URS_DISABLE
(
__HANDLE__
Ë((__HANDLE__)->
In°™˚
->
CR1
&=~
TIM_CR1_URS
)

	)

1522 
	#__HAL_TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
) \

1524 
	`TIM_RESET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
)); \

1525 
	`TIM_SET_CAPTUREPOLARITY
((
__HANDLE__
), (
__CHANNEL__
), (
__POLARITY__
)); \

1526 }0)

	)

1539 
	#TIM_CCER_CCxE_MASK
 ((
uöt32_t
)(
TIM_CCER_CC1E
 | 
TIM_CCER_CC2E
 | 
TIM_CCER_CC3E
 | 
TIM_CCER_CC4E
))

	)

1540 
	#TIM_CCER_CCxNE_MASK
 ((
uöt32_t
)(
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
))

	)

1550 
	#IS_TIM_CLEARINPUT_SOURCE
(
__MODE__
Ë(((__MODE__Ë=
TIM_CLEARINPUTSOURCE_NONE
) || \

1551 ((
__MODE__
Ë=
TIM_CLEARINPUTSOURCE_ETR
))

	)

1553 
	#IS_TIM_DMA_BASE
(
__BASE__
Ë(((__BASE__Ë=
TIM_DMABASE_CR1
) || \

1554 ((
__BASE__
Ë=
TIM_DMABASE_CR2
) || \

1555 ((
__BASE__
Ë=
TIM_DMABASE_SMCR
) || \

1556 ((
__BASE__
Ë=
TIM_DMABASE_DIER
) || \

1557 ((
__BASE__
Ë=
TIM_DMABASE_SR
) || \

1558 ((
__BASE__
Ë=
TIM_DMABASE_EGR
) || \

1559 ((
__BASE__
Ë=
TIM_DMABASE_CCMR1
) || \

1560 ((
__BASE__
Ë=
TIM_DMABASE_CCMR2
) || \

1561 ((
__BASE__
Ë=
TIM_DMABASE_CCER
) || \

1562 ((
__BASE__
Ë=
TIM_DMABASE_CNT
) || \

1563 ((
__BASE__
Ë=
TIM_DMABASE_PSC
) || \

1564 ((
__BASE__
Ë=
TIM_DMABASE_ARR
) || \

1565 ((
__BASE__
Ë=
TIM_DMABASE_RCR
) || \

1566 ((
__BASE__
Ë=
TIM_DMABASE_CCR1
) || \

1567 ((
__BASE__
Ë=
TIM_DMABASE_CCR2
) || \

1568 ((
__BASE__
Ë=
TIM_DMABASE_CCR3
) || \

1569 ((
__BASE__
Ë=
TIM_DMABASE_CCR4
) || \

1570 ((
__BASE__
Ë=
TIM_DMABASE_BDTR
))

	)

1572 
	#IS_TIM_EVENT_SOURCE
(
__SOURCE__
Ë((((__SOURCE__Ë& 0xFFFFFF00UË=0x00000000UË&& ((__SOURCE__Ë!0x00000000U))

	)

1574 
	#IS_TIM_COUNTER_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_COUNTERMODE_UP
) || \

1575 ((
__MODE__
Ë=
TIM_COUNTERMODE_DOWN
) || \

1576 ((
__MODE__
Ë=
TIM_COUNTERMODE_CENTERALIGNED1
) || \

1577 ((
__MODE__
Ë=
TIM_COUNTERMODE_CENTERALIGNED2
) || \

1578 ((
__MODE__
Ë=
TIM_COUNTERMODE_CENTERALIGNED3
))

	)

1580 
	#IS_TIM_CLOCKDIVISION_DIV
(
__DIV__
Ë(((__DIV__Ë=
TIM_CLOCKDIVISION_DIV1
) || \

1581 ((
__DIV__
Ë=
TIM_CLOCKDIVISION_DIV2
) || \

1582 ((
__DIV__
Ë=
TIM_CLOCKDIVISION_DIV4
))

	)

1584 
	#IS_TIM_AUTORELOAD_PRELOAD
(
PRELOAD
Ë(((PRELOADË=
TIM_AUTORELOAD_PRELOAD_DISABLE
) || \

1585 ((
PRELOAD
Ë=
TIM_AUTORELOAD_PRELOAD_ENABLE
))

	)

1587 
	#IS_TIM_FAST_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_OCFAST_DISABLE
) || \

1588 ((
__STATE__
Ë=
TIM_OCFAST_ENABLE
))

	)

1590 
	#IS_TIM_OC_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_OCPOLARITY_HIGH
) || \

1591 ((
__POLARITY__
Ë=
TIM_OCPOLARITY_LOW
))

	)

1593 
	#IS_TIM_OCN_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_OCNPOLARITY_HIGH
) || \

1594 ((
__POLARITY__
Ë=
TIM_OCNPOLARITY_LOW
))

	)

1596 
	#IS_TIM_OCIDLE_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_OCIDLESTATE_SET
) || \

1597 ((
__STATE__
Ë=
TIM_OCIDLESTATE_RESET
))

	)

1599 
	#IS_TIM_OCNIDLE_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_OCNIDLESTATE_SET
) || \

1600 ((
__STATE__
Ë=
TIM_OCNIDLESTATE_RESET
))

	)

1602 
	#IS_TIM_ENCODERINPUT_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_ENCODERINPUTPOLARITY_RISING
) || \

1603 ((
__POLARITY__
Ë=
TIM_ENCODERINPUTPOLARITY_FALLING
))

	)

1605 
	#IS_TIM_IC_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_ICPOLARITY_RISING
) || \

1606 ((
__POLARITY__
Ë=
TIM_ICPOLARITY_FALLING
) || \

1607 ((
__POLARITY__
Ë=
TIM_ICPOLARITY_BOTHEDGE
))

	)

1609 
	#IS_TIM_IC_SELECTION
(
__SELECTION__
Ë(((__SELECTION__Ë=
TIM_ICSELECTION_DIRECTTI
) || \

1610 ((
__SELECTION__
Ë=
TIM_ICSELECTION_INDIRECTTI
) || \

1611 ((
__SELECTION__
Ë=
TIM_ICSELECTION_TRC
))

	)

1613 
	#IS_TIM_IC_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_ICPSC_DIV1
) || \

1614 ((
__PRESCALER__
Ë=
TIM_ICPSC_DIV2
) || \

1615 ((
__PRESCALER__
Ë=
TIM_ICPSC_DIV4
) || \

1616 ((
__PRESCALER__
Ë=
TIM_ICPSC_DIV8
))

	)

1618 
	#IS_TIM_OPM_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_OPMODE_SINGLE
) || \

1619 ((
__MODE__
Ë=
TIM_OPMODE_REPETITIVE
))

	)

1621 
	#IS_TIM_ENCODER_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_ENCODERMODE_TI1
) || \

1622 ((
__MODE__
Ë=
TIM_ENCODERMODE_TI2
) || \

1623 ((
__MODE__
Ë=
TIM_ENCODERMODE_TI12
))

	)

1625 
	#IS_TIM_DMA_SOURCE
(
__SOURCE__
Ë((((__SOURCE__Ë& 0xFFFF80FFUË=0x00000000UË&& ((__SOURCE__Ë!0x00000000U))

	)

1627 
	#IS_TIM_CHANNELS
(
__CHANNEL__
Ë(((__CHANNEL__Ë=
TIM_CHANNEL_1
) || \

1628 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
) || \

1629 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
) || \

1630 ((
__CHANNEL__
Ë=
TIM_CHANNEL_4
) || \

1631 ((
__CHANNEL__
Ë=
TIM_CHANNEL_ALL
))

	)

1633 
	#IS_TIM_OPM_CHANNELS
(
__CHANNEL__
Ë(((__CHANNEL__Ë=
TIM_CHANNEL_1
) || \

1634 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
))

	)

1636 
	#IS_TIM_COMPLEMENTARY_CHANNELS
(
__CHANNEL__
Ë(((__CHANNEL__Ë=
TIM_CHANNEL_1
) || \

1637 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
) || \

1638 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
))

	)

1640 
	#IS_TIM_CLOCKSOURCE
(
__CLOCK__
Ë(((__CLOCK__Ë=
TIM_CLOCKSOURCE_INTERNAL
) || \

1641 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ETRMODE2
) || \

1642 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR0
) || \

1643 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR1
) || \

1644 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR2
) || \

1645 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ITR3
) || \

1646 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_TI1ED
) || \

1647 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_TI1
) || \

1648 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_TI2
) || \

1649 ((
__CLOCK__
Ë=
TIM_CLOCKSOURCE_ETRMODE1
))

	)

1651 
	#IS_TIM_CLOCKPOLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_CLOCKPOLARITY_INVERTED
) || \

1652 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_NONINVERTED
) || \

1653 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_RISING
) || \

1654 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_FALLING
) || \

1655 ((
__POLARITY__
Ë=
TIM_CLOCKPOLARITY_BOTHEDGE
))

	)

1657 
	#IS_TIM_CLOCKPRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_CLOCKPRESCALER_DIV1
) || \

1658 ((
__PRESCALER__
Ë=
TIM_CLOCKPRESCALER_DIV2
) || \

1659 ((
__PRESCALER__
Ë=
TIM_CLOCKPRESCALER_DIV4
) || \

1660 ((
__PRESCALER__
Ë=
TIM_CLOCKPRESCALER_DIV8
))

	)

1662 
	#IS_TIM_CLOCKFILTER
(
__ICFILTER__
Ë((__ICFILTER__Ë<0xFU)

	)

1664 
	#IS_TIM_CLEARINPUT_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_CLEARINPUTPOLARITY_INVERTED
) || \

1665 ((
__POLARITY__
Ë=
TIM_CLEARINPUTPOLARITY_NONINVERTED
))

	)

1667 
	#IS_TIM_CLEARINPUT_PRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_CLEARINPUTPRESCALER_DIV1
) || \

1668 ((
__PRESCALER__
Ë=
TIM_CLEARINPUTPRESCALER_DIV2
) || \

1669 ((
__PRESCALER__
Ë=
TIM_CLEARINPUTPRESCALER_DIV4
) || \

1670 ((
__PRESCALER__
Ë=
TIM_CLEARINPUTPRESCALER_DIV8
))

	)

1672 
	#IS_TIM_CLEARINPUT_FILTER
(
__ICFILTER__
Ë((__ICFILTER__Ë<0xFU)

	)

1674 
	#IS_TIM_OSSR_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_OSSR_ENABLE
) || \

1675 ((
__STATE__
Ë=
TIM_OSSR_DISABLE
))

	)

1677 
	#IS_TIM_OSSI_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_OSSI_ENABLE
) || \

1678 ((
__STATE__
Ë=
TIM_OSSI_DISABLE
))

	)

1680 
	#IS_TIM_LOCK_LEVEL
(
__LEVEL__
Ë(((__LEVEL__Ë=
TIM_LOCKLEVEL_OFF
) || \

1681 ((
__LEVEL__
Ë=
TIM_LOCKLEVEL_1
) || \

1682 ((
__LEVEL__
Ë=
TIM_LOCKLEVEL_2
) || \

1683 ((
__LEVEL__
Ë=
TIM_LOCKLEVEL_3
))

	)

1685 
	#IS_TIM_BREAK_FILTER
(
__BRKFILTER__
Ë((__BRKFILTER__Ë<0xFUL)

	)

1688 
	#IS_TIM_BREAK_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_BREAK_ENABLE
) || \

1689 ((
__STATE__
Ë=
TIM_BREAK_DISABLE
))

	)

1691 
	#IS_TIM_BREAK_POLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_BREAKPOLARITY_LOW
) || \

1692 ((
__POLARITY__
Ë=
TIM_BREAKPOLARITY_HIGH
))

	)

1694 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_AUTOMATICOUTPUT_ENABLE
) || \

1695 ((
__STATE__
Ë=
TIM_AUTOMATICOUTPUT_DISABLE
))

	)

1697 
	#IS_TIM_TRGO_SOURCE
(
__SOURCE__
Ë(((__SOURCE__Ë=
TIM_TRGO_RESET
) || \

1698 ((
__SOURCE__
Ë=
TIM_TRGO_ENABLE
) || \

1699 ((
__SOURCE__
Ë=
TIM_TRGO_UPDATE
) || \

1700 ((
__SOURCE__
Ë=
TIM_TRGO_OC1
) || \

1701 ((
__SOURCE__
Ë=
TIM_TRGO_OC1REF
) || \

1702 ((
__SOURCE__
Ë=
TIM_TRGO_OC2REF
) || \

1703 ((
__SOURCE__
Ë=
TIM_TRGO_OC3REF
) || \

1704 ((
__SOURCE__
Ë=
TIM_TRGO_OC4REF
))

	)

1706 
	#IS_TIM_MSM_STATE
(
__STATE__
Ë(((__STATE__Ë=
TIM_MASTERSLAVEMODE_ENABLE
) || \

1707 ((
__STATE__
Ë=
TIM_MASTERSLAVEMODE_DISABLE
))

	)

1709 
	#IS_TIM_SLAVE_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_SLAVEMODE_DISABLE
) || \

1710 ((
__MODE__
Ë=
TIM_SLAVEMODE_RESET
) || \

1711 ((
__MODE__
Ë=
TIM_SLAVEMODE_GATED
) || \

1712 ((
__MODE__
Ë=
TIM_SLAVEMODE_TRIGGER
) || \

1713 ((
__MODE__
Ë=
TIM_SLAVEMODE_EXTERNAL1
))

	)

1715 
	#IS_TIM_PWM_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_OCMODE_PWM1
) || \

1716 ((
__MODE__
Ë=
TIM_OCMODE_PWM2
))

	)

1718 
	#IS_TIM_OC_MODE
(
__MODE__
Ë(((__MODE__Ë=
TIM_OCMODE_TIMING
) || \

1719 ((
__MODE__
Ë=
TIM_OCMODE_ACTIVE
) || \

1720 ((
__MODE__
Ë=
TIM_OCMODE_INACTIVE
) || \

1721 ((
__MODE__
Ë=
TIM_OCMODE_TOGGLE
) || \

1722 ((
__MODE__
Ë=
TIM_OCMODE_FORCED_ACTIVE
) || \

1723 ((
__MODE__
Ë=
TIM_OCMODE_FORCED_INACTIVE
))

	)

1725 
	#IS_TIM_TRIGGER_SELECTION
(
__SELECTION__
Ë(((__SELECTION__Ë=
TIM_TS_ITR0
) || \

1726 ((
__SELECTION__
Ë=
TIM_TS_ITR1
) || \

1727 ((
__SELECTION__
Ë=
TIM_TS_ITR2
) || \

1728 ((
__SELECTION__
Ë=
TIM_TS_ITR3
) || \

1729 ((
__SELECTION__
Ë=
TIM_TS_TI1F_ED
) || \

1730 ((
__SELECTION__
Ë=
TIM_TS_TI1FP1
) || \

1731 ((
__SELECTION__
Ë=
TIM_TS_TI2FP2
) || \

1732 ((
__SELECTION__
Ë=
TIM_TS_ETRF
))

	)

1734 
	#IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
__SELECTION__
Ë(((__SELECTION__Ë=
TIM_TS_ITR0
) || \

1735 ((
__SELECTION__
Ë=
TIM_TS_ITR1
) || \

1736 ((
__SELECTION__
Ë=
TIM_TS_ITR2
) || \

1737 ((
__SELECTION__
Ë=
TIM_TS_ITR3
) || \

1738 ((
__SELECTION__
Ë=
TIM_TS_NONE
))

	)

1740 
	#IS_TIM_TRIGGERPOLARITY
(
__POLARITY__
Ë(((__POLARITY__Ë=
TIM_TRIGGERPOLARITY_INVERTED
 ) || \

1741 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_NONINVERTED
) || \

1742 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_RISING
 ) || \

1743 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_FALLING
 ) || \

1744 ((
__POLARITY__
Ë=
TIM_TRIGGERPOLARITY_BOTHEDGE
 ))

	)

1746 
	#IS_TIM_TRIGGERPRESCALER
(
__PRESCALER__
Ë(((__PRESCALER__Ë=
TIM_TRIGGERPRESCALER_DIV1
) || \

1747 ((
__PRESCALER__
Ë=
TIM_TRIGGERPRESCALER_DIV2
) || \

1748 ((
__PRESCALER__
Ë=
TIM_TRIGGERPRESCALER_DIV4
) || \

1749 ((
__PRESCALER__
Ë=
TIM_TRIGGERPRESCALER_DIV8
))

	)

1751 
	#IS_TIM_TRIGGERFILTER
(
__ICFILTER__
Ë((__ICFILTER__Ë<0xFU)

	)

1753 
	#IS_TIM_TI1SELECTION
(
__TI1SELECTION__
Ë(((__TI1SELECTION__Ë=
TIM_TI1SELECTION_CH1
) || \

1754 ((
__TI1SELECTION__
Ë=
TIM_TI1SELECTION_XORCOMBINATION
))

	)

1756 
	#IS_TIM_DMA_LENGTH
(
__LENGTH__
Ë(((__LENGTH__Ë=
TIM_DMABURSTLENGTH_1TRANSFER
) || \

1757 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_2TRANSFERS
) || \

1758 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_3TRANSFERS
) || \

1759 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_4TRANSFERS
) || \

1760 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_5TRANSFERS
) || \

1761 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_6TRANSFERS
) || \

1762 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_7TRANSFERS
) || \

1763 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_8TRANSFERS
) || \

1764 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_9TRANSFERS
) || \

1765 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_10TRANSFERS
) || \

1766 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_11TRANSFERS
) || \

1767 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_12TRANSFERS
) || \

1768 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_13TRANSFERS
) || \

1769 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_14TRANSFERS
) || \

1770 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_15TRANSFERS
) || \

1771 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_16TRANSFERS
) || \

1772 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_17TRANSFERS
) || \

1773 ((
__LENGTH__
Ë=
TIM_DMABURSTLENGTH_18TRANSFERS
))

	)

1775 
	#IS_TIM_DMA_DATA_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1UË&& ((LENGTHË< 0x10000U))

	)

1777 
	#IS_TIM_IC_FILTER
(
__ICFILTER__
Ë((__ICFILTER__Ë<0xFU)

	)

1779 
	#IS_TIM_DEADTIME
(
__DEADTIME__
Ë((__DEADTIME__Ë<0xFFU)

	)

1781 
	#IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
__TRIGGER__
Ë((__TRIGGER__Ë=
TIM_SLAVEMODE_TRIGGER
)

	)

1783 
	#TIM_SET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
, 
__ICPSC__
) \

1784 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |(
__ICPSC__
)) :\

1785 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 |((
__ICPSC__
) << 8U)) :\

1786 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |(
__ICPSC__
)) :\

1787 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 |((
__ICPSC__
Ë<< 8U)))

	)

1789 
	#TIM_RESET_ICPRESCALERVALUE
(
__HANDLE__
, 
__CHANNEL__
) \

1790 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
) :\

1791 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC2PSC
) :\

1792 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC3PSC
) :\

1793 ((
__HANDLE__
)->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC4PSC
))

	)

1795 
	#TIM_SET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
, 
__POLARITY__
) \

1796 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |(
__POLARITY__
)) :\

1797 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |((
__POLARITY__
) << 4U)) :\

1798 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 |((
__POLARITY__
) << 8U)) :\

1799 ((
__HANDLE__
)->
In°™˚
->
CCER
 |(((
__POLARITY__
Ë<< 12U))))

	)

1801 
	#TIM_RESET_CAPTUREPOLARITY
(
__HANDLE__
, 
__CHANNEL__
) \

1802 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
)) :\

1803 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
)) :\

1804 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
In°™˚
->
CCER
 &~(
TIM_CCER_CC3P
)) :\

1805 ((
__HANDLE__
)->
In°™˚
->
CCER
 &~(
TIM_CCER_CC4P
)))

	)

1807 
	#TIM_CHANNEL_STATE_GET
(
__HANDLE__
, 
__CHANNEL__
)\

1808 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? (
__HANDLE__
)->
Ch™√lSèã
[0] :\

1809 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? (
__HANDLE__
)->
Ch™√lSèã
[1] :\

1810 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? (
__HANDLE__
)->
Ch™√lSèã
[2] :\

1811 (
__HANDLE__
)->
Ch™√lSèã
[3])

	)

1813 
	#TIM_CHANNEL_STATE_SET
(
__HANDLE__
, 
__CHANNEL__
, 
__CHANNEL_STATE__
) \

1814 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
Ch™√lSèã
[0] = (
__CHANNEL_STATE__
)) :\

1815 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
Ch™√lSèã
[1] = (
__CHANNEL_STATE__
)) :\

1816 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
Ch™√lSèã
[2] = (
__CHANNEL_STATE__
)) :\

1817 ((
__HANDLE__
)->
Ch™√lSèã
[3] = (
__CHANNEL_STATE__
)))

	)

1819 
	#TIM_CHANNEL_STATE_SET_ALL
(
__HANDLE__
, 
__CHANNEL_STATE__
) do { \

1820 (
__HANDLE__
)->
Ch™√lSèã
[0] = (
__CHANNEL_STATE__
); \

1821 (
__HANDLE__
)->
Ch™√lSèã
[1] = (
__CHANNEL_STATE__
); \

1822 (
__HANDLE__
)->
Ch™√lSèã
[2] = (
__CHANNEL_STATE__
); \

1823 (
__HANDLE__
)->
Ch™√lSèã
[3] = (
__CHANNEL_STATE__
); \

1824 } 0)

	)

1826 
	#TIM_CHANNEL_N_STATE_GET
(
__HANDLE__
, 
__CHANNEL__
)\

1827 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? (
__HANDLE__
)->
Ch™√lNSèã
[0] :\

1828 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? (
__HANDLE__
)->
Ch™√lNSèã
[1] :\

1829 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? (
__HANDLE__
)->
Ch™√lNSèã
[2] :\

1830 (
__HANDLE__
)->
Ch™√lNSèã
[3])

	)

1832 
	#TIM_CHANNEL_N_STATE_SET
(
__HANDLE__
, 
__CHANNEL__
, 
__CHANNEL_STATE__
) \

1833 (((
__CHANNEL__
Ë=
TIM_CHANNEL_1
Ë? ((
__HANDLE__
)->
Ch™√lNSèã
[0] = (
__CHANNEL_STATE__
)) :\

1834 ((
__CHANNEL__
Ë=
TIM_CHANNEL_2
Ë? ((
__HANDLE__
)->
Ch™√lNSèã
[1] = (
__CHANNEL_STATE__
)) :\

1835 ((
__CHANNEL__
Ë=
TIM_CHANNEL_3
Ë? ((
__HANDLE__
)->
Ch™√lNSèã
[2] = (
__CHANNEL_STATE__
)) :\

1836 ((
__HANDLE__
)->
Ch™√lNSèã
[3] = (
__CHANNEL_STATE__
)))

	)

1838 
	#TIM_CHANNEL_N_STATE_SET_ALL
(
__HANDLE__
, 
__CHANNEL_STATE__
) do { \

1839 (
__HANDLE__
)->
Ch™√lNSèã
[0] = (
__CHANNEL_STATE__
); \

1840 (
__HANDLE__
)->
Ch™√lNSèã
[1] = (
__CHANNEL_STATE__
); \

1841 (
__HANDLE__
)->
Ch™√lNSèã
[2] = (
__CHANNEL_STATE__
); \

1842 (
__HANDLE__
)->
Ch™√lNSèã
[3] = (
__CHANNEL_STATE__
); \

1843 } 0)

	)

1851 
	~"°m32f1xx_hÆ_tim_ex.h
"

1863 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1864 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1865 
HAL_TIM_Ba£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1866 
HAL_TIM_Ba£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1868 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
);

1869 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›
(
TIM_H™dÀTy≥Def
 *
htim
);

1871 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

1872 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

1874 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
);

1875 
HAL_SètusTy≥Def
 
HAL_TIM_Ba£_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
);

1885 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1886 
HAL_SètusTy≥Def
 
HAL_TIM_OC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1887 
HAL_TIM_OC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1888 
HAL_TIM_OC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1890 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1891 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1893 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1894 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1896 
HAL_SètusTy≥Def
 
HAL_TIM_OC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1897 
HAL_SètusTy≥Def
 
HAL_TIM_OC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1907 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1908 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1909 
HAL_TIM_PWM_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1910 
HAL_TIM_PWM_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1912 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1913 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1915 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1916 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1918 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1919 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1929 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1930 
HAL_SètusTy≥Def
 
HAL_TIM_IC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1931 
HAL_TIM_IC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1932 
HAL_TIM_IC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1934 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1935 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1937 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1938 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1940 
HAL_SètusTy≥Def
 
HAL_TIM_IC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

1941 
HAL_SètusTy≥Def
 
HAL_TIM_IC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1951 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
O√Pul£Mode
);

1952 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1953 
HAL_TIM_O√Pul£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1954 
HAL_TIM_O√Pul£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1956 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1957 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1959 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1960 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

1970 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Encodî_InôTy≥Def
 *
sC⁄fig
);

1971 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1972 
HAL_TIM_Encodî_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

1973 
HAL_TIM_Encodî_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

1975 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1976 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1978 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1979 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1981 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a1
,

1982 
uöt32_t
 *
pD©a2
, 
uöt16_t
 
Lígth
);

1983 
HAL_SètusTy≥Def
 
HAL_TIM_Encodî_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

1993 
HAL_TIM_IRQH™dÀr
(
TIM_H™dÀTy≥Def
 *
htim
);

2003 
HAL_SètusTy≥Def
 
HAL_TIM_OC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
 *
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

2004 
HAL_SètusTy≥Def
 
HAL_TIM_PWM_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_OC_InôTy≥Def
 *
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

2005 
HAL_SètusTy≥Def
 
HAL_TIM_IC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_IC_InôTy≥Def
 *
sC⁄fig
, 
uöt32_t
 
Ch™√l
);

2006 
HAL_SètusTy≥Def
 
HAL_TIM_O√Pul£_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_O√Pul£_InôTy≥Def
 *
sC⁄fig
,

2007 
uöt32_t
 
OuçutCh™√l
, uöt32_à
I≈utCh™√l
);

2008 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figOCªfCÀ¨
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_CÀ¨I≈utC⁄figTy≥Def
 *
sCÀ¨I≈utC⁄fig
,

2009 
uöt32_t
 
Ch™√l
);

2010 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figClockSour˚
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_ClockC⁄figTy≥Def
 *
sClockSour˚C⁄fig
);

2011 
HAL_SètusTy≥Def
 
HAL_TIM_C⁄figTI1I≈ut
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
TI1_Sñe˘i⁄
);

2012 
HAL_SètusTy≥Def
 
HAL_TIM_SœveC⁄figSynchro
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 *
sSœveC⁄fig
);

2013 
HAL_SètusTy≥Def
 
HAL_TIM_SœveC⁄figSynchro_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 *
sSœveC⁄fig
);

2014 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_WrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

2015 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
, uöt32_à
Bur°Lígth
);

2016 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_Mu…iWrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

2017 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
, uöt32_à
Bur°Lígth
,

2018 
uöt32_t
 
D©aLígth
);

2019 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_WrôeSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
);

2020 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_RódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

2021 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
, uöt32_à
Bur°Lígth
);

2022 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_Mu…iRódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

2023 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
, uöt32_à
Bur°Lígth
,

2024 
uöt32_t
 
D©aLígth
);

2025 
HAL_SètusTy≥Def
 
HAL_TIM_DMABur°_RódSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
);

2026 
HAL_SètusTy≥Def
 
HAL_TIM_Gíî©eEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
EvítSour˚
);

2027 
uöt32_t
 
HAL_TIM_RódC≠tuªdVÆue
(
TIM_H™dÀTy≥Def
 *
htim
, uöt32_à
Ch™√l
);

2037 
HAL_TIM_PîiodEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2038 
HAL_TIM_PîiodEœp£dHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2039 
HAL_TIM_OC_DñayEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2040 
HAL_TIM_IC_C≠tuªCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2041 
HAL_TIM_IC_C≠tuªHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2042 
HAL_TIM_PWM_Pul£FöishedCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2043 
HAL_TIM_PWM_Pul£FöishedHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2044 
HAL_TIM_TriggîCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2045 
HAL_TIM_TriggîHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2046 
HAL_TIM_Eº‹CÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2049 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2050 
HAL_SètusTy≥Def
 
HAL_TIM_Regi°îCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
, 
HAL_TIM_CÆlbackIDTy≥Def
 
CÆlbackID
,

2051 
pTIM_CÆlbackTy≥Def
 
pCÆlback
);

2052 
HAL_SètusTy≥Def
 
HAL_TIM_UnRegi°îCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
, 
HAL_TIM_CÆlbackIDTy≥Def
 
CÆlbackID
);

2064 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_Ba£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

2065 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_OC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

2066 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_PWM_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

2067 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_IC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

2068 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_O√Pul£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

2069 
HAL_TIM_SèãTy≥Def
 
HAL_TIM_Encodî_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

2072 
HAL_TIM_A˘iveCh™√l
 
HAL_TIM_GëA˘iveCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
);

2073 
HAL_TIM_Ch™√lSèãTy≥Def
 
HAL_TIM_GëCh™√lSèã
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

2074 
HAL_TIM_DMABur°SèãTy≥Def
 
HAL_TIM_DMABur°Sèã
(
TIM_H™dÀTy≥Def
 *
htim
);

2088 
TIM_Ba£_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_Ba£_InôTy≥Def
 *
Såu˘uª
);

2089 
TIM_TI1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
, uöt32_à
TIM_ICFûãr
);

2090 
TIM_OC2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

2091 
TIM_ETR_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ExtTRGPªsˇÀr
,

2092 
uöt32_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt32_à
ExtTRGFûãr
);

2094 
TIM_DMADñayPul£HÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

2095 
TIM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
);

2096 
TIM_DMAC≠tuªC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

2097 
TIM_DMAC≠tuªHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

2098 
TIM_CCxCh™√lCmd
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lSèã
);

2100 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2101 
TIM_Re£tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

2117 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim_ex.h

21 #i‚de‡
STM32F1xx_HAL_TIM_EX_H


22 
	#STM32F1xx_HAL_TIM_EX_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

50 
uöt32_t
 
IC1Pﬁ¨ôy
;

53 
uöt32_t
 
IC1PªsˇÀr
;

56 
uöt32_t
 
IC1Fûãr
;

59 
uöt32_t
 
Commuèti⁄_Dñay
;

61 } 
	tTIM_HÆlSís‹_InôTy≥Def
;

114 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_HÆlSís‹_InôTy≥Def
 *
sC⁄fig
);

115 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

117 
HAL_TIMEx_HÆlSís‹_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
);

118 
HAL_TIMEx_HÆlSís‹_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
);

121 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
);

122 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_St›
(
TIM_H™dÀTy≥Def
 *
htim
);

124 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

125 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
);

127 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
);

128 
HAL_SètusTy≥Def
 
HAL_TIMEx_HÆlSís‹_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
);

139 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

140 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

143 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

144 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

147 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

148 
HAL_SètusTy≥Def
 
HAL_TIMEx_OCN_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

159 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

160 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

163 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

164 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

166 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
);

167 
HAL_SètusTy≥Def
 
HAL_TIMEx_PWMN_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
);

178 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

179 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

182 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

183 
HAL_SètusTy≥Def
 
HAL_TIMEx_O√Pul£N_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
);

193 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figCommutEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
,

194 
uöt32_t
 
Commuèti⁄Sour˚
);

195 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figCommutEvít_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
,

196 
uöt32_t
 
Commuèti⁄Sour˚
);

197 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figCommutEvít_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
,

198 
uöt32_t
 
Commuèti⁄Sour˚
);

199 
HAL_SètusTy≥Def
 
HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
,

200 
TIM_Ma°îC⁄figTy≥Def
 *
sMa°îC⁄fig
);

201 
HAL_SètusTy≥Def
 
HAL_TIMEx_C⁄figBªakDódTime
(
TIM_H™dÀTy≥Def
 *
htim
,

202 
TIM_BªakDódTimeC⁄figTy≥Def
 *
sBªakDódTimeC⁄fig
);

203 
HAL_SètusTy≥Def
 
HAL_TIMEx_Rem≠C⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Rem≠
);

213 
HAL_TIMEx_CommutCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

214 
HAL_TIMEx_CommutHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

215 
HAL_TIMEx_BªakCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
);

225 
HAL_TIM_SèãTy≥Def
 
HAL_TIMEx_HÆlSís‹_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
);

226 
HAL_TIM_Ch™√lSèãTy≥Def
 
HAL_TIMEx_GëCh™√lNSèã
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√lN
);

240 
TIMEx_DMACommuèti⁄C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

241 
TIMEx_DMACommuèti⁄HÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

255 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_usb.h

21 #i‚de‡
STM32F1xx_LL_USB_H


22 
	#STM32F1xx_LL_USB_H


	)

24 #ifde‡
__˝lu•lus


29 
	~"°m32f1xx_hÆ_def.h
"

31 #i‡
deföed
 (
USB
Ë|| deföed (
USB_OTG_FS
)

45 #i‡
deföed
 (
USB_OTG_FS
)

49 
USB_DEVICE_MODE
 = 0,

50 
USB_HOST_MODE
 = 1,

51 
USB_DRD_MODE
 = 2

52 } 
	tUSB_ModeTy≥Def
;

59 
URB_IDLE
 = 0,

60 
URB_DONE
,

61 
URB_NOTREADY
,

62 
URB_NYET
,

63 
URB_ERROR
,

64 
URB_STALL


65 } 
	tUSB_OTG_URBSèãTy≥Def
;

72 
HC_IDLE
 = 0,

73 
HC_XFRC
,

74 
HC_HALTED
,

75 
HC_NAK
,

76 
HC_NYET
,

77 
HC_STALL
,

78 
HC_XACTERR
,

79 
HC_BBLERR
,

80 
HC_DATATGLERR


81 } 
	tUSB_OTG_HCSèãTy≥Def
;

88 
uöt32_t
 
dev_ídpoöts
;

92 
uöt32_t
 
Ho°_ch™√ls
;

96 
uöt32_t
 
•ìd
;

99 
uöt32_t
 
dma_íabÀ
;

101 
uöt32_t
 
ï0_mps
;

103 
uöt32_t
 
phy_ôÁ˚
;

106 
uöt32_t
 
Sof_íabÀ
;

108 
uöt32_t
 
low_powî_íabÀ
;

110 
uöt32_t
 
Õm_íabÀ
;

112 
uöt32_t
 
b©ãry_ch¨gög_íabÀ
;

114 
uöt32_t
 
vbus_£nsög_íabÀ
;

116 
uöt32_t
 
u£_dediˇãd_ï1
;

118 
uöt32_t
 
u£_exã∫Æ_vbus
;

120 } 
	tUSB_OTG_CfgTy≥Def
;

124 
uöt8_t
 
num
;

127 
uöt8_t
 
is_ö
;

130 
uöt8_t
 
is_°Æl
;

133 
uöt8_t
 
ty≥
;

136 
uöt8_t
 
d©a_pid_°¨t
;

139 
uöt8_t
 
eví_odd_‰ame
;

142 
uöt16_t
 
tx_fifo_num
;

145 
uöt32_t
 
max∑ckë
;

148 
uöt8_t
 *
x„r_buff
;

150 
uöt32_t
 
dma_addr
;

152 
uöt32_t
 
x„r_Àn
;

154 
uöt32_t
 
x„r_cou¡
;

155 } 
	tUSB_OTG_EPTy≥Def
;

159 
uöt8_t
 
dev_addr
;

162 
uöt8_t
 
ch_num
;

165 
uöt8_t
 
ï_num
;

168 
uöt8_t
 
ï_is_ö
;

171 
uöt8_t
 
•ìd
;

174 
uöt8_t
 
do_pög
;

176 
uöt8_t
 
¥o˚ss_pög
;

178 
uöt8_t
 
ï_ty≥
;

181 
uöt16_t
 
max_∑ckë
;

184 
uöt8_t
 
d©a_pid
;

187 
uöt8_t
 *
x„r_buff
;

189 
uöt32_t
 
x„r_Àn
;

191 
uöt32_t
 
x„r_cou¡
;

193 
uöt8_t
 
toggÀ_ö
;

196 
uöt8_t
 
toggÀ_out
;

199 
uöt32_t
 
dma_addr
;

201 
uöt32_t
 
EºC¡
;

203 
USB_OTG_URBSèãTy≥Def
 
urb_°©e
;

206 
USB_OTG_HCSèãTy≥Def
 
°©e
;

208 } 
	tUSB_OTG_HCTy≥Def
;

211 #i‡
deföed
 (
USB
)

215 
USB_DEVICE_MODE
 = 0

216 } 
	tUSB_ModeTy≥Def
;

223 
uöt32_t
 
dev_ídpoöts
;

227 
uöt32_t
 
•ìd
;

230 
uöt32_t
 
ï0_mps
;

232 
uöt32_t
 
phy_ôÁ˚
;

235 
uöt32_t
 
Sof_íabÀ
;

237 
uöt32_t
 
low_powî_íabÀ
;

239 
uöt32_t
 
Õm_íabÀ
;

241 
uöt32_t
 
b©ãry_ch¨gög_íabÀ
;

242 } 
	tUSB_CfgTy≥Def
;

246 
uöt8_t
 
num
;

249 
uöt8_t
 
is_ö
;

252 
uöt8_t
 
is_°Æl
;

255 
uöt8_t
 
ty≥
;

258 
uöt8_t
 
d©a_pid_°¨t
;

261 
uöt16_t
 
pmØdªss
;

264 
uöt16_t
 
pmØddr0
;

267 
uöt16_t
 
pmØddr1
;

270 
uöt8_t
 
doubÀbuf„r
;

273 
uöt16_t
 
tx_fifo_num
;

277 
uöt32_t
 
max∑ckë
;

280 
uöt8_t
 *
x„r_buff
;

282 
uöt32_t
 
x„r_Àn
;

284 
uöt32_t
 
x„r_cou¡
;

286 
uöt32_t
 
x„r_Àn_db
;

288 
uöt8_t
 
x„r_fûl_db
;

290 } 
	tUSB_EPTy≥Def
;

299 #i‡
deföed
 (
USB_OTG_FS
)

303 
	#USB_OTG_CORE_ID_300A
 0x4F54300AU

	)

304 
	#USB_OTG_CORE_ID_310A
 0x4F54310AU

	)

312 
	#USB_OTG_MODE_DEVICE
 0U

	)

313 
	#USB_OTG_MODE_HOST
 1U

	)

314 
	#USB_OTG_MODE_DRD
 2U

	)

322 
	#USBD_FS_SPEED
 2U

	)

323 
	#USBH_FSLS_SPEED
 1U

	)

331 
	#USB_OTG_SPEED_FULL
 3U

	)

339 
	#USB_OTG_ULPI_PHY
 1U

	)

340 
	#USB_OTG_EMBEDDED_PHY
 2U

	)

348 #i‚de‡
USBD_FS_TRDT_VALUE


349 
	#USBD_FS_TRDT_VALUE
 5U

	)

350 
	#USBD_DEFAULT_TRDT_VALUE
 9U

	)

359 
	#USB_OTG_FS_MAX_PACKET_SIZE
 64U

	)

360 
	#USB_OTG_MAX_EP0_SIZE
 64U

	)

368 
	#DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ
 (0U << 1)

	)

369 
	#DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
 (1U << 1)

	)

370 
	#DSTS_ENUMSPD_FS_PHY_48MHZ
 (3U << 1)

	)

378 
	#DCFG_FRAME_INTERVAL_80
 0U

	)

379 
	#DCFG_FRAME_INTERVAL_85
 1U

	)

380 
	#DCFG_FRAME_INTERVAL_90
 2U

	)

381 
	#DCFG_FRAME_INTERVAL_95
 3U

	)

389 
	#EP_MPS_64
 0U

	)

390 
	#EP_MPS_32
 1U

	)

391 
	#EP_MPS_16
 2U

	)

392 
	#EP_MPS_8
 3U

	)

400 
	#EP_SPEED_LOW
 0U

	)

401 
	#EP_SPEED_FULL
 1U

	)

402 
	#EP_SPEED_HIGH
 2U

	)

410 
	#EP_TYPE_CTRL
 0U

	)

411 
	#EP_TYPE_ISOC
 1U

	)

412 
	#EP_TYPE_BULK
 2U

	)

413 
	#EP_TYPE_INTR
 3U

	)

414 
	#EP_TYPE_MSK
 3U

	)

422 
	#STS_GOUT_NAK
 1U

	)

423 
	#STS_DATA_UPDT
 2U

	)

424 
	#STS_XFER_COMP
 3U

	)

425 
	#STS_SETUP_COMP
 4U

	)

426 
	#STS_SETUP_UPDT
 6U

	)

434 
	#HCFG_30_60_MHZ
 0U

	)

435 
	#HCFG_48_MHZ
 1U

	)

436 
	#HCFG_6_MHZ
 2U

	)

444 
	#HPRT0_PRTSPD_HIGH_SPEED
 0U

	)

445 
	#HPRT0_PRTSPD_FULL_SPEED
 1U

	)

446 
	#HPRT0_PRTSPD_LOW_SPEED
 2U

	)

451 
	#HCCHAR_CTRL
 0U

	)

452 
	#HCCHAR_ISOC
 1U

	)

453 
	#HCCHAR_BULK
 2U

	)

454 
	#HCCHAR_INTR
 3U

	)

456 
	#HC_PID_DATA0
 0U

	)

457 
	#HC_PID_DATA2
 1U

	)

458 
	#HC_PID_DATA1
 2U

	)

459 
	#HC_PID_SETUP
 3U

	)

461 
	#GRXSTS_PKTSTS_IN
 2U

	)

462 
	#GRXSTS_PKTSTS_IN_XFER_COMP
 3U

	)

463 
	#GRXSTS_PKTSTS_DATA_TOGGLE_ERR
 5U

	)

464 
	#GRXSTS_PKTSTS_CH_HALTED
 7U

	)

466 
	#USBx_PCGCCTL
 *(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx_BASE
 + 
USB_OTG_PCGCCTL_BASE
)

	)

467 
	#USBx_HPRT0
 *(
__IO
 
uöt32_t
 *)((uöt32_t)
USBx_BASE
 + 
USB_OTG_HOST_PORT_BASE
)

	)

469 
	#USBx_DEVICE
 ((
USB_OTG_Devi˚Ty≥Def
 *)(
USBx_BASE
 + 
USB_OTG_DEVICE_BASE
))

	)

470 
	#USBx_INEP
(
i
Ë((
USB_OTG_INEndpoötTy≥Def
 *)(
USBx_BASE
 + 
USB_OTG_IN_ENDPOINT_BASE
 + ((iË* 
USB_OTG_EP_REG_SIZE
)))

	)

471 
	#USBx_OUTEP
(
i
Ë((
USB_OTG_OUTEndpoötTy≥Def
 *)(
USBx_BASE
 + 
USB_OTG_OUT_ENDPOINT_BASE
 + ((iË* 
USB_OTG_EP_REG_SIZE
)))

	)

472 
	#USBx_DFIFO
(
i
Ë*(
__IO
 
uöt32_t
 *)(
USBx_BASE
 + 
USB_OTG_FIFO_BASE
 + ((iË* 
USB_OTG_FIFO_SIZE
))

	)

474 
	#USBx_HOST
 ((
USB_OTG_Ho°Ty≥Def
 *)(
USBx_BASE
 + 
USB_OTG_HOST_BASE
))

	)

475 
	#USBx_HC
(
i
Ë((
USB_OTG_Ho°Ch™√lTy≥Def
 *)(
USBx_BASE
 + 
USB_OTG_HOST_CHANNEL_BASE
 + ((iË* 
USB_OTG_HOST_CHANNEL_SIZE
)))

	)

478 #i‡
deföed
 (
USB
)

482 
	#EP_MPS_64
 0U

	)

483 
	#EP_MPS_32
 1U

	)

484 
	#EP_MPS_16
 2U

	)

485 
	#EP_MPS_8
 3U

	)

493 
	#EP_TYPE_CTRL
 0U

	)

494 
	#EP_TYPE_ISOC
 1U

	)

495 
	#EP_TYPE_BULK
 2U

	)

496 
	#EP_TYPE_INTR
 3U

	)

497 
	#EP_TYPE_MSK
 3U

	)

505 
	#USBD_FS_SPEED
 2U

	)

510 
	#BTABLE_ADDRESS
 0x000U

	)

511 
	#PMA_ACCESS
 2U

	)

513 #i‡
deföed
 (
USB_OTG_FS
)

514 
	#EP_ADDR_MSK
 0xFU

	)

516 #i‡
deföed
 (
USB
)

517 
	#EP_ADDR_MSK
 0x7U

	)

527 #i‡
deföed
 (
USB_OTG_FS
)

528 
	#USB_MASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
GINTMSK
 &~(__INTERRUPT__))

	)

529 
	#USB_UNMASK_INTERRUPT
(
__INSTANCE__
, 
__INTERRUPT__
Ë((__INSTANCE__)->
GINTMSK
 |(__INTERRUPT__))

	)

531 
	#CLEAR_IN_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
Ë(
	`USBx_INEP
(__EPNUM__)->
DIEPINT
 = (__INTERRUPT__))

	)

532 
	#CLEAR_OUT_EP_INTR
(
__EPNUM__
, 
__INTERRUPT__
Ë(
	`USBx_OUTEP
(__EPNUM__)->
DOEPINT
 = (__INTERRUPT__))

	)

542 #i‡
deföed
 (
USB_OTG_FS
)

543 
HAL_SètusTy≥Def
 
USB_C‹eInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
);

544 
HAL_SètusTy≥Def
 
USB_DevInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
);

545 
HAL_SètusTy≥Def
 
USB_E«bÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

546 
HAL_SètusTy≥Def
 
USB_DißbÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

547 
HAL_SètusTy≥Def
 
USB_SëTu∫¨oundTime
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
h˛k
, 
uöt8_t
 
•ìd
);

548 
HAL_SètusTy≥Def
 
USB_SëCuºítMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_ModeTy≥Def
 
mode
);

549 
HAL_SètusTy≥Def
 
USB_SëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
•ìd
);

550 
HAL_SètusTy≥Def
 
USB_FlushRxFifo
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

551 
HAL_SètusTy≥Def
 
USB_FlushTxFifo
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
num
);

552 
HAL_SètusTy≥Def
 
USB_A˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

553 
HAL_SètusTy≥Def
 
USB_Dó˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

554 
HAL_SètusTy≥Def
 
USB_A˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

555 
HAL_SètusTy≥Def
 
USB_Dó˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

556 
HAL_SètusTy≥Def
 
USB_EPSèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

557 
HAL_SètusTy≥Def
 
USB_EP0SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

558 
HAL_SètusTy≥Def
 
USB_WrôePackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
§c
,

559 
uöt8_t
 
ch_ï_num
, 
uöt16_t
 
Àn
);

561 *
USB_RódPackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
);

562 
HAL_SètusTy≥Def
 
USB_EPSëSèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

563 
HAL_SètusTy≥Def
 
USB_EPCÀ¨SèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
);

564 
HAL_SètusTy≥Def
 
USB_SëDevAddªss
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
addªss
);

565 
HAL_SètusTy≥Def
 
USB_DevC⁄√˘
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

566 
HAL_SètusTy≥Def
 
USB_DevDisc⁄√˘
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

567 
HAL_SètusTy≥Def
 
USB_St›Devi˚
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

568 
HAL_SètusTy≥Def
 
USB_A˘iv©eSëup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

569 
HAL_SètusTy≥Def
 
USB_EP0_OutSèπ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
);

570 
uöt8_t
 
USB_GëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

571 
uöt32_t
 
USB_GëMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

572 
uöt32_t
 
USB_RódI¡îru±s
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

573 
uöt32_t
 
USB_RódDevAŒOutEpI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

574 
uöt32_t
 
USB_RódDevOutEPI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ïnum
);

575 
uöt32_t
 
USB_RódDevAŒInEpI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

576 
uöt32_t
 
USB_RódDevInEPI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ïnum
);

577 
USB_CÀ¨I¡îru±s
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
);

579 
HAL_SètusTy≥Def
 
USB_Ho°Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
);

580 
HAL_SètusTy≥Def
 
USB_InôFSLSPClkSñ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
‰eq
);

581 
HAL_SètusTy≥Def
 
USB_Re£tP‹t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

582 
HAL_SètusTy≥Def
 
USB_DriveVbus
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
°©e
);

583 
uöt32_t
 
USB_GëHo°S≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

584 
uöt32_t
 
USB_GëCuºítFøme
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

585 
HAL_SètusTy≥Def
 
USB_HC_Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ch_num
,

586 
uöt8_t
 
ïnum
, uöt8_à
dev_addªss
, uöt8_à
•ìd
,

587 
uöt8_t
 
ï_ty≥
, 
uöt16_t
 
mps
);

588 
HAL_SètusTy≥Def
 
USB_HC_SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
,

589 
USB_OTG_HCTy≥Def
 *
hc
);

591 
uöt32_t
 
USB_HC_RódI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

592 
HAL_SètusTy≥Def
 
USB_HC_HÆt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
hc_num
);

593 
HAL_SètusTy≥Def
 
USB_DoPög
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ch_num
);

594 
HAL_SètusTy≥Def
 
USB_St›Ho°
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

595 
HAL_SètusTy≥Def
 
USB_A˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

596 
HAL_SètusTy≥Def
 
USB_DeA˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

599 #i‡
deföed
 (
USB
)

600 
HAL_SètusTy≥Def
 
USB_C‹eInô
(
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
cfg
);

601 
HAL_SètusTy≥Def
 
USB_DevInô
(
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
cfg
);

602 
HAL_SètusTy≥Def
 
USB_E«bÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
);

603 
HAL_SètusTy≥Def
 
USB_DißbÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
);

604 
HAL_SètusTy≥Def
 
USB_SëCuºítMode
(
USB_Ty≥Def
 *
USBx
, 
USB_ModeTy≥Def
 
mode
);

605 
HAL_SètusTy≥Def
 
USB_SëDevS≥ed
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
•ìd
);

606 
HAL_SètusTy≥Def
 
USB_FlushRxFifo
(
USB_Ty≥Def
 *
USBx
);

607 
HAL_SètusTy≥Def
 
USB_FlushTxFifo
(
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
num
);

608 
HAL_SètusTy≥Def
 
USB_A˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
);

609 
HAL_SètusTy≥Def
 
USB_Dó˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
);

610 
HAL_SètusTy≥Def
 
USB_EPSèπX„r
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
);

611 
HAL_SètusTy≥Def
 
USB_EPSëSèŒ
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
);

612 
HAL_SètusTy≥Def
 
USB_EPCÀ¨SèŒ
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
);

613 
HAL_SètusTy≥Def
 
USB_SëDevAddªss
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
addªss
);

614 
HAL_SètusTy≥Def
 
USB_DevC⁄√˘
(
USB_Ty≥Def
 *
USBx
);

615 
HAL_SètusTy≥Def
 
USB_DevDisc⁄√˘
(
USB_Ty≥Def
 *
USBx
);

616 
HAL_SètusTy≥Def
 
USB_St›Devi˚
(
USB_Ty≥Def
 *
USBx
);

617 
HAL_SètusTy≥Def
 
USB_EP0_OutSèπ
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
);

618 
HAL_SètusTy≥Def
 
USB_WrôePackë
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
§c
,

619 
uöt8_t
 
ch_ï_num
, 
uöt16_t
 
Àn
);

621 *
USB_RódPackë
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
);

623 
uöt32_t
 
USB_RódI¡îru±s
(
USB_Ty≥Def
 *
USBx
);

624 
uöt32_t
 
USB_RódDevAŒOutEpI¡îru±
(
USB_Ty≥Def
 *
USBx
);

625 
uöt32_t
 
USB_RódDevOutEPI¡îru±
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
ïnum
);

626 
uöt32_t
 
USB_RódDevAŒInEpI¡îru±
(
USB_Ty≥Def
 *
USBx
);

627 
uöt32_t
 
USB_RódDevInEPI¡îru±
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
ïnum
);

628 
USB_CÀ¨I¡îru±s
(
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
);

629 
HAL_SètusTy≥Def
 
USB_A˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
);

630 
HAL_SètusTy≥Def
 
USB_DeA˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
);

632 
USB_WrôePMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
,

633 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

635 
USB_RódPMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
,

636 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

655 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal.c

36 
	~"°m32f1xx_hÆ.h
"

47 #ifde‡
HAL_MODULE_ENABLED


58 
	#__STM32F1xx_HAL_VERSION_MAIN
 (0x01UË

	)

59 
	#__STM32F1xx_HAL_VERSION_SUB1
 (0x01UË

	)

60 
	#__STM32F1xx_HAL_VERSION_SUB2
 (0x07UË

	)

61 
	#__STM32F1xx_HAL_VERSION_RC
 (0x00UË

	)

62 
	#__STM32F1xx_HAL_VERSION
 ((
__STM32F1xx_HAL_VERSION_MAIN
 << 24)\

63 |(
__STM32F1xx_HAL_VERSION_SUB1
 << 16)\

64 |(
__STM32F1xx_HAL_VERSION_SUB2
 << 8 )\

65 |(
__STM32F1xx_HAL_VERSION_RC
))

	)

67 
	#IDCODE_DEVID_MASK
 0x00000FFFU

	)

79 
__IO
 
uöt32_t
 
	guwTick
;

80 
uöt32_t
 
	guwTickPrio
 = (1UL << 
__NVIC_PRIO_BITS
);

81 
HAL_TickFªqTy≥Def
 
	guwTickFªq
 = 
HAL_TICK_FREQ_DEFAULT
;

142 
HAL_SètusTy≥Def
 
	$HAL_Inô
()

145 #i‡(
PREFETCH_ENABLE
 != 0)

146 #i‡
	`deföed
(
STM32F101x6
Ë|| deföed(
STM32F101xB
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
) || \

147 
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
) || \

148 
	`deföed
(
STM32F103x6
Ë|| deföed(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
) || \

149 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

152 
	`__HAL_FLASH_PREFETCH_BUFFER_ENABLE
();

157 
	`HAL_NVIC_SëPri‹ôyGroupög
(
NVIC_PRIORITYGROUP_4
);

160 
	`HAL_InôTick
(
TICK_INT_PRIORITY
);

163 
	`HAL_M•Inô
();

166  
HAL_OK
;

167 
	}
}

175 
HAL_SètusTy≥Def
 
	$HAL_DeInô
()

178 
	`__HAL_RCC_APB1_FORCE_RESET
();

179 
	`__HAL_RCC_APB1_RELEASE_RESET
();

181 
	`__HAL_RCC_APB2_FORCE_RESET
();

182 
	`__HAL_RCC_APB2_RELEASE_RESET
();

184 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

185 
	`__HAL_RCC_AHB_FORCE_RESET
();

186 
	`__HAL_RCC_AHB_RELEASE_RESET
();

190 
	`HAL_M•DeInô
();

193  
HAL_OK
;

194 
	}
}

200 
__wók
 
	$HAL_M•Inô
()

205 
	}
}

211 
__wók
 
	$HAL_M•DeInô
()

216 
	}
}

234 
__wók
 
HAL_SètusTy≥Def
 
	$HAL_InôTick
(
uöt32_t
 
TickPri‹ôy
)

237 i‡(
	`HAL_SYSTICK_C⁄fig
(
Sy°emC‹eClock
 / (1000U / 
uwTickFªq
)) > 0U)

239  
HAL_ERROR
;

243 i‡(
TickPri‹ôy
 < (1UL << 
__NVIC_PRIO_BITS
))

245 
	`HAL_NVIC_SëPri‹ôy
(
SysTick_IRQn
, 
TickPri‹ôy
, 0U);

246 
uwTickPrio
 = 
TickPri‹ôy
;

250  
HAL_ERROR
;

254  
HAL_OK
;

255 
	}
}

293 
__wók
 
	$HAL_IncTick
()

295 
uwTick
 +
uwTickFªq
;

296 
	}
}

304 
__wók
 
uöt32_t
 
	$HAL_GëTick
()

306  
uwTick
;

307 
	}
}

313 
uöt32_t
 
	$HAL_GëTickPrio
()

315  
uwTickPrio
;

316 
	}
}

322 
HAL_SètusTy≥Def
 
	$HAL_SëTickFªq
(
HAL_TickFªqTy≥Def
 
Fªq
)

324 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

325 
HAL_TickFªqTy≥Def
 
¥evTickFªq
;

327 
	`as£π_∑øm
(
	`IS_TICKFREQ
(
Fªq
));

329 i‡(
uwTickFªq
 !
Fªq
)

332 
¥evTickFªq
 = 
uwTickFªq
;

335 
uwTickFªq
 = 
Fªq
;

338 
°©us
 = 
	`HAL_InôTick
(
uwTickPrio
);

340 i‡(
°©us
 !
HAL_OK
)

343 
uwTickFªq
 = 
¥evTickFªq
;

347  
°©us
;

348 
	}
}

354 
HAL_TickFªqTy≥Def
 
	$HAL_GëTickFªq
()

356  
uwTickFªq
;

357 
	}
}

370 
__wók
 
	$HAL_Dñay
(
uöt32_t
 
Dñay
)

372 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

373 
uöt32_t
 
waô
 = 
Dñay
;

376 i‡(
waô
 < 
HAL_MAX_DELAY
)

378 
waô
 +(
uöt32_t
)(
uwTickFªq
);

381 (
	`HAL_GëTick
(Ë- 
tick°¨t
Ë< 
waô
)

384 
	}
}

396 
__wók
 
	$HAL_Su•ídTick
()

399 
	`CLEAR_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

400 
	}
}

412 
__wók
 
	$HAL_ResumeTick
()

415 
	`SET_BIT
(
SysTick
->
CTRL
, 
SysTick_CTRL_TICKINT_Msk
);

416 
	}
}

422 
uöt32_t
 
	$HAL_GëHÆVîsi⁄
()

424  
__STM32F1xx_HAL_VERSION
;

425 
	}
}

438 
uöt32_t
 
	$HAL_GëREVID
()

440  ((
DBGMCU
->
IDCODE
Ë>> 
DBGMCU_IDCODE_REV_ID_Pos
);

441 
	}
}

454 
uöt32_t
 
	$HAL_GëDEVID
()

456  ((
DBGMCU
->
IDCODE
Ë& 
IDCODE_DEVID_MASK
);

457 
	}
}

463 
uöt32_t
 
	$HAL_GëUIDw0
()

465 (
	`READ_REG
(*((
uöt32_t
 *)
UID_BASE
)));

466 
	}
}

472 
uöt32_t
 
	$HAL_GëUIDw1
()

474 (
	`READ_REG
(*((
uöt32_t
 *)(
UID_BASE
 + 4U))));

475 
	}
}

481 
uöt32_t
 
	$HAL_GëUIDw2
()

483 (
	`READ_REG
(*((
uöt32_t
 *)(
UID_BASE
 + 8U))));

484 
	}
}

490 
	$HAL_DBGMCU_E«bÀDBGSÀïMode
()

492 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

493 
	}
}

506 
	$HAL_DBGMCU_DißbÀDBGSÀïMode
()

508 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_SLEEP
);

509 
	}
}

536 
	$HAL_DBGMCU_E«bÀDBGSt›Mode
()

538 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

539 
	}
}

552 
	$HAL_DBGMCU_DißbÀDBGSt›Mode
()

554 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STOP
);

555 
	}
}

568 
	$HAL_DBGMCU_E«bÀDBGSèndbyMode
()

570 
	`SET_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

571 
	}
}

584 
	$HAL_DBGMCU_DißbÀDBGSèndbyMode
()

586 
	`CLEAR_BIT
(
DBGMCU
->
CR
, 
DBGMCU_CR_DBG_STANDBY
);

587 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cortex.c

83 
	~"°m32f1xx_hÆ.h
"

94 #ifde‡
HAL_CORTEX_MODULE_ENABLED


143 
	$HAL_NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

146 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

149 
	`NVIC_SëPri‹ôyGroupög
(
Pri‹ôyGroup
);

150 
	}
}

165 
	$HAL_NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

167 
uöt32_t
 
¥i‹ôygroup
 = 0x00U;

170 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
SubPri‹ôy
));

171 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
Pªem±Pri‹ôy
));

173 
¥i‹ôygroup
 = 
	`NVIC_GëPri‹ôyGroupög
();

175 
	`NVIC_SëPri‹ôy
(
IRQn
, 
	`NVIC_EncodePri‹ôy
(
¥i‹ôygroup
, 
Pªem±Pri‹ôy
, 
SubPri‹ôy
));

176 
	}
}

187 
	$HAL_NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

190 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

193 
	`NVIC_E«bÀIRQ
(
IRQn
);

194 
	}
}

203 
	$HAL_NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

206 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

209 
	`NVIC_DißbÀIRQ
(
IRQn
);

210 
	}
}

216 
	$HAL_NVIC_Sy°emRe£t
()

219 
	`NVIC_Sy°emRe£t
();

220 
	}
}

229 
uöt32_t
 
	$HAL_SYSTICK_C⁄fig
(
uöt32_t
 
TicksNumb
)

231  
	`SysTick_C⁄fig
(
TicksNumb
);

232 
	}
}

253 #i‡(
__MPU_PRESENT
 == 1U)

258 
	$HAL_MPU_DißbÀ
()

261 
	`__DMB
();

264 
SCB
->
SHCSR
 &~
SCB_SHCSR_MEMFAULTENA_Msk
;

267 
MPU
->
CTRL
 = 0U;

268 
	}
}

281 
	$HAL_MPU_E«bÀ
(
uöt32_t
 
MPU_C⁄åﬁ
)

284 
MPU
->
CTRL
 = 
MPU_C⁄åﬁ
 | 
MPU_CTRL_ENABLE_Msk
;

287 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
;

290 
	`__DSB
();

291 
	`__ISB
();

292 
	}
}

300 
	$HAL_MPU_C⁄figRegi⁄
(
MPU_Regi⁄_InôTy≥Def
 *
MPU_Inô
)

303 
	`as£π_∑øm
(
	`IS_MPU_REGION_NUMBER
(
MPU_Inô
->
Numbî
));

304 
	`as£π_∑øm
(
	`IS_MPU_REGION_ENABLE
(
MPU_Inô
->
E«bÀ
));

307 
MPU
->
RNR
 = 
MPU_Inô
->
Numbî
;

309 i‡((
MPU_Inô
->
E«bÀ
Ë!
RESET
)

312 
	`as£π_∑øm
(
	`IS_MPU_INSTRUCTION_ACCESS
(
MPU_Inô
->
DißbÀExec
));

313 
	`as£π_∑øm
(
	`IS_MPU_REGION_PERMISSION_ATTRIBUTE
(
MPU_Inô
->
Ac˚ssPîmissi⁄
));

314 
	`as£π_∑øm
(
	`IS_MPU_TEX_LEVEL
(
MPU_Inô
->
Ty≥ExtFõld
));

315 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_SHAREABLE
(
MPU_Inô
->
IsSh¨óbÀ
));

316 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_CACHEABLE
(
MPU_Inô
->
IsCachóbÀ
));

317 
	`as£π_∑øm
(
	`IS_MPU_ACCESS_BUFFERABLE
(
MPU_Inô
->
IsBuf„øbÀ
));

318 
	`as£π_∑øm
(
	`IS_MPU_SUB_REGION_DISABLE
(
MPU_Inô
->
SubRegi⁄DißbÀ
));

319 
	`as£π_∑øm
(
	`IS_MPU_REGION_SIZE
(
MPU_Inô
->
Size
));

321 
MPU
->
RBAR
 = 
MPU_Inô
->
Ba£Addªss
;

322 
MPU
->
RASR
 = ((
uöt32_t
)
MPU_Inô
->
DißbÀExec
 << 
MPU_RASR_XN_Pos
) |

323 ((
uöt32_t
)
MPU_Inô
->
Ac˚ssPîmissi⁄
 << 
MPU_RASR_AP_Pos
) |

324 ((
uöt32_t
)
MPU_Inô
->
Ty≥ExtFõld
 << 
MPU_RASR_TEX_Pos
) |

325 ((
uöt32_t
)
MPU_Inô
->
IsSh¨óbÀ
 << 
MPU_RASR_S_Pos
) |

326 ((
uöt32_t
)
MPU_Inô
->
IsCachóbÀ
 << 
MPU_RASR_C_Pos
) |

327 ((
uöt32_t
)
MPU_Inô
->
IsBuf„øbÀ
 << 
MPU_RASR_B_Pos
) |

328 ((
uöt32_t
)
MPU_Inô
->
SubRegi⁄DißbÀ
 << 
MPU_RASR_SRD_Pos
) |

329 ((
uöt32_t
)
MPU_Inô
->
Size
 << 
MPU_RASR_SIZE_Pos
) |

330 ((
uöt32_t
)
MPU_Inô
->
E«bÀ
 << 
MPU_RASR_ENABLE_Pos
);

334 
MPU
->
RBAR
 = 0x00U;

335 
MPU
->
RASR
 = 0x00U;

337 
	}
}

344 
uöt32_t
 
	$HAL_NVIC_GëPri‹ôyGroupög
()

347  
	`NVIC_GëPri‹ôyGroupög
();

348 
	}
}

371 
	$HAL_NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
Pri‹ôyGroup
, uöt32_à*
pPªem±Pri‹ôy
, uöt32_à*
pSubPri‹ôy
)

374 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
Pri‹ôyGroup
));

376 
	`NVIC_DecodePri‹ôy
(
	`NVIC_GëPri‹ôy
(
IRQn
), 
Pri‹ôyGroup
, 
pPªem±Pri‹ôy
, 
pSubPri‹ôy
);

377 
	}
}

386 
	$HAL_NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

389 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

392 
	`NVIC_SëPídögIRQ
(
IRQn
);

393 
	}
}

404 
uöt32_t
 
	$HAL_NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

407 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

410  
	`NVIC_GëPídögIRQ
(
IRQn
);

411 
	}
}

420 
	$HAL_NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

423 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

426 
	`NVIC_CÀ¨PídögIRQ
(
IRQn
);

427 
	}
}

437 
uöt32_t
 
	$HAL_NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

440 
	`as£π_∑øm
(
	`IS_NVIC_DEVICE_IRQ
(
IRQn
));

443  
	`NVIC_GëA˘ive
(
IRQn
);

444 
	}
}

454 
	$HAL_SYSTICK_CLKSour˚C⁄fig
(
uöt32_t
 
CLKSour˚
)

457 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
CLKSour˚
));

458 i‡(
CLKSour˚
 =
SYSTICK_CLKSOURCE_HCLK
)

460 
SysTick
->
CTRL
 |
SYSTICK_CLKSOURCE_HCLK
;

464 
SysTick
->
CTRL
 &~
SYSTICK_CLKSOURCE_HCLK
;

466 
	}
}

472 
	$HAL_SYSTICK_IRQH™dÀr
()

474 
	`HAL_SYSTICK_CÆlback
();

475 
	}
}

481 
__wók
 
	$HAL_SYSTICK_CÆlback
()

486 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c

85 
	~"°m32f1xx_hÆ.h
"

96 #ifde‡
HAL_DMA_MODULE_ENABLED


106 
DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
);

143 
HAL_SètusTy≥Def
 
	$HAL_DMA_Inô
(
DMA_H™dÀTy≥Def
 *
hdma
)

145 
uöt32_t
 
tmp
 = 0U;

148 if(
hdma
 =
NULL
)

150  
HAL_ERROR
;

154 
	`as£π_∑øm
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In°™˚
));

155 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
hdma
->
Inô
.
Dúe˘i⁄
));

156 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
hdma
->
Inô
.
PîùhInc
));

157 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
hdma
->
Inô
.
MemInc
));

158 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
hdma
->
Inô
.
PîùhD©aAlignmít
));

159 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
hdma
->
Inô
.
MemD©aAlignmít
));

160 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
hdma
->
Inô
.
Mode
));

161 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
hdma
->
Inô
.
Pri‹ôy
));

163 #i‡
	`deföed
 (
DMA2
)

165 i‡((
uöt32_t
)(
hdma
->
In°™˚
Ë< (uöt32_t)(
DMA2_Ch™√l1
))

168 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

169 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

174 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA2_Ch™√l1
Ë/ ((uöt32_t)
DMA2_Ch™√l2
 - (uint32_t)DMA2_Channel1)) << 2;

175 
hdma
->
DmaBa£Addªss
 = 
DMA2
;

179 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

180 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

184 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

187 
tmp
 = 
hdma
->
In°™˚
->
CCR
;

190 
tmp
 &((
uöt32_t
)~(
DMA_CCR_PL
 | 
DMA_CCR_MSIZE
 | 
DMA_CCR_PSIZE
 | \

191 
DMA_CCR_MINC
 | 
DMA_CCR_PINC
 | 
DMA_CCR_CIRC
 | \

192 
DMA_CCR_DIR
));

195 
tmp
 |
hdma
->
Inô
.
Dúe˘i⁄
 |

196 
hdma
->
Inô
.
PîùhInc
 | hdma->Inô.
MemInc
 |

197 
hdma
->
Inô
.
PîùhD©aAlignmít
 | hdma->Inô.
MemD©aAlignmít
 |

198 
hdma
->
Inô
.
Mode
 | hdma->Inô.
Pri‹ôy
;

201 
hdma
->
In°™˚
->
CCR
 = 
tmp
;

204 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

207 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

209 
hdma
->
Lock
 = 
HAL_UNLOCKED
;

211  
HAL_OK
;

212 
	}
}

220 
HAL_SètusTy≥Def
 
	$HAL_DMA_DeInô
(
DMA_H™dÀTy≥Def
 *
hdma
)

223 if(
hdma
 =
NULL
)

225  
HAL_ERROR
;

229 
	`as£π_∑øm
(
	`IS_DMA_ALL_INSTANCE
(
hdma
->
In°™˚
));

232 
	`__HAL_DMA_DISABLE
(
hdma
);

235 
hdma
->
In°™˚
->
CCR
 = 0U;

238 
hdma
->
In°™˚
->
CNDTR
 = 0U;

241 
hdma
->
In°™˚
->
CPAR
 = 0U;

244 
hdma
->
In°™˚
->
CMAR
 = 0U;

246 #i‡
	`deföed
 (
DMA2
)

248 i‡((
uöt32_t
)(
hdma
->
In°™˚
Ë< (uöt32_t)(
DMA2_Ch™√l1
))

251 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

252 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

257 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA2_Ch™√l1
Ë/ ((uöt32_t)
DMA2_Ch™√l2
 - (uint32_t)DMA2_Channel1)) << 2;

258 
hdma
->
DmaBa£Addªss
 = 
DMA2
;

262 
hdma
->
Ch™√lIndex
 = (((
uöt32_t
)hdma->
In°™˚
 - (uöt32_t)
DMA1_Ch™√l1
Ë/ ((uöt32_t)
DMA1_Ch™√l2
 - (uint32_t)DMA1_Channel1)) << 2;

263 
hdma
->
DmaBa£Addªss
 = 
DMA1
;

267 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << (hdma->
Ch™√lIndex
));

270 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

271 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

272 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

273 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

276 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

279 
hdma
->
Sèã
 = 
HAL_DMA_STATE_RESET
;

282 
	`__HAL_UNLOCK
(
hdma
);

284  
HAL_OK
;

285 
	}
}

319 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

321 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

324 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

327 
	`__HAL_LOCK
(
hdma
);

329 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

332 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

333 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

336 
	`__HAL_DMA_DISABLE
(
hdma
);

339 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

342 
	`__HAL_DMA_ENABLE
(
hdma
);

347 
	`__HAL_UNLOCK
(
hdma
);

348 
°©us
 = 
HAL_BUSY
;

350  
°©us
;

351 
	}
}

362 
HAL_SètusTy≥Def
 
	$HAL_DMA_Sèπ_IT
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

364 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

367 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
D©aLígth
));

370 
	`__HAL_LOCK
(
hdma
);

372 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

375 
hdma
->
Sèã
 = 
HAL_DMA_STATE_BUSY
;

376 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NONE
;

379 
	`__HAL_DMA_DISABLE
(
hdma
);

382 
	`DMA_SëC⁄fig
(
hdma
, 
SrcAddªss
, 
D°Addªss
, 
D©aLígth
);

386 if(
NULL
 !
hdma
->
X„rHÆfC∂tCÆlback
)

389 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

393 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

394 
	`__HAL_DMA_ENABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_TE
));

397 
	`__HAL_DMA_ENABLE
(
hdma
);

402 
	`__HAL_UNLOCK
(
hdma
);

405 
°©us
 = 
HAL_BUSY
;

407  
°©us
;

408 
	}
}

416 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t
(
DMA_H™dÀTy≥Def
 *
hdma
)

418 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

420 if(
hdma
->
Sèã
 !
HAL_DMA_STATE_BUSY
)

423 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

426 
	`__HAL_UNLOCK
(
hdma
);

428  
HAL_ERROR
;

434 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

437 
	`__HAL_DMA_DISABLE
(
hdma
);

440 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

443 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

446 
	`__HAL_UNLOCK
(
hdma
);

448  
°©us
;

449 
	}
}

457 
HAL_SètusTy≥Def
 
	$HAL_DMA_Ab‹t_IT
(
DMA_H™dÀTy≥Def
 *
hdma
)

459 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

461 if(
HAL_DMA_STATE_BUSY
 !
hdma
->
Sèã
)

464 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

466 
°©us
 = 
HAL_ERROR
;

471 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

474 
	`__HAL_DMA_DISABLE
(
hdma
);

477 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_GI_FLAG_INDEX
(hdma));

480 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

483 
	`__HAL_UNLOCK
(
hdma
);

486 if(
hdma
->
X„rAb‹tCÆlback
 !
NULL
)

488 
hdma
->
	`X„rAb‹tCÆlback
(hdma);

491  
°©us
;

492 
	}
}

502 
HAL_SètusTy≥Def
 
	$HAL_DMA_PﬁlF‹Tøns„r
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
Com∂ëeLevñ
, uöt32_à
Timeout
)

504 
uöt32_t
 
ãmp
;

505 
uöt32_t
 
tick°¨t
 = 0U;

507 if(
HAL_DMA_STATE_BUSY
 !
hdma
->
Sèã
)

510 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NO_XFER
;

511 
	`__HAL_UNLOCK
(
hdma
);

512  
HAL_ERROR
;

516 i‡(
RESET
 !(
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
))

518 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_NOT_SUPPORTED
;

519  
HAL_ERROR
;

523 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

526 
ãmp
 = 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(
hdma
);

531 
ãmp
 = 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(
hdma
);

535 
tick°¨t
 = 
	`HAL_GëTick
();

537 
	`__HAL_DMA_GET_FLAG
(
hdma
, 
ãmp
Ë=
RESET
)

539 if((
	`__HAL_DMA_GET_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TE_FLAG_INDEX
(hdma)Ë!
RESET
))

544 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

547 
	`SET_BIT
(
hdma
->
Eº‹Code
, 
HAL_DMA_ERROR_TE
);

550 
hdma
->
Sèã

HAL_DMA_STATE_READY
;

553 
	`__HAL_UNLOCK
(
hdma
);

555  
HAL_ERROR
;

558 if(
Timeout
 !
HAL_MAX_DELAY
)

560 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

563 
	`SET_BIT
(
hdma
->
Eº‹Code
, 
HAL_DMA_ERROR_TIMEOUT
);

566 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

569 
	`__HAL_UNLOCK
(
hdma
);

571  
HAL_ERROR
;

576 if(
Com∂ëeLevñ
 =
HAL_DMA_FULL_TRANSFER
)

579 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

583 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

588 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

592 
	`__HAL_UNLOCK
(
hdma
);

594  
HAL_OK
;

595 
	}
}

603 
	$HAL_DMA_IRQH™dÀr
(
DMA_H™dÀTy≥Def
 *
hdma
)

605 
uöt32_t
 
Êag_ô
 = 
hdma
->
DmaBa£Addªss
->
ISR
;

606 
uöt32_t
 
sour˚_ô
 = 
hdma
->
In°™˚
->
CCR
;

609 i‡(((
Êag_ô
 & (
DMA_FLAG_HT1
 << 
hdma
->
Ch™√lIndex
)Ë!
RESET
Ë&& ((
sour˚_ô
 & 
DMA_IT_HT
) != RESET))

612 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

615 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_HT
);

618 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_HT_FLAG_INDEX
(hdma));

623 if(
hdma
->
X„rHÆfC∂tCÆlback
 !
NULL
)

626 
hdma
->
	`X„rHÆfC∂tCÆlback
(hdma);

631 i‡(((
Êag_ô
 & (
DMA_FLAG_TC1
 << 
hdma
->
Ch™√lIndex
)Ë!
RESET
Ë&& ((
sour˚_ô
 & 
DMA_IT_TC
) != RESET))

633 if((
hdma
->
In°™˚
->
CCR
 & 
DMA_CCR_CIRC
) == 0U)

636 
	`__HAL_DMA_DISABLE_IT
(
hdma
, 
DMA_IT_TE
 | 
DMA_IT_TC
);

639 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

642 
	`__HAL_DMA_CLEAR_FLAG
(
hdma
, 
	`__HAL_DMA_GET_TC_FLAG_INDEX
(hdma));

645 
	`__HAL_UNLOCK
(
hdma
);

647 if(
hdma
->
X„rC∂tCÆlback
 !
NULL
)

650 
hdma
->
	`X„rC∂tCÆlback
(hdma);

655 i‡(–
RESET
 !(
Êag_ô
 & (
DMA_FLAG_TE1
 << 
hdma
->
Ch™√lIndex
))Ë&& (RESET !(
sour˚_ô
 & 
DMA_IT_TE
)))

660 
	`__HAL_DMA_DISABLE_IT
(
hdma
, (
DMA_IT_TC
 | 
DMA_IT_HT
 | 
DMA_IT_TE
));

663 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

666 
hdma
->
Eº‹Code
 = 
HAL_DMA_ERROR_TE
;

669 
hdma
->
Sèã
 = 
HAL_DMA_STATE_READY
;

672 
	`__HAL_UNLOCK
(
hdma
);

674 i‡(
hdma
->
X„rEº‹CÆlback
 !
NULL
)

677 
hdma
->
	`X„rEº‹CÆlback
(hdma);

681 
	}
}

693 
HAL_SètusTy≥Def
 
HAL_DMA_Regi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
, (* 
pCÆlback
)–DMA_H™dÀTy≥De‡* 
_hdma
))

695 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

698 
	`__HAL_LOCK
(
hdma
);

700 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

702 
CÆlbackID
)

704 
HAL_DMA_XFER_CPLT_CB_ID
:

705 
hdma
->
X„rC∂tCÆlback
 = 
pCÆlback
;

708 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

709 
hdma
->
X„rHÆfC∂tCÆlback
 = 
pCÆlback
;

712 
HAL_DMA_XFER_ERROR_CB_ID
:

713 
hdma
->
X„rEº‹CÆlback
 = 
pCÆlback
;

716 
HAL_DMA_XFER_ABORT_CB_ID
:

717 
hdma
->
X„rAb‹tCÆlback
 = 
pCÆlback
;

721 
°©us
 = 
HAL_ERROR
;

727 
°©us
 = 
HAL_ERROR
;

731 
	`__HAL_UNLOCK
(
hdma
);

733  
°©us
;

734 
	}
}

744 
HAL_SètusTy≥Def
 
	$HAL_DMA_UnRegi°îCÆlback
(
DMA_H™dÀTy≥Def
 *
hdma
, 
HAL_DMA_CÆlbackIDTy≥Def
 
CÆlbackID
)

746 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

749 
	`__HAL_LOCK
(
hdma
);

751 if(
HAL_DMA_STATE_READY
 =
hdma
->
Sèã
)

753 
CÆlbackID
)

755 
HAL_DMA_XFER_CPLT_CB_ID
:

756 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

759 
HAL_DMA_XFER_HALFCPLT_CB_ID
:

760 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

763 
HAL_DMA_XFER_ERROR_CB_ID
:

764 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

767 
HAL_DMA_XFER_ABORT_CB_ID
:

768 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

771 
HAL_DMA_XFER_ALL_CB_ID
:

772 
hdma
->
X„rC∂tCÆlback
 = 
NULL
;

773 
hdma
->
X„rHÆfC∂tCÆlback
 = 
NULL
;

774 
hdma
->
X„rEº‹CÆlback
 = 
NULL
;

775 
hdma
->
X„rAb‹tCÆlback
 = 
NULL
;

779 
°©us
 = 
HAL_ERROR
;

785 
°©us
 = 
HAL_ERROR
;

789 
	`__HAL_UNLOCK
(
hdma
);

791  
°©us
;

792 
	}
}

820 
HAL_DMA_SèãTy≥Def
 
	$HAL_DMA_GëSèã
(
DMA_H™dÀTy≥Def
 *
hdma
)

823  
hdma
->
Sèã
;

824 
	}
}

832 
uöt32_t
 
	$HAL_DMA_GëEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

834  
hdma
->
Eº‹Code
;

835 
	}
}

858 
	$DMA_SëC⁄fig
(
DMA_H™dÀTy≥Def
 *
hdma
, 
uöt32_t
 
SrcAddªss
, uöt32_à
D°Addªss
, uöt32_à
D©aLígth
)

861 
hdma
->
DmaBa£Addªss
->
IFCR
 = (
DMA_ISR_GIF1
 << hdma->
Ch™√lIndex
);

864 
hdma
->
In°™˚
->
CNDTR
 = 
D©aLígth
;

867 if((
hdma
->
Inô
.
Dúe˘i⁄
Ë=
DMA_MEMORY_TO_PERIPH
)

870 
hdma
->
In°™˚
->
CPAR
 = 
D°Addªss
;

873 
hdma
->
In°™˚
->
CMAR
 = 
SrcAddªss
;

879 
hdma
->
In°™˚
->
CPAR
 = 
SrcAddªss
;

882 
hdma
->
In°™˚
->
CMAR
 = 
D°Addªss
;

884 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_exti.c

87 
	~"°m32f1xx_hÆ.h
"

104 #ifde‡
HAL_EXTI_MODULE_ENABLED


143 
HAL_SètusTy≥Def
 
	$HAL_EXTI_SëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
)

145 
uöt32_t
 
ªgvÆ
;

146 
uöt32_t
 
löïos
;

147 
uöt32_t
 
masklöe
;

150 i‡((
hexti
 =
NULL
Ë|| (
pExtiC⁄fig
 == NULL))

152  
HAL_ERROR
;

156 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
pExtiC⁄fig
->
Löe
));

157 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
pExtiC⁄fig
->
Mode
));

160 
hexti
->
Löe
 = 
pExtiC⁄fig
->Line;

163 
löïos
 = (
pExtiC⁄fig
->
Löe
 & 
EXTI_PIN_MASK
);

164 
masklöe
 = (1uL << 
löïos
);

167 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_CONFIG
) != 0x00u)

169 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
pExtiC⁄fig
->
Triggî
));

173 i‡((
pExtiC⁄fig
->
Triggî
 & 
EXTI_TRIGGER_RISING
) != 0x00u)

175 
EXTI
->
RTSR
 |
masklöe
;

179 
EXTI
->
RTSR
 &~
masklöe
;

184 i‡((
pExtiC⁄fig
->
Triggî
 & 
EXTI_TRIGGER_FALLING
) != 0x00u)

186 
EXTI
->
FTSR
 |
masklöe
;

190 
EXTI
->
FTSR
 &~
masklöe
;

195 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_GPIO
) == EXTI_GPIO)

197 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PORT
(
pExtiC⁄fig
->
GPIOSñ
));

198 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PIN
(
löïos
));

200 
ªgvÆ
 = 
AFIO
->
EXTICR
[
löïos
 >> 2u];

201 
ªgvÆ
 &~(
AFIO_EXTICR1_EXTI0
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
löïos
 & 0x03u)));

202 
ªgvÆ
 |(
pExtiC⁄fig
->
GPIOSñ
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
löïos
 & 0x03u)));

203 
AFIO
->
EXTICR
[
löïos
 >> 2u] = 
ªgvÆ
;

209 i‡((
pExtiC⁄fig
->
Mode
 & 
EXTI_MODE_INTERRUPT
) != 0x00u)

211 
EXTI
->
IMR
 |
masklöe
;

215 
EXTI
->
IMR
 &~
masklöe
;

220 i‡((
pExtiC⁄fig
->
Mode
 & 
EXTI_MODE_EVENT
) != 0x00u)

222 
EXTI
->
EMR
 |
masklöe
;

226 
EXTI
->
EMR
 &~
masklöe
;

229  
HAL_OK
;

230 
	}
}

238 
HAL_SètusTy≥Def
 
	$HAL_EXTI_GëC⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_C⁄figTy≥Def
 *
pExtiC⁄fig
)

240 
uöt32_t
 
ªgvÆ
;

241 
uöt32_t
 
löïos
;

242 
uöt32_t
 
masklöe
;

245 i‡((
hexti
 =
NULL
Ë|| (
pExtiC⁄fig
 == NULL))

247  
HAL_ERROR
;

251 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

254 
pExtiC⁄fig
->
Löe
 = 
hexti
->Line;

257 
löïos
 = (
pExtiC⁄fig
->
Löe
 & 
EXTI_PIN_MASK
);

258 
masklöe
 = (1uL << 
löïos
);

263 i‡((
EXTI
->
IMR
 & 
masklöe
) != 0x00u)

265 
pExtiC⁄fig
->
Mode
 = 
EXTI_MODE_INTERRUPT
;

269 
pExtiC⁄fig
->
Mode
 = 
EXTI_MODE_NONE
;

274 i‡((
EXTI
->
EMR
 & 
masklöe
) != 0x00u)

276 
pExtiC⁄fig
->
Mode
 |
EXTI_MODE_EVENT
;

280 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_CONFIG
) != 0x00u)

283 i‡((
EXTI
->
RTSR
 & 
masklöe
) != 0x00u)

285 
pExtiC⁄fig
->
Triggî
 = 
EXTI_TRIGGER_RISING
;

289 
pExtiC⁄fig
->
Triggî
 = 
EXTI_TRIGGER_NONE
;

294 i‡((
EXTI
->
FTSR
 & 
masklöe
) != 0x00u)

296 
pExtiC⁄fig
->
Triggî
 |
EXTI_TRIGGER_FALLING
;

300 i‡((
pExtiC⁄fig
->
Löe
 & 
EXTI_GPIO
) == EXTI_GPIO)

302 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PIN
(
löïos
));

304 
ªgvÆ
 = 
AFIO
->
EXTICR
[
löïos
 >> 2u];

305 
pExtiC⁄fig
->
GPIOSñ
 = ((
ªgvÆ
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (3uL - (
löïos
 & 0x03u)))) >> 24);

309 
pExtiC⁄fig
->
GPIOSñ
 = 0x00u;

315 
pExtiC⁄fig
->
Triggî
 = 
EXTI_TRIGGER_NONE
;

316 
pExtiC⁄fig
->
GPIOSñ
 = 0x00u;

319  
HAL_OK
;

320 
	}
}

327 
HAL_SètusTy≥Def
 
	$HAL_EXTI_CÀ¨C⁄figLöe
(
EXTI_H™dÀTy≥Def
 *
hexti
)

329 
uöt32_t
 
ªgvÆ
;

330 
uöt32_t
 
löïos
;

331 
uöt32_t
 
masklöe
;

334 i‡(
hexti
 =
NULL
)

336  
HAL_ERROR
;

340 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

343 
löïos
 = (
hexti
->
Löe
 & 
EXTI_PIN_MASK
);

344 
masklöe
 = (1uL << 
löïos
);

347 
EXTI
->
IMR
 = (EXTI->IMR & ~
masklöe
);

350 
EXTI
->
EMR
 = (EXTI->EMR & ~
masklöe
);

353 i‡((
hexti
->
Löe
 & 
EXTI_CONFIG
) != 0x00u)

355 
EXTI
->
RTSR
 = (EXTI->RTSR & ~
masklöe
);

356 
EXTI
->
FTSR
 = (EXTI->FTSR & ~
masklöe
);

359 i‡((
hexti
->
Löe
 & 
EXTI_GPIO
) == EXTI_GPIO)

361 
	`as£π_∑øm
(
	`IS_EXTI_GPIO_PIN
(
löïos
));

363 
ªgvÆ
 = 
AFIO
->
EXTICR
[
löïos
 >> 2u];

364 
ªgvÆ
 &~(
AFIO_EXTICR1_EXTI0
 << (
AFIO_EXTICR1_EXTI1_Pos
 * (
löïos
 & 0x03u)));

365 
AFIO
->
EXTICR
[
löïos
 >> 2u] = 
ªgvÆ
;

369  
HAL_OK
;

370 
	}
}

380 
HAL_SètusTy≥Def
 
HAL_EXTI_Regi°îCÆlback
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
EXTI_CÆlbackIDTy≥Def
 
CÆlbackID
, (*
pPídögCb‚
)())

382 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

384 
CÆlbackID
)

386 
HAL_EXTI_COMMON_CB_ID
:

387 
hexti
->
PídögCÆlback
 = 
pPídögCb‚
;

391 
°©us
 = 
HAL_ERROR
;

395  
°©us
;

396 
	}
}

405 
HAL_SètusTy≥Def
 
	$HAL_EXTI_GëH™dÀ
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
ExtiLöe
)

408 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
ExtiLöe
));

411 i‡(
hexti
 =
NULL
)

413  
HAL_ERROR
;

418 
hexti
->
Löe
 = 
ExtiLöe
;

420  
HAL_OK
;

422 
	}
}

445 
	$HAL_EXTI_IRQH™dÀr
(
EXTI_H™dÀTy≥Def
 *
hexti
)

447 
uöt32_t
 
ªgvÆ
;

448 
uöt32_t
 
masklöe
;

451 
masklöe
 = (1uL << (
hexti
->
Löe
 & 
EXTI_PIN_MASK
));

454 
ªgvÆ
 = (
EXTI
->
PR
 & 
masklöe
);

455 i‡(
ªgvÆ
 != 0x00u)

458 
EXTI
->
PR
 = 
masklöe
;

461 i‡(
hexti
->
PídögCÆlback
 !
NULL
)

463 
hexti
->
	`PídögCÆlback
();

466 
	}
}

477 
uöt32_t
 
	$HAL_EXTI_GëPídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
Edge
)

479 
uöt32_t
 
ªgvÆ
;

480 
uöt32_t
 
masklöe
;

481 
uöt32_t
 
löïos
;

484 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

485 
	`as£π_∑øm
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
Löe
));

486 
	`as£π_∑øm
(
	`IS_EXTI_PENDING_EDGE
(
Edge
));

489 
löïos
 = (
hexti
->
Löe
 & 
EXTI_PIN_MASK
);

490 
masklöe
 = (1uL << 
löïos
);

493 
ªgvÆ
 = ((
EXTI
->
PR
 & 
masklöe
Ë>> 
löïos
);

494  
ªgvÆ
;

495 
	}
}

506 
	$HAL_EXTI_CÀ¨Pídög
(
EXTI_H™dÀTy≥Def
 *
hexti
, 
uöt32_t
 
Edge
)

508 
uöt32_t
 
masklöe
;

511 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

512 
	`as£π_∑øm
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
Löe
));

513 
	`as£π_∑øm
(
	`IS_EXTI_PENDING_EDGE
(
Edge
));

516 
masklöe
 = (1uL << (
hexti
->
Löe
 & 
EXTI_PIN_MASK
));

519 
EXTI
->
PR
 = 
masklöe
;

520 
	}
}

527 
	$HAL_EXTI_Gíî©eSWI
(
EXTI_H™dÀTy≥Def
 *
hexti
)

529 
uöt32_t
 
masklöe
;

532 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
hexti
->
Löe
));

533 
	`as£π_∑øm
(
	`IS_EXTI_CONFIG_LINE
(
hexti
->
Löe
));

536 
masklöe
 = (1uL << (
hexti
->
Löe
 & 
EXTI_PIN_MASK
));

539 
EXTI
->
SWIER
 = 
masklöe
;

540 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash.c

85 
	~"°m32f1xx_hÆ.h
"

91 #ifde‡
HAL_FLASH_MODULE_ENABLED


121 
FLASH_Pro˚ssTy≥Def
 
	gpFœsh
;

130 
FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

131 
FLASH_SëEº‹Code
();

132 
FLASH_PageEø£
(
uöt32_t
 
PageAddªss
);

168 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

170 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

171 
uöt8_t
 
ödex
 = 0;

172 
uöt8_t
 
nbôî©i⁄s
 = 0;

175 
	`__HAL_LOCK
(&
pFœsh
);

178 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

179 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

181 #i‡
	`deföed
(
FLASH_BANK2_END
)

182 if(
Addªss
 <
FLASH_BANK1_END
)

186 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

187 #i‡
	`deföed
(
FLASH_BANK2_END
)

192 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
(
FLASH_TIMEOUT_VALUE
);

196 if(
°©us
 =
HAL_OK
)

198 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

201 
nbôî©i⁄s
 = 1U;

203 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

206 
nbôî©i⁄s
 = 2U;

211 
nbôî©i⁄s
 = 4U;

214 
ödex
 = 0U; index < 
nbôî©i⁄s
; index++)

216 
	`FLASH_Progøm_HÆfW‹d
((
Addªss
 + (2U*
ödex
)), (
uöt16_t
)(
D©a
 >> (16U*index)));

218 #i‡
	`deföed
(
FLASH_BANK2_END
)

219 if(
Addªss
 <
FLASH_BANK1_END
)

223 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_TIMEOUT_VALUE
);

226 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

227 #i‡
	`deföed
(
FLASH_BANK2_END
)

232 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
(
FLASH_TIMEOUT_VALUE
);

235 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

239 i‡(
°©us
 !
HAL_OK
)

247 
	`__HAL_UNLOCK
(&
pFœsh
);

249  
°©us
;

250 
	}
}

267 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Progøm_IT
(
uöt32_t
 
Ty≥Progøm
, uöt32_à
Addªss
, 
uöt64_t
 
D©a
)

269 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

272 
	`__HAL_LOCK
(&
pFœsh
);

275 
	`as£π_∑øm
(
	`IS_FLASH_TYPEPROGRAM
(
Ty≥Progøm
));

276 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

278 #i‡
	`deföed
(
FLASH_BANK2_END
)

280 i‡(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

282  
HAL_ERROR
;

285 if(
Addªss
 <
FLASH_BANK1_END
)

288 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
);

293 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

297 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

300 
pFœsh
.
Addªss
 = Address;

301 
pFœsh
.
D©a
 = Data;

303 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_HALFWORD
)

305 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMHALFWORD
;

307 
pFœsh
.
D©aRemaöög
 = 1U;

309 if(
Ty≥Progøm
 =
FLASH_TYPEPROGRAM_WORD
)

311 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMWORD
;

313 
pFœsh
.
D©aRemaöög
 = 2U;

317 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PROGRAMDOUBLEWORD
;

319 
pFœsh
.
D©aRemaöög
 = 4U;

323 
	`FLASH_Progøm_HÆfW‹d
(
Addªss
, (
uöt16_t
)
D©a
);

325  
°©us
;

326 
	}
}

332 
	$HAL_FLASH_IRQH™dÀr
()

334 
uöt32_t
 
addªs°mp
 = 0U;

337 #i‡
	`deföed
(
FLASH_BANK2_END
)

338 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK1
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK1
) || \

339 (
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
)))

341 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
Ë||__HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR
))

345 
addªs°mp
 = 
pFœsh
.
Addªss
;

347 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

350 
	`FLASH_SëEº‹Code
();

353 
	`HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
addªs°mp
);

356 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

360 #i‡
	`deföed
(
FLASH_BANK2_END
)

361 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK1
))

364 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK1
);

366 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

369 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

373 if(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

375 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

378 
pFœsh
.
D©aRemaöög
--;

381 if(
pFœsh
.
D©aRemaöög
 != 0U)

383 
addªs°mp
 = 
pFœsh
.
Addªss
;

385 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

388 
addªs°mp
 = 
pFœsh
.
Addªss
 + 
FLASH_PAGE_SIZE
;

389 
pFœsh
.
Addªss
 = 
addªs°mp
;

392 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

394 
	`FLASH_PageEø£
(
addªs°mp
);

400 
pFœsh
.
Addªss
 = 
addªs°mp
 = 0xFFFFFFFFU;

401 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

403 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
addªs°mp
);

406 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

409 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

411 #i‡
	`deföed
(
FLASH_BANK2_END
)

413 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR2
, 
FLASH_CR2_MER
))

418 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(0U);

421 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

423 #i‡
	`deföed
(
FLASH_BANK2_END
)

429 
pFœsh
.
D©aRemaöög
--;

432 if(
pFœsh
.
D©aRemaöög
 != 0U)

435 
pFœsh
.
Addªss
 += 2U;

436 
addªs°mp
 = 
pFœsh
.
Addªss
;

439 
pFœsh
.
D©a
 = (pFlash.Data >> 16U);

442 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

445 
	`FLASH_Progøm_HÆfW‹d
(
addªs°mp
, (
uöt16_t
)
pFœsh
.
D©a
);

451 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMHALFWORD
)

453 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

455 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMWORD
)

457 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
 - 2U);

461 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
 - 6U);

465 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

466 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

472 #i‡
	`deföed
(
FLASH_BANK2_END
)

474 if(
	`__HAL_FLASH_GET_FLAG
–
FLASH_FLAG_EOP_BANK2
))

477 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

480 if(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

482 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PAGEERASE
)

485 
pFœsh
.
D©aRemaöög
--;

488 if(
pFœsh
.
D©aRemaöög
 != 0U)

491 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

494 
pFœsh
.
Addªss
 +
FLASH_PAGE_SIZE
;

495 
addªs°mp
 = 
pFœsh
.
Addªss
;

498 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

500 
	`FLASH_PageEø£
(
addªs°mp
);

507 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

508 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

511 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

514 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_MASSERASE
)

517 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

519 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_MER
))

523 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(0U);

525 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

531 
pFœsh
.
D©aRemaöög
--;

534 if(
pFœsh
.
D©aRemaöög
 != 0U)

537 
pFœsh
.
Addªss
 += 2U;

538 
addªs°mp
 = 
pFœsh
.
Addªss
;

541 
pFœsh
.
D©a
 = (pFlash.Data >> 16U);

544 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

547 
	`FLASH_Progøm_HÆfW‹d
(
addªs°mp
, (
uöt16_t
)
pFœsh
.
D©a
);

553 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMHALFWORD
)

555 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
);

557 i‡(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_PROGRAMWORD
)

559 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
-2U);

563 
	`HAL_FLASH_EndOfO≥øti⁄CÆlback
(
pFœsh
.
Addªss
-6U);

567 
pFœsh
.
Addªss
 = 0xFFFFFFFFU;

568 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_NONE
;

575 if(
pFœsh
.
Pro˚duªOnGoög
 =
FLASH_PROC_NONE
)

577 #i‡
	`deföed
(
FLASH_BANK2_END
)

579 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

580 
	`CLEAR_BIT
(
FLASH
->
CR2
, (
FLASH_CR2_PG
 | 
FLASH_CR2_PER
 | 
FLASH_CR2_MER
));

583 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP_BANK1
 | 
FLASH_IT_ERR_BANK1
 | 
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

586 
	`CLEAR_BIT
(
FLASH
->
CR
, (
FLASH_CR_PG
 | 
FLASH_CR_PER
 | 
FLASH_CR_MER
));

589 
	`__HAL_FLASH_DISABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

593 
	`__HAL_UNLOCK
(&
pFœsh
);

595 
	}
}

606 
__wók
 
	$HAL_FLASH_EndOfO≥øti⁄CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

609 
	`UNUSED
(
Rëu∫VÆue
);

614 
	}
}

624 
__wók
 
	$HAL_FLASH_O≥øti⁄Eº‹CÆlback
(
uöt32_t
 
Rëu∫VÆue
)

627 
	`UNUSED
(
Rëu∫VÆue
);

632 
	}
}

657 
HAL_SètusTy≥Def
 
	$HAL_FLASH_U∆ock
()

659 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

661 if(
	`READ_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
Ë!
RESET
)

664 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY1
);

665 
	`WRITE_REG
(
FLASH
->
KEYR
, 
FLASH_KEY2
);

668 if(
	`READ_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
Ë!
RESET
)

670 
°©us
 = 
HAL_ERROR
;

673 #i‡
	`deföed
(
FLASH_BANK2_END
)

674 if(
	`READ_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
Ë!
RESET
)

677 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY1
);

678 
	`WRITE_REG
(
FLASH
->
KEYR2
, 
FLASH_KEY2
);

681 if(
	`READ_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
Ë!
RESET
)

683 
°©us
 = 
HAL_ERROR
;

688  
°©us
;

689 
	}
}

695 
HAL_SètusTy≥Def
 
	$HAL_FLASH_Lock
()

698 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_LOCK
);

700 #i‡
	`deföed
(
FLASH_BANK2_END
)

702 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_LOCK
);

705  
HAL_OK
;

706 
	}
}

712 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_U∆ock
()

714 i‡(
	`HAL_IS_BIT_CLR
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
))

717 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY1
);

718 
	`WRITE_REG
(
FLASH
->
OPTKEYR
, 
FLASH_OPTKEY2
);

722  
HAL_ERROR
;

725  
HAL_OK
;

726 
	}
}

732 
HAL_SètusTy≥Def
 
	$HAL_FLASH_OB_Lock
()

735 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTWRE
);

737  
HAL_OK
;

738 
	}
}

745 
	$HAL_FLASH_OB_Launch
()

748 
	`HAL_NVIC_Sy°emRe£t
();

749 
	}
}

774 
uöt32_t
 
	$HAL_FLASH_GëEº‹
()

776  
pFœsh
.
Eº‹Code
;

777 
	}
}

797 
	$FLASH_Progøm_HÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

800 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

802 #i‡
	`deföed
(
FLASH_BANK2_END
)

803 if(
Addªss
 <
FLASH_BANK1_END
)

807 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PG
);

808 #i‡
	`deföed
(
FLASH_BANK2_END
)

813 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PG
);

818 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

819 
	}
}

826 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

832 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

834 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY
))

836 i‡(
Timeout
 !
HAL_MAX_DELAY
)

838 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

840  
HAL_TIMEOUT
;

846 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP
))

849 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP
);

852 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
) ||

853 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
) ||

854 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

857 
	`FLASH_SëEº‹Code
();

858  
HAL_ERROR
;

862  
HAL_OK
;

863 
	}
}

865 #i‡
deföed
(
FLASH_BANK2_END
)

871 
HAL_SètusTy≥Def
 
	$FLASH_WaôF‹La°O≥øti⁄B™k2
(
uöt32_t
 
Timeout
)

877 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

879 
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_BSY_BANK2
))

881 i‡(
Timeout
 !
HAL_MAX_DELAY
)

883 if((
Timeout
 =0UË|| ((
	`HAL_GëTick
()-
tick°¨t
) > Timeout))

885  
HAL_TIMEOUT
;

891 i‡(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_EOP_BANK2
))

894 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_EOP_BANK2
);

897 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR_BANK2
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

900 
	`FLASH_SëEº‹Code
();

901  
HAL_ERROR
;

905  
HAL_OK
;

907 
	}
}

914 
	$FLASH_SëEº‹Code
()

916 
uöt32_t
 
Êags
 = 0U;

918 #i‡
	`deföed
(
FLASH_BANK2_END
)

919 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_WRPERR_BANK2
))

921 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_WRPERR
))

924 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_WRP
;

925 #i‡
	`deföed
(
FLASH_BANK2_END
)

926 
Êags
 |
FLASH_FLAG_WRPERR
 | 
FLASH_FLAG_WRPERR_BANK2
;

928 
Êags
 |
FLASH_FLAG_WRPERR
;

931 #i‡
	`deföed
(
FLASH_BANK2_END
)

932 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
Ë|| __HAL_FLASH_GET_FLAG(
FLASH_FLAG_PGERR_BANK2
))

934 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_PGERR
))

937 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_PROG
;

938 #i‡
	`deföed
(
FLASH_BANK2_END
)

939 
Êags
 |
FLASH_FLAG_PGERR
 | 
FLASH_FLAG_PGERR_BANK2
;

941 
Êags
 |
FLASH_FLAG_PGERR
;

944 if(
	`__HAL_FLASH_GET_FLAG
(
FLASH_FLAG_OPTVERR
))

946 
pFœsh
.
Eº‹Code
 |
HAL_FLASH_ERROR_OPTV
;

947 
	`__HAL_FLASH_CLEAR_FLAG
(
FLASH_FLAG_OPTVERR
);

951 
	`__HAL_FLASH_CLEAR_FLAG
(
Êags
);

952 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c

43 
	~"°m32f1xx_hÆ.h
"

48 #ifde‡
HAL_FLASH_MODULE_ENABLED


57 
FLASH_Pro˚ssTy≥Def
 
pFœsh
;

76 
	#FLASH_POSITION_IWDGSW_BIT
 
FLASH_OBR_IWDG_SW_Pos


	)

77 
	#FLASH_POSITION_OB_USERDATA0_BIT
 
FLASH_OBR_DATA0_Pos


	)

78 
	#FLASH_POSITION_OB_USERDATA1_BIT
 
FLASH_OBR_DATA1_Pos


	)

97 
FLASH_MassEø£
(
uöt32_t
 
B™ks
);

98 
FLASH_PageEø£
(
uöt32_t
 
PageAddªss
);

101 
HAL_SètusTy≥Def
 
FLASH_OB_E«bÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
);

102 
HAL_SètusTy≥Def
 
FLASH_OB_DißbÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
);

103 
HAL_SètusTy≥Def
 
FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
RódPrŸe˘Levñ
);

104 
HAL_SètusTy≥Def
 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
U£rC⁄fig
);

105 
HAL_SètusTy≥Def
 
FLASH_OB_ProgømD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

106 
uöt32_t
 
FLASH_OB_GëWRP
();

107 
uöt32_t
 
FLASH_OB_GëRDP
();

108 
uöt8_t
 
FLASH_OB_GëU£r
();

159 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
, 
uöt32_t
 *
PageEº‹
)

161 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

162 
uöt32_t
 
addªss
 = 0U;

165 
	`__HAL_LOCK
(&
pFœsh
);

168 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

170 i‡(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

172 #i‡
	`deföed
(
FLASH_BANK2_END
)

173 i‡(
pEø£Inô
->
B™ks
 =
FLASH_BANK_BOTH
)

177 i‡((
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
) && \

178 (
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
))

181 
	`FLASH_MassEø£
(
FLASH_BANK_BOTH
);

184 i‡((
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
) && \

185 (
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
))

187 
°©us
 = 
HAL_OK
;

191 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

192 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

195 i‡(
pEø£Inô
->
B™ks
 =
FLASH_BANK_2
)

199 i‡(
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

202 
	`FLASH_MassEø£
(
FLASH_BANK_2
);

205 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

208 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

216 i‡(
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

219 
	`FLASH_MassEø£
(
FLASH_BANK_1
);

222 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

225 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

233 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

234 
	`as£π_∑øm
(
	`IS_FLASH_NB_PAGES
(
pEø£Inô
->
PageAddªss
,ÖEø£Inô->
NbPages
));

236 #i‡
	`deföed
(
FLASH_BANK2_END
)

238 if(
pEø£Inô
->
PageAddªss
 > 
FLASH_BANK1_END
)

241 i‡(
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

244 *
PageEº‹
 = 0xFFFFFFFFU;

247 
addªss
 = 
pEø£Inô
->
PageAddªss
;

248 
addªss
 < (
pEø£Inô
->
PageAddªss
 + (pEø£Inô->
NbPages
)*
FLASH_PAGE_SIZE
);

249 
addªss
 +
FLASH_PAGE_SIZE
)

251 
	`FLASH_PageEø£
(
addªss
);

254 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄B™k2
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

257 
	`CLEAR_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

259 i‡(
°©us
 !
HAL_OK
)

262 *
PageEº‹
 = 
addªss
;

273 i‡(
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
Ë=
HAL_OK
)

276 *
PageEº‹
 = 0xFFFFFFFFU;

279 
addªss
 = 
pEø£Inô
->
PageAddªss
;

280 
addªss
 < ((
pEø£Inô
->
NbPages
 * 
FLASH_PAGE_SIZE
Ë+ÖEø£Inô->
PageAddªss
);

281 
addªss
 +
FLASH_PAGE_SIZE
)

283 
	`FLASH_PageEø£
(
addªss
);

286 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

289 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

291 i‡(
°©us
 !
HAL_OK
)

294 *
PageEº‹
 = 
addªss
;

303 
	`__HAL_UNLOCK
(&
pFœsh
);

305  
°©us
;

306 
	}
}

319 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_Eø£_IT
(
FLASH_Eø£InôTy≥Def
 *
pEø£Inô
)

321 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

324 
	`__HAL_LOCK
(&
pFœsh
);

327 i‡(
pFœsh
.
Pro˚duªOnGoög
 !
FLASH_PROC_NONE
)

329  
HAL_ERROR
;

333 
	`as£π_∑øm
(
	`IS_FLASH_TYPEERASE
(
pEø£Inô
->
Ty≥Eø£
));

336 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP
 | 
FLASH_IT_ERR
);

338 #i‡
	`deföed
(
FLASH_BANK2_END
)

340 
	`__HAL_FLASH_ENABLE_IT
(
FLASH_IT_EOP_BANK2
 | 
FLASH_IT_ERR_BANK2
);

343 i‡(
pEø£Inô
->
Ty≥Eø£
 =
FLASH_TYPEERASE_MASSERASE
)

346 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_MASSERASE
;

347 
	`FLASH_MassEø£
(
pEø£Inô
->
B™ks
);

354 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
pEø£Inô
->
PageAddªss
));

355 
	`as£π_∑øm
(
	`IS_FLASH_NB_PAGES
(
pEø£Inô
->
PageAddªss
,ÖEø£Inô->
NbPages
));

357 
pFœsh
.
Pro˚duªOnGoög
 = 
FLASH_PROC_PAGEERASE
;

358 
pFœsh
.
D©aRemaöög
 = 
pEø£Inô
->
NbPages
;

359 
pFœsh
.
Addªss
 = 
pEø£Inô
->
PageAddªss
;

362 
	`FLASH_PageEø£
(
pEø£Inô
->
PageAddªss
);

365  
°©us
;

366 
	}
}

397 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBEø£
()

399 
uöt8_t
 
rd±mp
 = 
OB_RDP_LEVEL_0
;

400 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

403 
rd±mp
 = 
	`FLASH_OB_GëRDP
();

406 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

408 if(
°©us
 =
HAL_OK
)

411 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

414 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

415 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

418 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

421 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

423 if(
°©us
 =
HAL_OK
)

426 
°©us
 = 
	`FLASH_OB_RDP_LevñC⁄fig
(
rd±mp
);

431  
°©us
;

432 
	}
}

446 
HAL_SètusTy≥Def
 
	$HAL_FLASHEx_OBProgøm
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

448 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

451 
	`__HAL_LOCK
(&
pFœsh
);

454 
	`as£π_∑øm
(
	`IS_OPTIONBYTE
(
pOBInô
->
O±i⁄Ty≥
));

457 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_WRP
) == OPTIONBYTE_WRP)

459 
	`as£π_∑øm
(
	`IS_WRPSTATE
(
pOBInô
->
WRPSèã
));

460 i‡(
pOBInô
->
WRPSèã
 =
OB_WRPSTATE_ENABLE
)

463 
°©us
 = 
	`FLASH_OB_E«bÀWRP
(
pOBInô
->
WRPPage
);

468 
°©us
 = 
	`FLASH_OB_DißbÀWRP
(
pOBInô
->
WRPPage
);

470 i‡(
°©us
 !
HAL_OK
)

473 
	`__HAL_UNLOCK
(&
pFœsh
);

474  
°©us
;

479 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_RDP
) == OPTIONBYTE_RDP)

481 
°©us
 = 
	`FLASH_OB_RDP_LevñC⁄fig
(
pOBInô
->
RDPLevñ
);

482 i‡(
°©us
 !
HAL_OK
)

485 
	`__HAL_UNLOCK
(&
pFœsh
);

486  
°©us
;

491 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_USER
) == OPTIONBYTE_USER)

493 
°©us
 = 
	`FLASH_OB_U£rC⁄fig
(
pOBInô
->
USERC⁄fig
);

494 i‡(
°©us
 !
HAL_OK
)

497 
	`__HAL_UNLOCK
(&
pFœsh
);

498  
°©us
;

503 if((
pOBInô
->
O±i⁄Ty≥
 & 
OPTIONBYTE_DATA
) == OPTIONBYTE_DATA)

505 
°©us
 = 
	`FLASH_OB_ProgømD©a
(
pOBInô
->
DATAAddªss
,ÖOBInô->
DATAD©a
);

506 i‡(
°©us
 !
HAL_OK
)

509 
	`__HAL_UNLOCK
(&
pFœsh
);

510  
°©us
;

515 
	`__HAL_UNLOCK
(&
pFœsh
);

517  
°©us
;

518 
	}
}

527 
	$HAL_FLASHEx_OBGëC⁄fig
(
FLASH_OBProgømInôTy≥Def
 *
pOBInô
)

529 
pOBInô
->
O±i⁄Ty≥
 = 
OPTIONBYTE_WRP
 | 
OPTIONBYTE_RDP
 | 
OPTIONBYTE_USER
;

532 
pOBInô
->
WRPPage
 = 
	`FLASH_OB_GëWRP
();

535 
pOBInô
->
RDPLevñ
 = 
	`FLASH_OB_GëRDP
();

538 
pOBInô
->
USERC⁄fig
 = 
	`FLASH_OB_GëU£r
();

539 
	}
}

549 
uöt32_t
 
	$HAL_FLASHEx_OBGëU£rD©a
(
uöt32_t
 
DATAAdªss
)

551 
uöt32_t
 
vÆue
 = 0;

553 i‡(
DATAAdªss
 =
OB_DATA_ADDRESS_DATA0
)

556 
vÆue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA0
Ë>> 
FLASH_POSITION_OB_USERDATA0_BIT
;

561 
vÆue
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_DATA1
Ë>> 
FLASH_POSITION_OB_USERDATA1_BIT
;

564  
vÆue
;

565 
	}
}

595 
	$FLASH_MassEø£
(
uöt32_t
 
B™ks
)

598 
	`as£π_∑øm
(
	`IS_FLASH_BANK
(
B™ks
));

601 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

603 #i‡
	`deföed
(
FLASH_BANK2_END
)

604 if(
B™ks
 =
FLASH_BANK_BOTH
)

607 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

608 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

609 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

610 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

612 if(
B™ks
 =
FLASH_BANK_2
)

615 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_MER
);

616 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

621 #i‡!
	`deföed
(
FLASH_BANK2_END
)

623 
	`UNUSED
(
B™ks
);

626 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_MER
);

627 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

628 #i‡
	`deföed
(
FLASH_BANK2_END
)

631 
	}
}

644 
HAL_SètusTy≥Def
 
	$FLASH_OB_E«bÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
)

646 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

647 
uöt16_t
 
WRP0_D©a
 = 0xFFFF;

648 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

649 
uöt16_t
 
WRP1_D©a
 = 0xFFFF;

651 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

652 
uöt16_t
 
WRP2_D©a
 = 0xFFFF;

654 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

655 
uöt16_t
 
WRP3_D©a
 = 0xFFFF;

659 
	`as£π_∑øm
(
	`IS_OB_WRP
(
WrôePrŸe˘Page
));

662 
WrôePrŸe˘Page
 = (
uöt32_t
)(~((~
	`FLASH_OB_GëWRP
()) | WriteProtectPage));

664 #i‡
	`deföed
(
OB_WRP_PAGES0TO15MASK
)

665 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO15MASK
);

666 #ñi‡
	`deföed
(
OB_WRP_PAGES0TO31MASK
)

667 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO31MASK
);

670 #i‡
	`deföed
(
OB_WRP_PAGES16TO31MASK
)

671 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES16TO31MASK
) >> 8U);

672 #ñi‡
	`deföed
(
OB_WRP_PAGES32TO63MASK
)

673 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO63MASK
) >> 8U);

676 #i‡
	`deföed
(
OB_WRP_PAGES64TO95MASK
)

677 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES64TO95MASK
) >> 16U);

679 #i‡
	`deföed
(
OB_WRP_PAGES32TO47MASK
)

680 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO47MASK
) >> 16U);

683 #i‡
	`deföed
(
OB_WRP_PAGES96TO127MASK
)

684 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES96TO127MASK
) >> 24U);

685 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO255MASK
)

686 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO255MASK
) >> 24U);

687 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO511MASK
)

688 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO511MASK
) >> 24U);

689 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO127MASK
)

690 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO127MASK
) >> 24U);

694 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

696 if(
°©us
 =
HAL_OK
)

699 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

702 
°©us
 = 
	`HAL_FLASHEx_OBEø£
();

703 i‡(
°©us
 =
HAL_OK
)

706 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

708 #i‡
	`deföed
(
FLASH_WRP0_WRP0
)

709 if(
WRP0_D©a
 != 0xFFU)

711 
OB
->
WRP0
 &
WRP0_D©a
;

714 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

718 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

719 if((
°©us
 =
HAL_OK
Ë&& (
WRP1_D©a
 != 0xFFU))

721 
OB
->
WRP1
 &
WRP1_D©a
;

724 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

728 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

729 if((
°©us
 =
HAL_OK
Ë&& (
WRP2_D©a
 != 0xFFU))

731 
OB
->
WRP2
 &
WRP2_D©a
;

734 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

738 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

739 if((
°©us
 =
HAL_OK
Ë&& (
WRP3_D©a
 != 0xFFU))

741 
OB
->
WRP3
 &
WRP3_D©a
;

744 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

749 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

753  
°©us
;

754 
	}
}

767 
HAL_SètusTy≥Def
 
	$FLASH_OB_DißbÀWRP
(
uöt32_t
 
WrôePrŸe˘Page
)

769 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

770 
uöt16_t
 
WRP0_D©a
 = 0xFFFF;

771 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

772 
uöt16_t
 
WRP1_D©a
 = 0xFFFF;

774 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

775 
uöt16_t
 
WRP2_D©a
 = 0xFFFF;

777 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

778 
uöt16_t
 
WRP3_D©a
 = 0xFFFF;

782 
	`as£π_∑øm
(
	`IS_OB_WRP
(
WrôePrŸe˘Page
));

785 
WrôePrŸe˘Page
 = (
	`FLASH_OB_GëWRP
() | WriteProtectPage);

787 #i‡
	`deföed
(
OB_WRP_PAGES0TO15MASK
)

788 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO15MASK
);

789 #ñi‡
	`deföed
(
OB_WRP_PAGES0TO31MASK
)

790 
WRP0_D©a
 = (
uöt16_t
)(
WrôePrŸe˘Page
 & 
OB_WRP_PAGES0TO31MASK
);

793 #i‡
	`deföed
(
OB_WRP_PAGES16TO31MASK
)

794 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES16TO31MASK
) >> 8U);

795 #ñi‡
	`deföed
(
OB_WRP_PAGES32TO63MASK
)

796 
WRP1_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO63MASK
) >> 8U);

799 #i‡
	`deföed
(
OB_WRP_PAGES64TO95MASK
)

800 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES64TO95MASK
) >> 16U);

802 #i‡
	`deföed
(
OB_WRP_PAGES32TO47MASK
)

803 
WRP2_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES32TO47MASK
) >> 16U);

806 #i‡
	`deföed
(
OB_WRP_PAGES96TO127MASK
)

807 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES96TO127MASK
) >> 24U);

808 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO255MASK
)

809 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO255MASK
) >> 24U);

810 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO511MASK
)

811 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO511MASK
) >> 24U);

812 #ñi‡
	`deföed
(
OB_WRP_PAGES48TO127MASK
)

813 
WRP3_D©a
 = (
uöt16_t
)((
WrôePrŸe˘Page
 & 
OB_WRP_PAGES48TO127MASK
) >> 24U);

818 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

820 if(
°©us
 =
HAL_OK
)

823 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

826 
°©us
 = 
	`HAL_FLASHEx_OBEø£
();

827 i‡(
°©us
 =
HAL_OK
)

829 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

831 #i‡
	`deföed
(
FLASH_WRP0_WRP0
)

832 if(
WRP0_D©a
 != 0xFFU)

834 
OB
->
WRP0
 |
WRP0_D©a
;

837 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

841 #i‡
	`deföed
(
FLASH_WRP1_WRP1
)

842 if((
°©us
 =
HAL_OK
Ë&& (
WRP1_D©a
 != 0xFFU))

844 
OB
->
WRP1
 |
WRP1_D©a
;

847 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

851 #i‡
	`deföed
(
FLASH_WRP2_WRP2
)

852 if((
°©us
 =
HAL_OK
Ë&& (
WRP2_D©a
 != 0xFFU))

854 
OB
->
WRP2
 |
WRP2_D©a
;

857 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

861 #i‡
	`deföed
(
FLASH_WRP3_WRP3
)

862 if((
°©us
 =
HAL_OK
Ë&& (
WRP3_D©a
 != 0xFFU))

864 
OB
->
WRP3
 |
WRP3_D©a
;

867 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

872 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

875  
°©us
;

876 
	}
}

886 
HAL_SètusTy≥Def
 
	$FLASH_OB_RDP_LevñC⁄fig
(
uöt8_t
 
RódPrŸe˘Levñ
)

888 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

891 
	`as£π_∑øm
(
	`IS_OB_RDP_LEVEL
(
RódPrŸe˘Levñ
));

894 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

896 if(
°©us
 =
HAL_OK
)

899 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

902 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

903 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

906 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

909 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTER
);

911 if(
°©us
 =
HAL_OK
)

914 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

916 
	`WRITE_REG
(
OB
->
RDP
, 
RódPrŸe˘Levñ
);

919 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

922 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

926  
°©us
;

927 
	}
}

937 
HAL_SètusTy≥Def
 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
U£rC⁄fig
)

939 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

942 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
((
U£rC⁄fig
&
OB_IWDG_SW
)));

943 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
((
U£rC⁄fig
&
OB_STOP_NO_RST
)));

944 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
((
U£rC⁄fig
&
OB_STDBY_NO_RST
)));

945 #i‡
	`deföed
(
FLASH_BANK2_END
)

946 
	`as£π_∑øm
(
	`IS_OB_BOOT1
((
U£rC⁄fig
&
OB_BOOT1_SET
)));

950 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

952 if(
°©us
 =
HAL_OK
)

955 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

958 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

960 #i‡
	`deföed
(
FLASH_BANK2_END
)

961 
OB
->
USER
 = (
U£rC⁄fig
 | 0xF0U);

963 
OB
->
USER
 = (
U£rC⁄fig
 | 0x88U);

967 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

970 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

973  
°©us
;

974 
	}
}

988 
HAL_SètusTy≥Def
 
	$FLASH_OB_ProgømD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

990 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_ERROR
;

993 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

996 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

998 if(
°©us
 =
HAL_OK
)

1001 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1004 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1005 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

1008 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
((
uöt32_t
)
FLASH_TIMEOUT_VALUE
);

1011 
	`CLEAR_BIT
(
FLASH
->
CR
, 
FLASH_CR_OPTPG
);

1014  
°©us
;

1015 
	}
}

1021 
uöt32_t
 
	$FLASH_OB_GëWRP
()

1024  (
uöt32_t
)(
	`READ_REG
(
FLASH
->
WRPR
));

1025 
	}
}

1034 
uöt32_t
 
	$FLASH_OB_GëRDP
()

1036 
uöt32_t
 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1037 
uöt32_t
 
tmp_ªg
 = 0U;

1040 
tmp_ªg
 = 
	`READ_BIT
(
FLASH
->
OBR
, 
FLASH_OBR_RDPRT
);

1042 i‡(
tmp_ªg
 =
FLASH_OBR_RDPRT
)

1044 
ªad°©us
 = 
OB_RDP_LEVEL_1
;

1048 
ªad°©us
 = 
OB_RDP_LEVEL_0
;

1051  
ªad°©us
;

1052 
	}
}

1060 
uöt8_t
 
	$FLASH_OB_GëU£r
()

1063  (
uöt8_t
)((
	`READ_REG
(
FLASH
->
OBR
Ë& 
FLASH_OBR_USER
Ë>> 
FLASH_POSITION_IWDGSW_BIT
);

1064 
	}
}

1089 
	$FLASH_PageEø£
(
uöt32_t
 
PageAddªss
)

1092 
pFœsh
.
Eº‹Code
 = 
HAL_FLASH_ERROR_NONE
;

1094 #i‡
	`deföed
(
FLASH_BANK2_END
)

1095 if(
PageAddªss
 > 
FLASH_BANK1_END
)

1098 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_PER
);

1099 
	`WRITE_REG
(
FLASH
->
AR2
, 
PageAddªss
);

1100 
	`SET_BIT
(
FLASH
->
CR2
, 
FLASH_CR2_STRT
);

1106 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_PER
);

1107 
	`WRITE_REG
(
FLASH
->
AR
, 
PageAddªss
);

1108 
	`SET_BIT
(
FLASH
->
CR
, 
FLASH_CR_STRT
);

1109 #i‡
	`deföed
(
FLASH_BANK2_END
)

1112 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c

105 
	~"°m32f1xx_hÆ.h
"

116 #ifde‡
HAL_GPIO_MODULE_ENABLED


123 
	#GPIO_MODE
 0x00000003u

	)

124 
	#EXTI_MODE
 0x10000000u

	)

125 
	#GPIO_MODE_IT
 0x00010000u

	)

126 
	#GPIO_MODE_EVT
 0x00020000u

	)

127 
	#RISING_EDGE
 0x00100000u

	)

128 
	#FALLING_EDGE
 0x00200000u

	)

129 
	#GPIO_OUTPUT_TYPE
 0x00000010u

	)

131 
	#GPIO_NUMBER
 16u

	)

134 
	#GPIO_CR_MODE_INPUT
 0x00000000u

	)

135 
	#GPIO_CR_CNF_ANALOG
 0x00000000u

	)

136 
	#GPIO_CR_CNF_INPUT_FLOATING
 0x00000004u

	)

137 
	#GPIO_CR_CNF_INPUT_PU_PD
 0x00000008u

	)

138 
	#GPIO_CR_CNF_GP_OUTPUT_PP
 0x00000000u

	)

139 
	#GPIO_CR_CNF_GP_OUTPUT_OD
 0x00000004u

	)

140 
	#GPIO_CR_CNF_AF_OUTPUT_PP
 0x00000008u

	)

141 
	#GPIO_CR_CNF_AF_OUTPUT_OD
 0x0000000Cu

	)

178 
	$HAL_GPIO_Inô
(
GPIO_Ty≥Def
 *
GPIOx
, 
GPIO_InôTy≥Def
 *
GPIO_Inô
)

180 
uöt32_t
 
posôi⁄
 = 0x00u;

181 
uöt32_t
 
i›osôi⁄
;

182 
uöt32_t
 
iocuºít
;

183 
uöt32_t
 
ãmp
;

184 
uöt32_t
 
c⁄fig
 = 0x00u;

185 
__IO
 
uöt32_t
 *
c⁄figªgi°î
;

186 
uöt32_t
 
ªgi°îoff£t
;

189 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

190 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Inô
->
Pö
));

191 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_Inô
->
Mode
));

194 ((
GPIO_Inô
->
Pö
Ë>> 
posôi⁄
) != 0x00u)

197 
i›osôi⁄
 = (0x01uL << 
posôi⁄
);

200 
iocuºít
 = (
uöt32_t
)(
GPIO_Inô
->
Pö
Ë& 
i›osôi⁄
;

202 i‡(
iocuºít
 =
i›osôi⁄
)

205 
	`as£π_∑øm
(
	`IS_GPIO_AF_INSTANCE
(
GPIOx
));

208 
GPIO_Inô
->
Mode
)

211 
GPIO_MODE_OUTPUT_PP
:

213 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

214 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_GP_OUTPUT_PP
;

218 
GPIO_MODE_OUTPUT_OD
:

220 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

221 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_GP_OUTPUT_OD
;

225 
GPIO_MODE_AF_PP
:

227 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

228 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_AF_OUTPUT_PP
;

232 
GPIO_MODE_AF_OD
:

234 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_Inô
->
S≥ed
));

235 
c⁄fig
 = 
GPIO_Inô
->
S≥ed
 + 
GPIO_CR_CNF_AF_OUTPUT_OD
;

239 
GPIO_MODE_INPUT
:

240 
GPIO_MODE_IT_RISING
:

241 
GPIO_MODE_IT_FALLING
:

242 
GPIO_MODE_IT_RISING_FALLING
:

243 
GPIO_MODE_EVT_RISING
:

244 
GPIO_MODE_EVT_FALLING
:

245 
GPIO_MODE_EVT_RISING_FALLING
:

247 
	`as£π_∑øm
(
	`IS_GPIO_PULL
(
GPIO_Inô
->
PuŒ
));

248 i‡(
GPIO_Inô
->
PuŒ
 =
GPIO_NOPULL
)

250 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_FLOATING
;

252 i‡(
GPIO_Inô
->
PuŒ
 =
GPIO_PULLUP
)

254 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

257 
GPIOx
->
BSRR
 = 
i›osôi⁄
;

261 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_INPUT_PU_PD
;

264 
GPIOx
->
BRR
 = 
i›osôi⁄
;

269 
GPIO_MODE_ANALOG
:

270 
c⁄fig
 = 
GPIO_CR_MODE_INPUT
 + 
GPIO_CR_CNF_ANALOG
;

280 
c⁄figªgi°î
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

281 
ªgi°îoff£t
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? (
posôi⁄
 << 2u) : ((position - 8u) << 2u);

284 
	`MODIFY_REG
((*
c⁄figªgi°î
), ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
Ë<< 
ªgi°îoff£t
), (
c⁄fig
 <<Ñegisteroffset));

288 i‡((
GPIO_Inô
->
Mode
 & 
EXTI_MODE
) == EXTI_MODE)

291 
	`__HAL_RCC_AFIO_CLK_ENABLE
();

292 
ãmp
 = 
AFIO
->
EXTICR
[
posôi⁄
 >> 2u];

293 
	`CLEAR_BIT
(
ãmp
, (0x0FuË<< (4u * (
posôi⁄
 & 0x03u)));

294 
	`SET_BIT
(
ãmp
, (
	`GPIO_GET_INDEX
(
GPIOx
)Ë<< (4u * (
posôi⁄
 & 0x03u)));

295 
AFIO
->
EXTICR
[
posôi⁄
 >> 2u] = 
ãmp
;

299 i‡((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_IT
) == GPIO_MODE_IT)

301 
	`SET_BIT
(
EXTI
->
IMR
, 
iocuºít
);

305 
	`CLEAR_BIT
(
EXTI
->
IMR
, 
iocuºít
);

309 i‡((
GPIO_Inô
->
Mode
 & 
GPIO_MODE_EVT
) == GPIO_MODE_EVT)

311 
	`SET_BIT
(
EXTI
->
EMR
, 
iocuºít
);

315 
	`CLEAR_BIT
(
EXTI
->
EMR
, 
iocuºít
);

319 i‡((
GPIO_Inô
->
Mode
 & 
RISING_EDGE
) == RISING_EDGE)

321 
	`SET_BIT
(
EXTI
->
RTSR
, 
iocuºít
);

325 
	`CLEAR_BIT
(
EXTI
->
RTSR
, 
iocuºít
);

329 i‡((
GPIO_Inô
->
Mode
 & 
FALLING_EDGE
) == FALLING_EDGE)

331 
	`SET_BIT
(
EXTI
->
FTSR
, 
iocuºít
);

335 
	`CLEAR_BIT
(
EXTI
->
FTSR
, 
iocuºít
);

340 
posôi⁄
++;

342 
	}
}

351 
	$HAL_GPIO_DeInô
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt32_t
 
GPIO_Pö
)

353 
uöt32_t
 
posôi⁄
 = 0x00u;

354 
uöt32_t
 
iocuºít
;

355 
uöt32_t
 
tmp
;

356 
__IO
 
uöt32_t
 *
c⁄figªgi°î
;

357 
uöt32_t
 
ªgi°îoff£t
;

360 
	`as£π_∑øm
(
	`IS_GPIO_ALL_INSTANCE
(
GPIOx
));

361 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

364 (
GPIO_Pö
 >> 
posôi⁄
) != 0u)

367 
iocuºít
 = (
GPIO_Pö
Ë& (1uL << 
posôi⁄
);

369 i‡(
iocuºít
)

374 
tmp
 = 
AFIO
->
EXTICR
[
posôi⁄
 >> 2u];

375 
tmp
 &0x0FuL << (4u * (
posôi⁄
 & 0x03u));

376 i‡(
tmp
 =(
	`GPIO_GET_INDEX
(
GPIOx
Ë<< (4u * (
posôi⁄
 & 0x03u))))

378 
tmp
 = 0x0FuL << (4u * (
posôi⁄
 & 0x03u));

379 
	`CLEAR_BIT
(
AFIO
->
EXTICR
[
posôi⁄
 >> 2u], 
tmp
);

382 
	`CLEAR_BIT
(
EXTI
->
IMR
, (
uöt32_t
)
iocuºít
);

383 
	`CLEAR_BIT
(
EXTI
->
EMR
, (
uöt32_t
)
iocuºít
);

386 
	`CLEAR_BIT
(
EXTI
->
RTSR
, (
uöt32_t
)
iocuºít
);

387 
	`CLEAR_BIT
(
EXTI
->
FTSR
, (
uöt32_t
)
iocuºít
);

392 
c⁄figªgi°î
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? &
GPIOx
->
CRL
 : &GPIOx->
CRH
;

393 
ªgi°îoff£t
 = (
iocuºít
 < 
GPIO_PIN_8
Ë? (
posôi⁄
 << 2u) : ((position - 8u) << 2u);

396 
	`MODIFY_REG
(*
c⁄figªgi°î
, ((
GPIO_CRL_MODE0
 | 
GPIO_CRL_CNF0
Ë<< 
ªgi°îoff£t
), 
GPIO_CRL_CNF0_0
 <<Ñegisteroffset);

399 
	`CLEAR_BIT
(
GPIOx
->
ODR
, 
iocuºít
);

402 
posôi⁄
++;

404 
	}
}

431 
GPIO_PöSèã
 
	$HAL_GPIO_RódPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

433 
GPIO_PöSèã
 
bô°©us
;

436 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

438 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
GPIO_PIN_RESET
)

440 
bô°©us
 = 
GPIO_PIN_SET
;

444 
bô°©us
 = 
GPIO_PIN_RESET
;

446  
bô°©us
;

447 
	}
}

465 
	$HAL_GPIO_WrôePö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
GPIO_PöSèã
 
PöSèã
)

468 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

469 
	`as£π_∑øm
(
	`IS_GPIO_PIN_ACTION
(
PöSèã
));

471 i‡(
PöSèã
 !
GPIO_PIN_RESET
)

473 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

477 
GPIOx
->
BSRR
 = (
uöt32_t
)
GPIO_Pö
 << 16u;

479 
	}
}

487 
	$HAL_GPIO_ToggÀPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

489 
uöt32_t
 
odr
;

492 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

495 
odr
 = 
GPIOx
->
ODR
;

498 
GPIOx
->
BSRR
 = ((
odr
 & 
GPIO_Pö
Ë<< 
GPIO_NUMBER
) | (~odr & GPIO_Pin);

499 
	}
}

511 
HAL_SètusTy≥Def
 
	$HAL_GPIO_LockPö
(
GPIO_Ty≥Def
 *
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

513 
__IO
 
uöt32_t
 
tmp
 = 
GPIO_LCKR_LCKK
;

516 
	`as£π_∑øm
(
	`IS_GPIO_LOCK_INSTANCE
(
GPIOx
));

517 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

520 
	`SET_BIT
(
tmp
, 
GPIO_Pö
);

522 
GPIOx
->
LCKR
 = 
tmp
;

524 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

526 
GPIOx
->
LCKR
 = 
tmp
;

528 
tmp
 = 
GPIOx
->
LCKR
;

531 i‡((
uöt32_t
)(
GPIOx
->
LCKR
 & 
GPIO_LCKR_LCKK
))

533  
HAL_OK
;

537  
HAL_ERROR
;

539 
	}
}

546 
	$HAL_GPIO_EXTI_IRQH™dÀr
(
uöt16_t
 
GPIO_Pö
)

549 i‡(
	`__HAL_GPIO_EXTI_GET_IT
(
GPIO_Pö
) != 0x00u)

551 
	`__HAL_GPIO_EXTI_CLEAR_IT
(
GPIO_Pö
);

552 
	`HAL_GPIO_EXTI_CÆlback
(
GPIO_Pö
);

554 
	}
}

561 
__wók
 
	$HAL_GPIO_EXTI_CÆlback
(
uöt16_t
 
GPIO_Pö
)

564 
	`UNUSED
(
GPIO_Pö
);

568 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio_ex.c

40 
	~"°m32f1xx_hÆ.h
"

51 #ifde‡
HAL_GPIO_MODULE_ENABLED


81 
	$HAL_GPIOEx_C⁄figEvítout
(
uöt32_t
 
GPIO_P‹tSour˚
, uöt32_à
GPIO_PöSour˚
)

84 
	`as£π_∑øm
(
	`IS_AFIO_EVENTOUT_PORT
(
GPIO_P‹tSour˚
));

85 
	`as£π_∑øm
(
	`IS_AFIO_EVENTOUT_PIN
(
GPIO_PöSour˚
));

88 
	`MODIFY_REG
(
AFIO
->
EVCR
, (
AFIO_EVCR_PORT
Ë| (
AFIO_EVCR_PIN
), (
GPIO_P‹tSour˚
Ë| (
GPIO_PöSour˚
));

89 
	}
}

95 
	$HAL_GPIOEx_E«bÀEvítout
()

97 
	`SET_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

98 
	}
}

104 
	$HAL_GPIOEx_DißbÀEvítout
()

106 
	`CLEAR_BIT
(
AFIO
->
EVCR
, 
AFIO_EVCR_EVOE
);

107 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd.c

57 
	~"°m32f1xx_hÆ.h
"

68 #ifde‡
HAL_PCD_MODULE_ENABLED


70 #i‡
deföed
 (
USB
Ë|| deföed (
USB_OTG_FS
)

79 
	#PCD_MIN
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

80 
	#PCD_MAX
(
a
, 
b
Ë((◊Ë> (b)Ë? (aË: (b))

	)

89 #i‡
deföed
 (
USB_OTG_FS
)

90 
HAL_SètusTy≥Def
 
PCD_WrôeEm±yTxFifo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
);

91 
HAL_SètusTy≥Def
 
PCD_EP_OutX‰Com∂ëe_öt
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
);

92 
HAL_SètusTy≥Def
 
PCD_EP_OutSëupPackë_öt
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
);

95 #i‡
deföed
 (
USB
)

96 
HAL_SètusTy≥Def
 
PCD_EP_ISR_H™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
);

97 
HAL_SètusTy≥Def
 
HAL_PCD_EP_DB_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_EPTy≥Def
 *
ï
, 
uöt16_t
 
wEPVÆ
);

98 
uöt16_t
 
HAL_PCD_EP_DB_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_EPTy≥Def
 *
ï
, uöt16_à
wEPVÆ
);

128 
HAL_SètusTy≥Def
 
	$HAL_PCD_Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

130 #i‡
	`deföed
 (
USB_OTG_FS
)

131 
USB_OTG_GlobÆTy≥Def
 *
USBx
;

133 
uöt8_t
 
i
;

136 i‡(
hpcd
 =
NULL
)

138  
HAL_ERROR
;

142 
	`as£π_∑øm
(
	`IS_PCD_ALL_INSTANCE
(
hpcd
->
In°™˚
));

144 #i‡
	`deföed
 (
USB_OTG_FS
)

145 
USBx
 = 
hpcd
->
In°™˚
;

148 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_RESET
)

151 
hpcd
->
Lock
 = 
HAL_UNLOCKED
;

153 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

154 
hpcd
->
SOFCÆlback
 = 
HAL_PCD_SOFCÆlback
;

155 
hpcd
->
SëupSègeCÆlback
 = 
HAL_PCD_SëupSègeCÆlback
;

156 
hpcd
->
Re£tCÆlback
 = 
HAL_PCD_Re£tCÆlback
;

157 
hpcd
->
Su•ídCÆlback
 = 
HAL_PCD_Su•ídCÆlback
;

158 
hpcd
->
ResumeCÆlback
 = 
HAL_PCD_ResumeCÆlback
;

159 
hpcd
->
C⁄√˘CÆlback
 = 
HAL_PCD_C⁄√˘CÆlback
;

160 
hpcd
->
Disc⁄√˘CÆlback
 = 
HAL_PCD_Disc⁄√˘CÆlback
;

161 
hpcd
->
D©aOutSègeCÆlback
 = 
HAL_PCD_D©aOutSègeCÆlback
;

162 
hpcd
->
D©aInSègeCÆlback
 = 
HAL_PCD_D©aInSègeCÆlback
;

163 
hpcd
->
ISOOUTIncom∂ëeCÆlback
 = 
HAL_PCD_ISOOUTIncom∂ëeCÆlback
;

164 
hpcd
->
ISOINIncom∂ëeCÆlback
 = 
HAL_PCD_ISOINIncom∂ëeCÆlback
;

166 i‡(
hpcd
->
M•InôCÆlback
 =
NULL
)

168 
hpcd
->
M•InôCÆlback
 = 
HAL_PCD_M•Inô
;

172 
hpcd
->
	`M•InôCÆlback
(hpcd);

175 
	`HAL_PCD_M•Inô
(
hpcd
);

179 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_BUSY
;

181 #i‡
	`deföed
 (
USB_OTG_FS
)

183 i‡((
USBx
->
CID
 & (0x1U << 8)) == 0U)

185 
hpcd
->
Inô
.
dma_íabÀ
 = 0U;

190 
	`__HAL_PCD_DISABLE
(
hpcd
);

193 i‡(
	`USB_C‹eInô
(
hpcd
->
In°™˚
, hpcd->
Inô
Ë!
HAL_OK
)

195 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_ERROR
;

196  
HAL_ERROR
;

200 ()
	`USB_SëCuºítMode
(
hpcd
->
In°™˚
, 
USB_DEVICE_MODE
);

203 
i
 = 0U; i < 
hpcd
->
Inô
.
dev_ídpoöts
; i++)

206 
hpcd
->
IN_ï
[
i
].
is_ö
 = 1U;

207 
hpcd
->
IN_ï
[
i
].
num
 = i;

208 
hpcd
->
IN_ï
[
i
].
tx_fifo_num
 = i;

210 
hpcd
->
IN_ï
[
i
].
ty≥
 = 
EP_TYPE_CTRL
;

211 
hpcd
->
IN_ï
[
i
].
max∑ckë
 = 0U;

212 
hpcd
->
IN_ï
[
i
].
x„r_buff
 = 0U;

213 
hpcd
->
IN_ï
[
i
].
x„r_Àn
 = 0U;

216 
i
 = 0U; i < 
hpcd
->
Inô
.
dev_ídpoöts
; i++)

218 
hpcd
->
OUT_ï
[
i
].
is_ö
 = 0U;

219 
hpcd
->
OUT_ï
[
i
].
num
 = i;

221 
hpcd
->
OUT_ï
[
i
].
ty≥
 = 
EP_TYPE_CTRL
;

222 
hpcd
->
OUT_ï
[
i
].
max∑ckë
 = 0U;

223 
hpcd
->
OUT_ï
[
i
].
x„r_buff
 = 0U;

224 
hpcd
->
OUT_ï
[
i
].
x„r_Àn
 = 0U;

228 i‡(
	`USB_DevInô
(
hpcd
->
In°™˚
, hpcd->
Inô
Ë!
HAL_OK
)

230 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_ERROR
;

231  
HAL_ERROR
;

234 
hpcd
->
USB_Addªss
 = 0U;

235 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_READY
;

236 ()
	`USB_DevDisc⁄√˘
(
hpcd
->
In°™˚
);

238  
HAL_OK
;

239 
	}
}

246 
HAL_SètusTy≥Def
 
	$HAL_PCD_DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

249 i‡(
hpcd
 =
NULL
)

251  
HAL_ERROR
;

254 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_BUSY
;

257 i‡(
	`USB_St›Devi˚
(
hpcd
->
In°™˚
Ë!
HAL_OK
)

259  
HAL_ERROR
;

262 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

263 i‡(
hpcd
->
M•DeInôCÆlback
 =
NULL
)

265 
hpcd
->
M•DeInôCÆlback
 = 
HAL_PCD_M•DeInô
;

269 
hpcd
->
	`M•DeInôCÆlback
(hpcd);

272 
	`HAL_PCD_M•DeInô
(
hpcd
);

275 
hpcd
->
Sèã
 = 
HAL_PCD_STATE_RESET
;

277  
HAL_OK
;

278 
	}
}

285 
__wók
 
	$HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

288 
	`UNUSED
(
hpcd
);

293 
	}
}

300 
__wók
 
	$HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
 *
hpcd
)

303 
	`UNUSED
(
hpcd
);

308 
	}
}

310 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

329 
HAL_SètusTy≥Def
 
	$HAL_PCD_Regi°îCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

330 
HAL_PCD_CÆlbackIDTy≥Def
 
CÆlbackID
,

331 
pPCD_CÆlbackTy≥Def
 
pCÆlback
)

333 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

335 i‡(
pCÆlback
 =
NULL
)

338 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

339  
HAL_ERROR
;

342 
	`__HAL_LOCK
(
hpcd
);

344 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

346 
CÆlbackID
)

348 
HAL_PCD_SOF_CB_ID
 :

349 
hpcd
->
SOFCÆlback
 = 
pCÆlback
;

352 
HAL_PCD_SETUPSTAGE_CB_ID
 :

353 
hpcd
->
SëupSègeCÆlback
 = 
pCÆlback
;

356 
HAL_PCD_RESET_CB_ID
 :

357 
hpcd
->
Re£tCÆlback
 = 
pCÆlback
;

360 
HAL_PCD_SUSPEND_CB_ID
 :

361 
hpcd
->
Su•ídCÆlback
 = 
pCÆlback
;

364 
HAL_PCD_RESUME_CB_ID
 :

365 
hpcd
->
ResumeCÆlback
 = 
pCÆlback
;

368 
HAL_PCD_CONNECT_CB_ID
 :

369 
hpcd
->
C⁄√˘CÆlback
 = 
pCÆlback
;

372 
HAL_PCD_DISCONNECT_CB_ID
 :

373 
hpcd
->
Disc⁄√˘CÆlback
 = 
pCÆlback
;

376 
HAL_PCD_MSPINIT_CB_ID
 :

377 
hpcd
->
M•InôCÆlback
 = 
pCÆlback
;

380 
HAL_PCD_MSPDEINIT_CB_ID
 :

381 
hpcd
->
M•DeInôCÆlback
 = 
pCÆlback
;

386 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

388 
°©us
 = 
HAL_ERROR
;

392 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_RESET
)

394 
CÆlbackID
)

396 
HAL_PCD_MSPINIT_CB_ID
 :

397 
hpcd
->
M•InôCÆlback
 = 
pCÆlback
;

400 
HAL_PCD_MSPDEINIT_CB_ID
 :

401 
hpcd
->
M•DeInôCÆlback
 = 
pCÆlback
;

406 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

408 
°©us
 = 
HAL_ERROR
;

415 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

417 
°©us
 = 
HAL_ERROR
;

421 
	`__HAL_UNLOCK
(
hpcd
);

422  
°©us
;

423 
	}
}

442 
HAL_SètusTy≥Def
 
	$HAL_PCD_UnRegi°îCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
HAL_PCD_CÆlbackIDTy≥Def
 
CÆlbackID
)

444 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

447 
	`__HAL_LOCK
(
hpcd
);

450 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

452 
CÆlbackID
)

454 
HAL_PCD_SOF_CB_ID
 :

455 
hpcd
->
SOFCÆlback
 = 
HAL_PCD_SOFCÆlback
;

458 
HAL_PCD_SETUPSTAGE_CB_ID
 :

459 
hpcd
->
SëupSègeCÆlback
 = 
HAL_PCD_SëupSègeCÆlback
;

462 
HAL_PCD_RESET_CB_ID
 :

463 
hpcd
->
Re£tCÆlback
 = 
HAL_PCD_Re£tCÆlback
;

466 
HAL_PCD_SUSPEND_CB_ID
 :

467 
hpcd
->
Su•ídCÆlback
 = 
HAL_PCD_Su•ídCÆlback
;

470 
HAL_PCD_RESUME_CB_ID
 :

471 
hpcd
->
ResumeCÆlback
 = 
HAL_PCD_ResumeCÆlback
;

474 
HAL_PCD_CONNECT_CB_ID
 :

475 
hpcd
->
C⁄√˘CÆlback
 = 
HAL_PCD_C⁄√˘CÆlback
;

478 
HAL_PCD_DISCONNECT_CB_ID
 :

479 
hpcd
->
Disc⁄√˘CÆlback
 = 
HAL_PCD_Disc⁄√˘CÆlback
;

482 
HAL_PCD_MSPINIT_CB_ID
 :

483 
hpcd
->
M•InôCÆlback
 = 
HAL_PCD_M•Inô
;

486 
HAL_PCD_MSPDEINIT_CB_ID
 :

487 
hpcd
->
M•DeInôCÆlback
 = 
HAL_PCD_M•DeInô
;

492 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

495 
°©us
 = 
HAL_ERROR
;

499 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_RESET
)

501 
CÆlbackID
)

503 
HAL_PCD_MSPINIT_CB_ID
 :

504 
hpcd
->
M•InôCÆlback
 = 
HAL_PCD_M•Inô
;

507 
HAL_PCD_MSPDEINIT_CB_ID
 :

508 
hpcd
->
M•DeInôCÆlback
 = 
HAL_PCD_M•DeInô
;

513 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

516 
°©us
 = 
HAL_ERROR
;

523 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

526 
°©us
 = 
HAL_ERROR
;

530 
	`__HAL_UNLOCK
(
hpcd
);

531  
°©us
;

532 
	}
}

541 
HAL_SètusTy≥Def
 
	$HAL_PCD_Regi°îD©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

542 
pPCD_D©aOutSègeCÆlbackTy≥Def
 
pCÆlback
)

544 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

546 i‡(
pCÆlback
 =
NULL
)

549 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

551  
HAL_ERROR
;

555 
	`__HAL_LOCK
(
hpcd
);

557 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

559 
hpcd
->
D©aOutSègeCÆlback
 = 
pCÆlback
;

564 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

567 
°©us
 = 
HAL_ERROR
;

571 
	`__HAL_UNLOCK
(
hpcd
);

573  
°©us
;

574 
	}
}

582 
HAL_SètusTy≥Def
 
	$HAL_PCD_UnRegi°îD©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

584 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

587 
	`__HAL_LOCK
(
hpcd
);

589 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

591 
hpcd
->
D©aOutSègeCÆlback
 = 
HAL_PCD_D©aOutSègeCÆlback
;

596 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

599 
°©us
 = 
HAL_ERROR
;

603 
	`__HAL_UNLOCK
(
hpcd
);

605  
°©us
;

606 
	}
}

615 
HAL_SètusTy≥Def
 
	$HAL_PCD_Regi°îD©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

616 
pPCD_D©aInSègeCÆlbackTy≥Def
 
pCÆlback
)

618 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

620 i‡(
pCÆlback
 =
NULL
)

623 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

625  
HAL_ERROR
;

629 
	`__HAL_LOCK
(
hpcd
);

631 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

633 
hpcd
->
D©aInSègeCÆlback
 = 
pCÆlback
;

638 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

641 
°©us
 = 
HAL_ERROR
;

645 
	`__HAL_UNLOCK
(
hpcd
);

647  
°©us
;

648 
	}
}

656 
HAL_SètusTy≥Def
 
	$HAL_PCD_UnRegi°îD©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

658 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

661 
	`__HAL_LOCK
(
hpcd
);

663 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

665 
hpcd
->
D©aInSègeCÆlback
 = 
HAL_PCD_D©aInSègeCÆlback
;

670 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

673 
°©us
 = 
HAL_ERROR
;

677 
	`__HAL_UNLOCK
(
hpcd
);

679  
°©us
;

680 
	}
}

689 
HAL_SètusTy≥Def
 
	$HAL_PCD_Regi°îIsoOutIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

690 
pPCD_IsoOutIn˝…CÆlbackTy≥Def
 
pCÆlback
)

692 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

694 i‡(
pCÆlback
 =
NULL
)

697 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

699  
HAL_ERROR
;

703 
	`__HAL_LOCK
(
hpcd
);

705 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

707 
hpcd
->
ISOOUTIncom∂ëeCÆlback
 = 
pCÆlback
;

712 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

715 
°©us
 = 
HAL_ERROR
;

719 
	`__HAL_UNLOCK
(
hpcd
);

721  
°©us
;

722 
	}
}

730 
HAL_SètusTy≥Def
 
	$HAL_PCD_UnRegi°îIsoOutIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

732 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

735 
	`__HAL_LOCK
(
hpcd
);

737 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

739 
hpcd
->
ISOOUTIncom∂ëeCÆlback
 = 
HAL_PCD_ISOOUTIncom∂ëeCÆlback
;

744 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

747 
°©us
 = 
HAL_ERROR
;

751 
	`__HAL_UNLOCK
(
hpcd
);

753  
°©us
;

754 
	}
}

763 
HAL_SètusTy≥Def
 
	$HAL_PCD_Regi°îIsoInIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
,

764 
pPCD_IsoInIn˝…CÆlbackTy≥Def
 
pCÆlback
)

766 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

768 i‡(
pCÆlback
 =
NULL
)

771 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

773  
HAL_ERROR
;

777 
	`__HAL_LOCK
(
hpcd
);

779 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

781 
hpcd
->
ISOINIncom∂ëeCÆlback
 = 
pCÆlback
;

786 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

789 
°©us
 = 
HAL_ERROR
;

793 
	`__HAL_UNLOCK
(
hpcd
);

795  
°©us
;

796 
	}
}

804 
HAL_SètusTy≥Def
 
	$HAL_PCD_UnRegi°îIsoInIn˝…CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

806 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

809 
	`__HAL_LOCK
(
hpcd
);

811 i‡(
hpcd
->
Sèã
 =
HAL_PCD_STATE_READY
)

813 
hpcd
->
ISOINIncom∂ëeCÆlback
 = 
HAL_PCD_ISOINIncom∂ëeCÆlback
;

818 
hpcd
->
Eº‹Code
 |
HAL_PCD_ERROR_INVALID_CALLBACK
;

821 
°©us
 = 
HAL_ERROR
;

825 
	`__HAL_UNLOCK
(
hpcd
);

827  
°©us
;

828 
	}
}

856 
HAL_SètusTy≥Def
 
	$HAL_PCD_Sèπ
(
PCD_H™dÀTy≥Def
 *
hpcd
)

858 
	`__HAL_LOCK
(
hpcd
);

859 
	`__HAL_PCD_ENABLE
(
hpcd
);

861 #i‡
	`deföed
 (
USB
)

862 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
hpcd
, 1U);

865 ()
	`USB_DevC⁄√˘
(
hpcd
->
In°™˚
);

866 
	`__HAL_UNLOCK
(
hpcd
);

868  
HAL_OK
;

869 
	}
}

876 
HAL_SètusTy≥Def
 
	$HAL_PCD_St›
(
PCD_H™dÀTy≥Def
 *
hpcd
)

878 
	`__HAL_LOCK
(
hpcd
);

879 
	`__HAL_PCD_DISABLE
(
hpcd
);

881 #i‡
	`deföed
 (
USB
)

882 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
hpcd
, 0U);

885 ()
	`USB_DevDisc⁄√˘
(
hpcd
->
In°™˚
);

887 #i‡
	`deföed
 (
USB_OTG_FS
)

888 ()
	`USB_FlushTxFifo
(
hpcd
->
In°™˚
, 0x10U);

891 
	`__HAL_UNLOCK
(
hpcd
);

893  
HAL_OK
;

894 
	}
}

896 #i‡
deföed
 (
USB_OTG_FS
)

902 
	$HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

904 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

905 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

906 
uöt32_t
 
i
, 
ï_öå
, 
ïöt
, 
ïnum
;

907 
uöt32_t
 
fif€m±ymsk
, 
ãmp
;

908 
USB_OTG_EPTy≥Def
 *
ï
;

911 i‡(
	`USB_GëMode
(
hpcd
->
In°™˚
Ë=
USB_OTG_MODE_DEVICE
)

914 i‡(
	`__HAL_PCD_IS_INVALID_INTERRUPT
(
hpcd
))

919 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
))

922 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_MMIS
);

926 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_RXFLVL
))

928 
	`USB_MASK_INTERRUPT
(
hpcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

930 
ãmp
 = 
USBx
->
GRXSTSP
;

932 
ï
 = &
hpcd
->
OUT_ï
[
ãmp
 & 
USB_OTG_GRXSTSP_EPNUM
];

934 i‡(((
ãmp
 & 
USB_OTG_GRXSTSP_PKTSTS
Ë>> 17Ë=
STS_DATA_UPDT
)

936 i‡((
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) != 0U)

938 ()
	`USB_RódPackë
(
USBx
, 
ï
->
x„r_buff
,

939 (
uöt16_t
)((
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4));

941 
ï
->
x„r_buff
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

942 
ï
->
x„r_cou¡
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

945 i‡(((
ãmp
 & 
USB_OTG_GRXSTSP_PKTSTS
Ë>> 17Ë=
STS_SETUP_UPDT
)

947 ()
	`USB_RódPackë
(
USBx
, (
uöt8_t
 *)
hpcd
->
Sëup
, 8U);

948 
ï
->
x„r_cou¡
 +(
ãmp
 & 
USB_OTG_GRXSTSP_BCNT
) >> 4;

954 
	`USB_UNMASK_INTERRUPT
(
hpcd
->
In°™˚
, 
USB_OTG_GINTSTS_RXFLVL
);

957 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OEPINT
))

959 
ïnum
 = 0U;

962 
ï_öå
 = 
	`USB_RódDevAŒOutEpI¡îru±
(
hpcd
->
In°™˚
);

964 
ï_öå
 != 0U)

966 i‡((
ï_öå
 & 0x1U) != 0U)

968 
ïöt
 = 
	`USB_RódDevOutEPI¡îru±
(
hpcd
->
In°™˚
, (
uöt8_t
)
ïnum
);

970 i‡((
ïöt
 & 
USB_OTG_DOEPINT_XFRC
) == USB_OTG_DOEPINT_XFRC)

972 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_XFRC
);

973 ()
	`PCD_EP_OutX‰Com∂ëe_öt
(
hpcd
, 
ïnum
);

976 i‡((
ïöt
 & 
USB_OTG_DOEPINT_STUP
) == USB_OTG_DOEPINT_STUP)

978 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_STUP
);

980 ()
	`PCD_EP_OutSëupPackë_öt
(
hpcd
, 
ïnum
);

983 i‡((
ïöt
 & 
USB_OTG_DOEPINT_OTEPDIS
) == USB_OTG_DOEPINT_OTEPDIS)

985 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_OTEPDIS
);

989 i‡((
ïöt
 & 
USB_OTG_DOEPINT_OTEPSPR
) == USB_OTG_DOEPINT_OTEPSPR)

991 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_OTEPSPR
);

995 i‡((
ïöt
 & 
USB_OTG_DOEPINT_NAK
) == USB_OTG_DOEPINT_NAK)

997 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_NAK
);

1000 
ïnum
++;

1001 
ï_öå
 >>= 1U;

1005 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IEPINT
))

1008 
ï_öå
 = 
	`USB_RódDevAŒInEpI¡îru±
(
hpcd
->
In°™˚
);

1010 
ïnum
 = 0U;

1012 
ï_öå
 != 0U)

1014 i‡((
ï_öå
 & 0x1U) != 0U)

1016 
ïöt
 = 
	`USB_RódDevInEPI¡îru±
(
hpcd
->
In°™˚
, (
uöt8_t
)
ïnum
);

1018 i‡((
ïöt
 & 
USB_OTG_DIEPINT_XFRC
) == USB_OTG_DIEPINT_XFRC)

1020 
fif€m±ymsk
 = (
uöt32_t
)(0x1UL << (
ïnum
 & 
EP_ADDR_MSK
));

1021 
USBx_DEVICE
->
DIEPEMPMSK
 &~
fif€m±ymsk
;

1023 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_XFRC
);

1025 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1026 
hpcd
->
	`D©aInSègeCÆlback
(hpcd, (
uöt8_t
)
ïnum
);

1028 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, (
uöt8_t
)
ïnum
);

1031 i‡((
ïöt
 & 
USB_OTG_DIEPINT_TOC
) == USB_OTG_DIEPINT_TOC)

1033 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_TOC
);

1035 i‡((
ïöt
 & 
USB_OTG_DIEPINT_ITTXFE
) == USB_OTG_DIEPINT_ITTXFE)

1037 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_ITTXFE
);

1039 i‡((
ïöt
 & 
USB_OTG_DIEPINT_INEPNE
) == USB_OTG_DIEPINT_INEPNE)

1041 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_INEPNE
);

1043 i‡((
ïöt
 & 
USB_OTG_DIEPINT_EPDISD
) == USB_OTG_DIEPINT_EPDISD)

1045 
	`CLEAR_IN_EP_INTR
(
ïnum
, 
USB_OTG_DIEPINT_EPDISD
);

1047 i‡((
ïöt
 & 
USB_OTG_DIEPINT_TXFE
) == USB_OTG_DIEPINT_TXFE)

1049 ()
	`PCD_WrôeEm±yTxFifo
(
hpcd
, 
ïnum
);

1052 
ïnum
++;

1053 
ï_öå
 >>= 1U;

1058 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
))

1061 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_RWUSIG
;

1063 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1064 
hpcd
->
	`ResumeCÆlback
(hpcd);

1066 
	`HAL_PCD_ResumeCÆlback
(
hpcd
);

1069 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_WKUINT
);

1073 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
))

1075 i‡((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

1077 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1078 
hpcd
->
	`Su•ídCÆlback
(hpcd);

1080 
	`HAL_PCD_Su•ídCÆlback
(
hpcd
);

1083 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBSUSP
);

1086 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
))

1088 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_RWUSIG
;

1089 ()
	`USB_FlushTxFifo
(
hpcd
->
In°™˚
, 0x10U);

1091 
i
 = 0U; i < 
hpcd
->
Inô
.
dev_ídpoöts
; i++)

1093 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFB7FU;

1094 
	`USBx_INEP
(
i
)->
DIEPCTL
 &~
USB_OTG_DIEPCTL_STALL
;

1095 
	`USBx_INEP
(
i
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SNAK
;

1096 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFB7FU;

1097 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_STALL
;

1098 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SNAK
;

1100 
USBx_DEVICE
->
DAINTMSK
 |= 0x10001U;

1102 i‡(
hpcd
->
Inô
.
u£_dediˇãd_ï1
 != 0U)

1104 
USBx_DEVICE
->
DOUTEP1MSK
 |
USB_OTG_DOEPMSK_STUPM
 |

1105 
USB_OTG_DOEPMSK_XFRCM
 |

1106 
USB_OTG_DOEPMSK_EPDM
;

1108 
USBx_DEVICE
->
DINEP1MSK
 |
USB_OTG_DIEPMSK_TOM
 |

1109 
USB_OTG_DIEPMSK_XFRCM
 |

1110 
USB_OTG_DIEPMSK_EPDM
;

1114 
USBx_DEVICE
->
DOEPMSK
 |
USB_OTG_DOEPMSK_STUPM
 |

1115 
USB_OTG_DOEPMSK_XFRCM
 |

1116 
USB_OTG_DOEPMSK_EPDM
 |

1117 
USB_OTG_DOEPMSK_OTEPSPRM
 |

1118 
USB_OTG_DOEPMSK_NAKM
;

1120 
USBx_DEVICE
->
DIEPMSK
 |
USB_OTG_DIEPMSK_TOM
 |

1121 
USB_OTG_DIEPMSK_XFRCM
 |

1122 
USB_OTG_DIEPMSK_EPDM
;

1126 
USBx_DEVICE
->
DCFG
 &~
USB_OTG_DCFG_DAD
;

1129 ()
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, (
uöt8_t
 *)hpcd->
Sëup
);

1131 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_USBRST
);

1135 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
))

1137 ()
	`USB_A˘iv©eSëup
(
hpcd
->
In°™˚
);

1138 
hpcd
->
Inô
.
•ìd
 = 
	`USB_GëDevS≥ed
(hpcd->
In°™˚
);

1141 ()
	`USB_SëTu∫¨oundTime
(
hpcd
->
In°™˚
,

1142 
	`HAL_RCC_GëHCLKFªq
(),

1143 (
uöt8_t
)
hpcd
->
Inô
.
•ìd
);

1145 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1146 
hpcd
->
	`Re£tCÆlback
(hpcd);

1148 
	`HAL_PCD_Re£tCÆlback
(
hpcd
);

1151 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_ENUMDNE
);

1155 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
))

1157 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1158 
hpcd
->
	`SOFCÆlback
(hpcd);

1160 
	`HAL_PCD_SOFCÆlback
(
hpcd
);

1163 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SOF
);

1167 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
))

1171 
ïnum
 = 0U;

1173 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1174 
hpcd
->
	`ISOINIncom∂ëeCÆlback
(hpcd, (
uöt8_t
)
ïnum
);

1176 
	`HAL_PCD_ISOINIncom∂ëeCÆlback
(
hpcd
, (
uöt8_t
)
ïnum
);

1179 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_IISOIXFR
);

1183 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
))

1187 
ïnum
 = 0U;

1189 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1190 
hpcd
->
	`ISOOUTIncom∂ëeCÆlback
(hpcd, (
uöt8_t
)
ïnum
);

1192 
	`HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
hpcd
, (
uöt8_t
)
ïnum
);

1195 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_PXFR_INCOMPISOOUT
);

1199 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
))

1201 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1202 
hpcd
->
	`C⁄√˘CÆlback
(hpcd);

1204 
	`HAL_PCD_C⁄√˘CÆlback
(
hpcd
);

1207 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_SRQINT
);

1211 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_OTG_GINTSTS_OTGINT
))

1213 
ãmp
 = 
hpcd
->
In°™˚
->
GOTGINT
;

1215 i‡((
ãmp
 & 
USB_OTG_GOTGINT_SEDET
) == USB_OTG_GOTGINT_SEDET)

1217 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1218 
hpcd
->
	`Disc⁄√˘CÆlback
(hpcd);

1220 
	`HAL_PCD_Disc⁄√˘CÆlback
(
hpcd
);

1223 
hpcd
->
In°™˚
->
GOTGINT
 |
ãmp
;

1226 
	}
}

1234 
	$HAL_PCD_WKUP_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1237 
	`__HAL_USB_OTG_FS_WAKEUP_EXTI_CLEAR_FLAG
();

1238 
	}
}

1241 #i‡
deföed
 (
USB
)

1247 
	$HAL_PCD_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1249 
uöt16_t
 
°‹e_ï
[8];

1250 
uöt8_t
 
i
;

1252 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_CTR
))

1256 ()
	`PCD_EP_ISR_H™dÀr
(
hpcd
);

1259 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_RESET
))

1261 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_RESET
);

1263 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1264 
hpcd
->
	`Re£tCÆlback
(hpcd);

1266 
	`HAL_PCD_Re£tCÆlback
(
hpcd
);

1269 ()
	`HAL_PCD_SëAddªss
(
hpcd
, 0U);

1272 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_PMAOVR
))

1274 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_PMAOVR
);

1277 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_ERR
))

1279 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_ERR
);

1282 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_WKUP
))

1284 
hpcd
->
In°™˚
->
CNTR
 &(
uöt16_t
Ë~(
USB_CNTR_LP_MODE
);

1285 
hpcd
->
In°™˚
->
CNTR
 &(
uöt16_t
Ë~(
USB_CNTR_FSUSP
);

1287 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1288 
hpcd
->
	`ResumeCÆlback
(hpcd);

1290 
	`HAL_PCD_ResumeCÆlback
(
hpcd
);

1293 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_WKUP
);

1296 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_SUSP
))

1301 
i
 = 0U; i < 8U; i++)

1303 
°‹e_ï
[
i
] = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, i);

1307 
hpcd
->
In°™˚
->
CNTR
 |(
uöt16_t
)(
USB_CNTR_FRES
);

1310 
hpcd
->
In°™˚
->
CNTR
 &(
uöt16_t
)(~
USB_CNTR_FRES
);

1313 (
hpcd
->
In°™˚
->
ISTR
 & 
USB_ISTR_RESET
) == 0U)

1318 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_RESET
);

1321 
i
 = 0U; i < 8U; i++)

1323 
	`PCD_SET_ENDPOINT
(
hpcd
->
In°™˚
, 
i
, 
°‹e_ï
[i]);

1327 
hpcd
->
In°™˚
->
CNTR
 |(
uöt16_t
)
USB_CNTR_FSUSP
;

1330 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_SUSP
);

1332 
hpcd
->
In°™˚
->
CNTR
 |(
uöt16_t
)
USB_CNTR_LP_MODE
;

1334 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1335 
hpcd
->
	`Su•ídCÆlback
(hpcd);

1337 
	`HAL_PCD_Su•ídCÆlback
(
hpcd
);

1341 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_SOF
))

1343 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_SOF
);

1345 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

1346 
hpcd
->
	`SOFCÆlback
(hpcd);

1348 
	`HAL_PCD_SOFCÆlback
(
hpcd
);

1352 i‡(
	`__HAL_PCD_GET_FLAG
(
hpcd
, 
USB_ISTR_ESOF
))

1355 
	`__HAL_PCD_CLEAR_FLAG
(
hpcd
, 
USB_ISTR_ESOF
);

1357 
	}
}

1365 
	$HAL_PCD_WKUP_IRQH™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1368 
	`__HAL_USB_WAKEUP_EXTI_CLEAR_FLAG
();

1369 
	}
}

1378 
__wók
 
	$HAL_PCD_D©aOutSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

1381 
	`UNUSED
(
hpcd
);

1382 
	`UNUSED
(
ïnum
);

1387 
	}
}

1395 
__wók
 
	$HAL_PCD_D©aInSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

1398 
	`UNUSED
(
hpcd
);

1399 
	`UNUSED
(
ïnum
);

1404 
	}
}

1410 
__wók
 
	$HAL_PCD_SëupSègeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1413 
	`UNUSED
(
hpcd
);

1418 
	}
}

1425 
__wók
 
	$HAL_PCD_SOFCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1428 
	`UNUSED
(
hpcd
);

1433 
	}
}

1440 
__wók
 
	$HAL_PCD_Re£tCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1443 
	`UNUSED
(
hpcd
);

1448 
	}
}

1455 
__wók
 
	$HAL_PCD_Su•ídCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1458 
	`UNUSED
(
hpcd
);

1463 
	}
}

1470 
__wók
 
	$HAL_PCD_ResumeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1473 
	`UNUSED
(
hpcd
);

1478 
	}
}

1486 
__wók
 
	$HAL_PCD_ISOOUTIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

1489 
	`UNUSED
(
hpcd
);

1490 
	`UNUSED
(
ïnum
);

1495 
	}
}

1503 
__wók
 
	$HAL_PCD_ISOINIncom∂ëeCÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ïnum
)

1506 
	`UNUSED
(
hpcd
);

1507 
	`UNUSED
(
ïnum
);

1512 
	}
}

1519 
__wók
 
	$HAL_PCD_C⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1522 
	`UNUSED
(
hpcd
);

1527 
	}
}

1534 
__wók
 
	$HAL_PCD_Disc⁄√˘CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1537 
	`UNUSED
(
hpcd
);

1542 
	}
}

1568 
HAL_SètusTy≥Def
 
	$HAL_PCD_DevC⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1570 
	`__HAL_LOCK
(
hpcd
);

1572 #i‡
	`deföed
 (
USB
)

1573 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
hpcd
, 1U);

1576 ()
	`USB_DevC⁄√˘
(
hpcd
->
In°™˚
);

1577 
	`__HAL_UNLOCK
(
hpcd
);

1579  
HAL_OK
;

1580 
	}
}

1587 
HAL_SètusTy≥Def
 
	$HAL_PCD_DevDisc⁄√˘
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1589 
	`__HAL_LOCK
(
hpcd
);

1591 #i‡
	`deföed
 (
USB
)

1592 
	`HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
hpcd
, 0U);

1595 ()
	`USB_DevDisc⁄√˘
(
hpcd
->
In°™˚
);

1596 
	`__HAL_UNLOCK
(
hpcd
);

1598  
HAL_OK
;

1599 
	}
}

1607 
HAL_SètusTy≥Def
 
	$HAL_PCD_SëAddªss
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
addªss
)

1609 
	`__HAL_LOCK
(
hpcd
);

1610 
hpcd
->
USB_Addªss
 = 
addªss
;

1611 ()
	`USB_SëDevAddªss
(
hpcd
->
In°™˚
, 
addªss
);

1612 
	`__HAL_UNLOCK
(
hpcd
);

1614  
HAL_OK
;

1615 
	}
}

1624 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_O≥n
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
,

1625 
uöt16_t
 
ï_mps
, 
uöt8_t
 
ï_ty≥
)

1627 
HAL_SètusTy≥Def
 
ªt
 = 
HAL_OK
;

1628 
PCD_EPTy≥Def
 *
ï
;

1630 i‡((
ï_addr
 & 0x80U) == 0x80U)

1632 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1633 
ï
->
is_ö
 = 1U;

1637 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1638 
ï
->
is_ö
 = 0U;

1641 
ï
->
num
 = 
ï_addr
 & 
EP_ADDR_MSK
;

1642 
ï
->
max∑ckë
 = 
ï_mps
;

1643 
ï
->
ty≥
 = 
ï_ty≥
;

1645 i‡(
ï
->
is_ö
 != 0U)

1648 
ï
->
tx_fifo_num
 =Ép->
num
;

1651 i‡(
ï_ty≥
 =
EP_TYPE_BULK
)

1653 
ï
->
d©a_pid_°¨t
 = 0U;

1656 
	`__HAL_LOCK
(
hpcd
);

1657 ()
	`USB_A˘iv©eEndpoöt
(
hpcd
->
In°™˚
, 
ï
);

1658 
	`__HAL_UNLOCK
(
hpcd
);

1660  
ªt
;

1661 
	}
}

1669 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Clo£
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1671 
PCD_EPTy≥Def
 *
ï
;

1673 i‡((
ï_addr
 & 0x80U) == 0x80U)

1675 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1676 
ï
->
is_ö
 = 1U;

1680 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1681 
ï
->
is_ö
 = 0U;

1683 
ï
->
num
 = 
ï_addr
 & 
EP_ADDR_MSK
;

1685 
	`__HAL_LOCK
(
hpcd
);

1686 ()
	`USB_Dó˘iv©eEndpoöt
(
hpcd
->
In°™˚
, 
ï
);

1687 
	`__HAL_UNLOCK
(
hpcd
);

1688  
HAL_OK
;

1689 
	}
}

1700 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
)

1702 
PCD_EPTy≥Def
 *
ï
;

1704 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1707 
ï
->
x„r_buff
 = 
pBuf
;

1708 
ï
->
x„r_Àn
 = 
Àn
;

1709 
ï
->
x„r_cou¡
 = 0U;

1710 
ï
->
is_ö
 = 0U;

1711 
ï
->
num
 = 
ï_addr
 & 
EP_ADDR_MSK
;

1713 i‡((
ï_addr
 & 
EP_ADDR_MSK
) == 0U)

1715 ()
	`USB_EP0SèπX„r
(
hpcd
->
In°™˚
, 
ï
);

1719 ()
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
, 
ï
);

1722  
HAL_OK
;

1723 
	}
}

1731 
uöt32_t
 
	$HAL_PCD_EP_GëRxCou¡
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1733  
hpcd
->
OUT_ï
[
ï_addr
 & 
EP_ADDR_MSK
].
x„r_cou¡
;

1734 
	}
}

1743 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
, uöt8_à*
pBuf
, 
uöt32_t
 
Àn
)

1745 
PCD_EPTy≥Def
 *
ï
;

1747 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1750 
ï
->
x„r_buff
 = 
pBuf
;

1751 
ï
->
x„r_Àn
 = 
Àn
;

1752 #i‡
	`deföed
 (
USB
)

1753 
ï
->
x„r_fûl_db
 = 1U;

1754 
ï
->
x„r_Àn_db
 = 
Àn
;

1756 
ï
->
x„r_cou¡
 = 0U;

1757 
ï
->
is_ö
 = 1U;

1758 
ï
->
num
 = 
ï_addr
 & 
EP_ADDR_MSK
;

1760 i‡((
ï_addr
 & 
EP_ADDR_MSK
) == 0U)

1762 ()
	`USB_EP0SèπX„r
(
hpcd
->
In°™˚
, 
ï
);

1766 ()
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
, 
ï
);

1769  
HAL_OK
;

1770 
	}
}

1778 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_SëSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1780 
PCD_EPTy≥Def
 *
ï
;

1782 i‡(((
uöt32_t
)
ï_addr
 & 
EP_ADDR_MSK
Ë> 
hpcd
->
Inô
.
dev_ídpoöts
)

1784  
HAL_ERROR
;

1787 i‡((0x80U & 
ï_addr
) == 0x80U)

1789 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1790 
ï
->
is_ö
 = 1U;

1794 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
];

1795 
ï
->
is_ö
 = 0U;

1798 
ï
->
is_°Æl
 = 1U;

1799 
ï
->
num
 = 
ï_addr
 & 
EP_ADDR_MSK
;

1801 
	`__HAL_LOCK
(
hpcd
);

1803 ()
	`USB_EPSëSèŒ
(
hpcd
->
In°™˚
, 
ï
);

1805 i‡((
ï_addr
 & 
EP_ADDR_MSK
) == 0U)

1807 ()
	`USB_EP0_OutSèπ
(
hpcd
->
In°™˚
, (
uöt8_t
 *)hpcd->
Sëup
);

1810 
	`__HAL_UNLOCK
(
hpcd
);

1812  
HAL_OK
;

1813 
	}
}

1821 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_CÃSèŒ
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1823 
PCD_EPTy≥Def
 *
ï
;

1825 i‡(((
uöt32_t
)
ï_addr
 & 0x0FUË> 
hpcd
->
Inô
.
dev_ídpoöts
)

1827  
HAL_ERROR
;

1830 i‡((0x80U & 
ï_addr
) == 0x80U)

1832 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1833 
ï
->
is_ö
 = 1U;

1837 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

1838 
ï
->
is_ö
 = 0U;

1841 
ï
->
is_°Æl
 = 0U;

1842 
ï
->
num
 = 
ï_addr
 & 
EP_ADDR_MSK
;

1844 
	`__HAL_LOCK
(
hpcd
);

1845 ()
	`USB_EPCÀ¨SèŒ
(
hpcd
->
In°™˚
, 
ï
);

1846 
	`__HAL_UNLOCK
(
hpcd
);

1848  
HAL_OK
;

1849 
	}
}

1857 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_Flush
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
ï_addr
)

1859 
	`__HAL_LOCK
(
hpcd
);

1861 i‡((
ï_addr
 & 0x80U) == 0x80U)

1863 ()
	`USB_FlushTxFifo
(
hpcd
->
In°™˚
, (
uöt32_t
)
ï_addr
 & 
EP_ADDR_MSK
);

1867 ()
	`USB_FlushRxFifo
(
hpcd
->
In°™˚
);

1870 
	`__HAL_UNLOCK
(
hpcd
);

1872  
HAL_OK
;

1873 
	}
}

1880 
HAL_SètusTy≥Def
 
	$HAL_PCD_A˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1882  (
	`USB_A˘iv©eRemŸeWakeup
(
hpcd
->
In°™˚
));

1883 
	}
}

1890 
HAL_SètusTy≥Def
 
	$HAL_PCD_DeA˘iv©eRemŸeWakeup
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1892  (
	`USB_DeA˘iv©eRemŸeWakeup
(
hpcd
->
In°™˚
));

1893 
	}
}

1919 
PCD_SèãTy≥Def
 
	$HAL_PCD_GëSèã
(
PCD_H™dÀTy≥Def
 *
hpcd
)

1921  
hpcd
->
Sèã
;

1922 
	}
}

1936 #i‡
deföed
 (
USB_OTG_FS
)

1943 
HAL_SètusTy≥Def
 
	$PCD_WrôeEm±yTxFifo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
)

1945 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

1946 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1947 
USB_OTG_EPTy≥Def
 *
ï
;

1948 
uöt32_t
 
Àn
;

1949 
uöt32_t
 
Àn32b
;

1950 
uöt32_t
 
fif€m±ymsk
;

1952 
ï
 = &
hpcd
->
IN_ï
[
ïnum
];

1954 i‡(
ï
->
x„r_cou¡
 >Ép->
x„r_Àn
)

1956  
HAL_ERROR
;

1959 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

1961 i‡(
Àn
 > 
ï
->
max∑ckë
)

1963 
Àn
 = 
ï
->
max∑ckë
;

1966 
Àn32b
 = (
Àn
 + 3U) / 4U;

1968 ((
	`USBx_INEP
(
ïnum
)->
DTXFSTS
 & 
USB_OTG_DTXFSTS_INEPTFSAV
Ë>
Àn32b
) &&

1969 (
ï
->
x„r_cou¡
 <Ép->
x„r_Àn
) && (ep->xfer_len != 0U))

1972 
Àn
 = 
ï
->
x„r_Àn
 -Ép->
x„r_cou¡
;

1974 i‡(
Àn
 > 
ï
->
max∑ckë
)

1976 
Àn
 = 
ï
->
max∑ckë
;

1978 
Àn32b
 = (
Àn
 + 3U) / 4U;

1980 ()
	`USB_WrôePackë
(
USBx
, 
ï
->
x„r_buff
, (
uöt8_t
)
ïnum
, (
uöt16_t
)
Àn
);

1982 
ï
->
x„r_buff
 +
Àn
;

1983 
ï
->
x„r_cou¡
 +
Àn
;

1986 i‡(
ï
->
x„r_Àn
 <ï->
x„r_cou¡
)

1988 
fif€m±ymsk
 = (
uöt32_t
)(0x1UL << (
ïnum
 & 
EP_ADDR_MSK
));

1989 
USBx_DEVICE
->
DIEPEMPMSK
 &~
fif€m±ymsk
;

1992  
HAL_OK
;

1993 
	}
}

2002 
HAL_SètusTy≥Def
 
	$PCD_EP_OutX‰Com∂ëe_öt
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
)

2004 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

2005 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

2006 
uöt32_t
 
gSNPSiD
 = *(
__IO
 uöt32_à*)(&
USBx
->
CID
 + 0x1U);

2007 
uöt32_t
 
D€pötReg
 = 
	`USBx_OUTEP
(
ïnum
)->
DOEPINT
;

2009 i‡(
gSNPSiD
 =
USB_OTG_CORE_ID_310A
)

2012 i‡((
D€pötReg
 & 
USB_OTG_DOEPINT_STPKTRX
) == USB_OTG_DOEPINT_STPKTRX)

2014 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_STPKTRX
);

2018 i‡((
D€pötReg
 & 
USB_OTG_DOEPINT_OTEPSPR
) == USB_OTG_DOEPINT_OTEPSPR)

2020 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_OTEPSPR
);

2023 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2024 
hpcd
->
	`D©aOutSègeCÆlback
(hpcd, (
uöt8_t
)
ïnum
);

2026 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, (
uöt8_t
)
ïnum
);

2032 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2033 
hpcd
->
	`D©aOutSègeCÆlback
(hpcd, (
uöt8_t
)
ïnum
);

2035 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, (
uöt8_t
)
ïnum
);

2039  
HAL_OK
;

2040 
	}
}

2049 
HAL_SètusTy≥Def
 
	$PCD_EP_OutSëupPackë_öt
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt32_t
 
ïnum
)

2051 
USB_OTG_GlobÆTy≥Def
 *
USBx
 = 
hpcd
->
In°™˚
;

2052 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

2053 
uöt32_t
 
gSNPSiD
 = *(
__IO
 uöt32_à*)(&
USBx
->
CID
 + 0x1U);

2054 
uöt32_t
 
D€pötReg
 = 
	`USBx_OUTEP
(
ïnum
)->
DOEPINT
;

2056 i‡((
gSNPSiD
 > 
USB_OTG_CORE_ID_300A
) &&

2057 ((
D€pötReg
 & 
USB_OTG_DOEPINT_STPKTRX
) == USB_OTG_DOEPINT_STPKTRX))

2059 
	`CLEAR_OUT_EP_INTR
(
ïnum
, 
USB_OTG_DOEPINT_STPKTRX
);

2063 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2064 
hpcd
->
	`SëupSègeCÆlback
(hpcd);

2066 
	`HAL_PCD_SëupSègeCÆlback
(
hpcd
);

2069  
HAL_OK
;

2070 
	}
}

2073 #i‡
deföed
 (
USB
)

2079 
HAL_SètusTy≥Def
 
	$PCD_EP_ISR_H™dÀr
(
PCD_H™dÀTy≥Def
 *
hpcd
)

2081 
PCD_EPTy≥Def
 *
ï
;

2082 
uöt16_t
 
cou¡
, 
wI°r
, 
wEPVÆ
, 
TxByãNbª
;

2083 
uöt8_t
 
ïödex
;

2086 (
hpcd
->
In°™˚
->
ISTR
 & 
USB_ISTR_CTR
) != 0U)

2088 
wI°r
 = 
hpcd
->
In°™˚
->
ISTR
;

2091 
ïödex
 = (
uöt8_t
)(
wI°r
 & 
USB_ISTR_EP_ID
);

2093 i‡(
ïödex
 == 0U)

2098 i‡((
wI°r
 & 
USB_ISTR_DIR
) == 0U)

2104 
	`PCD_CLEAR_TX_EP_CTR
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

2105 
ï
 = &
hpcd
->
IN_ï
[0];

2107 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_TX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

2108 
ï
->
x„r_buff
 +ï->
x„r_cou¡
;

2111 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2112 
hpcd
->
	`D©aInSègeCÆlback
(hpcd, 0U);

2114 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 0U);

2117 i‡((
hpcd
->
USB_Addªss
 > 0UË&& (
ï
->
x„r_Àn
 == 0U))

2119 
hpcd
->
In°™˚
->
DADDR
 = ((
uöt16_t
)hpcd->
USB_Addªss
 | 
USB_DADDR_EF
);

2120 
hpcd
->
USB_Addªss
 = 0U;

2129 
ï
 = &
hpcd
->
OUT_ï
[0];

2130 
wEPVÆ
 = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

2132 i‡((
wEPVÆ
 & 
USB_EP_SETUP
) != 0U)

2135 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

2137 
	`USB_RódPMA
(
hpcd
->
In°™˚
, (
uöt8_t
 *)hpcd->
Sëup
,

2138 
ï
->
pmØdªss
, (
uöt16_t
Îp->
x„r_cou¡
);

2141 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

2144 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2145 
hpcd
->
	`SëupSègeCÆlback
(hpcd);

2147 
	`HAL_PCD_SëupSègeCÆlback
(
hpcd
);

2150 i‡((
wEPVÆ
 & 
USB_EP_CTR_RX
) != 0U)

2152 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In°™˚
, 
PCD_ENDP0
);

2155 
ï
->
x„r_cou¡
 = 
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In°™˚
,Ép->
num
);

2157 i‡((
ï
->
x„r_cou¡
 !0UË&& (ï->
x„r_buff
 != 0U))

2159 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,

2160 
ï
->
pmØdªss
, (
uöt16_t
Îp->
x„r_cou¡
);

2162 
ï
->
x„r_buff
 +ï->
x„r_cou¡
;

2165 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2166 
hpcd
->
	`D©aOutSègeCÆlback
(hpcd, 0U);

2168 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, 0U);

2172 
	`PCD_SET_EP_RX_CNT
(
hpcd
->
In°™˚
, 
PCD_ENDP0
, 
ï
->
max∑ckë
);

2173 
	`PCD_SET_EP_RX_STATUS
(
hpcd
->
In°™˚
, 
PCD_ENDP0
, 
USB_EP_RX_VALID
);

2181 
wEPVÆ
 = 
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, 
ïödex
);

2183 i‡((
wEPVÆ
 & 
USB_EP_CTR_RX
) != 0U)

2186 
	`PCD_CLEAR_RX_EP_CTR
(
hpcd
->
In°™˚
, 
ïödex
);

2187 
ï
 = &
hpcd
->
OUT_ï
[
ïödex
];

2190 i‡(
ï
->
doubÀbuf„r
 == 0U)

2192 
cou¡
 = (
uöt16_t
)
	`PCD_GET_EP_RX_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2194 i‡(
cou¡
 != 0U)

2196 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØdªss
, 
cou¡
);

2202 i‡(
ï
->
ty≥
 =
EP_TYPE_BULK
)

2204 
cou¡
 = 
	`HAL_PCD_EP_DB_Re˚ive
(
hpcd
, 
ï
, 
wEPVÆ
);

2209 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 0U);

2211 i‡((
	`PCD_GET_ENDPOINT
(
hpcd
->
In°™˚
, 
ï
->
num
Ë& 
USB_EP_DTOG_RX
) != 0U)

2214 
cou¡
 = (
uöt16_t
)
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2216 i‡(
cou¡
 != 0U)

2218 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr0
, 
cou¡
);

2224 
cou¡
 = (
uöt16_t
)
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2226 i‡(
cou¡
 != 0U)

2228 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr1
, 
cou¡
);

2234 
ï
->
x„r_cou¡
 +
cou¡
;

2235 
ï
->
x„r_buff
 +
cou¡
;

2237 i‡((
ï
->
x„r_Àn
 =0UË|| (
cou¡
 <Ép->
max∑ckë
))

2240 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2241 
hpcd
->
	`D©aOutSègeCÆlback
(hpcd, 
ï
->
num
);

2243 
	`HAL_PCD_D©aOutSègeCÆlback
(
hpcd
, 
ï
->
num
);

2248 (Ë
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
, 
ï
);

2253 i‡((
wEPVÆ
 & 
USB_EP_CTR_TX
) != 0U)

2255 
ï
 = &
hpcd
->
IN_ï
[
ïödex
];

2258 
	`PCD_CLEAR_TX_EP_CTR
(
hpcd
->
In°™˚
, 
ïödex
);

2261 i‡((
ï
->
ty≥
 !
EP_TYPE_BULK
) ||

2262 ((
ï
->
ty≥
 =
EP_TYPE_BULK
Ë&& ((
wEPVÆ
 & 
USB_EP_KIND
) == 0U)))

2265 
TxByãNbª
 = (
uöt16_t
)
	`PCD_GET_EP_TX_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2267 i‡(
ï
->
x„r_Àn
 > 
TxByãNbª
)

2269 
ï
->
x„r_Àn
 -
TxByãNbª
;

2273 
ï
->
x„r_Àn
 = 0U;

2277 i‡(
ï
->
x„r_Àn
 == 0U)

2280 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2281 
hpcd
->
	`D©aInSègeCÆlback
(hpcd, 
ï
->
num
);

2283 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 
ï
->
num
);

2289 
ï
->
x„r_buff
 +
TxByãNbª
;

2290 
ï
->
x„r_cou¡
 +
TxByãNbª
;

2291 ()
	`USB_EPSèπX„r
(
hpcd
->
In°™˚
, 
ï
);

2297 ()
	`HAL_PCD_EP_DB_Tønsmô
(
hpcd
, 
ï
, 
wEPVÆ
);

2303  
HAL_OK
;

2304 
	}
}

2314 
uöt16_t
 
	$HAL_PCD_EP_DB_Re˚ive
(
PCD_H™dÀTy≥Def
 *
hpcd
,

2315 
PCD_EPTy≥Def
 *
ï
, 
uöt16_t
 
wEPVÆ
)

2317 
uöt16_t
 
cou¡
;

2320 i‡((
wEPVÆ
 & 
USB_EP_DTOG_RX
) != 0U)

2323 
cou¡
 = (
uöt16_t
)
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2325 i‡(
ï
->
x„r_Àn
 >
cou¡
)

2327 
ï
->
x„r_Àn
 -
cou¡
;

2331 
ï
->
x„r_Àn
 = 0U;

2334 i‡(
ï
->
x„r_Àn
 == 0U)

2337 
	`PCD_SET_EP_RX_STATUS
(
hpcd
->
In°™˚
, 
ï
->
num
, 
USB_EP_RX_NAK
);

2341 i‡((
wEPVÆ
 & 
USB_EP_DTOG_TX
) != 0U)

2343 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 0U);

2346 i‡(
cou¡
 != 0U)

2348 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr0
, 
cou¡
);

2355 
cou¡
 = (
uöt16_t
)
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2357 i‡(
ï
->
x„r_Àn
 >
cou¡
)

2359 
ï
->
x„r_Àn
 -
cou¡
;

2363 
ï
->
x„r_Àn
 = 0U;

2366 i‡(
ï
->
x„r_Àn
 == 0U)

2369 
	`PCD_SET_EP_RX_STATUS
(
hpcd
->
In°™˚
, 
ï
->
num
, 
USB_EP_RX_NAK
);

2373 i‡((
wEPVÆ
 & 
USB_EP_DTOG_TX
) == 0U)

2375 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 0U);

2378 i‡(
cou¡
 != 0U)

2380 
	`USB_RódPMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr1
, 
cou¡
);

2384  
cou¡
;

2385 
	}
}

2395 
HAL_SètusTy≥Def
 
	$HAL_PCD_EP_DB_Tønsmô
(
PCD_H™dÀTy≥Def
 *
hpcd
,

2396 
PCD_EPTy≥Def
 *
ï
, 
uöt16_t
 
wEPVÆ
)

2398 
uöt32_t
 
Àn
;

2399 
uöt16_t
 
TxByãNbª
;

2402 i‡((
wEPVÆ
 & 
USB_EP_DTOG_TX
) != 0U)

2405 
TxByãNbª
 = (
uöt16_t
)
	`PCD_GET_EP_DBUF0_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2407 i‡(
ï
->
x„r_Àn
 > 
TxByãNbª
)

2409 
ï
->
x„r_Àn
 -
TxByãNbª
;

2413 
ï
->
x„r_Àn
 = 0U;

2416 i‡(
ï
->
x„r_Àn
 == 0U)

2419 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2420 
hpcd
->
	`D©aInSègeCÆlback
(hpcd, 
ï
->
num
);

2422 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 
ï
->
num
);

2425 i‡((
wEPVÆ
 & 
USB_EP_DTOG_RX
) != 0U)

2427 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 1U);

2433 i‡((
wEPVÆ
 & 
USB_EP_DTOG_RX
) != 0U)

2435 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 1U);

2439 i‡(
ï
->
x„r_fûl_db
 == 1U)

2441 
ï
->
x„r_buff
 +
TxByãNbª
;

2442 
ï
->
x„r_cou¡
 +
TxByãNbª
;

2445 i‡(
ï
->
x„r_Àn_db
 >ï->
max∑ckë
)

2447 
Àn
 = 
ï
->
max∑ckë
;

2448 
ï
->
x„r_Àn_db
 -
Àn
;

2450 i‡(
ï
->
x„r_Àn_db
 == 0U)

2452 
Àn
 = 
TxByãNbª
;

2453 
ï
->
x„r_fûl_db
 = 0U;

2457 
ï
->
x„r_fûl_db
 = 0U;

2458 
Àn
 = 
ï
->
x„r_Àn_db
;

2459 
ï
->
x„r_Àn_db
 = 0U;

2464 
	`PCD_SET_EP_DBUF0_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2467 
	`USB_WrôePMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr0
, (
uöt16_t
)
Àn
);

2474 
TxByãNbª
 = (
uöt16_t
)
	`PCD_GET_EP_DBUF1_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
);

2476 i‡(
ï
->
x„r_Àn
 >
TxByãNbª
)

2478 
ï
->
x„r_Àn
 -
TxByãNbª
;

2482 
ï
->
x„r_Àn
 = 0U;

2486 i‡(
ï
->
x„r_Àn
 == 0U)

2489 #i‡(
USE_HAL_PCD_REGISTER_CALLBACKS
 == 1U)

2490 
hpcd
->
	`D©aInSègeCÆlback
(hpcd, 
ï
->
num
);

2492 
	`HAL_PCD_D©aInSègeCÆlback
(
hpcd
, 
ï
->
num
);

2496 i‡((
wEPVÆ
 & 
USB_EP_DTOG_RX
) == 0U)

2498 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 1U);

2504 i‡((
wEPVÆ
 & 
USB_EP_DTOG_RX
) == 0U)

2506 
	`PCD_FªeU£rBuf„r
(
hpcd
->
In°™˚
, 
ï
->
num
, 1U);

2510 i‡(
ï
->
x„r_fûl_db
 == 1U)

2512 
ï
->
x„r_buff
 +
TxByãNbª
;

2513 
ï
->
x„r_cou¡
 +
TxByãNbª
;

2516 i‡(
ï
->
x„r_Àn_db
 >ï->
max∑ckë
)

2518 
Àn
 = 
ï
->
max∑ckë
;

2519 
ï
->
x„r_Àn_db
 -
Àn
;

2521 i‡(
ï
->
x„r_Àn_db
 == 0U)

2523 
Àn
 = 
TxByãNbª
;

2524 
ï
->
x„r_fûl_db
 = 0U;

2528 
Àn
 = 
ï
->
x„r_Àn_db
;

2529 
ï
->
x„r_Àn_db
 = 0U;

2530 
ï
->
x„r_fûl_db
 = 0;

2534 
	`PCD_SET_EP_DBUF1_CNT
(
hpcd
->
In°™˚
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2537 
	`USB_WrôePMA
(
hpcd
->
In°™˚
, 
ï
->
x„r_buff
,Ép->
pmØddr1
, (
uöt16_t
)
Àn
);

2543 
	`PCD_SET_EP_TX_STATUS
(
hpcd
->
In°™˚
, 
ï
->
num
, 
USB_EP_TX_VALID
);

2545  
HAL_OK
;

2546 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd_ex.c

25 
	~"°m32f1xx_hÆ.h
"

36 #ifde‡
HAL_PCD_MODULE_ENABLED


38 #i‡
deföed
 (
USB
Ë|| deföed (
USB_OTG_FS
)

63 #i‡
deföed
 (
USB_OTG_FS
)

71 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_SëTxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
fifo
, 
uöt16_t
 
size
)

73 
uöt8_t
 
i
;

74 
uöt32_t
 
Tx_Off£t
;

86 
Tx_Off£t
 = 
hpcd
->
In°™˚
->
GRXFSIZ
;

88 i‡(
fifo
 == 0U)

90 
hpcd
->
In°™˚
->
DIEPTXF0_HNPTXFSIZ
 = ((
uöt32_t
)
size
 << 16Ë| 
Tx_Off£t
;

94 
Tx_Off£t
 +(
hpcd
->
In°™˚
->
DIEPTXF0_HNPTXFSIZ
) >> 16;

95 
i
 = 0U; i < (
fifo
 - 1U); i++)

97 
Tx_Off£t
 +(
hpcd
->
In°™˚
->
DIEPTXF
[
i
] >> 16);

101 
hpcd
->
In°™˚
->
DIEPTXF
[
fifo
 - 1U] = ((
uöt32_t
)
size
 << 16Ë| 
Tx_Off£t
;

104  
HAL_OK
;

105 
	}
}

113 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_SëRxFiFo
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
size
)

115 
hpcd
->
In°™˚
->
GRXFSIZ
 = 
size
;

117  
HAL_OK
;

118 
	}
}

120 #i‡
deföed
 (
USB
)

138 
HAL_SètusTy≥Def
 
	$HAL_PCDEx_PMAC⁄fig
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt16_t
 
ï_addr
,

139 
uöt16_t
 
ï_köd
, 
uöt32_t
 
pmØdªss
)

141 
PCD_EPTy≥Def
 *
ï
;

144 i‡((0x80U & 
ï_addr
) == 0x80U)

146 
ï
 = &
hpcd
->
IN_ï
[
ï_addr
 & 
EP_ADDR_MSK
];

150 
ï
 = &
hpcd
->
OUT_ï
[
ï_addr
];

154 i‡(
ï_köd
 =
PCD_SNG_BUF
)

157 
ï
->
doubÀbuf„r
 = 0U;

159 
ï
->
pmØdªss
 = (
uöt16_t
)pmaadress;

164 
ï
->
doubÀbuf„r
 = 1U;

166 
ï
->
pmØddr0
 = (
uöt16_t
)(
pmØdªss
 & 0xFFFFU);

167 
ï
->
pmØddr1
 = (
uöt16_t
)((
pmØdªss
 & 0xFFFF0000U) >> 16);

170  
HAL_OK
;

171 
	}
}

181 
__wók
 
	$HAL_PCDEx_SëC⁄√˘i⁄Sèã
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
uöt8_t
 
°©e
)

184 
	`UNUSED
(
hpcd
);

185 
	`UNUSED
(
°©e
);

189 
	}
}

198 
__wók
 
	$HAL_PCDEx_LPM_CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_LPM_MsgTy≥Def
 
msg
)

201 
	`UNUSED
(
hpcd
);

202 
	`UNUSED
(
msg
);

207 
	}
}

215 
__wók
 
	$HAL_PCDEx_BCD_CÆlback
(
PCD_H™dÀTy≥Def
 *
hpcd
, 
PCD_BCD_MsgTy≥Def
 
msg
)

218 
	`UNUSED
(
hpcd
);

219 
	`UNUSED
(
msg
);

224 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pwr.c

27 
	~"°m32f1xx_hÆ.h
"

38 #ifde‡
HAL_PWR_MODULE_ENABLED


50 
	#PVD_MODE_IT
 0x00010000U

	)

51 
	#PVD_MODE_EVT
 0x00020000U

	)

52 
	#PVD_RISING_EDGE
 0x00000001U

	)

53 
	#PVD_FALLING_EDGE
 0x00000002U

	)

63 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

64 
	#PWR_CR_OFFSET
 0x00U

	)

65 
	#PWR_CSR_OFFSET
 0x04U

	)

66 
	#PWR_CR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CR_OFFSET
)

	)

67 
	#PWR_CSR_OFFSET_BB
 (
PWR_OFFSET
 + 
PWR_CSR_OFFSET
)

	)

77 
	#LPSDSR_BIT_NUMBER
 
PWR_CR_LPDS_Pos


	)

78 
	#CR_LPSDSR_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32UË+ (
LPSDSR_BIT_NUMBER
 * 4U)))

	)

81 
	#DBP_BIT_NUMBER
 
PWR_CR_DBP_Pos


	)

82 
	#CR_DBP_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32UË+ (
DBP_BIT_NUMBER
 * 4U)))

	)

85 
	#PVDE_BIT_NUMBER
 
PWR_CR_PVDE_Pos


	)

86 
	#CR_PVDE_BB
 ((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CR_OFFSET_BB
 * 32UË+ (
PVDE_BIT_NUMBER
 * 4U)))

	)

98 
	#CSR_EWUP_BB
(
VAL
Ë((
uöt32_t
)(
PERIPH_BB_BASE
 + (
PWR_CSR_OFFSET_BB
 * 32UË+ (
	`POSITION_VAL
(VALË* 4U)))

	)

113 
PWR_OvîlﬂdW„
();

116 
__NOINLINE


117 
	$PWR_OvîlﬂdW„
()

119 
__asm
 volatile( "wfe" );

120 
__asm
 volatile( "nop" );

121 
	}
}

156 
	$HAL_PWR_DeInô
()

158 
	`__HAL_RCC_PWR_FORCE_RESET
();

159 
	`__HAL_RCC_PWR_RELEASE_RESET
();

160 
	}
}

169 
	$HAL_PWR_E«bÀBkUpAc˚ss
()

172 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
ENABLE
;

173 
	}
}

182 
	$HAL_PWR_DißbÀBkUpAc˚ss
()

185 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
DISABLE
;

186 
	}
}

316 
	$HAL_PWR_C⁄figPVD
(
PWR_PVDTy≥Def
 *
sC⁄figPVD
)

319 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
sC⁄figPVD
->
PVDLevñ
));

320 
	`as£π_∑øm
(
	`IS_PWR_PVD_MODE
(
sC⁄figPVD
->
Mode
));

323 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_PLS
, 
sC⁄figPVD
->
PVDLevñ
);

326 
	`__HAL_PWR_PVD_EXTI_DISABLE_EVENT
();

327 
	`__HAL_PWR_PVD_EXTI_DISABLE_IT
();

328 
	`__HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE
();

329 
	`__HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE
();

332 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_IT
) == PVD_MODE_IT)

334 
	`__HAL_PWR_PVD_EXTI_ENABLE_IT
();

338 if((
sC⁄figPVD
->
Mode
 & 
PVD_MODE_EVT
) == PVD_MODE_EVT)

340 
	`__HAL_PWR_PVD_EXTI_ENABLE_EVENT
();

344 if((
sC⁄figPVD
->
Mode
 & 
PVD_RISING_EDGE
) == PVD_RISING_EDGE)

346 
	`__HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE
();

349 if((
sC⁄figPVD
->
Mode
 & 
PVD_FALLING_EDGE
) == PVD_FALLING_EDGE)

351 
	`__HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE
();

353 
	}
}

359 
	$HAL_PWR_E«bÀPVD
()

362 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
ENABLE
;

363 
	}
}

369 
	$HAL_PWR_DißbÀPVD
()

372 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
DISABLE
;

373 
	}
}

382 
	$HAL_PWR_E«bÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

385 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

387 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
ENABLE
;

388 
	}
}

397 
	$HAL_PWR_DißbÀWakeUpPö
(
uöt32_t
 
WakeUpPöx
)

400 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
WakeUpPöx
));

402 *(
__IO
 
uöt32_t
 *Ë
	`CSR_EWUP_BB
(
WakeUpPöx
Ë(uöt32_t)
DISABLE
;

403 
	}
}

417 
	$HAL_PWR_E¡îSLEEPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
SLEEPE¡ry
)

422 
	`UNUSED
(
Reguœt‹
);

424 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
SLEEPE¡ry
));

427 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

430 if(
SLEEPE¡ry
 =
PWR_SLEEPENTRY_WFI
)

433 
	`__WFI
();

438 
	`__SEV
();

439 
	`__WFE
();

440 
	`__WFE
();

442 
	}
}

463 
	$HAL_PWR_E¡îSTOPMode
(
uöt32_t
 
Reguœt‹
, 
uöt8_t
 
STOPE¡ry
)

466 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
Reguœt‹
));

467 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
STOPE¡ry
));

470 
	`CLEAR_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

473 
	`MODIFY_REG
(
PWR
->
CR
, 
PWR_CR_LPDS
, 
Reguœt‹
);

476 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

479 if(
STOPE¡ry
 =
PWR_STOPENTRY_WFI
)

482 
	`__WFI
();

487 
	`__SEV
();

488 
	`PWR_OvîlﬂdW„
();

489 
	`PWR_OvîlﬂdW„
();

492 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

493 
	}
}

503 
	$HAL_PWR_E¡îSTANDBYMode
()

506 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_PDDS
);

509 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPDEEP_Msk
));

512 #i‡
	`deföed
 ( 
__CC_ARM
)

513 
	`__f‹˚_°‹es
();

516 
	`__WFI
();

517 
	}
}

528 
	$HAL_PWR_E«bÀSÀïOnExô
()

531 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

532 
	}
}

541 
	$HAL_PWR_DißbÀSÀïOnExô
()

544 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SLEEPONEXIT_Msk
));

545 
	}
}

554 
	$HAL_PWR_E«bÀSEVOnPíd
()

557 
	`SET_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

558 
	}
}

567 
	$HAL_PWR_DißbÀSEVOnPíd
()

570 
	`CLEAR_BIT
(
SCB
->
SCR
, ((
uöt32_t
)
SCB_SCR_SEVONPEND_Msk
));

571 
	}
}

580 
	$HAL_PWR_PVD_IRQH™dÀr
()

583 if(
	`__HAL_PWR_PVD_EXTI_GET_FLAG
(Ë!
RESET
)

586 
	`HAL_PWR_PVDCÆlback
();

589 
	`__HAL_PWR_PVD_EXTI_CLEAR_FLAG
();

591 
	}
}

597 
__wók
 
	$HAL_PWR_PVDCÆlback
()

602 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c

63 
	~"°m32f1xx_hÆ.h
"

74 #ifde‡
HAL_RCC_MODULE_ENABLED


89 
	#MCO1_CLK_ENABLE
(Ë
	`__HAL_RCC_GPIOA_CLK_ENABLE
()

	)

90 
	#MCO1_GPIO_PORT
 
GPIOA


	)

91 
	#MCO1_PIN
 
GPIO_PIN_8


	)

106 
RCC_Dñay
(
uöt32_t
 
mdñay
);

202 
HAL_SètusTy≥Def
 
	$HAL_RCC_DeInô
()

204 
uöt32_t
 
tick°¨t
;

207 
tick°¨t
 = 
	`HAL_GëTick
();

210 
	`SET_BIT
(
RCC
->
CR
, 
RCC_CR_HSION
);

213 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSIRDY
Ë=
RESET
)

215 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI_TIMEOUT_VALUE
)

217  
HAL_TIMEOUT
;

222 
	`MODIFY_REG
(
RCC
->
CR
, 
RCC_CR_HSITRIM
, (0x10U << 
RCC_CR_HSITRIM_Pos
));

225 
tick°¨t
 = 
	`HAL_GëTick
();

228 
	`CLEAR_REG
(
RCC
->
CFGR
);

231 
	`READ_BIT
(
RCC
->
CFGR
, 
RCC_CFGR_SWS
Ë!
RESET
)

233 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
CLOCKSWITCH_TIMEOUT_VALUE
)

235  
HAL_TIMEOUT
;

240 
Sy°emC‹eClock
 = 
HSI_VALUE
;

243 i‡(
	`HAL_InôTick
(
uwTickPrio
Ë!
HAL_OK
)

245  
HAL_ERROR
;

249 
tick°¨t
 = 
	`HAL_GëTick
();

252 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLLON
);

255 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLLRDY
Ë!
RESET
)

257 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

259  
HAL_TIMEOUT
;

264 
	`CLEAR_REG
(
RCC
->
CFGR
);

267 
tick°¨t
 = 
	`HAL_GëTick
();

270 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEON
 | 
RCC_CR_CSSON
);

273 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_HSERDY
Ë!
RESET
)

275 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSE_TIMEOUT_VALUE
)

277  
HAL_TIMEOUT
;

282 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_HSEBYP
);

284 #i‡
	`deföed
(
RCC_PLL2_SUPPORT
)

286 
tick°¨t
 = 
	`HAL_GëTick
();

289 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2ON
);

292 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL2RDY
Ë!
RESET
)

294 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

296  
HAL_TIMEOUT
;

301 #i‡
	`deföed
(
RCC_PLLI2S_SUPPORT
)

303 
tick°¨t
 = 
	`HAL_GëTick
();

306 
	`CLEAR_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3ON
);

309 
	`READ_BIT
(
RCC
->
CR
, 
RCC_CR_PLL3RDY
Ë!
RESET
)

311 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

313  
HAL_TIMEOUT
;

318 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

320 
	`CLEAR_REG
(
RCC
->
CFGR2
);

324 
	`SET_BIT
(
RCC
->
CSR
, 
RCC_CSR_RMVF
);

327 
	`CLEAR_REG
(
RCC
->
CIR
);

329  
HAL_OK
;

330 
	}
}

347 
HAL_SètusTy≥Def
 
	$HAL_RCC_OscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

349 
uöt32_t
 
tick°¨t
;

350 
uöt32_t
 
∂l_c⁄fig
;

353 i‡(
RCC_OscInôSåu˘
 =
NULL
)

355  
HAL_ERROR
;

359 
	`as£π_∑øm
(
	`IS_RCC_OSCILLATORTYPE
(
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
));

362 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSE
) == RCC_OSCILLATORTYPE_HSE)

365 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_OscInôSåu˘
->
HSESèã
));

368 i‡((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSE
)

369 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
)))

371 i‡((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSESèã
 =
RCC_HSE_OFF
))

373  
HAL_ERROR
;

379 
	`__HAL_RCC_HSE_CONFIG
(
RCC_OscInôSåu˘
->
HSESèã
);

383 i‡(
RCC_OscInôSåu˘
->
HSESèã
 !
RCC_HSE_OFF
)

386 
tick°¨t
 = 
	`HAL_GëTick
();

389 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

391 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSE_TIMEOUT_VALUE
)

393  
HAL_TIMEOUT
;

400 
tick°¨t
 = 
	`HAL_GëTick
();

403 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë!
RESET
)

405 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSE_TIMEOUT_VALUE
)

407  
HAL_TIMEOUT
;

414 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_HSI
) == RCC_OSCILLATORTYPE_HSI)

417 
	`as£π_∑øm
(
	`IS_RCC_HSI
(
RCC_OscInôSåu˘
->
HSISèã
));

418 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
));

421 i‡((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_HSI
)

422 || ((
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
Ë&& (
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSI_DIV2
)))

425 i‡((
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
Ë&& (
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_ON
))

427  
HAL_ERROR
;

433 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

439 i‡(
RCC_OscInôSåu˘
->
HSISèã
 !
RCC_HSI_OFF
)

442 
	`__HAL_RCC_HSI_ENABLE
();

445 
tick°¨t
 = 
	`HAL_GëTick
();

448 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

450 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI_TIMEOUT_VALUE
)

452  
HAL_TIMEOUT
;

457 
	`__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST
(
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
);

462 
	`__HAL_RCC_HSI_DISABLE
();

465 
tick°¨t
 = 
	`HAL_GëTick
();

468 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë!
RESET
)

470 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
HSI_TIMEOUT_VALUE
)

472  
HAL_TIMEOUT
;

479 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSI
) == RCC_OSCILLATORTYPE_LSI)

482 
	`as£π_∑øm
(
	`IS_RCC_LSI
(
RCC_OscInôSåu˘
->
LSISèã
));

485 i‡(
RCC_OscInôSåu˘
->
LSISèã
 !
RCC_LSI_OFF
)

488 
	`__HAL_RCC_LSI_ENABLE
();

491 
tick°¨t
 = 
	`HAL_GëTick
();

494 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë=
RESET
)

496 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
LSI_TIMEOUT_VALUE
)

498  
HAL_TIMEOUT
;

503 
	`RCC_Dñay
(1);

508 
	`__HAL_RCC_LSI_DISABLE
();

511 
tick°¨t
 = 
	`HAL_GëTick
();

514 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSIRDY
Ë!
RESET
)

516 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
LSI_TIMEOUT_VALUE
)

518  
HAL_TIMEOUT
;

524 i‡(((
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
Ë& 
RCC_OSCILLATORTYPE_LSE
) == RCC_OSCILLATORTYPE_LSE)

526 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

529 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_OscInôSåu˘
->
LSESèã
));

533 i‡(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

535 
	`__HAL_RCC_PWR_CLK_ENABLE
();

536 
pwr˛kch™ged
 = 
SET
;

539 i‡(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

542 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

545 
tick°¨t
 = 
	`HAL_GëTick
();

547 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

549 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

551  
HAL_TIMEOUT
;

557 
	`__HAL_RCC_LSE_CONFIG
(
RCC_OscInôSåu˘
->
LSESèã
);

559 i‡(
RCC_OscInôSåu˘
->
LSESèã
 !
RCC_LSE_OFF
)

562 
tick°¨t
 = 
	`HAL_GëTick
();

565 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

567 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_LSE_TIMEOUT_VALUE
)

569  
HAL_TIMEOUT
;

576 
tick°¨t
 = 
	`HAL_GëTick
();

579 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë!
RESET
)

581 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_LSE_TIMEOUT_VALUE
)

583  
HAL_TIMEOUT
;

589 i‡(
pwr˛kch™ged
 =
SET
)

591 
	`__HAL_RCC_PWR_CLK_DISABLE
();

595 #i‡
	`deföed
(
RCC_CR_PLL2ON
)

598 
	`as£π_∑øm
(
	`IS_RCC_PLL2
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
));

599 i‡((
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
Ë!
RCC_PLL2_NONE
)

603 i‡((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

604 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

605 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

607  
HAL_ERROR
;

611 i‡((
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
Ë=
RCC_PLL2_ON
)

614 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
));

615 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
));

619 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
) && \

620 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
))

622  
HAL_ERROR
;

626 
	`__HAL_RCC_PLL2_DISABLE
();

629 
tick°¨t
 = 
	`HAL_GëTick
();

632 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

634 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

636  
HAL_TIMEOUT
;

641 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
);

644 
	`__HAL_RCC_PLL2_CONFIG
(
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
);

647 
	`__HAL_RCC_PLL2_ENABLE
();

650 
tick°¨t
 = 
	`HAL_GëTick
();

653 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë=
RESET
)

655 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

657  
HAL_TIMEOUT
;

664 
	`CLEAR_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
);

667 
	`__HAL_RCC_PLL2_DISABLE
();

670 
tick°¨t
 = 
	`HAL_GëTick
();

673 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

675 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

677  
HAL_TIMEOUT
;

687 
	`as£π_∑øm
(
	`IS_RCC_PLL
(
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
));

688 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë!
RCC_PLL_NONE
)

691 i‡(
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!
RCC_SYSCLKSOURCE_STATUS_PLLCLK
)

693 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_ON
)

696 
	`as£π_∑øm
(
	`IS_RCC_PLLSOURCE
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
));

697 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
));

700 
	`__HAL_RCC_PLL_DISABLE
();

703 
tick°¨t
 = 
	`HAL_GëTick
();

706 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

708 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

710  
HAL_TIMEOUT
;

716 i‡(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 =
RCC_PLLSOURCE_HSE
)

719 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV
(
RCC_OscInôSåu˘
->
HSEPªdivVÆue
));

720 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

721 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1_SOURCE
(
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
));

724 
	`SET_BIT
(
RCC
->
CFGR2
, 
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
);

728 
	`__HAL_RCC_HSE_PREDIV_CONFIG
(
RCC_OscInôSåu˘
->
HSEPªdivVÆue
);

732 
	`__HAL_RCC_PLL_CONFIG
(
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
,

733 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
);

735 
	`__HAL_RCC_PLL_ENABLE
();

738 
tick°¨t
 = 
	`HAL_GëTick
();

741 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

743 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

745  
HAL_TIMEOUT
;

752 
	`__HAL_RCC_PLL_DISABLE
();

755 
tick°¨t
 = 
	`HAL_GëTick
();

758 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë!
RESET
)

760 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL_TIMEOUT_VALUE
)

762  
HAL_TIMEOUT
;

770 i‡((
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
Ë=
RCC_PLL_OFF
)

772  
HAL_ERROR
;

777 
∂l_c⁄fig
 = 
RCC
->
CFGR
;

778 i‡((
	`READ_BIT
(
∂l_c⁄fig
, 
RCC_CFGR_PLLSRC
Ë!
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
) ||

779 (
	`READ_BIT
(
∂l_c⁄fig
, 
RCC_CFGR_PLLMULL
Ë!
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
))

781  
HAL_ERROR
;

787  
HAL_OK
;

788 
	}
}

813 
HAL_SètusTy≥Def
 
	$HAL_RCC_ClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 
FL©ícy
)

815 
uöt32_t
 
tick°¨t
;

818 i‡(
RCC_ClkInôSåu˘
 =
NULL
)

820  
HAL_ERROR
;

824 
	`as£π_∑øm
(
	`IS_RCC_CLOCKTYPE
(
RCC_ClkInôSåu˘
->
ClockTy≥
));

825 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FL©ícy
));

831 #i‡
	`deföed
(
FLASH_ACR_LATENCY
)

833 i‡(
FL©ícy
 > 
	`__HAL_FLASH_GET_LATENCY
())

836 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

840 i‡(
	`__HAL_FLASH_GET_LATENCY
(Ë!
FL©ícy
)

842  
HAL_ERROR
;

848 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_HCLK
) == RCC_CLOCKTYPE_HCLK)

852 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

854 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_HCLK_DIV16
);

857 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

859 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, (
RCC_HCLK_DIV16
 << 3));

863 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_ClkInôSåu˘
->
AHBCLKDividî
));

864 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_HPRE
, 
RCC_ClkInôSåu˘
->
AHBCLKDividî
);

868 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_SYSCLK
) == RCC_CLOCKTYPE_SYSCLK)

870 
	`as£π_∑øm
(
	`IS_RCC_SYSCLKSOURCE
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
));

873 i‡(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_HSE
)

876 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSERDY
Ë=
RESET
)

878  
HAL_ERROR
;

882 i‡(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 =
RCC_SYSCLKSOURCE_PLLCLK
)

885 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLRDY
Ë=
RESET
)

887  
HAL_ERROR
;

894 i‡(
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_HSIRDY
Ë=
RESET
)

896  
HAL_ERROR
;

899 
	`__HAL_RCC_SYSCLK_CONFIG
(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
);

902 
tick°¨t
 = 
	`HAL_GëTick
();

904 
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë!(
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 << 
RCC_CFGR_SWS_Pos
))

906 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
CLOCKSWITCH_TIMEOUT_VALUE
)

908  
HAL_TIMEOUT
;

913 #i‡
	`deföed
(
FLASH_ACR_LATENCY
)

915 i‡(
FL©ícy
 < 
	`__HAL_FLASH_GET_LATENCY
())

918 
	`__HAL_FLASH_SET_LATENCY
(
FL©ícy
);

922 i‡(
	`__HAL_FLASH_GET_LATENCY
(Ë!
FL©ícy
)

924  
HAL_ERROR
;

930 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK1
) == RCC_CLOCKTYPE_PCLK1)

932 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB1CLKDividî
));

933 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE1
, 
RCC_ClkInôSåu˘
->
APB1CLKDividî
);

937 i‡(((
RCC_ClkInôSåu˘
->
ClockTy≥
Ë& 
RCC_CLOCKTYPE_PCLK2
) == RCC_CLOCKTYPE_PCLK2)

939 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_ClkInôSåu˘
->
APB2CLKDividî
));

940 
	`MODIFY_REG
(
RCC
->
CFGR
, 
RCC_CFGR_PPRE2
, ((
RCC_ClkInôSåu˘
->
APB2CLKDividî
) << 3));

944 
Sy°emC‹eClock
 = 
	`HAL_RCC_GëSysClockFªq
(Ë>> 
AHBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
Ë>> 
RCC_CFGR_HPRE_Pos
];

947 
	`HAL_InôTick
(
uwTickPrio
);

949  
HAL_OK
;

950 
	}
}

1002 
	$HAL_RCC_MCOC⁄fig
(
uöt32_t
 
RCC_MCOx
, uöt32_à
RCC_MCOSour˚
, uöt32_à
RCC_MCODiv
)

1004 
GPIO_InôTy≥Def
 
gpio
 = {0U};

1007 
	`as£π_∑øm
(
	`IS_RCC_MCO
(
RCC_MCOx
));

1008 
	`as£π_∑øm
(
	`IS_RCC_MCODIV
(
RCC_MCODiv
));

1009 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCOSour˚
));

1012 
	`UNUSED
(
RCC_MCOx
);

1013 
	`UNUSED
(
RCC_MCODiv
);

1016 
gpio
.
Mode
 = 
GPIO_MODE_AF_PP
;

1017 
gpio
.
S≥ed
 = 
GPIO_SPEED_FREQ_HIGH
;

1018 
gpio
.
PuŒ
 = 
GPIO_NOPULL
;

1019 
gpio
.
Pö
 = 
MCO1_PIN
;

1022 
	`MCO1_CLK_ENABLE
();

1024 
	`HAL_GPIO_Inô
(
MCO1_GPIO_PORT
, &
gpio
);

1027 
	`__HAL_RCC_MCO1_CONFIG
(
RCC_MCOSour˚
, 
RCC_MCODiv
);

1028 
	}
}

1039 
	$HAL_RCC_E«bÀCSS
()

1041 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
ENABLE
;

1042 
	}
}

1048 
	$HAL_RCC_DißbÀCSS
()

1050 *(
__IO
 
uöt32_t
 *Ë
RCC_CR_CSSON_BB
 = (uöt32_t)
DISABLE
;

1051 
	}
}

1082 
uöt32_t
 
	$HAL_RCC_GëSysClockFªq
()

1084 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1085 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};

1086 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

1088 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

1089 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

1090 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

1092 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[2] = {1, 2};

1096 
uöt32_t
 
tm¥eg
 = 0U, 
¥ediv
 = 0U, 
∂l˛k
 = 0U, 
∂lmul
 = 0U;

1097 
uöt32_t
 
sys˛ock‰eq
 = 0U;

1098 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1099 
uöt32_t
 
¥ediv2
 = 0U, 
∂l2mul
 = 0U;

1102 
tm¥eg
 = 
RCC
->
CFGR
;

1105 
tm¥eg
 & 
RCC_CFGR_SWS
)

1107 
RCC_SYSCLKSOURCE_STATUS_HSE
:

1109 
sys˛ock‰eq
 = 
HSE_VALUE
;

1112 
RCC_SYSCLKSOURCE_STATUS_PLLCLK
:

1114 
∂lmul
 = 
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
tm¥eg
 & 
RCC_CFGR_PLLMULL
Ë>> 
RCC_CFGR_PLLMULL_Pos
];

1115 i‡((
tm¥eg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

1117 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1
)

1118 
¥ediv
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
Ë>> 
RCC_CFGR2_PREDIV1_Pos
];

1120 
¥ediv
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë>> 
RCC_CFGR_PLLXTPRE_Pos
];

1122 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1124 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

1128 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

1129 
∂l2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
Ë>> 
RCC_CFGR2_PLL2MUL_Pos
) + 2;

1130 
∂l˛k
 = (
uöt32_t
)(((
uöt64_t
)
HSE_VALUE
 * (uöt64_t)
∂l2mul
 * (uöt64_t)
∂lmul
Ë/ ((uöt64_t)
¥ediv2
 * (uöt64_t)
¥ediv
));

1135 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 * 
∂lmul
Ë/ 
¥ediv
);

1140 i‡(
∂lmul
 =
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
RCC_CFGR_PLLMULL6_5
Ë>> 
RCC_CFGR_PLLMULL_Pos
])

1142 
∂l˛k
 =Öllclk / 2;

1146 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 * 
∂lmul
Ë/ 
¥ediv
);

1152 
∂l˛k
 = (
uöt32_t
)((
HSI_VALUE
 >> 1Ë* 
∂lmul
);

1154 
sys˛ock‰eq
 = 
∂l˛k
;

1157 
RCC_SYSCLKSOURCE_STATUS_HSI
:

1160 
sys˛ock‰eq
 = 
HSI_VALUE
;

1164  
sys˛ock‰eq
;

1165 
	}
}

1176 
uöt32_t
 
	$HAL_RCC_GëHCLKFªq
()

1178  
Sy°emC‹eClock
;

1179 
	}
}

1187 
uöt32_t
 
	$HAL_RCC_GëPCLK1Fªq
()

1190  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
Ë>> 
RCC_CFGR_PPRE1_Pos
]);

1191 
	}
}

1199 
uöt32_t
 
	$HAL_RCC_GëPCLK2Fªq
()

1202  (
	`HAL_RCC_GëHCLKFªq
(Ë>> 
APBPªscTabÀ
[(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
Ë>> 
RCC_CFGR_PPRE2_Pos
]);

1203 
	}
}

1212 
	$HAL_RCC_GëOscC⁄fig
(
RCC_OscInôTy≥Def
 *
RCC_OscInôSåu˘
)

1215 
	`as£π_∑øm
(
RCC_OscInôSåu˘
 !
NULL
);

1218 
RCC_OscInôSåu˘
->
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
 | 
RCC_OSCILLATORTYPE_HSI
 \

1219 | 
RCC_OSCILLATORTYPE_LSE
 | 
RCC_OSCILLATORTYPE_LSI
;

1221 #i‡
	`deföed
(
RCC_CFGR2_PREDIV1SRC
)

1223 
RCC_OscInôSåu˘
->
Pªdiv1Sour˚
 = 
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
);

1227 i‡((
RCC
->
CR
 & 
RCC_CR_HSEBYP
) == RCC_CR_HSEBYP)

1229 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_BYPASS
;

1231 i‡((
RCC
->
CR
 & 
RCC_CR_HSEON
) == RCC_CR_HSEON)

1233 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_ON
;

1237 
RCC_OscInôSåu˘
->
HSESèã
 = 
RCC_HSE_OFF
;

1239 
RCC_OscInôSåu˘
->
HSEPªdivVÆue
 = 
	`__HAL_RCC_HSE_GET_PREDIV
();

1242 i‡((
RCC
->
CR
 & 
RCC_CR_HSION
) == RCC_CR_HSION)

1244 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_ON
;

1248 
RCC_OscInôSåu˘
->
HSISèã
 = 
RCC_HSI_OFF
;

1251 
RCC_OscInôSåu˘
->
HSICÆibøti⁄VÆue
 = (
uöt32_t
)((
RCC
->
CR
 & 
RCC_CR_HSITRIM
Ë>> 
RCC_CR_HSITRIM_Pos
);

1254 i‡((
RCC
->
BDCR
 & 
RCC_BDCR_LSEBYP
) == RCC_BDCR_LSEBYP)

1256 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_BYPASS
;

1258 i‡((
RCC
->
BDCR
 & 
RCC_BDCR_LSEON
) == RCC_BDCR_LSEON)

1260 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_ON
;

1264 
RCC_OscInôSåu˘
->
LSESèã
 = 
RCC_LSE_OFF
;

1268 i‡((
RCC
->
CSR
 & 
RCC_CSR_LSION
) == RCC_CSR_LSION)

1270 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_ON
;

1274 
RCC_OscInôSåu˘
->
LSISèã
 = 
RCC_LSI_OFF
;

1279 i‡((
RCC
->
CR
 & 
RCC_CR_PLLON
) == RCC_CR_PLLON)

1281 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

1285 
RCC_OscInôSåu˘
->
PLL
.
PLLSèã
 = 
RCC_PLL_OFF
;

1287 
RCC_OscInôSåu˘
->
PLL
.
PLLSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
);

1288 
RCC_OscInôSåu˘
->
PLL
.
PLLMUL
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
);

1289 #i‡
	`deföed
(
RCC_CR_PLL2ON
)

1291 i‡((
RCC
->
CR
 & 
RCC_CR_PLL2ON
) == RCC_CR_PLL2ON)

1293 
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
 = 
RCC_PLL2_ON
;

1297 
RCC_OscInôSåu˘
->
PLL2
.
PLL2Sèã
 = 
RCC_PLL2_OFF
;

1299 
RCC_OscInôSåu˘
->
PLL2
.
HSEPªdiv2VÆue
 = 
	`__HAL_RCC_HSE_GET_PREDIV2
();

1300 
RCC_OscInôSåu˘
->
PLL2
.
PLL2MUL
 = (
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
);

1302 
	}
}

1312 
	$HAL_RCC_GëClockC⁄fig
(
RCC_ClkInôTy≥Def
 *
RCC_ClkInôSåu˘
, 
uöt32_t
 *
pFL©ícy
)

1315 
	`as£π_∑øm
(
RCC_ClkInôSåu˘
 !
NULL
);

1316 
	`as£π_∑øm
(
pFL©ícy
 !
NULL
);

1319 
RCC_ClkInôSåu˘
->
ClockTy≥
 = 
RCC_CLOCKTYPE_SYSCLK
 | 
RCC_CLOCKTYPE_HCLK
 | 
RCC_CLOCKTYPE_PCLK1
 | 
RCC_CLOCKTYPE_PCLK2
;

1322 
RCC_ClkInôSåu˘
->
SYSCLKSour˚
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SW
);

1325 
RCC_ClkInôSåu˘
->
AHBCLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
);

1328 
RCC_ClkInôSåu˘
->
APB1CLKDividî
 = (
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
);

1331 
RCC_ClkInôSåu˘
->
APB2CLKDividî
 = (
uöt32_t
)((
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
) >> 3);

1333 #i‡ 
	`deföed
(
FLASH_ACR_LATENCY
)

1335 *
pFL©ícy
 = (
uöt32_t
)(
FLASH
->
ACR
 & 
FLASH_ACR_LATENCY
);

1338 *
pFL©ícy
 = (
uöt32_t
)
FLASH_LATENCY_0
;

1340 
	}
}

1347 
	$HAL_RCC_NMI_IRQH™dÀr
()

1350 i‡(
	`__HAL_RCC_GET_IT
(
RCC_IT_CSS
))

1353 
	`HAL_RCC_CSSCÆlback
();

1356 
	`__HAL_RCC_CLEAR_IT
(
RCC_IT_CSS
);

1358 
	}
}

1365 
	$RCC_Dñay
(
uöt32_t
 
mdñay
)

1367 
__IO
 
uöt32_t
 
Dñay
 = 
mdñay
 * (
Sy°emC‹eClock
 / 8U / 1000U);

1370 
	`__NOP
();

1372 
Dñay
 --);

1373 
	}
}

1379 
__wók
 
	$HAL_RCC_CSSCÆlback
()

1384 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc_ex.c

25 
	~"°m32f1xx_hÆ.h
"

31 #ifde‡
HAL_RCC_MODULE_ENABLED


100 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_PîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

102 
uöt32_t
 
tick°¨t
 = 0U, 
ãmp_ªg
 = 0U;

103 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

104 
uöt32_t
 
∂œ˘ive
 = 0U;

108 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClkInô
->
PîùhClockSñe˘i⁄
));

111 i‡((((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_RTC
) == RCC_PERIPHCLK_RTC))

114 
	`as£π_∑øm
(
	`IS_RCC_RTCCLKSOURCE
(
PîùhClkInô
->
RTCClockSñe˘i⁄
));

116 
FœgSètus
 
pwr˛kch™ged
 = 
RESET
;

121 i‡(
	`__HAL_RCC_PWR_IS_CLK_DISABLED
())

123 
	`__HAL_RCC_PWR_CLK_ENABLE
();

124 
pwr˛kch™ged
 = 
SET
;

127 i‡(
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

130 
	`SET_BIT
(
PWR
->
CR
, 
PWR_CR_DBP
);

133 
tick°¨t
 = 
	`HAL_GëTick
();

135 
	`HAL_IS_BIT_CLR
(
PWR
->
CR
, 
PWR_CR_DBP
))

137 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_DBP_TIMEOUT_VALUE
)

139  
HAL_TIMEOUT
;

145 
ãmp_ªg
 = (
RCC
->
BDCR
 & 
RCC_BDCR_RTCSEL
);

146 i‡((
ãmp_ªg
 !0x00000000UË&& (ãmp_ªg !(
PîùhClkInô
->
RTCClockSñe˘i⁄
 & 
RCC_BDCR_RTCSEL
)))

149 
ãmp_ªg
 = (
RCC
->
BDCR
 & ~(
RCC_BDCR_RTCSEL
));

151 
	`__HAL_RCC_BACKUPRESET_FORCE
();

152 
	`__HAL_RCC_BACKUPRESET_RELEASE
();

154 
RCC
->
BDCR
 = 
ãmp_ªg
;

157 i‡(
	`HAL_IS_BIT_SET
(
ãmp_ªg
, 
RCC_BDCR_LSEON
))

160 
tick°¨t
 = 
	`HAL_GëTick
();

163 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_LSERDY
Ë=
RESET
)

165 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RCC_LSE_TIMEOUT_VALUE
)

167  
HAL_TIMEOUT
;

172 
	`__HAL_RCC_RTC_CONFIG
(
PîùhClkInô
->
RTCClockSñe˘i⁄
);

175 i‡(
pwr˛kch™ged
 =
SET
)

177 
	`__HAL_RCC_PWR_CLK_DISABLE
();

182 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_ADC
) == RCC_PERIPHCLK_ADC)

185 
	`as£π_∑øm
(
	`IS_RCC_ADCPLLCLK_DIV
(
PîùhClkInô
->
AdcClockSñe˘i⁄
));

188 
	`__HAL_RCC_ADC_CONFIG
(
PîùhClkInô
->
AdcClockSñe˘i⁄
);

191 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

193 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S2
) == RCC_PERIPHCLK_I2S2)

196 
	`as£π_∑øm
(
	`IS_RCC_I2S2CLKSOURCE
(
PîùhClkInô
->
I2s2ClockSñe˘i⁄
));

199 
	`__HAL_RCC_I2S2_CONFIG
(
PîùhClkInô
->
I2s2ClockSñe˘i⁄
);

203 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_I2S3
) == RCC_PERIPHCLK_I2S3)

206 
	`as£π_∑øm
(
	`IS_RCC_I2S3CLKSOURCE
(
PîùhClkInô
->
I2s3ClockSñe˘i⁄
));

209 
	`__HAL_RCC_I2S3_CONFIG
(
PîùhClkInô
->
I2s3ClockSñe˘i⁄
);

214 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë|| HAL_IS_BIT_SET(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

217 
∂œ˘ive
 = 1;

221 i‡(
∂œ˘ive
 == 1)

224 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

227 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_MUL
(
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
));

228 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
));

232 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL2ON
) && \

233 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
))

235  
HAL_ERROR
;

239 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PîùhClkInô
->
PLLI2S
.
HSEPªdiv2VÆue
);

242 
	`__HAL_RCC_PLLI2S_CONFIG
(
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
);

245 
	`__HAL_RCC_PLLI2S_ENABLE
();

248 
tick°¨t
 = 
	`HAL_GëTick
();

251 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

253 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

255  
HAL_TIMEOUT
;

262 i‡(
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PLL3MUL
Ë!
PîùhClkInô
->
PLLI2S
.
PLLI2SMUL
)

264  
HAL_ERROR
;

270 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

271 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

272 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

274 i‡(((
PîùhClkInô
->
PîùhClockSñe˘i⁄
Ë& 
RCC_PERIPHCLK_USB
) == RCC_PERIPHCLK_USB)

277 
	`as£π_∑øm
(
	`IS_RCC_USBPLLCLK_DIV
(
PîùhClkInô
->
UsbClockSñe˘i⁄
));

280 
	`__HAL_RCC_USB_CONFIG
(
PîùhClkInô
->
UsbClockSñe˘i⁄
);

284  
HAL_OK
;

285 
	}
}

294 
	$HAL_RCCEx_GëPîùhCLKC⁄fig
(
RCC_PîùhCLKInôTy≥Def
 *
PîùhClkInô
)

296 
uöt32_t
 
§c˛k
 = 0U;

299 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_RTC
;

302 
§c˛k
 = 
	`__HAL_RCC_GET_RTC_SOURCE
();

304 
PîùhClkInô
->
RTCClockSñe˘i⁄
 = 
§c˛k
;

307 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_ADC
;

308 
PîùhClkInô
->
AdcClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_ADC_SOURCE
();

310 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

312 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S2
;

313 
PîùhClkInô
->
I2s2ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S2_SOURCE
();

316 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S3
;

317 
PîùhClkInô
->
I2s3ClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_I2S3_SOURCE
();

321 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

323 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S2
;

324 
PîùhClkInô
->
I2s2ClockSñe˘i⁄
 = 
RCC_I2S2CLKSOURCE_SYSCLK
;

327 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_I2S3
;

328 
PîùhClkInô
->
I2s3ClockSñe˘i⁄
 = 
RCC_I2S3CLKSOURCE_SYSCLK
;

332 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

333 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

334 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

336 
PîùhClkInô
->
PîùhClockSñe˘i⁄
 |
RCC_PERIPHCLK_USB
;

337 
PîùhClkInô
->
UsbClockSñe˘i⁄
 = 
	`__HAL_RCC_GET_USB_SOURCE
();

339 
	}
}

387 
uöt32_t
 
	$HAL_RCCEx_GëPîùhCLKFªq
(
uöt32_t
 
PîùhClk
)

389 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

390 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};

391 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};

393 
uöt32_t
 
¥ediv1
 = 0U, 
∂l˛k
 = 0U, 
∂lmul
 = 0U;

394 
uöt32_t
 
∂l2mul
 = 0U, 
∂l3mul
 = 0U, 
¥ediv2
 = 0U;

396 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
) || \

397 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

398 c⁄° 
uöt8_t
 
aPLLMULFa˘‹TabÀ
[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};

399 c⁄° 
uöt8_t
 
aPªdivFa˘‹TabÀ
[2] = {1, 2};

401 
uöt32_t
 
¥ediv1
 = 0U, 
∂l˛k
 = 0U, 
∂lmul
 = 0U;

403 
uöt32_t
 
ãmp_ªg
 = 0U, 
‰equícy
 = 0U;

406 
	`as£π_∑øm
(
	`IS_RCC_PERIPHCLOCK
(
PîùhClk
));

408 
PîùhClk
)

410 #i‡
	`deföed
(
STM32F102x6
Ë|| deföed(
STM32F102xB
Ë|| deföed(
STM32F103x6
)\

411 || 
	`deföed
(
STM32F103xB
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)\

412 || 
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

413 
RCC_PERIPHCLK_USB
:

416 
ãmp_ªg
 = 
RCC
->
CFGR
;

419 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLLON
))

421 
∂lmul
 = 
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
ãmp_ªg
 & 
RCC_CFGR_PLLMULL
Ë>> 
RCC_CFGR_PLLMULL_Pos
];

422 i‡((
ãmp_ªg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

424 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
Ë|| deföed(
STM32F100xB
)\

425 || 
	`deföed
(
STM32F100xE
)

426 
¥ediv1
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
Ë>> 
RCC_CFGR2_PREDIV1_Pos
];

428 
¥ediv1
 = 
aPªdivFa˘‹TabÀ
[(
uöt32_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë>> 
RCC_CFGR_PLLXTPRE_Pos
];

431 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

432 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
))

436 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

437 
∂l2mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
Ë>> 
RCC_CFGR2_PLL2MUL_Pos
) + 2;

438 
∂l˛k
 = (
uöt32_t
)((((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l2mul
Ë/ 
¥ediv1
Ë* 
∂lmul
);

443 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv1
Ë* 
∂lmul
);

448 i‡(
∂lmul
 =
aPLLMULFa˘‹TabÀ
[(
uöt32_t
)(
RCC_CFGR_PLLMULL6_5
Ë>> 
RCC_CFGR_PLLMULL_Pos
])

450 
∂l˛k
 =Öllclk / 2;

453 i‡((
ãmp_ªg
 & 
RCC_CFGR_PLLSRC
Ë!
RCC_PLLSOURCE_HSI_DIV2
)

456 
∂l˛k
 = (
uöt32_t
)((
HSE_VALUE
 / 
¥ediv1
Ë* 
∂lmul
);

463 
∂l˛k
 = (
uöt32_t
)((
HSI_VALUE
 >> 1Ë* 
∂lmul
);

467 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

469 i‡(
	`__HAL_RCC_GET_USB_SOURCE
(Ë=
RCC_USBCLKSOURCE_PLL_DIV2
)

472 
‰equícy
 = 
∂l˛k
;

477 
‰equícy
 = (2 * 
∂l˛k
) / 3;

481 i‡(
	`__HAL_RCC_GET_USB_SOURCE
(Ë=
RCC_USBCLKSOURCE_PLL
)

484 
‰equícy
 = 
∂l˛k
;

489 
‰equícy
 = (
∂l˛k
 * 2) / 3;

496 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
Ë|| deföed(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

497 
RCC_PERIPHCLK_I2S2
:

499 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

501 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

503 i‡(
	`__HAL_RCC_GET_I2S2_SOURCE
(Ë=
RCC_I2S2CLKSOURCE_SYSCLK
)

506 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

511 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

514 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

515 
∂l3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
Ë>> 
RCC_CFGR2_PLL3MUL_Pos
) + 2;

516 
‰equícy
 = (
uöt32_t
)(2 * ((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l3mul
));

522 
RCC_PERIPHCLK_I2S3
:

524 #i‡
	`deföed
(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

526 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

528 i‡(
	`__HAL_RCC_GET_I2S3_SOURCE
(Ë=
RCC_I2S3CLKSOURCE_SYSCLK
)

531 
‰equícy
 = 
	`HAL_RCC_GëSysClockFªq
();

536 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
))

539 
¥ediv2
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
Ë>> 
RCC_CFGR2_PREDIV2_Pos
) + 1;

540 
∂l3mul
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL3MUL
Ë>> 
RCC_CFGR2_PLL3MUL_Pos
) + 2;

541 
‰equícy
 = (
uöt32_t
)(2 * ((
HSE_VALUE
 / 
¥ediv2
Ë* 
∂l3mul
));

548 
RCC_PERIPHCLK_RTC
:

551 
ãmp_ªg
 = 
RCC
->
BDCR
;

554 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_LSE
Ë&& (
	`HAL_IS_BIT_SET
—emp_ªg, 
RCC_BDCR_LSERDY
)))

556 
‰equícy
 = 
LSE_VALUE
;

559 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_LSI
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CSR
, 
RCC_CSR_LSIRDY
)))

561 
‰equícy
 = 
LSI_VALUE
;

563 i‡(((
ãmp_ªg
 & 
RCC_BDCR_RTCSEL
Ë=
RCC_RTCCLKSOURCE_HSE_DIV128
Ë&& (
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_HSERDY
)))

565 
‰equícy
 = 
HSE_VALUE
 / 128U;

574 
RCC_PERIPHCLK_ADC
:

576 
‰equícy
 = 
	`HAL_RCC_GëPCLK2Fªq
(Ë/ (((
	`__HAL_RCC_GET_ADC_SOURCE
(Ë>> 
RCC_CFGR_ADCPRE_Pos
) + 1) * 2);

584  (
‰equícy
);

585 
	}
}

591 #i‡
deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

613 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_E«bÀPLLI2S
(
RCC_PLLI2SInôTy≥Def
 *
PLLI2SInô
)

615 
uöt32_t
 
tick°¨t
 = 0U;

618 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

621 
	`as£π_∑øm
(
	`IS_RCC_PLLI2S_MUL
(
PLLI2SInô
->
PLLI2SMUL
));

622 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PLLI2SInô
->
HSEPªdiv2VÆue
));

626 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL2ON
) && \

627 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PLLI2SInô
->
HSEPªdiv2VÆue
))

629  
HAL_ERROR
;

633 
	`__HAL_RCC_PLLI2S_DISABLE
();

636 
tick°¨t
 = 
	`HAL_GëTick
();

639 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

641 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

643  
HAL_TIMEOUT
;

648 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLLI2SInô
->
HSEPªdiv2VÆue
);

652 
	`__HAL_RCC_PLLI2S_CONFIG
(
PLLI2SInô
->
PLLI2SMUL
);

655 
	`__HAL_RCC_PLLI2S_ENABLE
();

658 
tick°¨t
 = 
	`HAL_GëTick
();

661 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë=
RESET
)

663 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

665  
HAL_TIMEOUT
;

672  
HAL_ERROR
;

675  
HAL_OK
;

676 
	}
}

683 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_DißbÀPLLI2S
()

685 
uöt32_t
 
tick°¨t
 = 0U;

688 i‡(
	`HAL_IS_BIT_CLR
(
RCC
->
CFGR2
, 
RCC_CFGR2_I2S2SRC
Ë&& HAL_IS_BIT_CLR(RCC->CFGR2, 
RCC_CFGR2_I2S3SRC
))

691 
	`__HAL_RCC_PLLI2S_DISABLE
();

694 
tick°¨t
 = 
	`HAL_GëTick
();

697 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLLI2SRDY
Ë!
RESET
)

699 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLLI2S_TIMEOUT_VALUE
)

701  
HAL_TIMEOUT
;

708  
HAL_ERROR
;

711  
HAL_OK
;

712 
	}
}

739 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_E«bÀPLL2
(
RCC_PLL2InôTy≥Def
 *
PLL2Inô
)

741 
uöt32_t
 
tick°¨t
 = 0U;

745 i‡((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

746 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

747 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

749  
HAL_ERROR
;

754 
	`as£π_∑øm
(
	`IS_RCC_PLL2_MUL
(
PLL2Inô
->
PLL2MUL
));

755 
	`as£π_∑øm
(
	`IS_RCC_HSE_PREDIV2
(
PLL2Inô
->
HSEPªdiv2VÆue
));

759 i‡(
	`HAL_IS_BIT_SET
(
RCC
->
CR
, 
RCC_CR_PLL3ON
) && \

760 (
	`__HAL_RCC_HSE_GET_PREDIV2
(Ë!
PLL2Inô
->
HSEPªdiv2VÆue
))

762  
HAL_ERROR
;

766 
	`__HAL_RCC_PLL2_DISABLE
();

769 
tick°¨t
 = 
	`HAL_GëTick
();

772 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

774 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

776  
HAL_TIMEOUT
;

781 
	`__HAL_RCC_HSE_PREDIV2_CONFIG
(
PLL2Inô
->
HSEPªdiv2VÆue
);

784 
	`__HAL_RCC_PLL2_CONFIG
(
PLL2Inô
->
PLL2MUL
);

787 
	`__HAL_RCC_PLL2_ENABLE
();

790 
tick°¨t
 = 
	`HAL_GëTick
();

793 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë=
RESET
)

795 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

797  
HAL_TIMEOUT
;

802  
HAL_OK
;

803 
	}
}

810 
HAL_SètusTy≥Def
 
	$HAL_RCCEx_DißbÀPLL2
()

812 
uöt32_t
 
tick°¨t
 = 0U;

816 i‡((
	`__HAL_RCC_GET_PLL_OSCSOURCE
(Ë=
RCC_PLLSOURCE_HSE
) && \

817 (
	`__HAL_RCC_GET_SYSCLK_SOURCE
(Ë=
RCC_SYSCLKSOURCE_STATUS_PLLCLK
) && \

818 ((
	`READ_BIT
(
RCC
->
CFGR2
, 
RCC_CFGR2_PREDIV1SRC
)Ë=
RCC_CFGR2_PREDIV1SRC_PLL2
))

820  
HAL_ERROR
;

825 
	`__HAL_RCC_PLL2_DISABLE
();

828 
tick°¨t
 = 
	`HAL_GëTick
();

831 
	`__HAL_RCC_GET_FLAG
(
RCC_FLAG_PLL2RDY
Ë!
RESET
)

833 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
PLL2_TIMEOUT_VALUE
)

835  
HAL_TIMEOUT
;

840  
HAL_OK
;

841 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc.c

186 
	~"°m32f1xx_hÆ.h
"

197 #ifde‡
HAL_RTC_MODULE_ENABLED


204 
	#RTC_ALARM_RESETVALUE_REGISTER
 (
uöt16_t
)0xFFFF

	)

205 
	#RTC_ALARM_RESETVALUE
 0xFFFFFFFFU

	)

224 
uöt32_t
 
RTC_RódTimeCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
);

225 
HAL_SètusTy≥Def
 
RTC_WrôeTimeCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeCou¡î
);

226 
uöt32_t
 
RTC_RódAœrmCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
);

227 
HAL_SètusTy≥Def
 
RTC_WrôeAœrmCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
AœrmCou¡î
);

228 
HAL_SètusTy≥Def
 
RTC_E¡îInôMode
(
RTC_H™dÀTy≥Def
 *
hπc
);

229 
HAL_SètusTy≥Def
 
RTC_ExôInôMode
(
RTC_H™dÀTy≥Def
 *
hπc
);

230 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

231 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

232 
uöt8_t
 
RTC_IsLópYór
(
uöt16_t
 
nYór
);

233 
RTC_D©eUpd©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
DayEœp£d
);

234 
uöt8_t
 
RTC_WìkDayNum
(
uöt32_t
 
nYór
, uöt8_à
nM⁄th
, uöt8_à
nDay
);

275 
HAL_SètusTy≥Def
 
	$HAL_RTC_Inô
(
RTC_H™dÀTy≥Def
 *
hπc
)

277 
uöt32_t
 
¥esˇÀr
 = 0U;

279 i‡(
hπc
 =
NULL
)

281  
HAL_ERROR
;

285 
	`as£π_∑øm
(
	`IS_RTC_ALL_INSTANCE
(
hπc
->
In°™˚
));

286 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
hπc
->
Inô
.
OutPut
));

287 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
hπc
->
Inô
.
AsynchPªdiv
));

289 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

290 i‡(
hπc
->
Sèã
 =
HAL_RTC_STATE_RESET
)

293 
hπc
->
Lock
 = 
HAL_UNLOCKED
;

295 
hπc
->
AœrmAEvítCÆlback
 = 
HAL_RTC_AœrmAEvítCÆlback
;

296 
hπc
->
Tam≥r1EvítCÆlback
 = 
HAL_RTCEx_Tam≥r1EvítCÆlback
;

298 i‡(
hπc
->
M•InôCÆlback
 =
NULL
)

300 
hπc
->
M•InôCÆlback
 = 
HAL_RTC_M•Inô
;

303 
hπc
->
	`M•InôCÆlback
(hrtc);

305 i‡(
hπc
->
M•DeInôCÆlback
 =
NULL
)

307 
hπc
->
M•DeInôCÆlback
 = 
HAL_RTC_M•DeInô
;

311 i‡(
hπc
->
Sèã
 =
HAL_RTC_STATE_RESET
)

314 
hπc
->
Lock
 = 
HAL_UNLOCKED
;

317 
	`HAL_RTC_M•Inô
(
hπc
);

322 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

325 i‡(
	`HAL_RTC_WaôF‹Synchro
(
hπc
Ë!
HAL_OK
)

328 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

330  
HAL_ERROR
;

334 i‡(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

337 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

339  
HAL_ERROR
;

344 
	`CLEAR_BIT
(
hπc
->
In°™˚
->
CRL
, (
RTC_FLAG_OW
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_SEC
));

346 i‡(
hπc
->
Inô
.
OutPut
 !
RTC_OUTPUTSOURCE_NONE
)

349 
	`CLEAR_BIT
(
BKP
->
CR
, 
BKP_CR_TPE
);

353 
	`MODIFY_REG
(
BKP
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
 | 
BKP_RTCCR_ASOS
), 
hπc
->
Inô
.
OutPut
);

355 i‡(
hπc
->
Inô
.
AsynchPªdiv
 !
RTC_AUTO_1_SECOND
)

358 
¥esˇÀr
 = 
hπc
->
Inô
.
AsynchPªdiv
;

364 
¥esˇÀr
 = 
	`HAL_RCCEx_GëPîùhCLKFªq
(
RCC_PERIPHCLK_RTC
);

367 i‡(
¥esˇÀr
 == 0U)

370 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

371  
HAL_ERROR
;

376 
¥esˇÀr
 =Örescaler - 1U;

381 
	`MODIFY_REG
(
hπc
->
In°™˚
->
PRLH
, 
RTC_PRLH_PRL
, (
¥esˇÀr
 >> 16U));

382 
	`MODIFY_REG
(
hπc
->
In°™˚
->
PRLL
, 
RTC_PRLL_PRL
, (
¥esˇÀr
 & RTC_PRLL_PRL));

385 i‡(
	`RTC_ExôInôMode
(
hπc
Ë!
HAL_OK
)

387 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

389  
HAL_ERROR
;

393 
hπc
->
D©eToUpd©e
.
Yór
 = 0x00U;

394 
hπc
->
D©eToUpd©e
.
M⁄th
 = 
RTC_MONTH_JANUARY
;

395 
hπc
->
D©eToUpd©e
.
D©e
 = 0x01U;

398 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

400  
HAL_OK
;

402 
	}
}

411 
HAL_SètusTy≥Def
 
	$HAL_RTC_DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
)

414 i‡(
hπc
 =
NULL
)

416  
HAL_ERROR
;

420 
	`as£π_∑øm
(
	`IS_RTC_ALL_INSTANCE
(
hπc
->
In°™˚
));

423 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

426 i‡(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

429 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

432 
	`__HAL_UNLOCK
(
hπc
);

434  
HAL_ERROR
;

438 
	`CLEAR_REG
(
hπc
->
In°™˚
->
CNTL
);

439 
	`CLEAR_REG
(
hπc
->
In°™˚
->
CNTH
);

440 
	`WRITE_REG
(
hπc
->
In°™˚
->
PRLL
, 0x00008000U);

441 
	`CLEAR_REG
(
hπc
->
In°™˚
->
PRLH
);

444 
	`CLEAR_REG
(
hπc
->
In°™˚
->
CRH
);

445 
	`CLEAR_REG
(
hπc
->
In°™˚
->
CRL
);

447 i‡(
	`RTC_ExôInôMode
(
hπc
Ë!
HAL_OK
)

449 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

452 
	`__HAL_UNLOCK
(
hπc
);

454  
HAL_ERROR
;

459 
	`HAL_RTC_WaôF‹Synchro
(
hπc
);

462 
	`CLEAR_BIT
(
hπc
->
In°™˚
->
CRL
, 
RTC_FLAG_RSF
);

464 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

465 i‡(
hπc
->
M•DeInôCÆlback
 =
NULL
)

467 
hπc
->
M•DeInôCÆlback
 = 
HAL_RTC_M•DeInô
;

471 
hπc
->
	`M•DeInôCÆlback
(hrtc);

475 
	`HAL_RTC_M•DeInô
(
hπc
);

478 
hπc
->
Sèã
 = 
HAL_RTC_STATE_RESET
;

481 
	`__HAL_UNLOCK
(
hπc
);

483  
HAL_OK
;

484 
	}
}

486 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

500 
HAL_SètusTy≥Def
 
	$HAL_RTC_Regi°îCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
, 
HAL_RTC_CÆlbackIDTy≥Def
 
CÆlbackID
, 
pRTC_CÆlbackTy≥Def
 
pCÆlback
)

502 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

504 i‡(
pCÆlback
 =
NULL
)

506  
HAL_ERROR
;

510 
	`__HAL_LOCK
(
hπc
);

512 i‡(
HAL_RTC_STATE_READY
 =
hπc
->
Sèã
)

514 
CÆlbackID
)

516 
HAL_RTC_ALARM_A_EVENT_CB_ID
 :

517 
hπc
->
AœrmAEvítCÆlback
 = 
pCÆlback
;

520 
HAL_RTC_TAMPER1_EVENT_CB_ID
 :

521 
hπc
->
Tam≥r1EvítCÆlback
 = 
pCÆlback
;

524 
HAL_RTC_MSPINIT_CB_ID
 :

525 
hπc
->
M•InôCÆlback
 = 
pCÆlback
;

528 
HAL_RTC_MSPDEINIT_CB_ID
 :

529 
hπc
->
M•DeInôCÆlback
 = 
pCÆlback
;

534 
°©us
 = 
HAL_ERROR
;

538 i‡(
HAL_RTC_STATE_RESET
 =
hπc
->
Sèã
)

540 
CÆlbackID
)

542 
HAL_RTC_MSPINIT_CB_ID
 :

543 
hπc
->
M•InôCÆlback
 = 
pCÆlback
;

546 
HAL_RTC_MSPDEINIT_CB_ID
 :

547 
hπc
->
M•DeInôCÆlback
 = 
pCÆlback
;

552 
°©us
 = 
HAL_ERROR
;

559 
°©us
 = 
HAL_ERROR
;

563 
	`__HAL_UNLOCK
(
hπc
);

565  
°©us
;

566 
	}
}

580 
HAL_SètusTy≥Def
 
	$HAL_RTC_UnRegi°îCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
, 
HAL_RTC_CÆlbackIDTy≥Def
 
CÆlbackID
)

582 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

585 
	`__HAL_LOCK
(
hπc
);

587 i‡(
HAL_RTC_STATE_READY
 =
hπc
->
Sèã
)

589 
CÆlbackID
)

591 
HAL_RTC_ALARM_A_EVENT_CB_ID
 :

592 
hπc
->
AœrmAEvítCÆlback
 = 
HAL_RTC_AœrmAEvítCÆlback
;

595 
HAL_RTC_TAMPER1_EVENT_CB_ID
 :

596 
hπc
->
Tam≥r1EvítCÆlback
 = 
HAL_RTCEx_Tam≥r1EvítCÆlback
;

599 
HAL_RTC_MSPINIT_CB_ID
 :

600 
hπc
->
M•InôCÆlback
 = 
HAL_RTC_M•Inô
;

603 
HAL_RTC_MSPDEINIT_CB_ID
 :

604 
hπc
->
M•DeInôCÆlback
 = 
HAL_RTC_M•DeInô
;

609 
°©us
 = 
HAL_ERROR
;

613 i‡(
HAL_RTC_STATE_RESET
 =
hπc
->
Sèã
)

615 
CÆlbackID
)

617 
HAL_RTC_MSPINIT_CB_ID
 :

618 
hπc
->
M•InôCÆlback
 = 
HAL_RTC_M•Inô
;

621 
HAL_RTC_MSPDEINIT_CB_ID
 :

622 
hπc
->
M•DeInôCÆlback
 = 
HAL_RTC_M•DeInô
;

627 
°©us
 = 
HAL_ERROR
;

634 
°©us
 = 
HAL_ERROR
;

638 
	`__HAL_UNLOCK
(
hπc
);

640  
°©us
;

641 
	}
}

650 
__wók
 
	$HAL_RTC_M•Inô
(
RTC_H™dÀTy≥Def
 *
hπc
)

653 
	`UNUSED
(
hπc
);

657 
	}
}

665 
__wók
 
	$HAL_RTC_M•DeInô
(
RTC_H™dÀTy≥Def
 *
hπc
)

668 
	`UNUSED
(
hπc
);

672 
	}
}

703 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
)

705 
uöt32_t
 
cou¡î_time
 = 0U, 
cou¡î_Æ¨m
 = 0U;

708 i‡((
hπc
 =
NULL
Ë|| (
sTime
 == NULL))

710  
HAL_ERROR
;

714 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

717 
	`__HAL_LOCK
(
hπc
);

719 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

721 i‡(
F‹m©
 =
RTC_FORMAT_BIN
)

723 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sTime
->
Hours
));

724 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sTime
->
Möuãs
));

725 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sTime
->
Sec⁄ds
));

727 
cou¡î_time
 = (
uöt32_t
)(((uöt32_t)
sTime
->
Hours
 * 3600U) + \

728 ((
uöt32_t
)
sTime
->
Möuãs
 * 60U) + \

729 ((
uöt32_t
)
sTime
->
Sec⁄ds
));

733 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sTime
->
Hours
)));

734 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sTime
->
Möuãs
)));

735 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sTime
->
Sec⁄ds
)));

737 
cou¡î_time
 = (((
uöt32_t
)(
	`RTC_Bcd2ToByã
(
sTime
->
Hours
)) * 3600U) + \

738 ((
uöt32_t
)(
	`RTC_Bcd2ToByã
(
sTime
->
Möuãs
)) * 60U) + \

739 ((
uöt32_t
)(
	`RTC_Bcd2ToByã
(
sTime
->
Sec⁄ds
))));

743 i‡(
	`RTC_WrôeTimeCou¡î
(
hπc
, 
cou¡î_time
Ë!
HAL_OK
)

746 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

749 
	`__HAL_UNLOCK
(
hπc
);

751  
HAL_ERROR
;

756 
	`CLEAR_BIT
(
hπc
->
In°™˚
->
CRL
, (
RTC_FLAG_SEC
 | 
RTC_FLAG_OW
));

759 
cou¡î_Æ¨m
 = 
	`RTC_RódAœrmCou¡î
(
hπc
);

762 i‡(
cou¡î_Æ¨m
 !
RTC_ALARM_RESETVALUE
)

764 i‡(
cou¡î_Æ¨m
 < 
cou¡î_time
)

767 
cou¡î_Æ¨m
 +(
uöt32_t
)(24U * 3600U);

770 i‡(
	`RTC_WrôeAœrmCou¡î
(
hπc
, 
cou¡î_Æ¨m
Ë!
HAL_OK
)

773 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

776 
	`__HAL_UNLOCK
(
hπc
);

778  
HAL_ERROR
;

783 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

785 
	`__HAL_UNLOCK
(
hπc
);

787  
HAL_OK
;

789 
	}
}

802 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëTime
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_TimeTy≥Def
 *
sTime
, 
uöt32_t
 
F‹m©
)

804 
uöt32_t
 
cou¡î_time
 = 0U, 
cou¡î_Æ¨m
 = 0U, 
days_ñ≠£d
 = 0U, 
hours
 = 0U;

807 i‡((
hπc
 =
NULL
Ë|| (
sTime
 == NULL))

809  
HAL_ERROR
;

813 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

816 i‡(
	`__HAL_RTC_OVERFLOW_GET_FLAG
(
hπc
, 
RTC_FLAG_OW
))

818  
HAL_ERROR
;

822 
cou¡î_time
 = 
	`RTC_RódTimeCou¡î
(
hπc
);

825 
hours
 = 
cou¡î_time
 / 3600U;

826 
sTime
->
Möuãs
 = (
uöt8_t
)((
cou¡î_time
 % 3600U) / 60U);

827 
sTime
->
Sec⁄ds
 = (
uöt8_t
)((
cou¡î_time
 % 3600U) % 60U);

829 i‡(
hours
 >= 24U)

832 
days_ñ≠£d
 = (
hours
 / 24U);

835 
sTime
->
Hours
 = (
hours
 % 24U);

838 
cou¡î_Æ¨m
 = 
	`RTC_RódAœrmCou¡î
(
hπc
);

841 i‡((
cou¡î_Æ¨m
 !
RTC_ALARM_RESETVALUE
Ë&& (cou¡î_Æ¨m > 
cou¡î_time
))

843 
cou¡î_Æ¨m
 -
cou¡î_time
;

849 
cou¡î_Æ¨m
 = 
RTC_ALARM_RESETVALUE
;

853 
cou¡î_time
 -(
days_ñ≠£d
 * 24U * 3600U);

856 i‡(
	`RTC_WrôeTimeCou¡î
(
hπc
, 
cou¡î_time
Ë!
HAL_OK
)

858  
HAL_ERROR
;

862 i‡(
cou¡î_Æ¨m
 !
RTC_ALARM_RESETVALUE
)

864 
cou¡î_Æ¨m
 +
cou¡î_time
;

867 i‡(
	`RTC_WrôeAœrmCou¡î
(
hπc
, 
cou¡î_Æ¨m
Ë!
HAL_OK
)

869  
HAL_ERROR
;

875 i‡(
	`RTC_WrôeAœrmCou¡î
(
hπc
, 
cou¡î_Æ¨m
Ë!
HAL_OK
)

877  
HAL_ERROR
;

882 
	`RTC_D©eUpd©e
(
hπc
, 
days_ñ≠£d
);

886 
sTime
->
Hours
 = 
hours
;

890 i‡(
F‹m©
 !
RTC_FORMAT_BIN
)

893 
sTime
->
Hours
 = (
uöt8_t
)
	`RTC_ByãToBcd2
(sTime->Hours);

894 
sTime
->
Möuãs
 = (
uöt8_t
)
	`RTC_ByãToBcd2
(sTime->Minutes);

895 
sTime
->
Sec⁄ds
 = (
uöt8_t
)
	`RTC_ByãToBcd2
(sTime->Seconds);

898  
HAL_OK
;

899 
	}
}

913 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
)

915 
uöt32_t
 
cou¡î_time
 = 0U, 
cou¡î_Æ¨m
 = 0U, 
hours
 = 0U;

918 i‡((
hπc
 =
NULL
Ë|| (
sD©e
 == NULL))

920  
HAL_ERROR
;

924 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

927 
	`__HAL_LOCK
(
hπc
);

929 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

931 i‡(
F‹m©
 =
RTC_FORMAT_BIN
)

933 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
sD©e
->
Yór
));

934 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
sD©e
->
M⁄th
));

935 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
sD©e
->
D©e
));

938 
hπc
->
D©eToUpd©e
.
Yór
 = 
sD©e
->Year;

939 
hπc
->
D©eToUpd©e
.
M⁄th
 = 
sD©e
->Month;

940 
hπc
->
D©eToUpd©e
.
D©e
 = 
sD©e
->Date;

944 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
sD©e
->
Yór
)));

945 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
	`RTC_Bcd2ToByã
(
sD©e
->
M⁄th
)));

946 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
	`RTC_Bcd2ToByã
(
sD©e
->
D©e
)));

949 
hπc
->
D©eToUpd©e
.
Yór
 = 
	`RTC_Bcd2ToByã
(
sD©e
->Year);

950 
hπc
->
D©eToUpd©e
.
M⁄th
 = 
	`RTC_Bcd2ToByã
(
sD©e
->Month);

951 
hπc
->
D©eToUpd©e
.
D©e
 = 
	`RTC_Bcd2ToByã
(
sD©e
->Date);

955 
hπc
->
D©eToUpd©e
.
WìkDay
 = 
	`RTC_WìkDayNum
(hπc->D©eToUpd©e.
Yór
, hπc->D©eToUpd©e.
M⁄th
, hπc->D©eToUpd©e.
D©e
);

956 
sD©e
->
WìkDay
 = 
hπc
->
D©eToUpd©e
.WeekDay;

960 
cou¡î_time
 = 
	`RTC_RódTimeCou¡î
(
hπc
);

963 
hours
 = 
cou¡î_time
 / 3600U;

964 i‡(
hours
 > 24U)

967 
cou¡î_time
 -((
hours
 / 24U) * 24U * 3600U);

969 i‡(
	`RTC_WrôeTimeCou¡î
(
hπc
, 
cou¡î_time
Ë!
HAL_OK
)

972 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

975 
	`__HAL_UNLOCK
(
hπc
);

977  
HAL_ERROR
;

981 
cou¡î_Æ¨m
 = 
	`RTC_RódAœrmCou¡î
(
hπc
);

984 i‡(
cou¡î_Æ¨m
 !
RTC_ALARM_RESETVALUE
)

986 i‡(
cou¡î_Æ¨m
 < 
cou¡î_time
)

989 
cou¡î_Æ¨m
 +(
uöt32_t
)(24U * 3600U);

992 i‡(
	`RTC_WrôeAœrmCou¡î
(
hπc
, 
cou¡î_Æ¨m
Ë!
HAL_OK
)

995 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

998 
	`__HAL_UNLOCK
(
hπc
);

1000  
HAL_ERROR
;

1008 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
 ;

1011 
	`__HAL_UNLOCK
(
hπc
);

1013  
HAL_OK
;

1014 
	}
}

1027 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëD©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_D©eTy≥Def
 *
sD©e
, 
uöt32_t
 
F‹m©
)

1029 
RTC_TimeTy≥Def
 
°ime
 = {0U};

1032 i‡((
hπc
 =
NULL
Ë|| (
sD©e
 == NULL))

1034  
HAL_ERROR
;

1038 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

1041 i‡(
	`HAL_RTC_GëTime
(
hπc
, &
°ime
, 
RTC_FORMAT_BIN
Ë!
HAL_OK
)

1043  
HAL_ERROR
;

1047 
sD©e
->
WìkDay
 = 
hπc
->
D©eToUpd©e
.WeekDay;

1048 
sD©e
->
Yór
 = 
hπc
->
D©eToUpd©e
.Year;

1049 
sD©e
->
M⁄th
 = 
hπc
->
D©eToUpd©e
.Month;

1050 
sD©e
->
D©e
 = 
hπc
->
D©eToUpd©e
.Date;

1053 i‡(
F‹m©
 !
RTC_FORMAT_BIN
)

1056 
sD©e
->
Yór
 = (
uöt8_t
)
	`RTC_ByãToBcd2
(sDate->Year);

1057 
sD©e
->
M⁄th
 = (
uöt8_t
)
	`RTC_ByãToBcd2
(sDate->Month);

1058 
sD©e
->
D©e
 = (
uöt8_t
)
	`RTC_ByãToBcd2
(sDate->Date);

1060  
HAL_OK
;

1061 
	}
}

1092 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
)

1094 
uöt32_t
 
cou¡î_Æ¨m
 = 0U, 
cou¡î_time
;

1095 
RTC_TimeTy≥Def
 
°ime
 = {0U};

1098 i‡((
hπc
 =
NULL
Ë|| (
sAœrm
 == NULL))

1100  
HAL_ERROR
;

1104 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

1105 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
sAœrm
->
Aœrm
));

1108 
	`__HAL_LOCK
(
hπc
);

1110 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1113 i‡(
	`HAL_RTC_GëTime
(
hπc
, &
°ime
, 
RTC_FORMAT_BIN
Ë!
HAL_OK
)

1115  
HAL_ERROR
;

1119 
cou¡î_time
 = (
uöt32_t
)(((uöt32_t)
°ime
.
Hours
 * 3600U) + \

1120 ((
uöt32_t
)
°ime
.
Möuãs
 * 60U) + \

1121 ((
uöt32_t
)
°ime
.
Sec⁄ds
));

1123 i‡(
F‹m©
 =
RTC_FORMAT_BIN
)

1125 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sAœrm
->
AœrmTime
.
Hours
));

1126 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sAœrm
->
AœrmTime
.
Möuãs
));

1127 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sAœrm
->
AœrmTime
.
Sec⁄ds
));

1129 
cou¡î_Æ¨m
 = (
uöt32_t
)(((uöt32_t)
sAœrm
->
AœrmTime
.
Hours
 * 3600U) + \

1130 ((
uöt32_t
)
sAœrm
->
AœrmTime
.
Möuãs
 * 60U) + \

1131 ((
uöt32_t
)
sAœrm
->
AœrmTime
.
Sec⁄ds
));

1135 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)));

1136 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)));

1137 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

1139 
cou¡î_Æ¨m
 = (((
uöt32_t
)(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)) * 3600U) + \

1140 ((
uöt32_t
)(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)) * 60U) + \

1141 ((
uöt32_t
)
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

1145 i‡(
cou¡î_Æ¨m
 < 
cou¡î_time
)

1148 
cou¡î_Æ¨m
 +(
uöt32_t
)(24U * 3600U);

1152 i‡(
	`RTC_WrôeAœrmCou¡î
(
hπc
, 
cou¡î_Æ¨m
Ë!
HAL_OK
)

1155 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1158 
	`__HAL_UNLOCK
(
hπc
);

1160  
HAL_ERROR
;

1164 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1166 
	`__HAL_UNLOCK
(
hπc
);

1168  
HAL_OK
;

1170 
	}
}

1184 
HAL_SètusTy≥Def
 
	$HAL_RTC_SëAœrm_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
F‹m©
)

1186 
uöt32_t
 
cou¡î_Æ¨m
 = 0U, 
cou¡î_time
;

1187 
RTC_TimeTy≥Def
 
°ime
 = {0U};

1190 i‡((
hπc
 =
NULL
Ë|| (
sAœrm
 == NULL))

1192  
HAL_ERROR
;

1196 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

1197 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
sAœrm
->
Aœrm
));

1200 
	`__HAL_LOCK
(
hπc
);

1202 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1205 i‡(
	`HAL_RTC_GëTime
(
hπc
, &
°ime
, 
RTC_FORMAT_BIN
Ë!
HAL_OK
)

1207  
HAL_ERROR
;

1211 
cou¡î_time
 = (
uöt32_t
)(((uöt32_t)
°ime
.
Hours
 * 3600U) + \

1212 ((
uöt32_t
)
°ime
.
Möuãs
 * 60U) + \

1213 ((
uöt32_t
)
°ime
.
Sec⁄ds
));

1215 i‡(
F‹m©
 =
RTC_FORMAT_BIN
)

1217 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
sAœrm
->
AœrmTime
.
Hours
));

1218 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
sAœrm
->
AœrmTime
.
Möuãs
));

1219 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
sAœrm
->
AœrmTime
.
Sec⁄ds
));

1221 
cou¡î_Æ¨m
 = (
uöt32_t
)(((uöt32_t)
sAœrm
->
AœrmTime
.
Hours
 * 3600U) + \

1222 ((
uöt32_t
)
sAœrm
->
AœrmTime
.
Möuãs
 * 60U) + \

1223 ((
uöt32_t
)
sAœrm
->
AœrmTime
.
Sec⁄ds
));

1227 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)));

1228 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)));

1229 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

1231 
cou¡î_Æ¨m
 = (((
uöt32_t
)(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Hours
)) * 3600U) + \

1232 ((
uöt32_t
)(
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Möuãs
)) * 60U) + \

1233 ((
uöt32_t
)
	`RTC_Bcd2ToByã
(
sAœrm
->
AœrmTime
.
Sec⁄ds
)));

1237 i‡(
cou¡î_Æ¨m
 < 
cou¡î_time
)

1240 
cou¡î_Æ¨m
 +(
uöt32_t
)(24U * 3600U);

1244 i‡(
	`RTC_WrôeAœrmCou¡î
(
hπc
, 
cou¡î_Æ¨m
Ë!
HAL_OK
)

1247 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1250 
	`__HAL_UNLOCK
(
hπc
);

1252  
HAL_ERROR
;

1257 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

1260 
	`__HAL_RTC_ALARM_ENABLE_IT
(
hπc
, 
RTC_IT_ALRA
);

1263 
	`__HAL_RTC_ALARM_EXTI_ENABLE_IT
();

1265 
	`__HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE
();

1267 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1269 
	`__HAL_UNLOCK
(
hπc
);

1271  
HAL_OK
;

1273 
	}
}

1289 
HAL_SètusTy≥Def
 
	$HAL_RTC_GëAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_AœrmTy≥Def
 *
sAœrm
, 
uöt32_t
 
Aœrm
, uöt32_à
F‹m©
)

1291 
uöt32_t
 
cou¡î_Æ¨m
 = 0U;

1294 
	`UNUSED
(
Aœrm
);

1297 i‡((
hπc
 =
NULL
Ë|| (
sAœrm
 == NULL))

1299  
HAL_ERROR
;

1303 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
F‹m©
));

1304 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
Aœrm
));

1307 
cou¡î_Æ¨m
 = 
	`RTC_RódAœrmCou¡î
(
hπc
);

1311 
sAœrm
->
AœrmTime
.
Hours
 = (
uöt32_t
)((
cou¡î_Æ¨m
 / 3600U) % 24U);

1312 
sAœrm
->
AœrmTime
.
Möuãs
 = (
uöt32_t
)((
cou¡î_Æ¨m
 % 3600U) / 60U);

1313 
sAœrm
->
AœrmTime
.
Sec⁄ds
 = (
uöt32_t
)((
cou¡î_Æ¨m
 % 3600U) % 60U);

1315 i‡(
F‹m©
 !
RTC_FORMAT_BIN
)

1317 
sAœrm
->
AœrmTime
.
Hours
 = 
	`RTC_ByãToBcd2
(sAlarm->AlarmTime.Hours);

1318 
sAœrm
->
AœrmTime
.
Möuãs
 = 
	`RTC_ByãToBcd2
(sAlarm->AlarmTime.Minutes);

1319 
sAœrm
->
AœrmTime
.
Sec⁄ds
 = 
	`RTC_ByãToBcd2
(sAlarm->AlarmTime.Seconds);

1322  
HAL_OK
;

1323 
	}
}

1334 
HAL_SètusTy≥Def
 
	$HAL_RTC_Dó˘iv©eAœrm
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Aœrm
)

1337 
	`UNUSED
(
Aœrm
);

1340 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
Aœrm
));

1343 i‡(
hπc
 =
NULL
)

1345  
HAL_ERROR
;

1349 
	`__HAL_LOCK
(
hπc
);

1351 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

1354 
	`__HAL_RTC_ALARM_DISABLE_IT
(
hπc
, 
RTC_IT_ALRA
);

1357 i‡(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1360 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1363 
	`__HAL_UNLOCK
(
hπc
);

1365  
HAL_ERROR
;

1370 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

1373 
	`WRITE_REG
(
hπc
->
In°™˚
->
ALRH
, 
RTC_ALARM_RESETVALUE_REGISTER
);

1374 
	`WRITE_REG
(
hπc
->
In°™˚
->
ALRL
, 
RTC_ALARM_RESETVALUE_REGISTER
);

1377 
	`__HAL_RTC_ALARM_EXTI_DISABLE_IT
();

1380 i‡(
	`RTC_ExôInôMode
(
hπc
Ë!
HAL_OK
)

1382 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

1385 
	`__HAL_UNLOCK
(
hπc
);

1387  
HAL_ERROR
;

1390 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1393 
	`__HAL_UNLOCK
(
hπc
);

1395  
HAL_OK
;

1396 
	}
}

1404 
	$HAL_RTC_AœrmIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
)

1406 i‡(
	`__HAL_RTC_ALARM_GET_IT_SOURCE
(
hπc
, 
RTC_IT_ALRA
))

1409 i‡(
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
Ë!(
uöt32_t
)
RESET
)

1412 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

1413 
hπc
->
	`AœrmAEvítCÆlback
(hrtc);

1415 
	`HAL_RTC_AœrmAEvítCÆlback
(
hπc
);

1419 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

1424 
	`__HAL_RTC_ALARM_EXTI_CLEAR_FLAG
();

1427 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1428 
	}
}

1436 
__wók
 
	$HAL_RTC_AœrmAEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

1439 
	`UNUSED
(
hπc
);

1443 
	}
}

1452 
HAL_SètusTy≥Def
 
	$HAL_RTC_PﬁlF‹AœrmAEvít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

1454 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

1457 i‡(
hπc
 =
NULL
)

1459  
HAL_ERROR
;

1462 
	`__HAL_RTC_ALARM_GET_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
Ë=
RESET
)

1464 i‡(
Timeout
 !
HAL_MAX_DELAY
)

1466 i‡((
Timeout
 =0Ë|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

1468 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

1469  
HAL_TIMEOUT
;

1475 
	`__HAL_RTC_ALARM_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_ALRAF
);

1478 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

1480  
HAL_OK
;

1481 
	}
}

1507 
HAL_RTCSèãTy≥Def
 
	$HAL_RTC_GëSèã
(
RTC_H™dÀTy≥Def
 *
hπc
)

1509  
hπc
->
Sèã
;

1510 
	}
}

1540 
HAL_SètusTy≥Def
 
	$HAL_RTC_WaôF‹Synchro
(
RTC_H™dÀTy≥Def
 *
hπc
)

1542 
uöt32_t
 
tick°¨t
 = 0U;

1545 i‡(
hπc
 =
NULL
)

1547  
HAL_ERROR
;

1551 
	`CLEAR_BIT
(
hπc
->
In°™˚
->
CRL
, 
RTC_FLAG_RSF
);

1553 
tick°¨t
 = 
	`HAL_GëTick
();

1556 (
hπc
->
In°™˚
->
CRL
 & 
RTC_FLAG_RSF
Ë=(
uöt32_t
)
RESET
)

1558 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RTC_TIMEOUT_VALUE
)

1560  
HAL_TIMEOUT
;

1564  
HAL_OK
;

1565 
	}
}

1587 
uöt32_t
 
	$RTC_RódTimeCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
)

1589 
uöt16_t
 
high1
 = 0U, 
high2
 = 0U, 
low
 = 0U;

1590 
uöt32_t
 
timecou¡î
 = 0U;

1592 
high1
 = 
	`READ_REG
(
hπc
->
In°™˚
->
CNTH
 & 
RTC_CNTH_RTC_CNT
);

1593 
low
 = 
	`READ_REG
(
hπc
->
In°™˚
->
CNTL
 & 
RTC_CNTL_RTC_CNT
);

1594 
high2
 = 
	`READ_REG
(
hπc
->
In°™˚
->
CNTH
 & 
RTC_CNTH_RTC_CNT
);

1596 i‡(
high1
 !
high2
)

1600 
timecou¡î
 = (((
uöt32_t
Ë
high2
 << 16UË| 
	`READ_REG
(
hπc
->
In°™˚
->
CNTL
 & 
RTC_CNTL_RTC_CNT
));

1606 
timecou¡î
 = (((
uöt32_t
Ë
high1
 << 16UË| 
low
);

1609  
timecou¡î
;

1610 
	}
}

1619 
HAL_SètusTy≥Def
 
	$RTC_WrôeTimeCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
TimeCou¡î
)

1621 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1624 i‡(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1626 
°©us
 = 
HAL_ERROR
;

1631 
	`WRITE_REG
(
hπc
->
In°™˚
->
CNTH
, (
TimeCou¡î
 >> 16U));

1633 
	`WRITE_REG
(
hπc
->
In°™˚
->
CNTL
, (
TimeCou¡î
 & 
RTC_CNTL_RTC_CNT
));

1636 i‡(
	`RTC_ExôInôMode
(
hπc
Ë!
HAL_OK
)

1638 
°©us
 = 
HAL_ERROR
;

1642  
°©us
;

1643 
	}
}

1651 
uöt32_t
 
	$RTC_RódAœrmCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
)

1653 
uöt16_t
 
high1
 = 0U, 
low
 = 0U;

1655 
high1
 = 
	`READ_REG
(
hπc
->
In°™˚
->
ALRH
 & 
RTC_CNTH_RTC_CNT
);

1656 
low
 = 
	`READ_REG
(
hπc
->
In°™˚
->
ALRL
 & 
RTC_CNTL_RTC_CNT
);

1658  (((
uöt32_t
Ë
high1
 << 16UË| 
low
);

1659 
	}
}

1668 
HAL_SètusTy≥Def
 
	$RTC_WrôeAœrmCou¡î
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
AœrmCou¡î
)

1670 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

1673 i‡(
	`RTC_E¡îInôMode
(
hπc
Ë!
HAL_OK
)

1675 
°©us
 = 
HAL_ERROR
;

1680 
	`WRITE_REG
(
hπc
->
In°™˚
->
ALRH
, (
AœrmCou¡î
 >> 16U));

1682 
	`WRITE_REG
(
hπc
->
In°™˚
->
ALRL
, (
AœrmCou¡î
 & 
RTC_ALRL_RTC_ALR
));

1685 i‡(
	`RTC_ExôInôMode
(
hπc
Ë!
HAL_OK
)

1687 
°©us
 = 
HAL_ERROR
;

1691  
°©us
;

1692 
	}
}

1700 
HAL_SètusTy≥Def
 
	$RTC_E¡îInôMode
(
RTC_H™dÀTy≥Def
 *
hπc
)

1702 
uöt32_t
 
tick°¨t
 = 0U;

1704 
tick°¨t
 = 
	`HAL_GëTick
();

1706 (
hπc
->
In°™˚
->
CRL
 & 
RTC_CRL_RTOFF
Ë=(
uöt32_t
)
RESET
)

1708 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RTC_TIMEOUT_VALUE
)

1710  
HAL_TIMEOUT
;

1715 
	`__HAL_RTC_WRITEPROTECTION_DISABLE
(
hπc
);

1718  
HAL_OK
;

1719 
	}
}

1727 
HAL_SètusTy≥Def
 
	$RTC_ExôInôMode
(
RTC_H™dÀTy≥Def
 *
hπc
)

1729 
uöt32_t
 
tick°¨t
 = 0U;

1732 
	`__HAL_RTC_WRITEPROTECTION_ENABLE
(
hπc
);

1734 
tick°¨t
 = 
	`HAL_GëTick
();

1736 (
hπc
->
In°™˚
->
CRL
 & 
RTC_CRL_RTOFF
Ë=(
uöt32_t
)
RESET
)

1738 i‡((
	`HAL_GëTick
(Ë- 
tick°¨t
Ë> 
RTC_TIMEOUT_VALUE
)

1740  
HAL_TIMEOUT
;

1744  
HAL_OK
;

1745 
	}
}

1752 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

1754 
uöt32_t
 
bcdhigh
 = 0U;

1756 
VÆue
 >= 10U)

1758 
bcdhigh
++;

1759 
VÆue
 -= 10U;

1762  ((
uöt8_t
)(
bcdhigh
 << 4UË| 
VÆue
);

1763 
	}
}

1770 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

1772 
uöt32_t
 
tmp
 = 0U;

1773 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;

1774  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

1775 
	}
}

1784 
	$RTC_D©eUpd©e
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
DayEœp£d
)

1786 
uöt32_t
 
yór
 = 0U, 
m⁄th
 = 0U, 
day
 = 0U;

1787 
uöt32_t
 
lo›
 = 0U;

1790 
yór
 = 
hπc
->
D©eToUpd©e
.
Yór
;

1793 
m⁄th
 = 
hπc
->
D©eToUpd©e
.
M⁄th
;

1794 
day
 = 
hπc
->
D©eToUpd©e
.
D©e
;

1796 
lo›
 = 0U;Üo› < 
DayEœp£d
;Üoop++)

1798 i‡((
m⁄th
 == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \

1799 (
m⁄th
 == 8U) || (month == 10U) || (month == 12U))

1801 i‡(
day
 < 31U)

1803 
day
++;

1808 i‡(
m⁄th
 != 12U)

1810 
m⁄th
++;

1811 
day
 = 1U;

1816 
m⁄th
 = 1U;

1817 
day
 = 1U;

1818 
yór
++;

1822 i‡((
m⁄th
 == 4U) || (month == 6U) || (month == 9U) || (month == 11U))

1824 i‡(
day
 < 30U)

1826 
day
++;

1831 
m⁄th
++;

1832 
day
 = 1U;

1835 i‡(
m⁄th
 == 2U)

1837 i‡(
day
 < 28U)

1839 
day
++;

1841 i‡(
day
 == 28U)

1844 i‡(
	`RTC_IsLópYór
(
yór
))

1846 
day
++;

1850 
m⁄th
++;

1851 
day
 = 1U;

1854 i‡(
day
 == 29U)

1856 
m⁄th
++;

1857 
day
 = 1U;

1863 
hπc
->
D©eToUpd©e
.
Yór
 = 
yór
;

1866 
hπc
->
D©eToUpd©e
.
M⁄th
 = 
m⁄th
;

1867 
hπc
->
D©eToUpd©e
.
D©e
 = 
day
;

1870 
hπc
->
D©eToUpd©e
.
WìkDay
 = 
	`RTC_WìkDayNum
(
yór
, 
m⁄th
, 
day
);

1871 
	}
}

1879 
uöt8_t
 
	$RTC_IsLópYór
(
uöt16_t
 
nYór
)

1881 i‡((
nYór
 % 4U) != 0U)

1886 i‡((
nYór
 % 100U) != 0U)

1891 i‡((
nYór
 % 400U) == 0U)

1899 
	}
}

1916 
uöt8_t
 
	$RTC_WìkDayNum
(
uöt32_t
 
nYór
, 
uöt8_t
 
nM⁄th
, uöt8_à
nDay
)

1918 
uöt32_t
 
yór
 = 0U, 
wìkday
 = 0U;

1920 
yór
 = 2000U + 
nYór
;

1922 i‡(
nM⁄th
 < 3U)

1925 
wìkday
 = (((23U * 
nM⁄th
Ë/ 9UË+ 
nDay
 + 4U + 
yór
 + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;

1930 
wìkday
 = (((23U * 
nM⁄th
Ë/ 9UË+ 
nDay
 + 4U + 
yór
 + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;

1933  (
uöt8_t
)
wìkday
;

1934 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc_ex.c

27 
	~"°m32f1xx_hÆ.h
"

33 #ifde‡
HAL_RTC_MODULE_ENABLED


81 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
 *
sTam≥r
)

84 i‡((
hπc
 =
NULL
Ë|| (
sTam≥r
 == NULL))

86  
HAL_ERROR
;

90 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
sTam≥r
->
Tam≥r
));

91 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam≥r
->
Triggî
));

94 
	`__HAL_LOCK
(
hπc
);

96 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

98 i‡(
	`HAL_IS_BIT_SET
(
BKP
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
)))

100 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

103 
	`__HAL_UNLOCK
(
hπc
);

105  
HAL_ERROR
;

108 
	`MODIFY_REG
(
BKP
->
CR
, (
BKP_CR_TPE
 | 
BKP_CR_TPAL
), (
sTam≥r
->
Tam≥r
 | (sTam≥r->
Triggî
)));

110 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

113 
	`__HAL_UNLOCK
(
hπc
);

115  
HAL_OK
;

116 
	}
}

127 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëTam≥r_IT
(
RTC_H™dÀTy≥Def
 *
hπc
, 
RTC_Tam≥rTy≥Def
 *
sTam≥r
)

130 i‡((
hπc
 =
NULL
Ë|| (
sTam≥r
 == NULL))

132  
HAL_ERROR
;

136 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
sTam≥r
->
Tam≥r
));

137 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
sTam≥r
->
Triggî
));

140 
	`__HAL_LOCK
(
hπc
);

142 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

144 i‡(
	`HAL_IS_BIT_SET
(
BKP
->
RTCCR
, (
BKP_RTCCR_CCO
 | 
BKP_RTCCR_ASOE
)))

146 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

149 
	`__HAL_UNLOCK
(
hπc
);

151  
HAL_ERROR
;

154 
	`MODIFY_REG
(
BKP
->
CR
, (
BKP_CR_TPE
 | 
BKP_CR_TPAL
), (
sTam≥r
->
Tam≥r
 | (sTam≥r->
Triggî
)));

157 
	`__HAL_RTC_TAMPER_ENABLE_IT
(
hπc
, 
RTC_IT_TAMP1
);

159 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

162 
	`__HAL_UNLOCK
(
hπc
);

164  
HAL_OK
;

165 
	}
}

175 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eTam≥r
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Tam≥r
)

178 i‡(
hπc
 =
NULL
)

180  
HAL_ERROR
;

183 
	`UNUSED
(
Tam≥r
);

185 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
Tam≥r
));

188 
	`__HAL_LOCK
(
hπc
);

190 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

193 
	`CLEAR_BIT
(
BKP
->
CR
, 
BKP_CR_TPE
);

197 
	`__HAL_RTC_TAMPER_DISABLE_IT
(
hπc
, 
RTC_IT_TAMP1
);

200 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
);

201 
	`SET_BIT
(
BKP
->
CSR
, 
BKP_CSR_CTE
);

203 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

206 
	`__HAL_UNLOCK
(
hπc
);

208  
HAL_OK
;

209 
	}
}

217 
	$HAL_RTCEx_Tam≥rIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
)

220 i‡(
	`__HAL_RTC_TAMPER_GET_IT_SOURCE
(
hπc
, 
RTC_IT_TAMP1
))

223 i‡(
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
Ë!(
uöt32_t
)
RESET
)

226 #i‡(
USE_HAL_RTC_REGISTER_CALLBACKS
 == 1)

227 
hπc
->
	`Tam≥r1EvítCÆlback
(hrtc);

229 
	`HAL_RTCEx_Tam≥r1EvítCÆlback
(
hπc
);

233 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
);

238 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

239 
	}
}

247 
__wók
 
	$HAL_RTCEx_Tam≥r1EvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

250 
	`UNUSED
(
hπc
);

254 
	}
}

263 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_PﬁlF‹Tam≥r1Evít
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
Timeout
)

265 
uöt32_t
 
tick°¨t
 = 
	`HAL_GëTick
();

268 i‡(
hπc
 =
NULL
)

270  
HAL_ERROR
;

274 
	`__HAL_RTC_TAMPER_GET_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
Ë=
RESET
)

276 i‡(
Timeout
 !
HAL_MAX_DELAY
)

278 i‡((
Timeout
 =0UË|| ((
	`HAL_GëTick
(Ë- 
tick°¨t
) > Timeout))

280 
hπc
->
Sèã
 = 
HAL_RTC_STATE_TIMEOUT
;

281  
HAL_TIMEOUT
;

287 
	`__HAL_RTC_TAMPER_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_TAMP1F
);

290 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

292  
HAL_OK
;

293 
	}
}

319 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëSec⁄d_IT
(
RTC_H™dÀTy≥Def
 *
hπc
)

322 i‡(
hπc
 =
NULL
)

324  
HAL_ERROR
;

328 
	`__HAL_LOCK
(
hπc
);

330 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

333 
	`__HAL_RTC_SECOND_ENABLE_IT
(
hπc
, 
RTC_IT_SEC
);

335 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

338 
	`__HAL_UNLOCK
(
hπc
);

340  
HAL_OK
;

341 
	}
}

349 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_Dó˘iv©eSec⁄d
(
RTC_H™dÀTy≥Def
 *
hπc
)

352 i‡(
hπc
 =
NULL
)

354  
HAL_ERROR
;

358 
	`__HAL_LOCK
(
hπc
);

360 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

363 
	`__HAL_RTC_SECOND_DISABLE_IT
(
hπc
, 
RTC_IT_SEC
);

365 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

368 
	`__HAL_UNLOCK
(
hπc
);

370  
HAL_OK
;

371 
	}
}

379 
	$HAL_RTCEx_RTCIRQH™dÀr
(
RTC_H™dÀTy≥Def
 *
hπc
)

381 i‡(
	`__HAL_RTC_SECOND_GET_IT_SOURCE
(
hπc
, 
RTC_IT_SEC
))

384 i‡(
	`__HAL_RTC_SECOND_GET_FLAG
(
hπc
, 
RTC_FLAG_SEC
))

387 i‡(
	`__HAL_RTC_SECOND_GET_FLAG
(
hπc
, 
RTC_FLAG_OW
))

390 
	`HAL_RTCEx_RTCEvítEº‹CÆlback
(
hπc
);

393 
	`__HAL_RTC_OVERFLOW_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_OW
);

396 
hπc
->
Sèã
 = 
HAL_RTC_STATE_ERROR
;

401 
	`HAL_RTCEx_RTCEvítCÆlback
(
hπc
);

404 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

408 
	`__HAL_RTC_SECOND_CLEAR_FLAG
(
hπc
, 
RTC_FLAG_SEC
);

411 
	}
}

419 
__wók
 
	$HAL_RTCEx_RTCEvítCÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

422 
	`UNUSED
(
hπc
);

426 
	}
}

434 
__wók
 
	$HAL_RTCEx_RTCEvítEº‹CÆlback
(
RTC_H™dÀTy≥Def
 *
hπc
)

437 
	`UNUSED
(
hπc
);

441 
	}
}

474 
	$HAL_RTCEx_BKUPWrôe
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
, uöt32_à
D©a
)

476 
uöt32_t
 
tmp
 = 0U;

479 
	`UNUSED
(
hπc
);

482 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
BackupRegi°î
));

484 
tmp
 = (
uöt32_t
)
BKP_BASE
;

485 
tmp
 +(
BackupRegi°î
 * 4U);

487 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (
D©a
 & 
BKP_DR1_D
);

488 
	}
}

499 
uöt32_t
 
	$HAL_RTCEx_BKUPRód
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
BackupRegi°î
)

501 
uöt32_t
 
backu¥egi°î
 = 0U;

502 
uöt32_t
 
pvÆue
 = 0U;

505 
	`UNUSED
(
hπc
);

508 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
BackupRegi°î
));

510 
backu¥egi°î
 = (
uöt32_t
)
BKP_BASE
;

511 
backu¥egi°î
 +(
BackupRegi°î
 * 4U);

513 
pvÆue
 = (*(
__IO
 
uöt32_t
 *)(
backu¥egi°î
)Ë& 
BKP_DR1_D
;

516  
pvÆue
;

517 
	}
}

529 
HAL_SètusTy≥Def
 
	$HAL_RTCEx_SëSmoŸhCÆib
(
RTC_H™dÀTy≥Def
 *
hπc
, 
uöt32_t
 
SmoŸhCÆibPîiod
, uöt32_à
SmoŸhCÆibPlusPul£s
, uöt32_à
SmouthCÆibMöusPul£sVÆue
)

532 i‡(
hπc
 =
NULL
)

534  
HAL_ERROR
;

537 
	`UNUSED
(
SmoŸhCÆibPîiod
);

538 
	`UNUSED
(
SmoŸhCÆibPlusPul£s
);

541 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
SmouthCÆibMöusPul£sVÆue
));

544 
	`__HAL_LOCK
(
hπc
);

546 
hπc
->
Sèã
 = 
HAL_RTC_STATE_BUSY
;

549 
	`MODIFY_REG
(
BKP
->
RTCCR
, 
BKP_RTCCR_CAL
, 
SmouthCÆibMöusPul£sVÆue
);

552 
hπc
->
Sèã
 = 
HAL_RTC_STATE_READY
;

555 
	`__HAL_UNLOCK
(
hπc
);

557  
HAL_OK
;

558 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim.c

186 
	~"°m32f1xx_hÆ.h
"

197 #ifde‡
HAL_TIM_MODULE_ENABLED


207 
TIM_OC1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

208 
TIM_OC3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

209 
TIM_OC4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
);

210 
TIM_TI1_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
);

211 
TIM_TI2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

212 
uöt32_t
 
TIM_ICFûãr
);

213 
TIM_TI2_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
);

214 
TIM_TI3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

215 
uöt32_t
 
TIM_ICFûãr
);

216 
TIM_TI4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

217 
uöt32_t
 
TIM_ICFûãr
);

218 
TIM_ITRx_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
I≈utTriggîSour˚
);

219 
TIM_DMAPîiodEœp£dC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

220 
TIM_DMAPîiodEœp£dHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

221 
TIM_DMADñayPul£C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

222 
TIM_DMATriggîC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

223 
TIM_DMATriggîHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

224 
HAL_SètusTy≥Def
 
TIM_SœveTimî_SëC⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
,

225 
TIM_SœveC⁄figTy≥Def
 *
sSœveC⁄fig
);

266 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

269 i‡(
htim
 =
NULL
)

271  
HAL_ERROR
;

275 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

276 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

277 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

278 
	`as£π_∑øm
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
Inô
.
AutoRñﬂdPªlﬂd
));

280 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

283 
htim
->
Lock
 = 
HAL_UNLOCKED
;

285 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

287 
	`TIM_Re£tCÆlback
(
htim
);

289 i‡(
htim
->
Ba£_M•InôCÆlback
 =
NULL
)

291 
htim
->
Ba£_M•InôCÆlback
 = 
HAL_TIM_Ba£_M•Inô
;

294 
htim
->
	`Ba£_M•InôCÆlback
(htim);

297 
	`HAL_TIM_Ba£_M•Inô
(
htim
);

302 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

305 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

308 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

311 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

312 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

315 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

317  
HAL_OK
;

318 
	}
}

325 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

328 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

330 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

333 
	`__HAL_TIM_DISABLE
(
htim
);

335 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

336 i‡(
htim
->
Ba£_M•DeInôCÆlback
 =
NULL
)

338 
htim
->
Ba£_M•DeInôCÆlback
 = 
HAL_TIM_Ba£_M•DeInô
;

341 
htim
->
	`Ba£_M•DeInôCÆlback
(htim);

344 
	`HAL_TIM_Ba£_M•DeInô
(
htim
);

348 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
;

351 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

352 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

355 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

358 
	`__HAL_UNLOCK
(
htim
);

360  
HAL_OK
;

361 
	}
}

368 
__wók
 
	$HAL_TIM_Ba£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

371 
	`UNUSED
(
htim
);

376 
	}
}

383 
__wók
 
	$HAL_TIM_Ba£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

386 
	`UNUSED
(
htim
);

391 
	}
}

399 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
)

401 
uöt32_t
 
tmpsm¸
;

404 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

407 i‡(
htim
->
Sèã
 !
HAL_TIM_STATE_READY
)

409  
HAL_ERROR
;

413 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

416 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

418 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

419 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

421 
	`__HAL_TIM_ENABLE
(
htim
);

426 
	`__HAL_TIM_ENABLE
(
htim
);

430  
HAL_OK
;

431 
	}
}

438 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›
(
TIM_H™dÀTy≥Def
 *
htim
)

441 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

444 
	`__HAL_TIM_DISABLE
(
htim
);

447 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

450  
HAL_OK
;

451 
	}
}

458 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

460 
uöt32_t
 
tmpsm¸
;

463 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

466 i‡(
htim
->
Sèã
 !
HAL_TIM_STATE_READY
)

468  
HAL_ERROR
;

472 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

475 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

478 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

480 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

481 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

483 
	`__HAL_TIM_ENABLE
(
htim
);

488 
	`__HAL_TIM_ENABLE
(
htim
);

492  
HAL_OK
;

493 
	}
}

500 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

503 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

506 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_UPDATE
);

509 
	`__HAL_TIM_DISABLE
(
htim
);

512 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

515  
HAL_OK
;

516 
	}
}

525 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
)

527 
uöt32_t
 
tmpsm¸
;

530 
	`as£π_∑øm
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In°™˚
));

533 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_BUSY
)

535  
HAL_BUSY
;

537 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_READY
)

539 i‡((
pD©a
 =
NULL
Ë&& (
Lígth
 > 0U))

541  
HAL_ERROR
;

545 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

550  
HAL_ERROR
;

554 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

555 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dHÆfC∂t
;

558 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

561 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
ARR
, 
Lígth
Ë!
HAL_OK
)

564  
HAL_ERROR
;

568 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

571 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

573 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

574 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

576 
	`__HAL_TIM_ENABLE
(
htim
);

581 
	`__HAL_TIM_ENABLE
(
htim
);

585  
HAL_OK
;

586 
	}
}

593 
HAL_SètusTy≥Def
 
	$HAL_TIM_Ba£_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
)

596 
	`as£π_∑øm
(
	`IS_TIM_DMA_INSTANCE
(
htim
->
In°™˚
));

599 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_UPDATE
);

601 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

604 
	`__HAL_TIM_DISABLE
(
htim
);

607 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

610  
HAL_OK
;

611 
	}
}

648 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

651 i‡(
htim
 =
NULL
)

653  
HAL_ERROR
;

657 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

658 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

659 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

660 
	`as£π_∑øm
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
Inô
.
AutoRñﬂdPªlﬂd
));

662 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

665 
htim
->
Lock
 = 
HAL_UNLOCKED
;

667 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

669 
	`TIM_Re£tCÆlback
(
htim
);

671 i‡(
htim
->
OC_M•InôCÆlback
 =
NULL
)

673 
htim
->
OC_M•InôCÆlback
 = 
HAL_TIM_OC_M•Inô
;

676 
htim
->
	`OC_M•InôCÆlback
(htim);

679 
	`HAL_TIM_OC_M•Inô
(
htim
);

684 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

687 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

690 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

693 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

694 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

697 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

699  
HAL_OK
;

700 
	}
}

707 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

710 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

712 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

715 
	`__HAL_TIM_DISABLE
(
htim
);

717 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

718 i‡(
htim
->
OC_M•DeInôCÆlback
 =
NULL
)

720 
htim
->
OC_M•DeInôCÆlback
 = 
HAL_TIM_OC_M•DeInô
;

723 
htim
->
	`OC_M•DeInôCÆlback
(htim);

726 
	`HAL_TIM_OC_M•DeInô
(
htim
);

730 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
;

733 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

734 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

737 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

740 
	`__HAL_UNLOCK
(
htim
);

742  
HAL_OK
;

743 
	}
}

750 
__wók
 
	$HAL_TIM_OC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

753 
	`UNUSED
(
htim
);

758 
	}
}

765 
__wók
 
	$HAL_TIM_OC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

768 
	`UNUSED
(
htim
);

773 
	}
}

786 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

788 
uöt32_t
 
tmpsm¸
;

791 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

794 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

796  
HAL_ERROR
;

800 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

803 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

805 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

808 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

812 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

814 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

815 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

817 
	`__HAL_TIM_ENABLE
(
htim
);

822 
	`__HAL_TIM_ENABLE
(
htim
);

826  
HAL_OK
;

827 
	}
}

840 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

843 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

846 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

848 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

851 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

855 
	`__HAL_TIM_DISABLE
(
htim
);

858 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

861  
HAL_OK
;

862 
	}
}

875 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

877 
uöt32_t
 
tmpsm¸
;

880 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

883 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

885  
HAL_ERROR
;

889 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

891 
Ch™√l
)

893 
TIM_CHANNEL_1
:

896 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

900 
TIM_CHANNEL_2
:

903 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

907 
TIM_CHANNEL_3
:

910 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

914 
TIM_CHANNEL_4
:

917 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

926 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

928 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

931 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

935 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

937 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

938 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

940 
	`__HAL_TIM_ENABLE
(
htim
);

945 
	`__HAL_TIM_ENABLE
(
htim
);

949  
HAL_OK
;

950 
	}
}

963 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

966 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

968 
Ch™√l
)

970 
TIM_CHANNEL_1
:

973 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

977 
TIM_CHANNEL_2
:

980 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

984 
TIM_CHANNEL_3
:

987 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

991 
TIM_CHANNEL_4
:

994 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1003 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1005 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1008 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1012 
	`__HAL_TIM_DISABLE
(
htim
);

1015 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1018  
HAL_OK
;

1019 
	}
}

1034 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1036 
uöt32_t
 
tmpsm¸
;

1039 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1042 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_BUSY
)

1044  
HAL_BUSY
;

1046 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_READY
)

1048 i‡((
pD©a
 =
NULL
Ë&& (
Lígth
 > 0U))

1050  
HAL_ERROR
;

1054 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1059  
HAL_ERROR
;

1062 
Ch™√l
)

1064 
TIM_CHANNEL_1
:

1067 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1068 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1071 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1074 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
Ë!
HAL_OK
)

1077  
HAL_ERROR
;

1081 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1085 
TIM_CHANNEL_2
:

1088 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1089 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1092 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1095 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
Ë!
HAL_OK
)

1098  
HAL_ERROR
;

1102 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1106 
TIM_CHANNEL_3
:

1109 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1110 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1113 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1116 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
, 
Lígth
Ë!
HAL_OK
)

1119  
HAL_ERROR
;

1122 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1126 
TIM_CHANNEL_4
:

1129 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1130 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1133 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1136 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
Ë!
HAL_OK
)

1139  
HAL_ERROR
;

1142 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1151 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1153 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1156 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1160 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1162 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

1163 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

1165 
	`__HAL_TIM_ENABLE
(
htim
);

1170 
	`__HAL_TIM_ENABLE
(
htim
);

1174  
HAL_OK
;

1175 
	}
}

1188 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1191 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1193 
Ch™√l
)

1195 
TIM_CHANNEL_1
:

1198 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1199 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

1203 
TIM_CHANNEL_2
:

1206 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1207 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1211 
TIM_CHANNEL_3
:

1214 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1215 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1219 
TIM_CHANNEL_4
:

1222 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1223 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

1232 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1234 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1237 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1241 
	`__HAL_TIM_DISABLE
(
htim
);

1244 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1247  
HAL_OK
;

1248 
	}
}

1285 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1288 i‡(
htim
 =
NULL
)

1290  
HAL_ERROR
;

1294 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1295 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

1296 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

1297 
	`as£π_∑øm
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
Inô
.
AutoRñﬂdPªlﬂd
));

1299 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

1302 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1304 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1306 
	`TIM_Re£tCÆlback
(
htim
);

1308 i‡(
htim
->
PWM_M•InôCÆlback
 =
NULL
)

1310 
htim
->
PWM_M•InôCÆlback
 = 
HAL_TIM_PWM_M•Inô
;

1313 
htim
->
	`PWM_M•InôCÆlback
(htim);

1316 
	`HAL_TIM_PWM_M•Inô
(
htim
);

1321 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1324 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

1327 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

1330 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1331 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1334 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1336  
HAL_OK
;

1337 
	}
}

1344 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1347 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1349 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1352 
	`__HAL_TIM_DISABLE
(
htim
);

1354 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1355 i‡(
htim
->
PWM_M•DeInôCÆlback
 =
NULL
)

1357 
htim
->
PWM_M•DeInôCÆlback
 = 
HAL_TIM_PWM_M•DeInô
;

1360 
htim
->
	`PWM_M•DeInôCÆlback
(htim);

1363 
	`HAL_TIM_PWM_M•DeInô
(
htim
);

1367 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
;

1370 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

1371 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

1374 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

1377 
	`__HAL_UNLOCK
(
htim
);

1379  
HAL_OK
;

1380 
	}
}

1387 
__wók
 
	$HAL_TIM_PWM_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1390 
	`UNUSED
(
htim
);

1395 
	}
}

1402 
__wók
 
	$HAL_TIM_PWM_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1405 
	`UNUSED
(
htim
);

1410 
	}
}

1423 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1425 
uöt32_t
 
tmpsm¸
;

1428 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1431 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

1433  
HAL_ERROR
;

1437 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1440 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1442 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1445 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1449 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1451 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

1452 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

1454 
	`__HAL_TIM_ENABLE
(
htim
);

1459 
	`__HAL_TIM_ENABLE
(
htim
);

1463  
HAL_OK
;

1464 
	}
}

1477 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1480 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1483 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1485 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1488 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1492 
	`__HAL_TIM_DISABLE
(
htim
);

1495 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1498  
HAL_OK
;

1499 
	}
}

1512 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1514 
uöt32_t
 
tmpsm¸
;

1516 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1519 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

1521  
HAL_ERROR
;

1525 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1527 
Ch™√l
)

1529 
TIM_CHANNEL_1
:

1532 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1536 
TIM_CHANNEL_2
:

1539 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1543 
TIM_CHANNEL_3
:

1546 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1550 
TIM_CHANNEL_4
:

1553 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

1562 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1564 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1567 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1571 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1573 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

1574 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

1576 
	`__HAL_TIM_ENABLE
(
htim
);

1581 
	`__HAL_TIM_ENABLE
(
htim
);

1585  
HAL_OK
;

1586 
	}
}

1599 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1602 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1604 
Ch™√l
)

1606 
TIM_CHANNEL_1
:

1609 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1613 
TIM_CHANNEL_2
:

1616 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1620 
TIM_CHANNEL_3
:

1623 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1627 
TIM_CHANNEL_4
:

1630 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

1639 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1641 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1644 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1648 
	`__HAL_TIM_DISABLE
(
htim
);

1651 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1654  
HAL_OK
;

1655 
	}
}

1670 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1672 
uöt32_t
 
tmpsm¸
;

1675 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1678 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_BUSY
)

1680  
HAL_BUSY
;

1682 i‡(
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_READY
)

1684 i‡((
pD©a
 =
NULL
Ë&& (
Lígth
 > 0U))

1686  
HAL_ERROR
;

1690 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1695  
HAL_ERROR
;

1698 
Ch™√l
)

1700 
TIM_CHANNEL_1
:

1703 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1704 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1707 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1710 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
Ë!
HAL_OK
)

1713  
HAL_ERROR
;

1717 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1721 
TIM_CHANNEL_2
:

1724 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1725 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1728 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1731 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
Ë!
HAL_OK
)

1734  
HAL_ERROR
;

1737 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1741 
TIM_CHANNEL_3
:

1744 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1745 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1748 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1751 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
, 
Lígth
Ë!
HAL_OK
)

1754  
HAL_ERROR
;

1757 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1761 
TIM_CHANNEL_4
:

1764 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

1765 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1768 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

1771 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR4
, 
Lígth
Ë!
HAL_OK
)

1774  
HAL_ERROR
;

1777 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1786 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

1788 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1791 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1795 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1797 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

1798 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

1800 
	`__HAL_TIM_ENABLE
(
htim
);

1805 
	`__HAL_TIM_ENABLE
(
htim
);

1809  
HAL_OK
;

1810 
	}
}

1823 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1826 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1828 
Ch™√l
)

1830 
TIM_CHANNEL_1
:

1833 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1834 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

1838 
TIM_CHANNEL_2
:

1841 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1842 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1846 
TIM_CHANNEL_3
:

1849 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1850 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1854 
TIM_CHANNEL_4
:

1857 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

1858 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

1867 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

1869 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

1872 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1876 
	`__HAL_TIM_DISABLE
(
htim
);

1879 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1882  
HAL_OK
;

1883 
	}
}

1920 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

1923 i‡(
htim
 =
NULL
)

1925  
HAL_ERROR
;

1929 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1930 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

1931 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

1932 
	`as£π_∑øm
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
Inô
.
AutoRñﬂdPªlﬂd
));

1934 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

1937 
htim
->
Lock
 = 
HAL_UNLOCKED
;

1939 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1941 
	`TIM_Re£tCÆlback
(
htim
);

1943 i‡(
htim
->
IC_M•InôCÆlback
 =
NULL
)

1945 
htim
->
IC_M•InôCÆlback
 = 
HAL_TIM_IC_M•Inô
;

1948 
htim
->
	`IC_M•InôCÆlback
(htim);

1951 
	`HAL_TIM_IC_M•Inô
(
htim
);

1956 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1959 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

1962 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

1965 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1966 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_READY
);

1969 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1971  
HAL_OK
;

1972 
	}
}

1979 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

1982 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

1984 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1987 
	`__HAL_TIM_DISABLE
(
htim
);

1989 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

1990 i‡(
htim
->
IC_M•DeInôCÆlback
 =
NULL
)

1992 
htim
->
IC_M•DeInôCÆlback
 = 
HAL_TIM_IC_M•DeInô
;

1995 
htim
->
	`IC_M•DeInôCÆlback
(htim);

1998 
	`HAL_TIM_IC_M•DeInô
(
htim
);

2002 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
;

2005 
	`TIM_CHANNEL_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2006 
	`TIM_CHANNEL_N_STATE_SET_ALL
(
htim
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2009 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

2012 
	`__HAL_UNLOCK
(
htim
);

2014  
HAL_OK
;

2015 
	}
}

2022 
__wók
 
	$HAL_TIM_IC_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

2025 
	`UNUSED
(
htim
);

2030 
	}
}

2037 
__wók
 
	$HAL_TIM_IC_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2040 
	`UNUSED
(
htim
);

2045 
	}
}

2058 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2060 
uöt32_t
 
tmpsm¸
;

2061 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
);

2062 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
);

2065 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

2068 i‡((
ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2069 || (
com∂emíèry_ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

2071  
HAL_ERROR
;

2075 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2076 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2079 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

2082 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

2084 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

2085 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

2087 
	`__HAL_TIM_ENABLE
(
htim
);

2092 
	`__HAL_TIM_ENABLE
(
htim
);

2096  
HAL_OK
;

2097 
	}
}

2110 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2113 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

2116 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

2119 
	`__HAL_TIM_DISABLE
(
htim
);

2122 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

2123 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

2126  
HAL_OK
;

2127 
	}
}

2140 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2142 
uöt32_t
 
tmpsm¸
;

2143 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
);

2144 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
);

2147 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

2150 i‡((
ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2151 || (
com∂emíèry_ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

2153  
HAL_ERROR
;

2157 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2158 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2160 
Ch™√l
)

2162 
TIM_CHANNEL_1
:

2165 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2169 
TIM_CHANNEL_2
:

2172 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2176 
TIM_CHANNEL_3
:

2179 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

2183 
TIM_CHANNEL_4
:

2186 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC4
);

2194 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

2197 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

2199 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

2200 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

2202 
	`__HAL_TIM_ENABLE
(
htim
);

2207 
	`__HAL_TIM_ENABLE
(
htim
);

2211  
HAL_OK
;

2212 
	}
}

2225 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2228 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

2230 
Ch™√l
)

2232 
TIM_CHANNEL_1
:

2235 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2239 
TIM_CHANNEL_2
:

2242 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2246 
TIM_CHANNEL_3
:

2249 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

2253 
TIM_CHANNEL_4
:

2256 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC4
);

2265 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

2268 
	`__HAL_TIM_DISABLE
(
htim
);

2271 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

2272 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

2275  
HAL_OK
;

2276 
	}
}

2291 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

2293 
uöt32_t
 
tmpsm¸
;

2294 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
);

2295 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
);

2298 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

2299 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

2302 i‡((
ch™√l_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
)

2303 || (
com∂emíèry_ch™√l_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
))

2305  
HAL_BUSY
;

2307 i‡((
ch™√l_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
)

2308 && (
com∂emíèry_ch™√l_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
))

2310 i‡((
pD©a
 =
NULL
Ë&& (
Lígth
 > 0U))

2312  
HAL_ERROR
;

2316 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2317 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2322  
HAL_ERROR
;

2325 
Ch™√l
)

2327 
TIM_CHANNEL_1
:

2330 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2331 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

2334 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2337 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a
, 
Lígth
Ë!
HAL_OK
)

2340  
HAL_ERROR
;

2343 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2347 
TIM_CHANNEL_2
:

2350 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2351 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

2354 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2357 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a
, 
Lígth
Ë!
HAL_OK
)

2360  
HAL_ERROR
;

2363 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2367 
TIM_CHANNEL_3
:

2370 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2371 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

2374 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2377 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)&htim->
In°™˚
->
CCR3
, (uöt32_t)
pD©a
, 
Lígth
Ë!
HAL_OK
)

2380  
HAL_ERROR
;

2383 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

2387 
TIM_CHANNEL_4
:

2390 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

2391 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

2394 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

2397 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)&htim->
In°™˚
->
CCR4
, (uöt32_t)
pD©a
, 
Lígth
Ë!
HAL_OK
)

2400  
HAL_ERROR
;

2403 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

2412 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_ENABLE
);

2415 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

2417 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

2418 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

2420 
	`__HAL_TIM_ENABLE
(
htim
);

2425 
	`__HAL_TIM_ENABLE
(
htim
);

2429  
HAL_OK
;

2430 
	}
}

2443 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

2446 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

2447 
	`as£π_∑øm
(
	`IS_TIM_DMA_CC_INSTANCE
(
htim
->
In°™˚
));

2450 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCx_DISABLE
);

2452 
Ch™√l
)

2454 
TIM_CHANNEL_1
:

2457 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

2458 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

2462 
TIM_CHANNEL_2
:

2465 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

2466 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

2470 
TIM_CHANNEL_3
:

2473 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

2474 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

2478 
TIM_CHANNEL_4
:

2481 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC4
);

2482 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

2491 
	`__HAL_TIM_DISABLE
(
htim
);

2494 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

2495 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

2498  
HAL_OK
;

2499 
	}
}

2542 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
O√Pul£Mode
)

2545 i‡(
htim
 =
NULL
)

2547  
HAL_ERROR
;

2551 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

2552 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

2553 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

2554 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
O√Pul£Mode
));

2555 
	`as£π_∑øm
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
Inô
.
AutoRñﬂdPªlﬂd
));

2557 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

2560 
htim
->
Lock
 = 
HAL_UNLOCKED
;

2562 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2564 
	`TIM_Re£tCÆlback
(
htim
);

2566 i‡(
htim
->
O√Pul£_M•InôCÆlback
 =
NULL
)

2568 
htim
->
O√Pul£_M•InôCÆlback
 = 
HAL_TIM_O√Pul£_M•Inô
;

2571 
htim
->
	`O√Pul£_M•InôCÆlback
(htim);

2574 
	`HAL_TIM_O√Pul£_M•Inô
(
htim
);

2579 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2582 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

2585 
htim
->
In°™˚
->
CR1
 &~
TIM_CR1_OPM
;

2588 
htim
->
In°™˚
->
CR1
 |
O√Pul£Mode
;

2591 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

2594 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2595 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2596 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2597 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2600 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2602  
HAL_OK
;

2603 
	}
}

2610 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2613 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

2615 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2618 
	`__HAL_TIM_DISABLE
(
htim
);

2620 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2621 i‡(
htim
->
O√Pul£_M•DeInôCÆlback
 =
NULL
)

2623 
htim
->
O√Pul£_M•DeInôCÆlback
 = 
HAL_TIM_O√Pul£_M•DeInô
;

2626 
htim
->
	`O√Pul£_M•DeInôCÆlback
(htim);

2629 
	`HAL_TIM_O√Pul£_M•DeInô
(
htim
);

2633 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
;

2636 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2637 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2638 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2639 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

2642 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

2645 
	`__HAL_UNLOCK
(
htim
);

2647  
HAL_OK
;

2648 
	}
}

2655 
__wók
 
	$HAL_TIM_O√Pul£_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

2658 
	`UNUSED
(
htim
);

2663 
	}
}

2670 
__wók
 
	$HAL_TIM_O√Pul£_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

2673 
	`UNUSED
(
htim
);

2678 
	}
}

2689 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2691 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2692 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_2_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2693 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2694 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_2_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2697 
	`UNUSED
(
OuçutCh™√l
);

2700 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2701 || (
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2702 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2703 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

2705  
HAL_ERROR
;

2709 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2710 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2711 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2712 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2723 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2724 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2726 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2729 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

2733  
HAL_OK
;

2734 
	}
}

2745 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2748 
	`UNUSED
(
OuçutCh™√l
);

2756 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2757 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2759 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2762 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

2766 
	`__HAL_TIM_DISABLE
(
htim
);

2769 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2770 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2771 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2772 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2775  
HAL_OK
;

2776 
	}
}

2787 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2789 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2790 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_2_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2791 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

2792 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_2_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

2795 
	`UNUSED
(
OuçutCh™√l
);

2798 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2799 || (
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2800 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

2801 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

2803  
HAL_ERROR
;

2807 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2808 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2809 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2810 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

2822 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

2825 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

2827 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

2828 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

2830 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2833 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

2837  
HAL_OK
;

2838 
	}
}

2849 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

2852 
	`UNUSED
(
OuçutCh™√l
);

2855 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

2858 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

2865 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

2866 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

2868 i‡(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
Ë!
RESET
)

2871 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

2875 
	`__HAL_TIM_DISABLE
(
htim
);

2878 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2879 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2880 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2881 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2884  
HAL_OK
;

2885 
	}
}

2928 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_Encodî_InôTy≥Def
 *
sC⁄fig
)

2930 
uöt32_t
 
tmpsm¸
;

2931 
uöt32_t
 
tmpccmr1
;

2932 
uöt32_t
 
tmpc˚r
;

2935 i‡(
htim
 =
NULL
)

2937  
HAL_ERROR
;

2941 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

2942 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

2943 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

2944 
	`as£π_∑øm
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
Inô
.
AutoRñﬂdPªlﬂd
));

2945 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
sC⁄fig
->
EncodîMode
));

2946 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
IC1Sñe˘i⁄
));

2947 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
IC2Sñe˘i⁄
));

2948 
	`as£π_∑øm
(
	`IS_TIM_ENCODERINPUT_POLARITY
(
sC⁄fig
->
IC1Pﬁ¨ôy
));

2949 
	`as£π_∑øm
(
	`IS_TIM_ENCODERINPUT_POLARITY
(
sC⁄fig
->
IC2Pﬁ¨ôy
));

2950 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC1PªsˇÀr
));

2951 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC2PªsˇÀr
));

2952 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC1Fûãr
));

2953 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC2Fûãr
));

2955 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

2958 
htim
->
Lock
 = 
HAL_UNLOCKED
;

2960 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2962 
	`TIM_Re£tCÆlback
(
htim
);

2964 i‡(
htim
->
Encodî_M•InôCÆlback
 =
NULL
)

2966 
htim
->
Encodî_M•InôCÆlback
 = 
HAL_TIM_Encodî_M•Inô
;

2969 
htim
->
	`Encodî_M•InôCÆlback
(htim);

2972 
	`HAL_TIM_Encodî_M•Inô
(
htim
);

2977 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

2980 
htim
->
In°™˚
->
SMCR
 &~(
TIM_SMCR_SMS
 | 
TIM_SMCR_ECE
);

2983 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

2986 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

2989 
tmpccmr1
 = 
htim
->
In°™˚
->
CCMR1
;

2992 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

2995 
tmpsm¸
 |
sC⁄fig
->
EncodîMode
;

2998 
tmpccmr1
 &~(
TIM_CCMR1_CC1S
 | 
TIM_CCMR1_CC2S
);

2999 
tmpccmr1
 |(
sC⁄fig
->
IC1Sñe˘i⁄
 | (sC⁄fig->
IC2Sñe˘i⁄
 << 8U));

3002 
tmpccmr1
 &~(
TIM_CCMR1_IC1PSC
 | 
TIM_CCMR1_IC2PSC
);

3003 
tmpccmr1
 &~(
TIM_CCMR1_IC1F
 | 
TIM_CCMR1_IC2F
);

3004 
tmpccmr1
 |
sC⁄fig
->
IC1PªsˇÀr
 | (sC⁄fig->
IC2PªsˇÀr
 << 8U);

3005 
tmpccmr1
 |(
sC⁄fig
->
IC1Fûãr
 << 4UË| (sC⁄fig->
IC2Fûãr
 << 12U);

3008 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC2P
);

3009 
tmpc˚r
 |
sC⁄fig
->
IC1Pﬁ¨ôy
 | (sC⁄fig->
IC2Pﬁ¨ôy
 << 4U);

3012 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

3015 
htim
->
In°™˚
->
CCMR1
 = 
tmpccmr1
;

3018 
htim
->
In°™˚
->
CCER
 = 
tmpc˚r
;

3021 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

3024 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3025 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3026 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3027 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3030 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

3032  
HAL_OK
;

3033 
	}
}

3041 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

3044 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

3046 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

3049 
	`__HAL_TIM_DISABLE
(
htim
);

3051 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3052 i‡(
htim
->
Encodî_M•DeInôCÆlback
 =
NULL
)

3054 
htim
->
Encodî_M•DeInôCÆlback
 = 
HAL_TIM_Encodî_M•DeInô
;

3057 
htim
->
	`Encodî_M•DeInôCÆlback
(htim);

3060 
	`HAL_TIM_Encodî_M•DeInô
(
htim
);

3064 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
;

3067 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3068 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3069 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3070 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

3073 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

3076 
	`__HAL_UNLOCK
(
htim
);

3078  
HAL_OK
;

3079 
	}
}

3086 
__wók
 
	$HAL_TIM_Encodî_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

3089 
	`UNUSED
(
htim
);

3094 
	}
}

3101 
__wók
 
	$HAL_TIM_Encodî_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

3104 
	`UNUSED
(
htim
);

3109 
	}
}

3121 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

3123 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3124 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_2_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3125 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3126 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_2_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3129 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

3132 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

3134 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3135 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

3137  
HAL_ERROR
;

3141 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3142 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3145 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

3147 i‡((
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3148 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

3150  
HAL_ERROR
;

3154 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3155 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3160 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3161 || (
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3162 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3163 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

3165  
HAL_ERROR
;

3169 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3170 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3171 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3172 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3177 
Ch™√l
)

3179 
TIM_CHANNEL_1
:

3181 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3185 
TIM_CHANNEL_2
:

3187 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3193 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3194 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3199 
	`__HAL_TIM_ENABLE
(
htim
);

3202  
HAL_OK
;

3203 
	}
}

3215 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

3218 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

3222 
Ch™√l
)

3224 
TIM_CHANNEL_1
:

3226 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3230 
TIM_CHANNEL_2
:

3232 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3238 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3239 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3245 
	`__HAL_TIM_DISABLE
(
htim
);

3248 i‡((
Ch™√l
 =
TIM_CHANNEL_1
Ë|| (Ch™√»=
TIM_CHANNEL_2
))

3250 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

3251 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

3255 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3256 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3257 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3258 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3262  
HAL_OK
;

3263 
	}
}

3275 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

3277 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3278 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_2_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3279 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3280 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_2_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3283 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

3286 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

3288 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3289 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

3291  
HAL_ERROR
;

3295 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3296 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3299 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

3301 i‡((
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3302 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

3304  
HAL_ERROR
;

3308 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3309 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3314 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3315 || (
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3316 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

3317 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

3319  
HAL_ERROR
;

3323 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3324 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3325 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3326 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3332 
Ch™√l
)

3334 
TIM_CHANNEL_1
:

3336 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3337 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

3341 
TIM_CHANNEL_2
:

3343 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3344 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

3350 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3351 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3352 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

3353 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

3359 
	`__HAL_TIM_ENABLE
(
htim
);

3362  
HAL_OK
;

3363 
	}
}

3375 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

3378 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

3382 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

3384 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3387 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

3389 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

3391 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3394 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

3398 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3399 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3402 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

3403 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

3407 
	`__HAL_TIM_DISABLE
(
htim
);

3410 i‡((
Ch™√l
 =
TIM_CHANNEL_1
Ë|| (Ch™√»=
TIM_CHANNEL_2
))

3412 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

3413 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

3417 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3418 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3419 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3420 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3424  
HAL_OK
;

3425 
	}
}

3440 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a1
,

3441 
uöt32_t
 *
pD©a2
, 
uöt16_t
 
Lígth
)

3443 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3444 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_2_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3445 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

3446 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_2_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

3449 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

3452 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

3454 i‡((
ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
)

3455 || (
com∂emíèry_ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
))

3457  
HAL_BUSY
;

3459 i‡((
ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
)

3460 && (
com∂emíèry_ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
))

3462 i‡((
pD©a1
 =
NULL
Ë&& (
Lígth
 > 0U))

3464  
HAL_ERROR
;

3468 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3469 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3474  
HAL_ERROR
;

3477 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

3479 i‡((
ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
)

3480 || (
com∂emíèry_ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
))

3482  
HAL_BUSY
;

3484 i‡((
ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
)

3485 && (
com∂emíèry_ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
))

3487 i‡((
pD©a2
 =
NULL
Ë&& (
Lígth
 > 0U))

3489  
HAL_ERROR
;

3493 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3494 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3499  
HAL_ERROR
;

3504 i‡((
ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
)

3505 || (
ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
)

3506 || (
com∂emíèry_ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
)

3507 || (
com∂emíèry_ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
))

3509  
HAL_BUSY
;

3511 i‡((
ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
)

3512 && (
ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
)

3513 && (
com∂emíèry_ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
)

3514 && (
com∂emíèry_ch™√l_2_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
))

3516 i‡((((
pD©a1
 =
NULL
Ë|| (
pD©a2
 =NULL))Ë&& (
Lígth
 > 0U))

3518  
HAL_ERROR
;

3522 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3523 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3524 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3525 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

3530  
HAL_ERROR
;

3534 
Ch™√l
)

3536 
TIM_CHANNEL_1
:

3539 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3540 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

3543 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3546 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a1
, 
Lígth
Ë!
HAL_OK
)

3549  
HAL_ERROR
;

3552 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3555 
	`__HAL_TIM_ENABLE
(
htim
);

3558 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3562 
TIM_CHANNEL_2
:

3565 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3566 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

3569 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
;

3571 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a2
, 
Lígth
Ë!
HAL_OK
)

3574  
HAL_ERROR
;

3577 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3580 
	`__HAL_TIM_ENABLE
(
htim
);

3583 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3587 
TIM_CHANNEL_ALL
:

3590 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3591 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

3594 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3597 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a1
, 
Lígth
Ë!
HAL_OK
)

3600  
HAL_ERROR
;

3604 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

3605 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

3608 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

3611 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
CCR2
, (uöt32_t)
pD©a2
, 
Lígth
Ë!
HAL_OK
)

3614  
HAL_ERROR
;

3617 
	`__HAL_TIM_ENABLE
(
htim
);

3620 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

3621 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_ENABLE
);

3624 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3626 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3635  
HAL_OK
;

3636 
	}
}

3648 
HAL_SètusTy≥Def
 
	$HAL_TIM_Encodî_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

3651 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

3655 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

3657 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3660 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3661 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3663 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

3665 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3668 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3669 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3673 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

3674 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_2
, 
TIM_CCx_DISABLE
);

3677 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

3678 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

3679 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

3680 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

3684 
	`__HAL_TIM_DISABLE
(
htim
);

3687 i‡((
Ch™√l
 =
TIM_CHANNEL_1
Ë|| (Ch™√»=
TIM_CHANNEL_2
))

3689 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

3690 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

3694 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3695 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3696 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

3697 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

3701  
HAL_OK
;

3702 
	}
}

3725 
	$HAL_TIM_IRQH™dÀr
(
TIM_H™dÀTy≥Def
 *
htim
)

3728 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC1
Ë!
RESET
)

3730 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC1
Ë!
RESET
)

3733 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC1
);

3734 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

3737 i‡((
htim
->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_CC1S
) != 0x00U)

3739 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3740 
htim
->
	`IC_C≠tuªCÆlback
(htim);

3742 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

3748 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3749 
htim
->
	`OC_DñayEœp£dCÆlback
(htim);

3750 
htim
->
	`PWM_Pul£FöishedCÆlback
(htim);

3752 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

3753 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

3756 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3761 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC2
Ë!
RESET
)

3763 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC2
Ë!
RESET
)

3765 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC2
);

3766 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

3768 i‡((
htim
->
In°™˚
->
CCMR1
 & 
TIM_CCMR1_CC2S
) != 0x00U)

3770 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3771 
htim
->
	`IC_C≠tuªCÆlback
(htim);

3773 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

3779 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3780 
htim
->
	`OC_DñayEœp£dCÆlback
(htim);

3781 
htim
->
	`PWM_Pul£FöishedCÆlback
(htim);

3783 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

3784 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

3787 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3791 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC3
Ë!
RESET
)

3793 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC3
Ë!
RESET
)

3795 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC3
);

3796 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

3798 i‡((
htim
->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_CC3S
) != 0x00U)

3800 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3801 
htim
->
	`IC_C≠tuªCÆlback
(htim);

3803 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

3809 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3810 
htim
->
	`OC_DñayEœp£dCÆlback
(htim);

3811 
htim
->
	`PWM_Pul£FöishedCÆlback
(htim);

3813 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

3814 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

3817 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3821 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_CC4
Ë!
RESET
)

3823 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_CC4
Ë!
RESET
)

3825 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_CC4
);

3826 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

3828 i‡((
htim
->
In°™˚
->
CCMR2
 & 
TIM_CCMR2_CC4S
) != 0x00U)

3830 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3831 
htim
->
	`IC_C≠tuªCÆlback
(htim);

3833 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

3839 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3840 
htim
->
	`OC_DñayEœp£dCÆlback
(htim);

3841 
htim
->
	`PWM_Pul£FöishedCÆlback
(htim);

3843 
	`HAL_TIM_OC_DñayEœp£dCÆlback
(
htim
);

3844 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

3847 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

3851 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_UPDATE
Ë!
RESET
)

3853 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_UPDATE
Ë!
RESET
)

3855 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_UPDATE
);

3856 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3857 
htim
->
	`PîiodEœp£dCÆlback
(htim);

3859 
	`HAL_TIM_PîiodEœp£dCÆlback
(
htim
);

3864 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_BREAK
Ë!
RESET
)

3866 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_BREAK
Ë!
RESET
)

3868 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_BREAK
);

3869 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3870 
htim
->
	`BªakCÆlback
(htim);

3872 
	`HAL_TIMEx_BªakCÆlback
(
htim
);

3877 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_TRIGGER
Ë!
RESET
)

3879 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_TRIGGER
Ë!
RESET
)

3881 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_IT_TRIGGER
);

3882 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3883 
htim
->
	`TriggîCÆlback
(htim);

3885 
	`HAL_TIM_TriggîCÆlback
(
htim
);

3890 i‡(
	`__HAL_TIM_GET_FLAG
(
htim
, 
TIM_FLAG_COM
Ë!
RESET
)

3892 i‡(
	`__HAL_TIM_GET_IT_SOURCE
(
htim
, 
TIM_IT_COM
Ë!
RESET
)

3894 
	`__HAL_TIM_CLEAR_IT
(
htim
, 
TIM_FLAG_COM
);

3895 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

3896 
htim
->
	`Commuèti⁄CÆlback
(htim);

3898 
	`HAL_TIMEx_CommutCÆlback
(
htim
);

3902 
	}
}

3940 
HAL_SètusTy≥Def
 
	$HAL_TIM_OC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
,

3941 
TIM_OC_InôTy≥Def
 *
sC⁄fig
,

3942 
uöt32_t
 
Ch™√l
)

3945 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

3946 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
sC⁄fig
->
OCMode
));

3947 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
sC⁄fig
->
OCPﬁ¨ôy
));

3950 
	`__HAL_LOCK
(
htim
);

3952 
Ch™√l
)

3954 
TIM_CHANNEL_1
:

3957 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

3960 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3964 
TIM_CHANNEL_2
:

3967 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

3970 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3974 
TIM_CHANNEL_3
:

3977 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

3980 
	`TIM_OC3_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3984 
TIM_CHANNEL_4
:

3987 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

3990 
	`TIM_OC4_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

3998 
	`__HAL_UNLOCK
(
htim
);

4000  
HAL_OK
;

4001 
	}
}

4016 
HAL_SètusTy≥Def
 
	$HAL_TIM_IC_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_IC_InôTy≥Def
 *
sC⁄fig
, 
uöt32_t
 
Ch™√l
)

4019 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4020 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
ICPﬁ¨ôy
));

4021 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
sC⁄fig
->
ICSñe˘i⁄
));

4022 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
ICPªsˇÀr
));

4023 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
ICFûãr
));

4026 
	`__HAL_LOCK
(
htim
);

4028 i‡(
Ch™√l
 =
TIM_CHANNEL_1
)

4031 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
,

4032 
sC⁄fig
->
ICPﬁ¨ôy
,

4033 
sC⁄fig
->
ICSñe˘i⁄
,

4034 
sC⁄fig
->
ICFûãr
);

4037 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

4040 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
ICPªsˇÀr
;

4042 i‡(
Ch™√l
 =
TIM_CHANNEL_2
)

4045 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4047 
	`TIM_TI2_SëC⁄fig
(
htim
->
In°™˚
,

4048 
sC⁄fig
->
ICPﬁ¨ôy
,

4049 
sC⁄fig
->
ICSñe˘i⁄
,

4050 
sC⁄fig
->
ICFûãr
);

4053 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC2PSC
;

4056 
htim
->
In°™˚
->
CCMR1
 |(
sC⁄fig
->
ICPªsˇÀr
 << 8U);

4058 i‡(
Ch™√l
 =
TIM_CHANNEL_3
)

4061 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

4063 
	`TIM_TI3_SëC⁄fig
(
htim
->
In°™˚
,

4064 
sC⁄fig
->
ICPﬁ¨ôy
,

4065 
sC⁄fig
->
ICSñe˘i⁄
,

4066 
sC⁄fig
->
ICFûãr
);

4069 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC3PSC
;

4072 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
ICPªsˇÀr
;

4077 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

4079 
	`TIM_TI4_SëC⁄fig
(
htim
->
In°™˚
,

4080 
sC⁄fig
->
ICPﬁ¨ôy
,

4081 
sC⁄fig
->
ICSñe˘i⁄
,

4082 
sC⁄fig
->
ICFûãr
);

4085 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_IC4PSC
;

4088 
htim
->
In°™˚
->
CCMR2
 |(
sC⁄fig
->
ICPªsˇÀr
 << 8U);

4091 
	`__HAL_UNLOCK
(
htim
);

4093  
HAL_OK
;

4094 
	}
}

4109 
HAL_SètusTy≥Def
 
	$HAL_TIM_PWM_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
,

4110 
TIM_OC_InôTy≥Def
 *
sC⁄fig
,

4111 
uöt32_t
 
Ch™√l
)

4114 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

4115 
	`as£π_∑øm
(
	`IS_TIM_PWM_MODE
(
sC⁄fig
->
OCMode
));

4116 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
sC⁄fig
->
OCPﬁ¨ôy
));

4117 
	`as£π_∑øm
(
	`IS_TIM_FAST_STATE
(
sC⁄fig
->
OCFa°Mode
));

4120 
	`__HAL_LOCK
(
htim
);

4122 
Ch™√l
)

4124 
TIM_CHANNEL_1
:

4127 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4130 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

4133 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC1PE
;

4136 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC1FE
;

4137 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
OCFa°Mode
;

4141 
TIM_CHANNEL_2
:

4144 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4147 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

4150 
htim
->
In°™˚
->
CCMR1
 |
TIM_CCMR1_OC2PE
;

4153 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_OC2FE
;

4154 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
OCFa°Mode
 << 8U;

4158 
TIM_CHANNEL_3
:

4161 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

4164 
	`TIM_OC3_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

4167 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC3PE
;

4170 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC3FE
;

4171 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
OCFa°Mode
;

4175 
TIM_CHANNEL_4
:

4178 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

4181 
	`TIM_OC4_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
);

4184 
htim
->
In°™˚
->
CCMR2
 |
TIM_CCMR2_OC4PE
;

4187 
htim
->
In°™˚
->
CCMR2
 &~
TIM_CCMR2_OC4FE
;

4188 
htim
->
In°™˚
->
CCMR2
 |
sC⁄fig
->
OCFa°Mode
 << 8U;

4196 
	`__HAL_UNLOCK
(
htim
);

4198  
HAL_OK
;

4199 
	}
}

4220 
HAL_SètusTy≥Def
 
	$HAL_TIM_O√Pul£_C⁄figCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_O√Pul£_InôTy≥Def
 *
sC⁄fig
,

4221 
uöt32_t
 
OuçutCh™√l
, uöt32_à
I≈utCh™√l
)

4223 
TIM_OC_InôTy≥Def
 
ãmp1
;

4226 
	`as£π_∑øm
(
	`IS_TIM_OPM_CHANNELS
(
OuçutCh™√l
));

4227 
	`as£π_∑øm
(
	`IS_TIM_OPM_CHANNELS
(
I≈utCh™√l
));

4229 i‡(
OuçutCh™√l
 !
I≈utCh™√l
)

4232 
	`__HAL_LOCK
(
htim
);

4234 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

4237 
ãmp1
.
OCMode
 = 
sC⁄fig
->OCMode;

4238 
ãmp1
.
Pul£
 = 
sC⁄fig
->Pulse;

4239 
ãmp1
.
OCPﬁ¨ôy
 = 
sC⁄fig
->OCPolarity;

4240 
ãmp1
.
OCNPﬁ¨ôy
 = 
sC⁄fig
->OCNPolarity;

4241 
ãmp1
.
OCIdÀSèã
 = 
sC⁄fig
->OCIdleState;

4242 
ãmp1
.
OCNIdÀSèã
 = 
sC⁄fig
->OCNIdleState;

4244 
OuçutCh™√l
)

4246 
TIM_CHANNEL_1
:

4248 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4250 
	`TIM_OC1_SëC⁄fig
(
htim
->
In°™˚
, &
ãmp1
);

4253 
TIM_CHANNEL_2
:

4255 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4257 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, &
ãmp1
);

4264 
I≈utCh™√l
)

4266 
TIM_CHANNEL_1
:

4268 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

4270 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
ICPﬁ¨ôy
,

4271 
sC⁄fig
->
ICSñe˘i⁄
, sC⁄fig->
ICFûãr
);

4274 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

4277 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

4278 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI1FP1
;

4281 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

4282 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_TRIGGER
;

4285 
TIM_CHANNEL_2
:

4287 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

4289 
	`TIM_TI2_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
ICPﬁ¨ôy
,

4290 
sC⁄fig
->
ICSñe˘i⁄
, sC⁄fig->
ICFûãr
);

4293 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC2PSC
;

4296 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

4297 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI2FP2
;

4300 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

4301 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_TRIGGER
;

4309 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

4311 
	`__HAL_UNLOCK
(
htim
);

4313  
HAL_OK
;

4317  
HAL_ERROR
;

4319 
	}
}

4359 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_WrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

4360 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
, uöt32_à
Bur°Lígth
)

4362  
	`HAL_TIM_DMABur°_Mu…iWrôeSèπ
(
htim
, 
Bur°Ba£Addªss
, 
Bur°Reque°Src
, 
Bur°Buf„r
, 
Bur°Lígth
,

4363 ((
Bur°Lígth
) >> 8U) + 1U);

4364 
	}
}

4405 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_Mu…iWrôeSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

4406 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
,

4407 
uöt32_t
 
Bur°Lígth
, uöt32_à
D©aLígth
)

4410 
	`as£π_∑øm
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In°™˚
));

4411 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
Bur°Ba£Addªss
));

4412 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

4413 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
Bur°Lígth
));

4414 
	`as£π_∑øm
(
	`IS_TIM_DMA_DATA_LENGTH
(
D©aLígth
));

4416 i‡(
htim
->
DMABur°Sèã
 =
HAL_DMA_BURST_STATE_BUSY
)

4418  
HAL_BUSY
;

4420 i‡(
htim
->
DMABur°Sèã
 =
HAL_DMA_BURST_STATE_READY
)

4422 i‡((
Bur°Buf„r
 =
NULL
Ë&& (
Bur°Lígth
 > 0U))

4424  
HAL_ERROR
;

4428 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_BUSY
;

4435 
Bur°Reque°Src
)

4437 
TIM_DMA_UPDATE
:

4440 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

4441 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dHÆfC∂t
;

4444 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4447 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)
Bur°Buf„r
,

4448 (
uöt32_t
)&
htim
->
In°™˚
->
DMAR
, 
D©aLígth
Ë!
HAL_OK
)

4451  
HAL_ERROR
;

4455 
TIM_DMA_CC1
:

4458 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

4459 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

4462 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4465 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
Bur°Buf„r
,

4466 (
uöt32_t
)&
htim
->
In°™˚
->
DMAR
, 
D©aLígth
Ë!
HAL_OK
)

4469  
HAL_ERROR
;

4473 
TIM_DMA_CC2
:

4476 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

4477 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

4480 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4483 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
Bur°Buf„r
,

4484 (
uöt32_t
)&
htim
->
In°™˚
->
DMAR
, 
D©aLígth
Ë!
HAL_OK
)

4487  
HAL_ERROR
;

4491 
TIM_DMA_CC3
:

4494 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

4495 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

4498 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4501 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
Bur°Buf„r
,

4502 (
uöt32_t
)&
htim
->
In°™˚
->
DMAR
, 
D©aLígth
Ë!
HAL_OK
)

4505  
HAL_ERROR
;

4509 
TIM_DMA_CC4
:

4512 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£C∂t
;

4513 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

4516 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4519 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)
Bur°Buf„r
,

4520 (
uöt32_t
)&
htim
->
In°™˚
->
DMAR
, 
D©aLígth
Ë!
HAL_OK
)

4523  
HAL_ERROR
;

4527 
TIM_DMA_COM
:

4530 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄C∂t
;

4531 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rHÆfC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄HÆfC∂t
;

4534 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4537 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
], (
uöt32_t
)
Bur°Buf„r
,

4538 (
uöt32_t
)&
htim
->
In°™˚
->
DMAR
, 
D©aLígth
Ë!
HAL_OK
)

4541  
HAL_ERROR
;

4545 
TIM_DMA_TRIGGER
:

4548 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rC∂tCÆlback
 = 
TIM_DMATriggîC∂t
;

4549 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMATriggîHÆfC∂t
;

4552 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4555 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
uöt32_t
)
Bur°Buf„r
,

4556 (
uöt32_t
)&
htim
->
In°™˚
->
DMAR
, 
D©aLígth
Ë!
HAL_OK
)

4559  
HAL_ERROR
;

4568 
htim
->
In°™˚
->
DCR
 = (
Bur°Ba£Addªss
 | 
Bur°Lígth
);

4570 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur°Reque°Src
);

4573  
HAL_OK
;

4574 
	}
}

4582 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_WrôeSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
)

4585 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

4588 
Bur°Reque°Src
)

4590 
TIM_DMA_UPDATE
:

4592 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

4595 
TIM_DMA_CC1
:

4597 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

4600 
TIM_DMA_CC2
:

4602 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

4605 
TIM_DMA_CC3
:

4607 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

4610 
TIM_DMA_CC4
:

4612 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

4615 
TIM_DMA_COM
:

4617 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]);

4620 
TIM_DMA_TRIGGER
:

4622 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

4630 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur°Reque°Src
);

4633 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

4636  
HAL_OK
;

4637 
	}
}

4677 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_RódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

4678 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
, uöt32_à
Bur°Lígth
)

4680  
	`HAL_TIM_DMABur°_Mu…iRódSèπ
(
htim
, 
Bur°Ba£Addªss
, 
Bur°Reque°Src
, 
Bur°Buf„r
, 
Bur°Lígth
,

4681 ((
Bur°Lígth
) >> 8U) + 1U);

4682 
	}
}

4723 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_Mu…iRódSèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Ba£Addªss
,

4724 
uöt32_t
 
Bur°Reque°Src
, uöt32_à*
Bur°Buf„r
,

4725 
uöt32_t
 
Bur°Lígth
, uöt32_à
D©aLígth
)

4728 
	`as£π_∑øm
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In°™˚
));

4729 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
Bur°Ba£Addªss
));

4730 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

4731 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
Bur°Lígth
));

4732 
	`as£π_∑øm
(
	`IS_TIM_DMA_DATA_LENGTH
(
D©aLígth
));

4734 i‡(
htim
->
DMABur°Sèã
 =
HAL_DMA_BURST_STATE_BUSY
)

4736  
HAL_BUSY
;

4738 i‡(
htim
->
DMABur°Sèã
 =
HAL_DMA_BURST_STATE_READY
)

4740 i‡((
Bur°Buf„r
 =
NULL
Ë&& (
Bur°Lígth
 > 0U))

4742  
HAL_ERROR
;

4746 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_BUSY
;

4753 
Bur°Reque°Src
)

4755 
TIM_DMA_UPDATE
:

4758 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dC∂t
;

4759 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAPîiodEœp£dHÆfC∂t
;

4762 
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4765 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
,

4766 
D©aLígth
Ë!
HAL_OK
)

4769  
HAL_ERROR
;

4773 
TIM_DMA_CC1
:

4776 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

4777 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

4780 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4783 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
,

4784 
D©aLígth
Ë!
HAL_OK
)

4787  
HAL_ERROR
;

4791 
TIM_DMA_CC2
:

4794 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

4795 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

4798 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4801 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
,

4802 
D©aLígth
Ë!
HAL_OK
)

4805  
HAL_ERROR
;

4809 
TIM_DMA_CC3
:

4812 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

4813 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

4816 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4819 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
,

4820 
D©aLígth
Ë!
HAL_OK
)

4823  
HAL_ERROR
;

4827 
TIM_DMA_CC4
:

4830 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

4831 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

4834 
htim
->
hdma
[
TIM_DMA_ID_CC4
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4837 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
,

4838 
D©aLígth
Ë!
HAL_OK
)

4841  
HAL_ERROR
;

4845 
TIM_DMA_COM
:

4848 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄C∂t
;

4849 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rHÆfC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄HÆfC∂t
;

4852 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4855 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
,

4856 
D©aLígth
Ë!
HAL_OK
)

4859  
HAL_ERROR
;

4863 
TIM_DMA_TRIGGER
:

4866 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rC∂tCÆlback
 = 
TIM_DMATriggîC∂t
;

4867 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMATriggîHÆfC∂t
;

4870 
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

4873 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
], (
uöt32_t
)&htim->
In°™˚
->
DMAR
, (uöt32_t)
Bur°Buf„r
,

4874 
D©aLígth
Ë!
HAL_OK
)

4877  
HAL_ERROR
;

4886 
htim
->
In°™˚
->
DCR
 = (
Bur°Ba£Addªss
 | 
Bur°Lígth
);

4889 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
Bur°Reque°Src
);

4892  
HAL_OK
;

4893 
	}
}

4901 
HAL_SètusTy≥Def
 
	$HAL_TIM_DMABur°_RódSt›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Bur°Reque°Src
)

4904 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
Bur°Reque°Src
));

4907 
Bur°Reque°Src
)

4909 
TIM_DMA_UPDATE
:

4911 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]);

4914 
TIM_DMA_CC1
:

4916 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

4919 
TIM_DMA_CC2
:

4921 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

4924 
TIM_DMA_CC3
:

4926 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

4929 
TIM_DMA_CC4
:

4931 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC4
]);

4934 
TIM_DMA_COM
:

4936 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]);

4939 
TIM_DMA_TRIGGER
:

4941 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]);

4949 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
Bur°Reque°Src
);

4952 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

4955  
HAL_OK
;

4956 
	}
}

4978 
HAL_SètusTy≥Def
 
	$HAL_TIM_Gíî©eEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
EvítSour˚
)

4981 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

4982 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
EvítSour˚
));

4985 
	`__HAL_LOCK
(
htim
);

4988 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

4991 
htim
->
In°™˚
->
EGR
 = 
EvítSour˚
;

4994 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

4996 
	`__HAL_UNLOCK
(
htim
);

4999  
HAL_OK
;

5000 
	}
}

5015 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figOCªfCÀ¨
(
TIM_H™dÀTy≥Def
 *
htim
,

5016 
TIM_CÀ¨I≈utC⁄figTy≥Def
 *
sCÀ¨I≈utC⁄fig
,

5017 
uöt32_t
 
Ch™√l
)

5020 
	`as£π_∑øm
(
	`IS_TIM_OCXREF_CLEAR_INSTANCE
(
htim
->
In°™˚
));

5021 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_SOURCE
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSour˚
));

5024 
	`__HAL_LOCK
(
htim
);

5026 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

5028 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSour˚
)

5030 
TIM_CLEARINPUTSOURCE_NONE
:

5033 
	`CLEAR_BIT
(
htim
->
In°™˚
->
SMCR
, (
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
));

5037 
TIM_CLEARINPUTSOURCE_ETR
:

5040 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_POLARITY
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPﬁ¨ôy
));

5041 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_PRESCALER
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPªsˇÀr
));

5042 
	`as£π_∑øm
(
	`IS_TIM_CLEARINPUT_FILTER
(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utFûãr
));

5045 i‡(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPªsˇÀr
 !
TIM_CLEARINPUTPRESCALER_DIV1
)

5047 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

5048 
	`__HAL_UNLOCK
(
htim
);

5049  
HAL_ERROR
;

5052 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

5053 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPªsˇÀr
,

5054 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utPﬁ¨ôy
,

5055 
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utFûãr
);

5063 
Ch™√l
)

5065 
TIM_CHANNEL_1
:

5067 i‡(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !(
uöt32_t
)
DISABLE
)

5070 
	`SET_BIT
(
htim
->
In°™˚
->
CCMR1
, 
TIM_CCMR1_OC1CE
);

5075 
	`CLEAR_BIT
(
htim
->
In°™˚
->
CCMR1
, 
TIM_CCMR1_OC1CE
);

5079 
TIM_CHANNEL_2
:

5081 i‡(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !(
uöt32_t
)
DISABLE
)

5084 
	`SET_BIT
(
htim
->
In°™˚
->
CCMR1
, 
TIM_CCMR1_OC2CE
);

5089 
	`CLEAR_BIT
(
htim
->
In°™˚
->
CCMR1
, 
TIM_CCMR1_OC2CE
);

5093 
TIM_CHANNEL_3
:

5095 i‡(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !(
uöt32_t
)
DISABLE
)

5098 
	`SET_BIT
(
htim
->
In°™˚
->
CCMR2
, 
TIM_CCMR2_OC3CE
);

5103 
	`CLEAR_BIT
(
htim
->
In°™˚
->
CCMR2
, 
TIM_CCMR2_OC3CE
);

5107 
TIM_CHANNEL_4
:

5109 i‡(
sCÀ¨I≈utC⁄fig
->
CÀ¨I≈utSèã
 !(
uöt32_t
)
DISABLE
)

5112 
	`SET_BIT
(
htim
->
In°™˚
->
CCMR2
, 
TIM_CCMR2_OC4CE
);

5117 
	`CLEAR_BIT
(
htim
->
In°™˚
->
CCMR2
, 
TIM_CCMR2_OC4CE
);

5125 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

5127 
	`__HAL_UNLOCK
(
htim
);

5129  
HAL_OK
;

5130 
	}
}

5139 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figClockSour˚
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_ClockC⁄figTy≥Def
 *
sClockSour˚C⁄fig
)

5141 
uöt32_t
 
tmpsm¸
;

5144 
	`__HAL_LOCK
(
htim
);

5146 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

5149 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE
(
sClockSour˚C⁄fig
->
ClockSour˚
));

5152 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

5153 
tmpsm¸
 &~(
TIM_SMCR_SMS
 | 
TIM_SMCR_TS
);

5154 
tmpsm¸
 &~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

5155 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

5157 
sClockSour˚C⁄fig
->
ClockSour˚
)

5159 
TIM_CLOCKSOURCE_INTERNAL
:

5161 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

5165 
TIM_CLOCKSOURCE_ETRMODE1
:

5168 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
htim
->
In°™˚
));

5171 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPRESCALER
(
sClockSour˚C⁄fig
->
ClockPªsˇÀr
));

5172 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

5173 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

5176 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

5177 
sClockSour˚C⁄fig
->
ClockPªsˇÀr
,

5178 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

5179 
sClockSour˚C⁄fig
->
ClockFûãr
);

5182 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

5183 
tmpsm¸
 |(
TIM_SLAVEMODE_EXTERNAL1
 | 
TIM_CLOCKSOURCE_ETRMODE1
);

5185 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

5189 
TIM_CLOCKSOURCE_ETRMODE2
:

5192 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE
(
htim
->
In°™˚
));

5195 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPRESCALER
(
sClockSour˚C⁄fig
->
ClockPªsˇÀr
));

5196 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

5197 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

5200 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

5201 
sClockSour˚C⁄fig
->
ClockPªsˇÀr
,

5202 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

5203 
sClockSour˚C⁄fig
->
ClockFûãr
);

5205 
htim
->
In°™˚
->
SMCR
 |
TIM_SMCR_ECE
;

5209 
TIM_CLOCKSOURCE_TI1
:

5212 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
htim
->
In°™˚
));

5215 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

5216 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

5218 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

5219 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

5220 
sClockSour˚C⁄fig
->
ClockFûãr
);

5221 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI1
);

5225 
TIM_CLOCKSOURCE_TI2
:

5228 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
htim
->
In°™˚
));

5231 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

5232 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

5234 
	`TIM_TI2_C⁄figI≈utSège
(
htim
->
In°™˚
,

5235 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

5236 
sClockSour˚C⁄fig
->
ClockFûãr
);

5237 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI2
);

5241 
TIM_CLOCKSOURCE_TI1ED
:

5244 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE_TIX_INSTANCE
(
htim
->
In°™˚
));

5247 
	`as£π_∑øm
(
	`IS_TIM_CLOCKPOLARITY
(
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
));

5248 
	`as£π_∑øm
(
	`IS_TIM_CLOCKFILTER
(
sClockSour˚C⁄fig
->
ClockFûãr
));

5250 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

5251 
sClockSour˚C⁄fig
->
ClockPﬁ¨ôy
,

5252 
sClockSour˚C⁄fig
->
ClockFûãr
);

5253 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
TIM_CLOCKSOURCE_TI1ED
);

5257 
TIM_CLOCKSOURCE_ITR0
:

5258 
TIM_CLOCKSOURCE_ITR1
:

5259 
TIM_CLOCKSOURCE_ITR2
:

5260 
TIM_CLOCKSOURCE_ITR3
:

5263 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE_ITRX_INSTANCE
(
htim
->
In°™˚
));

5265 
	`TIM_ITRx_SëC⁄fig
(
htim
->
In°™˚
, 
sClockSour˚C⁄fig
->
ClockSour˚
);

5272 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

5274 
	`__HAL_UNLOCK
(
htim
);

5276  
HAL_OK
;

5277 
	}
}

5291 
HAL_SètusTy≥Def
 
	$HAL_TIM_C⁄figTI1I≈ut
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
TI1_Sñe˘i⁄
)

5293 
uöt32_t
 
tmp¸2
;

5296 
	`as£π_∑øm
(
	`IS_TIM_XOR_INSTANCE
(
htim
->
In°™˚
));

5297 
	`as£π_∑øm
(
	`IS_TIM_TI1SELECTION
(
TI1_Sñe˘i⁄
));

5300 
tmp¸2
 = 
htim
->
In°™˚
->
CR2
;

5303 
tmp¸2
 &~
TIM_CR2_TI1S
;

5306 
tmp¸2
 |
TI1_Sñe˘i⁄
;

5309 
htim
->
In°™˚
->
CR2
 = 
tmp¸2
;

5311  
HAL_OK
;

5312 
	}
}

5323 
HAL_SètusTy≥Def
 
	$HAL_TIM_SœveC⁄figSynchro
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_SœveC⁄figTy≥Def
 *
sSœveC⁄fig
)

5326 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
));

5327 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
sSœveC⁄fig
->
SœveMode
));

5328 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
sSœveC⁄fig
->
I≈utTriggî
));

5330 
	`__HAL_LOCK
(
htim
);

5332 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

5334 i‡(
	`TIM_SœveTimî_SëC⁄fig
(
htim
, 
sSœveC⁄fig
Ë!
HAL_OK
)

5336 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

5337 
	`__HAL_UNLOCK
(
htim
);

5338  
HAL_ERROR
;

5342 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

5345 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

5347 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

5349 
	`__HAL_UNLOCK
(
htim
);

5351  
HAL_OK
;

5352 
	}
}

5363 
HAL_SètusTy≥Def
 
	$HAL_TIM_SœveC⁄figSynchro_IT
(
TIM_H™dÀTy≥Def
 *
htim
,

5364 
TIM_SœveC⁄figTy≥Def
 *
sSœveC⁄fig
)

5367 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
));

5368 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
sSœveC⁄fig
->
SœveMode
));

5369 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
sSœveC⁄fig
->
I≈utTriggî
));

5371 
	`__HAL_LOCK
(
htim
);

5373 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

5375 i‡(
	`TIM_SœveTimî_SëC⁄fig
(
htim
, 
sSœveC⁄fig
Ë!
HAL_OK
)

5377 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

5378 
	`__HAL_UNLOCK
(
htim
);

5379  
HAL_ERROR
;

5383 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_TRIGGER
);

5386 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_TRIGGER
);

5388 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

5390 
	`__HAL_UNLOCK
(
htim
);

5392  
HAL_OK
;

5393 
	}
}

5406 
uöt32_t
 
	$HAL_TIM_RódC≠tuªdVÆue
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

5408 
uöt32_t
 
tm¥eg
 = 0U;

5410 
Ch™√l
)

5412 
TIM_CHANNEL_1
:

5415 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

5418 
tm¥eg
 = 
htim
->
In°™˚
->
CCR1
;

5422 
TIM_CHANNEL_2
:

5425 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

5428 
tm¥eg
 = 
htim
->
In°™˚
->
CCR2
;

5433 
TIM_CHANNEL_3
:

5436 
	`as£π_∑øm
(
	`IS_TIM_CC3_INSTANCE
(
htim
->
In°™˚
));

5439 
tm¥eg
 = 
htim
->
In°™˚
->
CCR3
;

5444 
TIM_CHANNEL_4
:

5447 
	`as£π_∑øm
(
	`IS_TIM_CC4_INSTANCE
(
htim
->
In°™˚
));

5450 
tm¥eg
 = 
htim
->
In°™˚
->
CCR4
;

5459  
tm¥eg
;

5460 
	}
}

5490 
__wók
 
	$HAL_TIM_PîiodEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5493 
	`UNUSED
(
htim
);

5498 
	}
}

5505 
__wók
 
	$HAL_TIM_PîiodEœp£dHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5508 
	`UNUSED
(
htim
);

5513 
	}
}

5520 
__wók
 
	$HAL_TIM_OC_DñayEœp£dCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5523 
	`UNUSED
(
htim
);

5528 
	}
}

5535 
__wók
 
	$HAL_TIM_IC_C≠tuªCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5538 
	`UNUSED
(
htim
);

5543 
	}
}

5550 
__wók
 
	$HAL_TIM_IC_C≠tuªHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5553 
	`UNUSED
(
htim
);

5558 
	}
}

5565 
__wók
 
	$HAL_TIM_PWM_Pul£FöishedCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5568 
	`UNUSED
(
htim
);

5573 
	}
}

5580 
__wók
 
	$HAL_TIM_PWM_Pul£FöishedHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5583 
	`UNUSED
(
htim
);

5588 
	}
}

5595 
__wók
 
	$HAL_TIM_TriggîCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5598 
	`UNUSED
(
htim
);

5603 
	}
}

5610 
__wók
 
	$HAL_TIM_TriggîHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5613 
	`UNUSED
(
htim
);

5618 
	}
}

5625 
__wók
 
	$HAL_TIM_Eº‹CÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

5628 
	`UNUSED
(
htim
);

5633 
	}
}

5635 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

5671 
HAL_SètusTy≥Def
 
	$HAL_TIM_Regi°îCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
, 
HAL_TIM_CÆlbackIDTy≥Def
 
CÆlbackID
,

5672 
pTIM_CÆlbackTy≥Def
 
pCÆlback
)

5674 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

5676 i‡(
pCÆlback
 =
NULL
)

5678  
HAL_ERROR
;

5681 
	`__HAL_LOCK
(
htim
);

5683 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_READY
)

5685 
CÆlbackID
)

5687 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

5688 
htim
->
Ba£_M•InôCÆlback
 = 
pCÆlback
;

5691 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

5692 
htim
->
Ba£_M•DeInôCÆlback
 = 
pCÆlback
;

5695 
HAL_TIM_IC_MSPINIT_CB_ID
 :

5696 
htim
->
IC_M•InôCÆlback
 = 
pCÆlback
;

5699 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

5700 
htim
->
IC_M•DeInôCÆlback
 = 
pCÆlback
;

5703 
HAL_TIM_OC_MSPINIT_CB_ID
 :

5704 
htim
->
OC_M•InôCÆlback
 = 
pCÆlback
;

5707 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

5708 
htim
->
OC_M•DeInôCÆlback
 = 
pCÆlback
;

5711 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

5712 
htim
->
PWM_M•InôCÆlback
 = 
pCÆlback
;

5715 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

5716 
htim
->
PWM_M•DeInôCÆlback
 = 
pCÆlback
;

5719 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

5720 
htim
->
O√Pul£_M•InôCÆlback
 = 
pCÆlback
;

5723 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

5724 
htim
->
O√Pul£_M•DeInôCÆlback
 = 
pCÆlback
;

5727 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

5728 
htim
->
Encodî_M•InôCÆlback
 = 
pCÆlback
;

5731 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

5732 
htim
->
Encodî_M•DeInôCÆlback
 = 
pCÆlback
;

5735 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

5736 
htim
->
HÆlSís‹_M•InôCÆlback
 = 
pCÆlback
;

5739 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

5740 
htim
->
HÆlSís‹_M•DeInôCÆlback
 = 
pCÆlback
;

5743 
HAL_TIM_PERIOD_ELAPSED_CB_ID
 :

5744 
htim
->
PîiodEœp£dCÆlback
 = 
pCÆlback
;

5747 
HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID
 :

5748 
htim
->
PîiodEœp£dHÆfC∂tCÆlback
 = 
pCÆlback
;

5751 
HAL_TIM_TRIGGER_CB_ID
 :

5752 
htim
->
TriggîCÆlback
 = 
pCÆlback
;

5755 
HAL_TIM_TRIGGER_HALF_CB_ID
 :

5756 
htim
->
TriggîHÆfC∂tCÆlback
 = 
pCÆlback
;

5759 
HAL_TIM_IC_CAPTURE_CB_ID
 :

5760 
htim
->
IC_C≠tuªCÆlback
 = 
pCÆlback
;

5763 
HAL_TIM_IC_CAPTURE_HALF_CB_ID
 :

5764 
htim
->
IC_C≠tuªHÆfC∂tCÆlback
 = 
pCÆlback
;

5767 
HAL_TIM_OC_DELAY_ELAPSED_CB_ID
 :

5768 
htim
->
OC_DñayEœp£dCÆlback
 = 
pCÆlback
;

5771 
HAL_TIM_PWM_PULSE_FINISHED_CB_ID
 :

5772 
htim
->
PWM_Pul£FöishedCÆlback
 = 
pCÆlback
;

5775 
HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID
 :

5776 
htim
->
PWM_Pul£FöishedHÆfC∂tCÆlback
 = 
pCÆlback
;

5779 
HAL_TIM_ERROR_CB_ID
 :

5780 
htim
->
Eº‹CÆlback
 = 
pCÆlback
;

5783 
HAL_TIM_COMMUTATION_CB_ID
 :

5784 
htim
->
Commuèti⁄CÆlback
 = 
pCÆlback
;

5787 
HAL_TIM_COMMUTATION_HALF_CB_ID
 :

5788 
htim
->
Commuèti⁄HÆfC∂tCÆlback
 = 
pCÆlback
;

5791 
HAL_TIM_BREAK_CB_ID
 :

5792 
htim
->
BªakCÆlback
 = 
pCÆlback
;

5797 
°©us
 = 
HAL_ERROR
;

5801 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

5803 
CÆlbackID
)

5805 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

5806 
htim
->
Ba£_M•InôCÆlback
 = 
pCÆlback
;

5809 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

5810 
htim
->
Ba£_M•DeInôCÆlback
 = 
pCÆlback
;

5813 
HAL_TIM_IC_MSPINIT_CB_ID
 :

5814 
htim
->
IC_M•InôCÆlback
 = 
pCÆlback
;

5817 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

5818 
htim
->
IC_M•DeInôCÆlback
 = 
pCÆlback
;

5821 
HAL_TIM_OC_MSPINIT_CB_ID
 :

5822 
htim
->
OC_M•InôCÆlback
 = 
pCÆlback
;

5825 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

5826 
htim
->
OC_M•DeInôCÆlback
 = 
pCÆlback
;

5829 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

5830 
htim
->
PWM_M•InôCÆlback
 = 
pCÆlback
;

5833 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

5834 
htim
->
PWM_M•DeInôCÆlback
 = 
pCÆlback
;

5837 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

5838 
htim
->
O√Pul£_M•InôCÆlback
 = 
pCÆlback
;

5841 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

5842 
htim
->
O√Pul£_M•DeInôCÆlback
 = 
pCÆlback
;

5845 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

5846 
htim
->
Encodî_M•InôCÆlback
 = 
pCÆlback
;

5849 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

5850 
htim
->
Encodî_M•DeInôCÆlback
 = 
pCÆlback
;

5853 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

5854 
htim
->
HÆlSís‹_M•InôCÆlback
 = 
pCÆlback
;

5857 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

5858 
htim
->
HÆlSís‹_M•DeInôCÆlback
 = 
pCÆlback
;

5863 
°©us
 = 
HAL_ERROR
;

5870 
°©us
 = 
HAL_ERROR
;

5874 
	`__HAL_UNLOCK
(
htim
);

5876  
°©us
;

5877 
	}
}

5914 
HAL_SètusTy≥Def
 
	$HAL_TIM_UnRegi°îCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
, 
HAL_TIM_CÆlbackIDTy≥Def
 
CÆlbackID
)

5916 
HAL_SètusTy≥Def
 
°©us
 = 
HAL_OK
;

5919 
	`__HAL_LOCK
(
htim
);

5921 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_READY
)

5923 
CÆlbackID
)

5925 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

5926 
htim
->
Ba£_M•InôCÆlback
 = 
HAL_TIM_Ba£_M•Inô
;

5929 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

5930 
htim
->
Ba£_M•DeInôCÆlback
 = 
HAL_TIM_Ba£_M•DeInô
;

5933 
HAL_TIM_IC_MSPINIT_CB_ID
 :

5934 
htim
->
IC_M•InôCÆlback
 = 
HAL_TIM_IC_M•Inô
;

5937 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

5938 
htim
->
IC_M•DeInôCÆlback
 = 
HAL_TIM_IC_M•DeInô
;

5941 
HAL_TIM_OC_MSPINIT_CB_ID
 :

5942 
htim
->
OC_M•InôCÆlback
 = 
HAL_TIM_OC_M•Inô
;

5945 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

5946 
htim
->
OC_M•DeInôCÆlback
 = 
HAL_TIM_OC_M•DeInô
;

5949 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

5950 
htim
->
PWM_M•InôCÆlback
 = 
HAL_TIM_PWM_M•Inô
;

5953 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

5954 
htim
->
PWM_M•DeInôCÆlback
 = 
HAL_TIM_PWM_M•DeInô
;

5957 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

5958 
htim
->
O√Pul£_M•InôCÆlback
 = 
HAL_TIM_O√Pul£_M•Inô
;

5961 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

5962 
htim
->
O√Pul£_M•DeInôCÆlback
 = 
HAL_TIM_O√Pul£_M•DeInô
;

5965 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

5966 
htim
->
Encodî_M•InôCÆlback
 = 
HAL_TIM_Encodî_M•Inô
;

5969 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

5970 
htim
->
Encodî_M•DeInôCÆlback
 = 
HAL_TIM_Encodî_M•DeInô
;

5973 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

5974 
htim
->
HÆlSís‹_M•InôCÆlback
 = 
HAL_TIMEx_HÆlSís‹_M•Inô
;

5977 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

5978 
htim
->
HÆlSís‹_M•DeInôCÆlback
 = 
HAL_TIMEx_HÆlSís‹_M•DeInô
;

5981 
HAL_TIM_PERIOD_ELAPSED_CB_ID
 :

5982 
htim
->
PîiodEœp£dCÆlback
 = 
HAL_TIM_PîiodEœp£dCÆlback
;

5985 
HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID
 :

5986 
htim
->
PîiodEœp£dHÆfC∂tCÆlback
 = 
HAL_TIM_PîiodEœp£dHÆfC∂tCÆlback
;

5989 
HAL_TIM_TRIGGER_CB_ID
 :

5990 
htim
->
TriggîCÆlback
 = 
HAL_TIM_TriggîCÆlback
;

5993 
HAL_TIM_TRIGGER_HALF_CB_ID
 :

5994 
htim
->
TriggîHÆfC∂tCÆlback
 = 
HAL_TIM_TriggîHÆfC∂tCÆlback
;

5997 
HAL_TIM_IC_CAPTURE_CB_ID
 :

5998 
htim
->
IC_C≠tuªCÆlback
 = 
HAL_TIM_IC_C≠tuªCÆlback
;

6001 
HAL_TIM_IC_CAPTURE_HALF_CB_ID
 :

6002 
htim
->
IC_C≠tuªHÆfC∂tCÆlback
 = 
HAL_TIM_IC_C≠tuªHÆfC∂tCÆlback
;

6005 
HAL_TIM_OC_DELAY_ELAPSED_CB_ID
 :

6006 
htim
->
OC_DñayEœp£dCÆlback
 = 
HAL_TIM_OC_DñayEœp£dCÆlback
;

6009 
HAL_TIM_PWM_PULSE_FINISHED_CB_ID
 :

6010 
htim
->
PWM_Pul£FöishedCÆlback
 = 
HAL_TIM_PWM_Pul£FöishedCÆlback
;

6013 
HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID
 :

6014 
htim
->
PWM_Pul£FöishedHÆfC∂tCÆlback
 = 
HAL_TIM_PWM_Pul£FöishedHÆfC∂tCÆlback
;

6017 
HAL_TIM_ERROR_CB_ID
 :

6018 
htim
->
Eº‹CÆlback
 = 
HAL_TIM_Eº‹CÆlback
;

6021 
HAL_TIM_COMMUTATION_CB_ID
 :

6022 
htim
->
Commuèti⁄CÆlback
 = 
HAL_TIMEx_CommutCÆlback
;

6025 
HAL_TIM_COMMUTATION_HALF_CB_ID
 :

6026 
htim
->
Commuèti⁄HÆfC∂tCÆlback
 = 
HAL_TIMEx_CommutHÆfC∂tCÆlback
;

6029 
HAL_TIM_BREAK_CB_ID
 :

6030 
htim
->
BªakCÆlback
 = 
HAL_TIMEx_BªakCÆlback
;

6035 
°©us
 = 
HAL_ERROR
;

6039 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

6041 
CÆlbackID
)

6043 
HAL_TIM_BASE_MSPINIT_CB_ID
 :

6044 
htim
->
Ba£_M•InôCÆlback
 = 
HAL_TIM_Ba£_M•Inô
;

6047 
HAL_TIM_BASE_MSPDEINIT_CB_ID
 :

6048 
htim
->
Ba£_M•DeInôCÆlback
 = 
HAL_TIM_Ba£_M•DeInô
;

6051 
HAL_TIM_IC_MSPINIT_CB_ID
 :

6052 
htim
->
IC_M•InôCÆlback
 = 
HAL_TIM_IC_M•Inô
;

6055 
HAL_TIM_IC_MSPDEINIT_CB_ID
 :

6056 
htim
->
IC_M•DeInôCÆlback
 = 
HAL_TIM_IC_M•DeInô
;

6059 
HAL_TIM_OC_MSPINIT_CB_ID
 :

6060 
htim
->
OC_M•InôCÆlback
 = 
HAL_TIM_OC_M•Inô
;

6063 
HAL_TIM_OC_MSPDEINIT_CB_ID
 :

6064 
htim
->
OC_M•DeInôCÆlback
 = 
HAL_TIM_OC_M•DeInô
;

6067 
HAL_TIM_PWM_MSPINIT_CB_ID
 :

6068 
htim
->
PWM_M•InôCÆlback
 = 
HAL_TIM_PWM_M•Inô
;

6071 
HAL_TIM_PWM_MSPDEINIT_CB_ID
 :

6072 
htim
->
PWM_M•DeInôCÆlback
 = 
HAL_TIM_PWM_M•DeInô
;

6075 
HAL_TIM_ONE_PULSE_MSPINIT_CB_ID
 :

6076 
htim
->
O√Pul£_M•InôCÆlback
 = 
HAL_TIM_O√Pul£_M•Inô
;

6079 
HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID
 :

6080 
htim
->
O√Pul£_M•DeInôCÆlback
 = 
HAL_TIM_O√Pul£_M•DeInô
;

6083 
HAL_TIM_ENCODER_MSPINIT_CB_ID
 :

6084 
htim
->
Encodî_M•InôCÆlback
 = 
HAL_TIM_Encodî_M•Inô
;

6087 
HAL_TIM_ENCODER_MSPDEINIT_CB_ID
 :

6088 
htim
->
Encodî_M•DeInôCÆlback
 = 
HAL_TIM_Encodî_M•DeInô
;

6091 
HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID
 :

6092 
htim
->
HÆlSís‹_M•InôCÆlback
 = 
HAL_TIMEx_HÆlSís‹_M•Inô
;

6095 
HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID
 :

6096 
htim
->
HÆlSís‹_M•DeInôCÆlback
 = 
HAL_TIMEx_HÆlSís‹_M•DeInô
;

6101 
°©us
 = 
HAL_ERROR
;

6108 
°©us
 = 
HAL_ERROR
;

6112 
	`__HAL_UNLOCK
(
htim
);

6114  
°©us
;

6115 
	}
}

6142 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_Ba£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

6144  
htim
->
Sèã
;

6145 
	}
}

6152 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_OC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

6154  
htim
->
Sèã
;

6155 
	}
}

6162 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_PWM_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

6164  
htim
->
Sèã
;

6165 
	}
}

6172 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_IC_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

6174  
htim
->
Sèã
;

6175 
	}
}

6182 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_O√Pul£_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

6184  
htim
->
Sèã
;

6185 
	}
}

6192 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIM_Encodî_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

6194  
htim
->
Sèã
;

6195 
	}
}

6202 
HAL_TIM_A˘iveCh™√l
 
	$HAL_TIM_GëA˘iveCh™√l
(
TIM_H™dÀTy≥Def
 *
htim
)

6204  
htim
->
Ch™√l
;

6205 
	}
}

6220 
HAL_TIM_Ch™√lSèãTy≥Def
 
	$HAL_TIM_GëCh™√lSèã
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

6222 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_°©e
;

6225 
	`as£π_∑øm
(
	`IS_TIM_CCX_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

6227 
ch™√l_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
Ch™√l
);

6229  
ch™√l_°©e
;

6230 
	}
}

6237 
HAL_TIM_DMABur°SèãTy≥Def
 
	$HAL_TIM_DMABur°Sèã
(
TIM_H™dÀTy≥Def
 *
htim
)

6240 
	`as£π_∑øm
(
	`IS_TIM_DMABURST_INSTANCE
(
htim
->
In°™˚
));

6242  
htim
->
DMABur°Sèã
;

6243 
	}
}

6262 
	$TIM_DMAEº‹
(
DMA_H™dÀTy≥Def
 *
hdma
)

6264 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6266 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

6268 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6269 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6271 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

6273 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6274 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6276 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

6278 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6279 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6281 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

6283 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6284 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6288 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

6291 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6292 
htim
->
	`Eº‹CÆlback
(htim);

6294 
	`HAL_TIM_Eº‹CÆlback
(
htim
);

6297 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6298 
	}
}

6305 
	$TIM_DMADñayPul£C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6307 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6309 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

6311 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6313 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6315 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6318 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

6320 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6322 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6324 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6327 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

6329 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6331 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6333 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6336 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

6338 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6340 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6342 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6350 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6351 
htim
->
	`PWM_Pul£FöishedCÆlback
(htim);

6353 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

6356 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6357 
	}
}

6364 
	$TIM_DMADñayPul£HÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6366 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6368 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

6370 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6372 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

6374 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6376 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

6378 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6380 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

6382 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6389 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6390 
htim
->
	`PWM_Pul£FöishedHÆfC∂tCÆlback
(htim);

6392 
	`HAL_TIM_PWM_Pul£FöishedHÆfC∂tCÆlback
(
htim
);

6395 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6396 
	}
}

6403 
	$TIM_DMAC≠tuªC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6405 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6407 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

6409 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6411 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6413 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6414 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

6417 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

6419 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6421 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6423 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6424 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

6427 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

6429 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6431 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6433 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6434 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

6437 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

6439 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6441 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

6443 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6444 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

6452 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6453 
htim
->
	`IC_C≠tuªCÆlback
(htim);

6455 
	`HAL_TIM_IC_C≠tuªCÆlback
(
htim
);

6458 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6459 
	}
}

6466 
	$TIM_DMAC≠tuªHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6468 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6470 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

6472 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

6474 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

6476 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

6478 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

6480 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

6482 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

6484 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

6491 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6492 
htim
->
	`IC_C≠tuªHÆfC∂tCÆlback
(htim);

6494 
	`HAL_TIM_IC_C≠tuªHÆfC∂tCÆlback
(
htim
);

6497 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

6498 
	}
}

6505 
	$TIM_DMAPîiodEœp£dC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6507 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6509 i‡(
htim
->
hdma
[
TIM_DMA_ID_UPDATE
]->
Inô
.
Mode
 =
DMA_NORMAL
)

6511 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

6514 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6515 
htim
->
	`PîiodEœp£dCÆlback
(htim);

6517 
	`HAL_TIM_PîiodEœp£dCÆlback
(
htim
);

6519 
	}
}

6526 
	$TIM_DMAPîiodEœp£dHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6528 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6530 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6531 
htim
->
	`PîiodEœp£dHÆfC∂tCÆlback
(htim);

6533 
	`HAL_TIM_PîiodEœp£dHÆfC∂tCÆlback
(
htim
);

6535 
	}
}

6542 
	$TIM_DMATriggîC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6544 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6546 i‡(
htim
->
hdma
[
TIM_DMA_ID_TRIGGER
]->
Inô
.
Mode
 =
DMA_NORMAL
)

6548 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

6551 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6552 
htim
->
	`TriggîCÆlback
(htim);

6554 
	`HAL_TIM_TriggîCÆlback
(
htim
);

6556 
	}
}

6563 
	$TIM_DMATriggîHÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

6565 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

6567 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

6568 
htim
->
	`TriggîHÆfC∂tCÆlback
(htim);

6570 
	`HAL_TIM_TriggîHÆfC∂tCÆlback
(
htim
);

6572 
	}
}

6580 
	$TIM_Ba£_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_Ba£_InôTy≥Def
 *
Såu˘uª
)

6582 
uöt32_t
 
tmp¸1
;

6583 
tmp¸1
 = 
TIMx
->
CR1
;

6586 i‡(
	`IS_TIM_COUNTER_MODE_SELECT_INSTANCE
(
TIMx
))

6589 
tmp¸1
 &~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

6590 
tmp¸1
 |
Såu˘uª
->
Cou¡îMode
;

6593 i‡(
	`IS_TIM_CLOCK_DIVISION_INSTANCE
(
TIMx
))

6596 
tmp¸1
 &~
TIM_CR1_CKD
;

6597 
tmp¸1
 |(
uöt32_t
)
Såu˘uª
->
ClockDivisi⁄
;

6601 
	`MODIFY_REG
(
tmp¸1
, 
TIM_CR1_ARPE
, 
Såu˘uª
->
AutoRñﬂdPªlﬂd
);

6603 
TIMx
->
CR1
 = 
tmp¸1
;

6606 
TIMx
->
ARR
 = (
uöt32_t
)
Såu˘uª
->
Pîiod
 ;

6609 
TIMx
->
PSC
 = 
Såu˘uª
->
PªsˇÀr
;

6611 i‡(
	`IS_TIM_REPETITION_COUNTER_INSTANCE
(
TIMx
))

6614 
TIMx
->
RCR
 = 
Såu˘uª
->
Rïëôi⁄Cou¡î
;

6619 
TIMx
->
EGR
 = 
TIM_EGR_UG
;

6620 
	}
}

6628 
	$TIM_OC1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

6630 
uöt32_t
 
tmpccmrx
;

6631 
uöt32_t
 
tmpc˚r
;

6632 
uöt32_t
 
tmp¸2
;

6635 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

6638 
tmpc˚r
 = 
TIMx
->
CCER
;

6640 
tmp¸2
 = 
TIMx
->
CR2
;

6643 
tmpccmrx
 = 
TIMx
->
CCMR1
;

6646 
tmpccmrx
 &~
TIM_CCMR1_OC1M
;

6647 
tmpccmrx
 &~
TIM_CCMR1_CC1S
;

6649 
tmpccmrx
 |
OC_C⁄fig
->
OCMode
;

6652 
tmpc˚r
 &~
TIM_CCER_CC1P
;

6654 
tmpc˚r
 |
OC_C⁄fig
->
OCPﬁ¨ôy
;

6656 i‡(
	`IS_TIM_CCXN_INSTANCE
(
TIMx
, 
TIM_CHANNEL_1
))

6659 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
OC_C⁄fig
->
OCNPﬁ¨ôy
));

6662 
tmpc˚r
 &~
TIM_CCER_CC1NP
;

6664 
tmpc˚r
 |
OC_C⁄fig
->
OCNPﬁ¨ôy
;

6666 
tmpc˚r
 &~
TIM_CCER_CC1NE
;

6669 i‡(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6672 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C⁄fig
->
OCNIdÀSèã
));

6673 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
OC_C⁄fig
->
OCIdÀSèã
));

6676 
tmp¸2
 &~
TIM_CR2_OIS1
;

6677 
tmp¸2
 &~
TIM_CR2_OIS1N
;

6679 
tmp¸2
 |
OC_C⁄fig
->
OCIdÀSèã
;

6681 
tmp¸2
 |
OC_C⁄fig
->
OCNIdÀSèã
;

6685 
TIMx
->
CR2
 = 
tmp¸2
;

6688 
TIMx
->
CCMR1
 = 
tmpccmrx
;

6691 
TIMx
->
CCR1
 = 
OC_C⁄fig
->
Pul£
;

6694 
TIMx
->
CCER
 = 
tmpc˚r
;

6695 
	}
}

6703 
	$TIM_OC2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

6705 
uöt32_t
 
tmpccmrx
;

6706 
uöt32_t
 
tmpc˚r
;

6707 
uöt32_t
 
tmp¸2
;

6710 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

6713 
tmpc˚r
 = 
TIMx
->
CCER
;

6715 
tmp¸2
 = 
TIMx
->
CR2
;

6718 
tmpccmrx
 = 
TIMx
->
CCMR1
;

6721 
tmpccmrx
 &~
TIM_CCMR1_OC2M
;

6722 
tmpccmrx
 &~
TIM_CCMR1_CC2S
;

6725 
tmpccmrx
 |(
OC_C⁄fig
->
OCMode
 << 8U);

6728 
tmpc˚r
 &~
TIM_CCER_CC2P
;

6730 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 4U);

6732 i‡(
	`IS_TIM_CCXN_INSTANCE
(
TIMx
, 
TIM_CHANNEL_2
))

6734 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
OC_C⁄fig
->
OCNPﬁ¨ôy
));

6737 
tmpc˚r
 &~
TIM_CCER_CC2NP
;

6739 
tmpc˚r
 |(
OC_C⁄fig
->
OCNPﬁ¨ôy
 << 4U);

6741 
tmpc˚r
 &~
TIM_CCER_CC2NE
;

6745 i‡(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6748 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C⁄fig
->
OCNIdÀSèã
));

6749 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
OC_C⁄fig
->
OCIdÀSèã
));

6752 
tmp¸2
 &~
TIM_CR2_OIS2
;

6753 
tmp¸2
 &~
TIM_CR2_OIS2N
;

6755 
tmp¸2
 |(
OC_C⁄fig
->
OCIdÀSèã
 << 2U);

6757 
tmp¸2
 |(
OC_C⁄fig
->
OCNIdÀSèã
 << 2U);

6761 
TIMx
->
CR2
 = 
tmp¸2
;

6764 
TIMx
->
CCMR1
 = 
tmpccmrx
;

6767 
TIMx
->
CCR2
 = 
OC_C⁄fig
->
Pul£
;

6770 
TIMx
->
CCER
 = 
tmpc˚r
;

6771 
	}
}

6779 
	$TIM_OC3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

6781 
uöt32_t
 
tmpccmrx
;

6782 
uöt32_t
 
tmpc˚r
;

6783 
uöt32_t
 
tmp¸2
;

6786 
TIMx
->
CCER
 &~
TIM_CCER_CC3E
;

6789 
tmpc˚r
 = 
TIMx
->
CCER
;

6791 
tmp¸2
 = 
TIMx
->
CR2
;

6794 
tmpccmrx
 = 
TIMx
->
CCMR2
;

6797 
tmpccmrx
 &~
TIM_CCMR2_OC3M
;

6798 
tmpccmrx
 &~
TIM_CCMR2_CC3S
;

6800 
tmpccmrx
 |
OC_C⁄fig
->
OCMode
;

6803 
tmpc˚r
 &~
TIM_CCER_CC3P
;

6805 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 8U);

6807 i‡(
	`IS_TIM_CCXN_INSTANCE
(
TIMx
, 
TIM_CHANNEL_3
))

6809 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
OC_C⁄fig
->
OCNPﬁ¨ôy
));

6812 
tmpc˚r
 &~
TIM_CCER_CC3NP
;

6814 
tmpc˚r
 |(
OC_C⁄fig
->
OCNPﬁ¨ôy
 << 8U);

6816 
tmpc˚r
 &~
TIM_CCER_CC3NE
;

6819 i‡(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6822 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
OC_C⁄fig
->
OCNIdÀSèã
));

6823 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
OC_C⁄fig
->
OCIdÀSèã
));

6826 
tmp¸2
 &~
TIM_CR2_OIS3
;

6827 
tmp¸2
 &~
TIM_CR2_OIS3N
;

6829 
tmp¸2
 |(
OC_C⁄fig
->
OCIdÀSèã
 << 4U);

6831 
tmp¸2
 |(
OC_C⁄fig
->
OCNIdÀSèã
 << 4U);

6835 
TIMx
->
CR2
 = 
tmp¸2
;

6838 
TIMx
->
CCMR2
 = 
tmpccmrx
;

6841 
TIMx
->
CCR3
 = 
OC_C⁄fig
->
Pul£
;

6844 
TIMx
->
CCER
 = 
tmpc˚r
;

6845 
	}
}

6853 
	$TIM_OC4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
TIM_OC_InôTy≥Def
 *
OC_C⁄fig
)

6855 
uöt32_t
 
tmpccmrx
;

6856 
uöt32_t
 
tmpc˚r
;

6857 
uöt32_t
 
tmp¸2
;

6860 
TIMx
->
CCER
 &~
TIM_CCER_CC4E
;

6863 
tmpc˚r
 = 
TIMx
->
CCER
;

6865 
tmp¸2
 = 
TIMx
->
CR2
;

6868 
tmpccmrx
 = 
TIMx
->
CCMR2
;

6871 
tmpccmrx
 &~
TIM_CCMR2_OC4M
;

6872 
tmpccmrx
 &~
TIM_CCMR2_CC4S
;

6875 
tmpccmrx
 |(
OC_C⁄fig
->
OCMode
 << 8U);

6878 
tmpc˚r
 &~
TIM_CCER_CC4P
;

6880 
tmpc˚r
 |(
OC_C⁄fig
->
OCPﬁ¨ôy
 << 12U);

6882 i‡(
	`IS_TIM_BREAK_INSTANCE
(
TIMx
))

6885 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
OC_C⁄fig
->
OCIdÀSèã
));

6888 
tmp¸2
 &~
TIM_CR2_OIS4
;

6891 
tmp¸2
 |(
OC_C⁄fig
->
OCIdÀSèã
 << 6U);

6895 
TIMx
->
CR2
 = 
tmp¸2
;

6898 
TIMx
->
CCMR2
 = 
tmpccmrx
;

6901 
TIMx
->
CCR4
 = 
OC_C⁄fig
->
Pul£
;

6904 
TIMx
->
CCER
 = 
tmpc˚r
;

6905 
	}
}

6913 
HAL_SètusTy≥Def
 
	$TIM_SœveTimî_SëC⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
,

6914 
TIM_SœveC⁄figTy≥Def
 *
sSœveC⁄fig
)

6916 
uöt32_t
 
tmpsm¸
;

6917 
uöt32_t
 
tmpccmr1
;

6918 
uöt32_t
 
tmpc˚r
;

6921 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

6924 
tmpsm¸
 &~
TIM_SMCR_TS
;

6926 
tmpsm¸
 |
sSœveC⁄fig
->
I≈utTriggî
;

6929 
tmpsm¸
 &~
TIM_SMCR_SMS
;

6931 
tmpsm¸
 |
sSœveC⁄fig
->
SœveMode
;

6934 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

6937 
sSœveC⁄fig
->
I≈utTriggî
)

6939 
TIM_TS_ETRF
:

6942 
	`as£π_∑øm
(
	`IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE
(
htim
->
In°™˚
));

6943 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPRESCALER
(
sSœveC⁄fig
->
TriggîPªsˇÀr
));

6944 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

6945 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

6947 
	`TIM_ETR_SëC⁄fig
(
htim
->
In°™˚
,

6948 
sSœveC⁄fig
->
TriggîPªsˇÀr
,

6949 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

6950 
sSœveC⁄fig
->
TriggîFûãr
);

6954 
TIM_TS_TI1F_ED
:

6957 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

6958 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

6960 i‡(
sSœveC⁄fig
->
SœveMode
 =
TIM_SLAVEMODE_GATED
)

6962  
HAL_ERROR
;

6966 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

6967 
htim
->
In°™˚
->
CCER
 &~
TIM_CCER_CC1E
;

6968 
tmpccmr1
 = 
htim
->
In°™˚
->
CCMR1
;

6971 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

6972 
tmpccmr1
 |((
sSœveC⁄fig
->
TriggîFûãr
) << 4U);

6975 
htim
->
In°™˚
->
CCMR1
 = 
tmpccmr1
;

6976 
htim
->
In°™˚
->
CCER
 = 
tmpc˚r
;

6980 
TIM_TS_TI1FP1
:

6983 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
htim
->
In°™˚
));

6984 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

6985 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

6988 
	`TIM_TI1_C⁄figI≈utSège
(
htim
->
In°™˚
,

6989 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

6990 
sSœveC⁄fig
->
TriggîFûãr
);

6994 
TIM_TS_TI2FP2
:

6997 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

6998 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERPOLARITY
(
sSœveC⁄fig
->
TriggîPﬁ¨ôy
));

6999 
	`as£π_∑øm
(
	`IS_TIM_TRIGGERFILTER
(
sSœveC⁄fig
->
TriggîFûãr
));

7002 
	`TIM_TI2_C⁄figI≈utSège
(
htim
->
In°™˚
,

7003 
sSœveC⁄fig
->
TriggîPﬁ¨ôy
,

7004 
sSœveC⁄fig
->
TriggîFûãr
);

7008 
TIM_TS_ITR0
:

7009 
TIM_TS_ITR1
:

7010 
TIM_TS_ITR2
:

7011 
TIM_TS_ITR3
:

7014 
	`as£π_∑øm
(
	`IS_TIM_CC2_INSTANCE
(
htim
->
In°™˚
));

7021  
HAL_OK
;

7022 
	}
}

7044 
	$TIM_TI1_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

7045 
uöt32_t
 
TIM_ICFûãr
)

7047 
uöt32_t
 
tmpccmr1
;

7048 
uöt32_t
 
tmpc˚r
;

7051 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

7052 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7053 
tmpc˚r
 = 
TIMx
->
CCER
;

7056 i‡(
	`IS_TIM_CC2_INSTANCE
(
TIMx
Ë!
RESET
)

7058 
tmpccmr1
 &~
TIM_CCMR1_CC1S
;

7059 
tmpccmr1
 |
TIM_ICSñe˘i⁄
;

7063 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
;

7067 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

7068 
tmpccmr1
 |((
TIM_ICFûãr
 << 4UË& 
TIM_CCMR1_IC1F
);

7071 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

7072 
tmpc˚r
 |(
TIM_ICPﬁ¨ôy
 & (
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
));

7075 
TIMx
->
CCMR1
 = 
tmpccmr1
;

7076 
TIMx
->
CCER
 = 
tmpc˚r
;

7077 
	}
}

7091 
	$TIM_TI1_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
)

7093 
uöt32_t
 
tmpccmr1
;

7094 
uöt32_t
 
tmpc˚r
;

7097 
tmpc˚r
 = 
TIMx
->
CCER
;

7098 
TIMx
->
CCER
 &~
TIM_CCER_CC1E
;

7099 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7102 
tmpccmr1
 &~
TIM_CCMR1_IC1F
;

7103 
tmpccmr1
 |(
TIM_ICFûãr
 << 4U);

7106 
tmpc˚r
 &~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

7107 
tmpc˚r
 |
TIM_ICPﬁ¨ôy
;

7110 
TIMx
->
CCMR1
 = 
tmpccmr1
;

7111 
TIMx
->
CCER
 = 
tmpc˚r
;

7112 
	}
}

7134 
	$TIM_TI2_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

7135 
uöt32_t
 
TIM_ICFûãr
)

7137 
uöt32_t
 
tmpccmr1
;

7138 
uöt32_t
 
tmpc˚r
;

7141 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

7142 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7143 
tmpc˚r
 = 
TIMx
->
CCER
;

7146 
tmpccmr1
 &~
TIM_CCMR1_CC2S
;

7147 
tmpccmr1
 |(
TIM_ICSñe˘i⁄
 << 8U);

7150 
tmpccmr1
 &~
TIM_CCMR1_IC2F
;

7151 
tmpccmr1
 |((
TIM_ICFûãr
 << 12UË& 
TIM_CCMR1_IC2F
);

7154 
tmpc˚r
 &~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

7155 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 4UË& (
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
));

7158 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

7159 
TIMx
->
CCER
 = 
tmpc˚r
;

7160 
	}
}

7174 
	$TIM_TI2_C⁄figI≈utSège
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICFûãr
)

7176 
uöt32_t
 
tmpccmr1
;

7177 
uöt32_t
 
tmpc˚r
;

7180 
TIMx
->
CCER
 &~
TIM_CCER_CC2E
;

7181 
tmpccmr1
 = 
TIMx
->
CCMR1
;

7182 
tmpc˚r
 = 
TIMx
->
CCER
;

7185 
tmpccmr1
 &~
TIM_CCMR1_IC2F
;

7186 
tmpccmr1
 |(
TIM_ICFûãr
 << 12U);

7189 
tmpc˚r
 &~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

7190 
tmpc˚r
 |(
TIM_ICPﬁ¨ôy
 << 4U);

7193 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

7194 
TIMx
->
CCER
 = 
tmpc˚r
;

7195 
	}
}

7216 
	$TIM_TI3_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

7217 
uöt32_t
 
TIM_ICFûãr
)

7219 
uöt32_t
 
tmpccmr2
;

7220 
uöt32_t
 
tmpc˚r
;

7223 
TIMx
->
CCER
 &~
TIM_CCER_CC3E
;

7224 
tmpccmr2
 = 
TIMx
->
CCMR2
;

7225 
tmpc˚r
 = 
TIMx
->
CCER
;

7228 
tmpccmr2
 &~
TIM_CCMR2_CC3S
;

7229 
tmpccmr2
 |
TIM_ICSñe˘i⁄
;

7232 
tmpccmr2
 &~
TIM_CCMR2_IC3F
;

7233 
tmpccmr2
 |((
TIM_ICFûãr
 << 4UË& 
TIM_CCMR2_IC3F
);

7236 
tmpc˚r
 &~(
TIM_CCER_CC3P
);

7237 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 8UË& 
TIM_CCER_CC3P
);

7240 
TIMx
->
CCMR2
 = 
tmpccmr2
;

7241 
TIMx
->
CCER
 = 
tmpc˚r
;

7242 
	}
}

7263 
	$TIM_TI4_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ICPﬁ¨ôy
, uöt32_à
TIM_ICSñe˘i⁄
,

7264 
uöt32_t
 
TIM_ICFûãr
)

7266 
uöt32_t
 
tmpccmr2
;

7267 
uöt32_t
 
tmpc˚r
;

7270 
TIMx
->
CCER
 &~
TIM_CCER_CC4E
;

7271 
tmpccmr2
 = 
TIMx
->
CCMR2
;

7272 
tmpc˚r
 = 
TIMx
->
CCER
;

7275 
tmpccmr2
 &~
TIM_CCMR2_CC4S
;

7276 
tmpccmr2
 |(
TIM_ICSñe˘i⁄
 << 8U);

7279 
tmpccmr2
 &~
TIM_CCMR2_IC4F
;

7280 
tmpccmr2
 |((
TIM_ICFûãr
 << 12UË& 
TIM_CCMR2_IC4F
);

7283 
tmpc˚r
 &~(
TIM_CCER_CC4P
);

7284 
tmpc˚r
 |((
TIM_ICPﬁ¨ôy
 << 12UË& 
TIM_CCER_CC4P
);

7287 
TIMx
->
CCMR2
 = 
tmpccmr2
;

7288 
TIMx
->
CCER
 = 
tmpc˚r
 ;

7289 
	}
}

7306 
	$TIM_ITRx_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
I≈utTriggîSour˚
)

7308 
uöt32_t
 
tmpsm¸
;

7311 
tmpsm¸
 = 
TIMx
->
SMCR
;

7313 
tmpsm¸
 &~
TIM_SMCR_TS
;

7315 
tmpsm¸
 |(
I≈utTriggîSour˚
 | 
TIM_SLAVEMODE_EXTERNAL1
);

7317 
TIMx
->
SMCR
 = 
tmpsm¸
;

7318 
	}
}

7336 
	$TIM_ETR_SëC⁄fig
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
TIM_ExtTRGPªsˇÀr
,

7337 
uöt32_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt32_à
ExtTRGFûãr
)

7339 
uöt32_t
 
tmpsm¸
;

7341 
tmpsm¸
 = 
TIMx
->
SMCR
;

7344 
tmpsm¸
 &~(
TIM_SMCR_ETF
 | 
TIM_SMCR_ETPS
 | 
TIM_SMCR_ECE
 | 
TIM_SMCR_ETP
);

7347 
tmpsm¸
 |(
uöt32_t
)(
TIM_ExtTRGPªsˇÀr
 | (
TIM_ExtTRGPﬁ¨ôy
 | (
ExtTRGFûãr
 << 8U)));

7350 
TIMx
->
SMCR
 = 
tmpsm¸
;

7351 
	}
}

7366 
	$TIM_CCxCh™√lCmd
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lSèã
)

7368 
uöt32_t
 
tmp
;

7371 
	`as£π_∑øm
(
	`IS_TIM_CC1_INSTANCE
(
TIMx
));

7372 
	`as£π_∑øm
(
	`IS_TIM_CHANNELS
(
Ch™√l
));

7374 
tmp
 = 
TIM_CCER_CC1E
 << (
Ch™√l
 & 0x1FU);

7377 
TIMx
->
CCER
 &~
tmp
;

7380 
TIMx
->
CCER
 |(
uöt32_t
)(
Ch™√lSèã
 << (
Ch™√l
 & 0x1FU));

7381 
	}
}

7383 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

7390 
	$TIM_Re£tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

7393 
htim
->
PîiodEœp£dCÆlback
 = 
HAL_TIM_PîiodEœp£dCÆlback
;

7394 
htim
->
PîiodEœp£dHÆfC∂tCÆlback
 = 
HAL_TIM_PîiodEœp£dHÆfC∂tCÆlback
;

7395 
htim
->
TriggîCÆlback
 = 
HAL_TIM_TriggîCÆlback
;

7396 
htim
->
TriggîHÆfC∂tCÆlback
 = 
HAL_TIM_TriggîHÆfC∂tCÆlback
;

7397 
htim
->
IC_C≠tuªCÆlback
 = 
HAL_TIM_IC_C≠tuªCÆlback
;

7398 
htim
->
IC_C≠tuªHÆfC∂tCÆlback
 = 
HAL_TIM_IC_C≠tuªHÆfC∂tCÆlback
;

7399 
htim
->
OC_DñayEœp£dCÆlback
 = 
HAL_TIM_OC_DñayEœp£dCÆlback
;

7400 
htim
->
PWM_Pul£FöishedCÆlback
 = 
HAL_TIM_PWM_Pul£FöishedCÆlback
;

7401 
htim
->
PWM_Pul£FöishedHÆfC∂tCÆlback
 = 
HAL_TIM_PWM_Pul£FöishedHÆfC∂tCÆlback
;

7402 
htim
->
Eº‹CÆlback
 = 
HAL_TIM_Eº‹CÆlback
;

7403 
htim
->
Commuèti⁄CÆlback
 = 
HAL_TIMEx_CommutCÆlback
;

7404 
htim
->
Commuèti⁄HÆfC∂tCÆlback
 = 
HAL_TIMEx_CommutHÆfC∂tCÆlback
;

7405 
htim
->
BªakCÆlback
 = 
HAL_TIMEx_BªakCÆlback
;

7406 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim_ex.c

78 
	~"°m32f1xx_hÆ.h
"

89 #ifde‡
HAL_TIM_MODULE_ENABLED


96 
TIM_DMADñayPul£NC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
);

97 
TIM_DMAEº‹CCxN
(
DMA_H™dÀTy≥Def
 *
hdma
);

98 
TIM_CCxNCh™√lCmd
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lNSèã
);

135 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Inô
(
TIM_H™dÀTy≥Def
 *
htim
, 
TIM_HÆlSís‹_InôTy≥Def
 *
sC⁄fig
)

137 
TIM_OC_InôTy≥Def
 
OC_C⁄fig
;

140 i‡(
htim
 =
NULL
)

142  
HAL_ERROR
;

146 
	`as£π_∑øm
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

147 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
htim
->
Inô
.
Cou¡îMode
));

148 
	`as£π_∑øm
(
	`IS_TIM_CLOCKDIVISION_DIV
(
htim
->
Inô
.
ClockDivisi⁄
));

149 
	`as£π_∑øm
(
	`IS_TIM_AUTORELOAD_PRELOAD
(
htim
->
Inô
.
AutoRñﬂdPªlﬂd
));

150 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
sC⁄fig
->
IC1Pﬁ¨ôy
));

151 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
sC⁄fig
->
IC1PªsˇÀr
));

152 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
sC⁄fig
->
IC1Fûãr
));

154 i‡(
htim
->
Sèã
 =
HAL_TIM_STATE_RESET
)

157 
htim
->
Lock
 = 
HAL_UNLOCKED
;

159 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

161 
	`TIM_Re£tCÆlback
(
htim
);

163 i‡(
htim
->
HÆlSís‹_M•InôCÆlback
 =
NULL
)

165 
htim
->
HÆlSís‹_M•InôCÆlback
 = 
HAL_TIMEx_HÆlSís‹_M•Inô
;

168 
htim
->
	`HÆlSís‹_M•InôCÆlback
(htim);

171 
	`HAL_TIMEx_HÆlSís‹_M•Inô
(
htim
);

176 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

179 
	`TIM_Ba£_SëC⁄fig
(
htim
->
In°™˚
, &htim->
Inô
);

182 
	`TIM_TI1_SëC⁄fig
(
htim
->
In°™˚
, 
sC⁄fig
->
IC1Pﬁ¨ôy
, 
TIM_ICSELECTION_TRC
, sC⁄fig->
IC1Fûãr
);

185 
htim
->
In°™˚
->
CCMR1
 &~
TIM_CCMR1_IC1PSC
;

187 
htim
->
In°™˚
->
CCMR1
 |
sC⁄fig
->
IC1PªsˇÀr
;

190 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_TI1S
;

193 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

194 
htim
->
In°™˚
->
SMCR
 |
TIM_TS_TI1F_ED
;

197 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_SMS
;

198 
htim
->
In°™˚
->
SMCR
 |
TIM_SLAVEMODE_RESET
;

201 
OC_C⁄fig
.
OCFa°Mode
 = 
TIM_OCFAST_DISABLE
;

202 
OC_C⁄fig
.
OCIdÀSèã
 = 
TIM_OCIDLESTATE_RESET
;

203 
OC_C⁄fig
.
OCMode
 = 
TIM_OCMODE_PWM2
;

204 
OC_C⁄fig
.
OCNIdÀSèã
 = 
TIM_OCNIDLESTATE_RESET
;

205 
OC_C⁄fig
.
OCNPﬁ¨ôy
 = 
TIM_OCNPOLARITY_HIGH
;

206 
OC_C⁄fig
.
OCPﬁ¨ôy
 = 
TIM_OCPOLARITY_HIGH
;

207 
OC_C⁄fig
.
Pul£
 = 
sC⁄fig
->
Commuèti⁄_Dñay
;

209 
	`TIM_OC2_SëC⁄fig
(
htim
->
In°™˚
, &
OC_C⁄fig
);

213 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_MMS
;

214 
htim
->
In°™˚
->
CR2
 |
TIM_TRGO_OC2REF
;

217 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_READY
;

220 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

221 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

222 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

223 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

226 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

228  
HAL_OK
;

229 
	}
}

236 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

239 
	`as£π_∑øm
(
	`IS_TIM_INSTANCE
(
htim
->
In°™˚
));

241 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

244 
	`__HAL_TIM_DISABLE
(
htim
);

246 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

247 i‡(
htim
->
HÆlSís‹_M•DeInôCÆlback
 =
NULL
)

249 
htim
->
HÆlSís‹_M•DeInôCÆlback
 = 
HAL_TIMEx_HÆlSís‹_M•DeInô
;

252 
htim
->
	`HÆlSís‹_M•DeInôCÆlback
(htim);

255 
	`HAL_TIMEx_HÆlSís‹_M•DeInô
(
htim
);

259 
htim
->
DMABur°Sèã
 = 
HAL_DMA_BURST_STATE_RESET
;

262 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

263 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

264 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_RESET
);

265 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_RESET
);

268 
htim
->
Sèã
 = 
HAL_TIM_STATE_RESET
;

271 
	`__HAL_UNLOCK
(
htim
);

273  
HAL_OK
;

274 
	}
}

281 
__wók
 
	$HAL_TIMEx_HÆlSís‹_M•Inô
(
TIM_H™dÀTy≥Def
 *
htim
)

284 
	`UNUSED
(
htim
);

289 
	}
}

296 
__wók
 
	$HAL_TIMEx_HÆlSís‹_M•DeInô
(
TIM_H™dÀTy≥Def
 *
htim
)

299 
	`UNUSED
(
htim
);

304 
	}
}

311 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
)

313 
uöt32_t
 
tmpsm¸
;

314 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

315 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_2_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

316 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

317 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_2_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

320 
	`as£π_∑øm
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

323 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

324 || (
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

325 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

326 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

328  
HAL_ERROR
;

332 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

333 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

334 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

335 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

339 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

342 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

344 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

345 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

347 
	`__HAL_TIM_ENABLE
(
htim
);

352 
	`__HAL_TIM_ENABLE
(
htim
);

356  
HAL_OK
;

357 
	}
}

364 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_St›
(
TIM_H™dÀTy≥Def
 *
htim
)

367 
	`as£π_∑øm
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

371 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

374 
	`__HAL_TIM_DISABLE
(
htim
);

377 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

378 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

379 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

380 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

383  
HAL_OK
;

384 
	}
}

391 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

393 
uöt32_t
 
tmpsm¸
;

394 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

395 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_2_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

396 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

397 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_2_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_2
);

400 
	`as£π_∑øm
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

403 i‡((
ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

404 || (
ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

405 || (
com∂emíèry_ch™√l_1_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

406 || (
com∂emíèry_ch™√l_2_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

408  
HAL_ERROR
;

412 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

413 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

414 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

415 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

418 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

422 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

425 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

427 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

428 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

430 
	`__HAL_TIM_ENABLE
(
htim
);

435 
	`__HAL_TIM_ENABLE
(
htim
);

439  
HAL_OK
;

440 
	}
}

447 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
)

450 
	`as£π_∑øm
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

454 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

457 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

460 
	`__HAL_TIM_DISABLE
(
htim
);

463 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

464 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

465 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

466 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

469  
HAL_OK
;

470 
	}
}

479 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 *
pD©a
, 
uöt16_t
 
Lígth
)

481 
uöt32_t
 
tmpsm¸
;

482 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_1_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

483 
HAL_TIM_Ch™√lSèãTy≥Def
 
com∂emíèry_ch™√l_1_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
TIM_CHANNEL_1
);

486 
	`as£π_∑øm
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

489 i‡((
ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
)

490 || (
com∂emíèry_ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_BUSY
))

492  
HAL_BUSY
;

494 i‡((
ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
)

495 && (
com∂emíèry_ch™√l_1_°©e
 =
HAL_TIM_CHANNEL_STATE_READY
))

497 i‡((
pD©a
 =
NULL
Ë&& (
Lígth
 > 0U))

499  
HAL_ERROR
;

503 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

504 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

509  
HAL_ERROR
;

514 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_ENABLE
);

517 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMAC≠tuªC∂t
;

518 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMAC≠tuªHÆfC∂t
;

520 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
 ;

523 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)&htim->
In°™˚
->
CCR1
, (uöt32_t)
pD©a
, 
Lígth
Ë!
HAL_OK
)

526  
HAL_ERROR
;

529 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

532 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

534 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

535 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

537 
	`__HAL_TIM_ENABLE
(
htim
);

542 
	`__HAL_TIM_ENABLE
(
htim
);

546  
HAL_OK
;

547 
	}
}

554 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
)

557 
	`as£π_∑øm
(
	`IS_TIM_HALL_SENSOR_INTERFACE_INSTANCE
(
htim
->
In°™˚
));

561 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
TIM_CHANNEL_1
, 
TIM_CCx_DISABLE
);

565 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

567 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

570 
	`__HAL_TIM_DISABLE
(
htim
);

573 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

574 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

577  
HAL_OK
;

578 
	}
}

615 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

617 
uöt32_t
 
tmpsm¸
;

620 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

623 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

625  
HAL_ERROR
;

629 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

632 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

635 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

638 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

640 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

641 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

643 
	`__HAL_TIM_ENABLE
(
htim
);

648 
	`__HAL_TIM_ENABLE
(
htim
);

652  
HAL_OK
;

653 
	}
}

666 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

669 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

672 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

675 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

678 
	`__HAL_TIM_DISABLE
(
htim
);

681 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

684  
HAL_OK
;

685 
	}
}

698 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

700 
uöt32_t
 
tmpsm¸
;

703 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

706 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

708  
HAL_ERROR
;

712 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

714 
Ch™√l
)

716 
TIM_CHANNEL_1
:

719 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

723 
TIM_CHANNEL_2
:

726 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

730 
TIM_CHANNEL_3
:

733 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

743 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_BREAK
);

746 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

749 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

752 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

754 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

755 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

757 
	`__HAL_TIM_ENABLE
(
htim
);

762 
	`__HAL_TIM_ENABLE
(
htim
);

766  
HAL_OK
;

767 
	}
}

780 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

782 
uöt32_t
 
tmpc˚r
;

784 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

786 
Ch™√l
)

788 
TIM_CHANNEL_1
:

791 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

795 
TIM_CHANNEL_2
:

798 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

802 
TIM_CHANNEL_3
:

805 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

814 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

817 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

818 i‡((
tmpc˚r
 & (
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
)Ë=(
uöt32_t
)
RESET
)

820 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_BREAK
);

824 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

827 
	`__HAL_TIM_DISABLE
(
htim
);

830 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

833  
HAL_OK
;

834 
	}
}

849 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

851 
uöt32_t
 
tmpsm¸
;

854 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

857 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_BUSY
)

859  
HAL_BUSY
;

861 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_READY
)

863 i‡((
pD©a
 =
NULL
Ë&& (
Lígth
 > 0U))

865  
HAL_ERROR
;

869 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

874  
HAL_ERROR
;

877 
Ch™√l
)

879 
TIM_CHANNEL_1
:

882 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£NC∂t
;

883 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

886 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹CCxN
 ;

889 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
Ë!
HAL_OK
)

892  
HAL_ERROR
;

895 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

899 
TIM_CHANNEL_2
:

902 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£NC∂t
;

903 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

906 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹CCxN
 ;

909 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
Ë!
HAL_OK
)

912  
HAL_ERROR
;

915 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

919 
TIM_CHANNEL_3
:

922 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£NC∂t
;

923 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

926 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹CCxN
 ;

929 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
, 
Lígth
Ë!
HAL_OK
)

932  
HAL_ERROR
;

935 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

944 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

947 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

950 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

952 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

953 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

955 
	`__HAL_TIM_ENABLE
(
htim
);

960 
	`__HAL_TIM_ENABLE
(
htim
);

964  
HAL_OK
;

965 
	}
}

978 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_OCN_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

981 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

983 
Ch™√l
)

985 
TIM_CHANNEL_1
:

988 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

989 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

993 
TIM_CHANNEL_2
:

996 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

997 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1001 
TIM_CHANNEL_3
:

1004 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1005 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1014 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

1017 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1020 
	`__HAL_TIM_DISABLE
(
htim
);

1023 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1026  
HAL_OK
;

1027 
	}
}

1073 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1075 
uöt32_t
 
tmpsm¸
;

1078 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1081 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

1083  
HAL_ERROR
;

1087 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1090 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

1093 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1096 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1098 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

1099 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

1101 
	`__HAL_TIM_ENABLE
(
htim
);

1106 
	`__HAL_TIM_ENABLE
(
htim
);

1110  
HAL_OK
;

1111 
	}
}

1123 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1126 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1129 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

1132 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1135 
	`__HAL_TIM_DISABLE
(
htim
);

1138 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1141  
HAL_OK
;

1142 
	}
}

1155 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1157 
uöt32_t
 
tmpsm¸
;

1160 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1163 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë!
HAL_TIM_CHANNEL_STATE_READY
)

1165  
HAL_ERROR
;

1169 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1171 
Ch™√l
)

1173 
TIM_CHANNEL_1
:

1176 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1180 
TIM_CHANNEL_2
:

1183 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1187 
TIM_CHANNEL_3
:

1190 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC3
);

1199 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_BREAK
);

1202 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

1205 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1208 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1210 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

1211 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

1213 
	`__HAL_TIM_ENABLE
(
htim
);

1218 
	`__HAL_TIM_ENABLE
(
htim
);

1222  
HAL_OK
;

1223 
	}
}

1236 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1238 
uöt32_t
 
tmpc˚r
;

1241 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1243 
Ch™√l
)

1245 
TIM_CHANNEL_1
:

1248 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1252 
TIM_CHANNEL_2
:

1255 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1259 
TIM_CHANNEL_3
:

1262 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC3
);

1271 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

1274 
tmpc˚r
 = 
htim
->
In°™˚
->
CCER
;

1275 i‡((
tmpc˚r
 & (
TIM_CCER_CC1NE
 | 
TIM_CCER_CC2NE
 | 
TIM_CCER_CC3NE
)Ë=(
uöt32_t
)
RESET
)

1277 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_BREAK
);

1281 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1284 
	`__HAL_TIM_DISABLE
(
htim
);

1287 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1290  
HAL_OK
;

1291 
	}
}

1306 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_Sèπ_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
, uöt32_à*
pD©a
, 
uöt16_t
 
Lígth
)

1308 
uöt32_t
 
tmpsm¸
;

1311 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1314 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_BUSY
)

1316  
HAL_BUSY
;

1318 i‡(
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√l
Ë=
HAL_TIM_CHANNEL_STATE_READY
)

1320 i‡((
pD©a
 =
NULL
Ë&& (
Lígth
 > 0U))

1322  
HAL_ERROR
;

1326 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1331  
HAL_ERROR
;

1334 
Ch™√l
)

1336 
TIM_CHANNEL_1
:

1339 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£NC∂t
;

1340 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1343 
htim
->
hdma
[
TIM_DMA_ID_CC1
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹CCxN
 ;

1346 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR1
, 
Lígth
Ë!
HAL_OK
)

1349  
HAL_ERROR
;

1352 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1356 
TIM_CHANNEL_2
:

1359 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£NC∂t
;

1360 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1363 
htim
->
hdma
[
TIM_DMA_ID_CC2
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹CCxN
 ;

1366 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR2
, 
Lígth
Ë!
HAL_OK
)

1369  
HAL_ERROR
;

1372 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1376 
TIM_CHANNEL_3
:

1379 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rC∂tCÆlback
 = 
TIM_DMADñayPul£NC∂t
;

1380 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rHÆfC∂tCÆlback
 = 
TIM_DMADñayPul£HÆfC∂t
;

1383 
htim
->
hdma
[
TIM_DMA_ID_CC3
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹CCxN
 ;

1386 i‡(
	`HAL_DMA_Sèπ_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
], (
uöt32_t
)
pD©a
, (uöt32_t)&htim->
In°™˚
->
CCR3
, 
Lígth
Ë!
HAL_OK
)

1389  
HAL_ERROR
;

1392 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1401 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_ENABLE
);

1404 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1407 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1409 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
 & 
TIM_SMCR_SMS
;

1410 i‡(!
	`IS_TIM_SLAVEMODE_TRIGGER_ENABLED
(
tmpsm¸
))

1412 
	`__HAL_TIM_ENABLE
(
htim
);

1417 
	`__HAL_TIM_ENABLE
(
htim
);

1421  
HAL_OK
;

1422 
	}
}

1435 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_PWMN_St›_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√l
)

1438 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√l
));

1440 
Ch™√l
)

1442 
TIM_CHANNEL_1
:

1445 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC1
);

1446 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC1
]);

1450 
TIM_CHANNEL_2
:

1453 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC2
);

1454 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC2
]);

1458 
TIM_CHANNEL_3
:

1461 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_CC3
);

1462 ()
	`HAL_DMA_Ab‹t_IT
(
htim
->
hdma
[
TIM_DMA_ID_CC3
]);

1471 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
Ch™√l
, 
TIM_CCxN_DISABLE
);

1474 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1477 
	`__HAL_TIM_DISABLE
(
htim
);

1480 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
Ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1483  
HAL_OK
;

1484 
	}
}

1518 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_Sèπ
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1520 
uöt32_t
 
öput_ch™√l
 = (
OuçutCh™√l
 =
TIM_CHANNEL_1
Ë? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1521 
HAL_TIM_Ch™√lSèãTy≥Def
 
öput_ch™√l_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
öput_ch™√l
);

1522 
HAL_TIM_Ch™√lSèãTy≥Def
 
ouçut_ch™√l_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
OuçutCh™√l
);

1525 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1528 i‡((
ouçut_ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

1529 || (
öput_ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

1531  
HAL_ERROR
;

1535 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
OuçutCh™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1536 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
öput_ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1539 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_ENABLE
);

1540 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
öput_ch™√l
, 
TIM_CCx_ENABLE
);

1543 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1546  
HAL_OK
;

1547 
	}
}

1559 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_St›
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1561 
uöt32_t
 
öput_ch™√l
 = (
OuçutCh™√l
 =
TIM_CHANNEL_1
Ë? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1564 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1567 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_DISABLE
);

1568 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
öput_ch™√l
, 
TIM_CCx_DISABLE
);

1571 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1574 
	`__HAL_TIM_DISABLE
(
htim
);

1577 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
OuçutCh™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1578 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
öput_ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1581  
HAL_OK
;

1582 
	}
}

1594 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_Sèπ_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1596 
uöt32_t
 
öput_ch™√l
 = (
OuçutCh™√l
 =
TIM_CHANNEL_1
Ë? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1597 
HAL_TIM_Ch™√lSèãTy≥Def
 
öput_ch™√l_°©e
 = 
	`TIM_CHANNEL_STATE_GET
(
htim
, 
öput_ch™√l
);

1598 
HAL_TIM_Ch™√lSèãTy≥Def
 
ouçut_ch™√l_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
OuçutCh™√l
);

1601 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1604 i‡((
ouçut_ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
)

1605 || (
öput_ch™√l_°©e
 !
HAL_TIM_CHANNEL_STATE_READY
))

1607  
HAL_ERROR
;

1611 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
OuçutCh™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1612 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
öput_ch™√l
, 
HAL_TIM_CHANNEL_STATE_BUSY
);

1615 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC1
);

1618 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_CC2
);

1621 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_ENABLE
);

1622 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
öput_ch™√l
, 
TIM_CCx_ENABLE
);

1625 
	`__HAL_TIM_MOE_ENABLE
(
htim
);

1628  
HAL_OK
;

1629 
	}
}

1641 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_O√Pul£N_St›_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
OuçutCh™√l
)

1643 
uöt32_t
 
öput_ch™√l
 = (
OuçutCh™√l
 =
TIM_CHANNEL_1
Ë? 
TIM_CHANNEL_2
 : TIM_CHANNEL_1;

1646 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
OuçutCh™√l
));

1649 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC1
);

1652 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_CC2
);

1655 
	`TIM_CCxNCh™√lCmd
(
htim
->
In°™˚
, 
OuçutCh™√l
, 
TIM_CCxN_DISABLE
);

1656 
	`TIM_CCxCh™√lCmd
(
htim
->
In°™˚
, 
öput_ch™√l
, 
TIM_CCx_DISABLE
);

1659 
	`__HAL_TIM_MOE_DISABLE
(
htim
);

1662 
	`__HAL_TIM_DISABLE
(
htim
);

1665 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
OuçutCh™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1666 
	`TIM_CHANNEL_STATE_SET
(
htim
, 
öput_ch™√l
, 
HAL_TIM_CHANNEL_STATE_READY
);

1669  
HAL_OK
;

1670 
	}
}

1718 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figCommutEvít
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
,

1719 
uöt32_t
 
Commuèti⁄Sour˚
)

1722 
	`as£π_∑øm
(
	`IS_TIM_COMMUTATION_EVENT_INSTANCE
(
htim
->
In°™˚
));

1723 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I≈utTriggî
));

1725 
	`__HAL_LOCK
(
htim
);

1727 i‡((
I≈utTriggî
 =
TIM_TS_ITR0
Ë|| (I≈utTriggî =
TIM_TS_ITR1
) ||

1728 (
I≈utTriggî
 =
TIM_TS_ITR2
Ë|| (I≈utTriggî =
TIM_TS_ITR3
))

1731 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

1732 
htim
->
In°™˚
->
SMCR
 |
I≈utTriggî
;

1736 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_CCPC
;

1738 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_CCUS
;

1739 
htim
->
In°™˚
->
CR2
 |
Commuèti⁄Sour˚
;

1742 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_COM
);

1745 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_COM
);

1747 
	`__HAL_UNLOCK
(
htim
);

1749  
HAL_OK
;

1750 
	}
}

1774 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figCommutEvít_IT
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
,

1775 
uöt32_t
 
Commuèti⁄Sour˚
)

1778 
	`as£π_∑øm
(
	`IS_TIM_COMMUTATION_EVENT_INSTANCE
(
htim
->
In°™˚
));

1779 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I≈utTriggî
));

1781 
	`__HAL_LOCK
(
htim
);

1783 i‡((
I≈utTriggî
 =
TIM_TS_ITR0
Ë|| (I≈utTriggî =
TIM_TS_ITR1
) ||

1784 (
I≈utTriggî
 =
TIM_TS_ITR2
Ë|| (I≈utTriggî =
TIM_TS_ITR3
))

1787 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

1788 
htim
->
In°™˚
->
SMCR
 |
I≈utTriggî
;

1792 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_CCPC
;

1794 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_CCUS
;

1795 
htim
->
In°™˚
->
CR2
 |
Commuèti⁄Sour˚
;

1798 
	`__HAL_TIM_DISABLE_DMA
(
htim
, 
TIM_DMA_COM
);

1801 
	`__HAL_TIM_ENABLE_IT
(
htim
, 
TIM_IT_COM
);

1803 
	`__HAL_UNLOCK
(
htim
);

1805  
HAL_OK
;

1806 
	}
}

1831 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figCommutEvít_DMA
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
I≈utTriggî
,

1832 
uöt32_t
 
Commuèti⁄Sour˚
)

1835 
	`as£π_∑øm
(
	`IS_TIM_COMMUTATION_EVENT_INSTANCE
(
htim
->
In°™˚
));

1836 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION
(
I≈utTriggî
));

1838 
	`__HAL_LOCK
(
htim
);

1840 i‡((
I≈utTriggî
 =
TIM_TS_ITR0
Ë|| (I≈utTriggî =
TIM_TS_ITR1
) ||

1841 (
I≈utTriggî
 =
TIM_TS_ITR2
Ë|| (I≈utTriggî =
TIM_TS_ITR3
))

1844 
htim
->
In°™˚
->
SMCR
 &~
TIM_SMCR_TS
;

1845 
htim
->
In°™˚
->
SMCR
 |
I≈utTriggî
;

1849 
htim
->
In°™˚
->
CR2
 |
TIM_CR2_CCPC
;

1851 
htim
->
In°™˚
->
CR2
 &~
TIM_CR2_CCUS
;

1852 
htim
->
In°™˚
->
CR2
 |
Commuèti⁄Sour˚
;

1856 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄C∂t
;

1857 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rHÆfC∂tCÆlback
 = 
TIMEx_DMACommuèti⁄HÆfC∂t
;

1859 
htim
->
hdma
[
TIM_DMA_ID_COMMUTATION
]->
X„rEº‹CÆlback
 = 
TIM_DMAEº‹
;

1862 
	`__HAL_TIM_DISABLE_IT
(
htim
, 
TIM_IT_COM
);

1865 
	`__HAL_TIM_ENABLE_DMA
(
htim
, 
TIM_DMA_COM
);

1867 
	`__HAL_UNLOCK
(
htim
);

1869  
HAL_OK
;

1870 
	}
}

1880 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_Ma°îC⁄figSynchr⁄iz©i⁄
(
TIM_H™dÀTy≥Def
 *
htim
,

1881 
TIM_Ma°îC⁄figTy≥Def
 *
sMa°îC⁄fig
)

1883 
uöt32_t
 
tmp¸2
;

1884 
uöt32_t
 
tmpsm¸
;

1887 
	`as£π_∑øm
(
	`IS_TIM_MASTER_INSTANCE
(
htim
->
In°™˚
));

1888 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
sMa°îC⁄fig
->
Ma°îOuçutTriggî
));

1889 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
sMa°îC⁄fig
->
Ma°îSœveMode
));

1892 
	`__HAL_LOCK
(
htim
);

1895 
htim
->
Sèã
 = 
HAL_TIM_STATE_BUSY
;

1898 
tmp¸2
 = 
htim
->
In°™˚
->
CR2
;

1901 
tmpsm¸
 = 
htim
->
In°™˚
->
SMCR
;

1904 
tmp¸2
 &~
TIM_CR2_MMS
;

1906 
tmp¸2
 |
sMa°îC⁄fig
->
Ma°îOuçutTriggî
;

1909 
htim
->
In°™˚
->
CR2
 = 
tmp¸2
;

1911 i‡(
	`IS_TIM_SLAVE_INSTANCE
(
htim
->
In°™˚
))

1914 
tmpsm¸
 &~
TIM_SMCR_MSM
;

1916 
tmpsm¸
 |
sMa°îC⁄fig
->
Ma°îSœveMode
;

1919 
htim
->
In°™˚
->
SMCR
 = 
tmpsm¸
;

1923 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

1925 
	`__HAL_UNLOCK
(
htim
);

1927  
HAL_OK
;

1928 
	}
}

1941 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_C⁄figBªakDódTime
(
TIM_H™dÀTy≥Def
 *
htim
,

1942 
TIM_BªakDódTimeC⁄figTy≥Def
 *
sBªakDódTimeC⁄fig
)

1945 
uöt32_t
 
tmpbdå
 = 0U;

1948 
	`as£π_∑øm
(
	`IS_TIM_BREAK_INSTANCE
(
htim
->
In°™˚
));

1949 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
sBªakDódTimeC⁄fig
->
OffSèãRunMode
));

1950 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
sBªakDódTimeC⁄fig
->
OffSèãIDLEMode
));

1951 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
sBªakDódTimeC⁄fig
->
LockLevñ
));

1952 
	`as£π_∑øm
(
	`IS_TIM_DEADTIME
(
sBªakDódTimeC⁄fig
->
DódTime
));

1953 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
sBªakDódTimeC⁄fig
->
BªakSèã
));

1954 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
sBªakDódTimeC⁄fig
->
BªakPﬁ¨ôy
));

1955 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
sBªakDódTimeC⁄fig
->
Autom©icOuçut
));

1958 
	`__HAL_LOCK
(
htim
);

1964 
	`MODIFY_REG
(
tmpbdå
, 
TIM_BDTR_DTG
, 
sBªakDódTimeC⁄fig
->
DódTime
);

1965 
	`MODIFY_REG
(
tmpbdå
, 
TIM_BDTR_LOCK
, 
sBªakDódTimeC⁄fig
->
LockLevñ
);

1966 
	`MODIFY_REG
(
tmpbdå
, 
TIM_BDTR_OSSI
, 
sBªakDódTimeC⁄fig
->
OffSèãIDLEMode
);

1967 
	`MODIFY_REG
(
tmpbdå
, 
TIM_BDTR_OSSR
, 
sBªakDódTimeC⁄fig
->
OffSèãRunMode
);

1968 
	`MODIFY_REG
(
tmpbdå
, 
TIM_BDTR_BKE
, 
sBªakDódTimeC⁄fig
->
BªakSèã
);

1969 
	`MODIFY_REG
(
tmpbdå
, 
TIM_BDTR_BKP
, 
sBªakDódTimeC⁄fig
->
BªakPﬁ¨ôy
);

1970 
	`MODIFY_REG
(
tmpbdå
, 
TIM_BDTR_AOE
, 
sBªakDódTimeC⁄fig
->
Autom©icOuçut
);

1974 
htim
->
In°™˚
->
BDTR
 = 
tmpbdå
;

1976 
	`__HAL_UNLOCK
(
htim
);

1978  
HAL_OK
;

1979 
	}
}

1988 
HAL_SètusTy≥Def
 
	$HAL_TIMEx_Rem≠C⁄fig
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Rem≠
)

1991 
	`UNUSED
(
htim
);

1992 
	`UNUSED
(
Rem≠
);

1994  
HAL_OK
;

1995 
	}
}

2022 
__wók
 
	$HAL_TIMEx_CommutCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

2025 
	`UNUSED
(
htim
);

2030 
	}
}

2036 
__wók
 
	$HAL_TIMEx_CommutHÆfC∂tCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

2039 
	`UNUSED
(
htim
);

2044 
	}
}

2051 
__wók
 
	$HAL_TIMEx_BªakCÆlback
(
TIM_H™dÀTy≥Def
 *
htim
)

2054 
	`UNUSED
(
htim
);

2059 
	}
}

2084 
HAL_TIM_SèãTy≥Def
 
	$HAL_TIMEx_HÆlSís‹_GëSèã
(
TIM_H™dÀTy≥Def
 *
htim
)

2086  
htim
->
Sèã
;

2087 
	}
}

2099 
HAL_TIM_Ch™√lSèãTy≥Def
 
	$HAL_TIMEx_GëCh™√lNSèã
(
TIM_H™dÀTy≥Def
 *
htim
, 
uöt32_t
 
Ch™√lN
)

2101 
HAL_TIM_Ch™√lSèãTy≥Def
 
ch™√l_°©e
;

2104 
	`as£π_∑øm
(
	`IS_TIM_CCXN_INSTANCE
(
htim
->
In°™˚
, 
Ch™√lN
));

2106 
ch™√l_°©e
 = 
	`TIM_CHANNEL_N_STATE_GET
(
htim
, 
Ch™√lN
);

2108  
ch™√l_°©e
;

2109 
	}
}

2128 
	$TIMEx_DMACommuèti⁄C∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2130 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

2133 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2135 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2136 
htim
->
	`Commuèti⁄CÆlback
(htim);

2138 
	`HAL_TIMEx_CommutCÆlback
(
htim
);

2140 
	}
}

2147 
	$TIMEx_DMACommuèti⁄HÆfC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2149 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

2152 
htim
->
Sèã
 = 
HAL_TIM_STATE_READY
;

2154 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2155 
htim
->
	`Commuèti⁄HÆfC∂tCÆlback
(htim);

2157 
	`HAL_TIMEx_CommutHÆfC∂tCÆlback
(
htim
);

2159 
	}
}

2167 
	$TIM_DMADñayPul£NC∂t
(
DMA_H™dÀTy≥Def
 *
hdma
)

2169 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

2171 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

2173 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

2175 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

2177 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2180 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

2182 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

2184 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

2186 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2189 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

2191 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

2193 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

2195 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

2198 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC4
])

2200 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_4
;

2202 i‡(
hdma
->
Inô
.
Mode
 =
DMA_NORMAL
)

2204 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_4
, 
HAL_TIM_CHANNEL_STATE_READY
);

2212 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2213 
htim
->
	`PWM_Pul£FöishedCÆlback
(htim);

2215 
	`HAL_TIM_PWM_Pul£FöishedCÆlback
(
htim
);

2218 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2219 
	}
}

2226 
	$TIM_DMAEº‹CCxN
(
DMA_H™dÀTy≥Def
 *
hdma
)

2228 
TIM_H™dÀTy≥Def
 *
htim
 = (TIM_H™dÀTy≥De‡*)((
DMA_H™dÀTy≥Def
 *)
hdma
)->
P¨ít
;

2230 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC1
])

2232 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_1
;

2233 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_1
, 
HAL_TIM_CHANNEL_STATE_READY
);

2235 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC2
])

2237 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_2
;

2238 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_2
, 
HAL_TIM_CHANNEL_STATE_READY
);

2240 i‡(
hdma
 =
htim
->hdma[
TIM_DMA_ID_CC3
])

2242 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_3
;

2243 
	`TIM_CHANNEL_N_STATE_SET
(
htim
, 
TIM_CHANNEL_3
, 
HAL_TIM_CHANNEL_STATE_READY
);

2250 #i‡(
USE_HAL_TIM_REGISTER_CALLBACKS
 == 1)

2251 
htim
->
	`Eº‹CÆlback
(htim);

2253 
	`HAL_TIM_Eº‹CÆlback
(
htim
);

2256 
htim
->
Ch™√l
 = 
HAL_TIM_ACTIVE_CHANNEL_CLEARED
;

2257 
	}
}

2271 
	$TIM_CCxNCh™√lCmd
(
TIM_Ty≥Def
 *
TIMx
, 
uöt32_t
 
Ch™√l
, uöt32_à
Ch™√lNSèã
)

2273 
uöt32_t
 
tmp
;

2275 
tmp
 = 
TIM_CCER_CC1NE
 << (
Ch™√l
 & 0x1FU);

2278 
TIMx
->
CCER
 &~
tmp
;

2281 
TIMx
->
CCER
 |(
uöt32_t
)(
Ch™√lNSèã
 << (
Ch™√l
 & 0x1FU));

2282 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_usb.c

41 
	~"°m32f1xx_hÆ.h
"

47 #i‡
deföed
 (
HAL_PCD_MODULE_ENABLED
Ë|| deföed (
HAL_HCD_MODULE_ENABLED
)

48 #i‡
deföed
 (
USB
Ë|| deföed (
USB_OTG_FS
)

55 #i‡
deföed
 (
USB_OTG_FS
)

56 
HAL_SètusTy≥Def
 
USB_C‹eRe£t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
);

82 
HAL_SètusTy≥Def
 
	$USB_C‹eInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

84 
HAL_SètusTy≥Def
 
ªt
;

86 i‡(
cfg
.
phy_ôÁ˚
 =
USB_OTG_ULPI_PHY
)

88 
USBx
->
GCCFG
 &~(
USB_OTG_GCCFG_PWRDWN
);

91 
USBx
->
GUSBCFG
 &~(
USB_OTG_GUSBCFG_TSDPS
 | 
USB_OTG_GUSBCFG_ULPIFSLS
 | 
USB_OTG_GUSBCFG_PHYSEL
);

94 
USBx
->
GUSBCFG
 &~(
USB_OTG_GUSBCFG_ULPIEVBUSD
 | 
USB_OTG_GUSBCFG_ULPIEVBUSI
);

95 i‡(
cfg
.
u£_exã∫Æ_vbus
 == 1U)

97 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_ULPIEVBUSD
;

100 
ªt
 = 
	`USB_C‹eRe£t
(
USBx
);

105 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_PHYSEL
;

108 
ªt
 = 
	`USB_C‹eRe£t
(
USBx
);

111 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_PWRDWN
;

114  
ªt
;

115 
	}
}

124 
HAL_SètusTy≥Def
 
	$USB_SëTu∫¨oundTime
(
USB_OTG_GlobÆTy≥Def
 *
USBx
,

125 
uöt32_t
 
h˛k
, 
uöt8_t
 
•ìd
)

127 
uöt32_t
 
UsbTrd
;

133 i‡(
•ìd
 =
USBD_FS_SPEED
)

135 i‡((
h˛k
 >= 14200000U) && (hclk < 15000000U))

138 
UsbTrd
 = 0xFU;

140 i‡((
h˛k
 >= 15000000U) && (hclk < 16000000U))

143 
UsbTrd
 = 0xEU;

145 i‡((
h˛k
 >= 16000000U) && (hclk < 17200000U))

148 
UsbTrd
 = 0xDU;

150 i‡((
h˛k
 >= 17200000U) && (hclk < 18500000U))

153 
UsbTrd
 = 0xCU;

155 i‡((
h˛k
 >= 18500000U) && (hclk < 20000000U))

158 
UsbTrd
 = 0xBU;

160 i‡((
h˛k
 >= 20000000U) && (hclk < 21800000U))

163 
UsbTrd
 = 0xAU;

165 i‡((
h˛k
 >= 21800000U) && (hclk < 24000000U))

168 
UsbTrd
 = 0x9U;

170 i‡((
h˛k
 >= 24000000U) && (hclk < 27700000U))

173 
UsbTrd
 = 0x8U;

175 i‡((
h˛k
 >= 27700000U) && (hclk < 32000000U))

178 
UsbTrd
 = 0x7U;

183 
UsbTrd
 = 0x6U;

188 
UsbTrd
 = 
USBD_DEFAULT_TRDT_VALUE
;

191 
USBx
->
GUSBCFG
 &~
USB_OTG_GUSBCFG_TRDT
;

192 
USBx
->
GUSBCFG
 |(
uöt32_t
)((
UsbTrd
 << 10Ë& 
USB_OTG_GUSBCFG_TRDT
);

194  
HAL_OK
;

195 
	}
}

203 
HAL_SètusTy≥Def
 
	$USB_E«bÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

205 
USBx
->
GAHBCFG
 |
USB_OTG_GAHBCFG_GINT
;

206  
HAL_OK
;

207 
	}
}

215 
HAL_SètusTy≥Def
 
	$USB_DißbÀGlobÆI¡
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

217 
USBx
->
GAHBCFG
 &~
USB_OTG_GAHBCFG_GINT
;

218  
HAL_OK
;

219 
	}
}

230 
HAL_SètusTy≥Def
 
	$USB_SëCuºítMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_ModeTy≥Def
 
mode
)

232 
USBx
->
GUSBCFG
 &~(
USB_OTG_GUSBCFG_FHMOD
 | 
USB_OTG_GUSBCFG_FDMOD
);

234 i‡(
mode
 =
USB_HOST_MODE
)

236 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_FHMOD
;

238 i‡(
mode
 =
USB_DEVICE_MODE
)

240 
USBx
->
GUSBCFG
 |
USB_OTG_GUSBCFG_FDMOD
;

244  
HAL_ERROR
;

246 
	`HAL_Dñay
(50U);

248  
HAL_OK
;

249 
	}
}

259 
HAL_SètusTy≥Def
 
	$USB_DevInô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

261 
HAL_SètusTy≥Def
 
ªt
 = 
HAL_OK
;

262 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

263 
uöt32_t
 
i
;

265 
i
 = 0U; i < 15U; i++)

267 
USBx
->
DIEPTXF
[
i
] = 0U;

271 
USBx
->
GCCFG
 |
USB_OTG_GCCFG_VBUSBSEN
;

274 
USBx_PCGCCTL
 = 0U;

277 
USBx_DEVICE
->
DCFG
 |
DCFG_FRAME_INTERVAL_80
;

280 ()
	`USB_SëDevS≥ed
(
USBx
, 
USB_OTG_SPEED_FULL
);

283 i‡(
	`USB_FlushTxFifo
(
USBx
, 0x10UË!
HAL_OK
)

285 
ªt
 = 
HAL_ERROR
;

288 i‡(
	`USB_FlushRxFifo
(
USBx
Ë!
HAL_OK
)

290 
ªt
 = 
HAL_ERROR
;

294 
USBx_DEVICE
->
DIEPMSK
 = 0U;

295 
USBx_DEVICE
->
DOEPMSK
 = 0U;

296 
USBx_DEVICE
->
DAINTMSK
 = 0U;

298 
i
 = 0U; i < 
cfg
.
dev_ídpoöts
; i++)

300 i‡((
	`USBx_INEP
(
i
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

302 i‡(
i
 == 0U)

304 
	`USBx_INEP
(
i
)->
DIEPCTL
 = 
USB_OTG_DIEPCTL_SNAK
;

308 
	`USBx_INEP
(
i
)->
DIEPCTL
 = 
USB_OTG_DIEPCTL_EPDIS
 | 
USB_OTG_DIEPCTL_SNAK
;

313 
	`USBx_INEP
(
i
)->
DIEPCTL
 = 0U;

316 
	`USBx_INEP
(
i
)->
DIEPTSIZ
 = 0U;

317 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFB7FU;

320 
i
 = 0U; i < 
cfg
.
dev_ídpoöts
; i++)

322 i‡((
	`USBx_OUTEP
(
i
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

324 i‡(
i
 == 0U)

326 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = 
USB_OTG_DOEPCTL_SNAK
;

330 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = 
USB_OTG_DOEPCTL_EPDIS
 | 
USB_OTG_DOEPCTL_SNAK
;

335 
	`USBx_OUTEP
(
i
)->
DOEPCTL
 = 0U;

338 
	`USBx_OUTEP
(
i
)->
DOEPTSIZ
 = 0U;

339 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFB7FU;

342 
USBx_DEVICE
->
DIEPMSK
 &~(
USB_OTG_DIEPMSK_TXFURM
);

345 
USBx
->
GINTMSK
 = 0U;

348 
USBx
->
GINTSTS
 = 0xBFFFFFFFU;

351 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_RXFLVLM
;

354 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_USBSUSPM
 | 
USB_OTG_GINTMSK_USBRST
 |

355 
USB_OTG_GINTMSK_ENUMDNEM
 | 
USB_OTG_GINTMSK_IEPINT
 |

356 
USB_OTG_GINTMSK_OEPINT
 | 
USB_OTG_GINTMSK_IISOIXFRM
 |

357 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
;

359 i‡(
cfg
.
Sof_íabÀ
 != 0U)

361 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_SOFM
;

364 i‡(
cfg
.
vbus_£nsög_íabÀ
 == 1U)

366 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_SRQIM
 | 
USB_OTG_GINTMSK_OTGINT
);

369  
ªt
;

370 
	}
}

380 
HAL_SètusTy≥Def
 
	$USB_FlushTxFifo
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
num
)

382 
uöt32_t
 
cou¡
 = 0U;

384 
USBx
->
GRSTCTL
 = (
USB_OTG_GRSTCTL_TXFFLSH
 | (
num
 << 6));

388 i‡(++
cou¡
 > 200000U)

390  
HAL_TIMEOUT
;

392 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_TXFFLSH
) == USB_OTG_GRSTCTL_TXFFLSH);

394  
HAL_OK
;

395 
	}
}

402 
HAL_SètusTy≥Def
 
	$USB_FlushRxFifo
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

404 
uöt32_t
 
cou¡
 = 0;

406 
USBx
->
GRSTCTL
 = 
USB_OTG_GRSTCTL_RXFFLSH
;

410 i‡(++
cou¡
 > 200000U)

412  
HAL_TIMEOUT
;

414 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_RXFFLSH
) == USB_OTG_GRSTCTL_RXFFLSH);

416  
HAL_OK
;

417 
	}
}

428 
HAL_SètusTy≥Def
 
	$USB_SëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
•ìd
)

430 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

432 
USBx_DEVICE
->
DCFG
 |
•ìd
;

433  
HAL_OK
;

434 
	}
}

443 
uöt8_t
 
	$USB_GëDevS≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

445 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

446 
uöt8_t
 
•ìd
;

447 
uöt32_t
 
DevEnumS≥ed
 = 
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_ENUMSPD
;

449 i‡((
DevEnumS≥ed
 =
DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ
) ||

450 (
DevEnumS≥ed
 =
DSTS_ENUMSPD_FS_PHY_48MHZ
))

452 
•ìd
 = 
USBD_FS_SPEED
;

456 
•ìd
 = 0xFU;

459  
•ìd
;

460 
	}
}

468 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

470 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

471 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

473 i‡(
ï
->
is_ö
 == 1U)

475 
USBx_DEVICE
->
DAINTMSK
 |
USB_OTG_DAINTMSK_IEPM
 & (
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
));

477 i‡((
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_USBAEP
) == 0U)

479 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |(
ï
->
max∑ckë
 & 
USB_OTG_DIEPCTL_MPSIZ
) |

480 ((
uöt32_t
)
ï
->
ty≥
 << 18Ë| (
ïnum
 << 22) |

481 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

482 
USB_OTG_DIEPCTL_USBAEP
;

487 
USBx_DEVICE
->
DAINTMSK
 |
USB_OTG_DAINTMSK_OEPM
 & ((
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)) << 16);

489 i‡(((
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
Ë& 
USB_OTG_DOEPCTL_USBAEP
) == 0U)

491 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |(
ï
->
max∑ckë
 & 
USB_OTG_DOEPCTL_MPSIZ
) |

492 ((
uöt32_t
)
ï
->
ty≥
 << 18) |

493 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

494 
USB_OTG_DOEPCTL_USBAEP
;

497  
HAL_OK
;

498 
	}
}

506 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

508 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

509 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

512 i‡(
ï
->
is_ö
 == 1U)

514 i‡(((
	`USBx_INEP
(
ïnum
)->
DIEPCTL
Ë& 
USB_OTG_DIEPCTL_USBAEP
) == 0U)

516 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |(
ï
->
max∑ckë
 & 
USB_OTG_DIEPCTL_MPSIZ
) |

517 ((
uöt32_t
)
ï
->
ty≥
 << 18Ë| (
ïnum
 << 22) |

518 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

519 
USB_OTG_DIEPCTL_USBAEP
;

522 
USBx_DEVICE
->
DEACHMSK
 |
USB_OTG_DAINTMSK_IEPM
 & (
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
));

526 i‡(((
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
Ë& 
USB_OTG_DOEPCTL_USBAEP
) == 0U)

528 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |(
ï
->
max∑ckë
 & 
USB_OTG_DOEPCTL_MPSIZ
) |

529 ((
uöt32_t
)
ï
->
ty≥
 << 18Ë| (
ïnum
 << 22) |

530 
USB_OTG_DOEPCTL_USBAEP
;

533 
USBx_DEVICE
->
DEACHMSK
 |
USB_OTG_DAINTMSK_OEPM
 & ((
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)) << 16);

536  
HAL_OK
;

537 
	}
}

545 
HAL_SètusTy≥Def
 
	$USB_Dó˘iv©eEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

547 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

548 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

551 i‡(
ï
->
is_ö
 == 1U)

553 i‡((
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

555 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SNAK
;

556 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_EPDIS
;

559 
USBx_DEVICE
->
DEACHMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & (
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)));

560 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & (
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)));

561 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 &~(
USB_OTG_DIEPCTL_USBAEP
 |

562 
USB_OTG_DIEPCTL_MPSIZ
 |

563 
USB_OTG_DIEPCTL_TXFNUM
 |

564 
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
 |

565 
USB_OTG_DIEPCTL_EPTYP
);

569 i‡((
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

571 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SNAK
;

572 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_EPDIS
;

575 
USBx_DEVICE
->
DEACHMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)) << 16));

576 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)) << 16));

577 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 &~(
USB_OTG_DOEPCTL_USBAEP
 |

578 
USB_OTG_DOEPCTL_MPSIZ
 |

579 
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
 |

580 
USB_OTG_DOEPCTL_EPTYP
);

583  
HAL_OK
;

584 
	}
}

592 
HAL_SètusTy≥Def
 
	$USB_Dó˘iv©eDediˇãdEndpoöt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

594 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

595 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

598 i‡(
ï
->
is_ö
 == 1U)

600 i‡((
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == USB_OTG_DIEPCTL_EPENA)

602 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SNAK
;

603 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_EPDIS
;

606 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 &~ 
USB_OTG_DIEPCTL_USBAEP
;

607 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_IEPM
 & (
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)));

611 i‡((
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

613 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SNAK
;

614 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_EPDIS
;

617 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_USBAEP
;

618 
USBx_DEVICE
->
DAINTMSK
 &~(
USB_OTG_DAINTMSK_OEPM
 & ((
uöt32_t
)(1UL << (
ï
->
num
 & 
EP_ADDR_MSK
)) << 16));

621  
HAL_OK
;

622 
	}
}

630 
HAL_SètusTy≥Def
 
	$USB_EPSèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

632 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

633 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

634 
uöt16_t
 
pkt˙t
;

637 i‡(
ï
->
is_ö
 == 1U)

640 i‡(
ï
->
x„r_Àn
 == 0U)

642 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

643 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1U << 19));

644 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

653 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

654 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

655 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (((
ï
->
x„r_Àn
 +Ép->
max∑ckë
 - 1U) /Ép->maxpacket) << 19));

656 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_XFRSIZ
 & 
ï
->
x„r_Àn
);

658 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

660 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_MULCNT
);

661 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_MULCNT
 & (1U << 29));

665 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

667 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

670 i‡(
ï
->
x„r_Àn
 > 0U)

672 
USBx_DEVICE
->
DIEPEMPMSK
 |1UL << (
ï
->
num
 & 
EP_ADDR_MSK
);

677 i‡((
USBx_DEVICE
->
DSTS
 & (1U << 8)) == 0U)

679 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SODDFRM
;

683 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

686 ()
	`USB_WrôePackë
(
USBx
, 
ï
->
x„r_buff
,Ép->
num
, (
uöt16_t
Îp->
x„r_Àn
);

695 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

696 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_PKTCNT
);

698 i‡(
ï
->
x„r_Àn
 == 0U)

700 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 & 
ï
->
max∑ckë
);

701 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1U << 19));

705 
pkt˙t
 = (
uöt16_t
)((
ï
->
x„r_Àn
 +Ép->
max∑ckë
 - 1U) /Ép->maxpacket);

706 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 |
USB_OTG_DOEPTSIZ_PKTCNT
 & ((
uöt32_t
)
pkt˙t
 << 19);

707 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 |
USB_OTG_DOEPTSIZ_XFRSIZ
 & (
ï
->
max∑ckë
 * 
pkt˙t
);

710 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

712 i‡((
USBx_DEVICE
->
DSTS
 & (1U << 8)) == 0U)

714 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SODDFRM
;

718 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

722 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

725  
HAL_OK
;

726 
	}
}

734 
HAL_SètusTy≥Def
 
	$USB_EP0SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

736 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

737 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

740 i‡(
ï
->
is_ö
 == 1U)

743 i‡(
ï
->
x„r_Àn
 == 0U)

745 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

746 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1U << 19));

747 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

756 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_XFRSIZ
);

757 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 &~(
USB_OTG_DIEPTSIZ_PKTCNT
);

759 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

761 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

763 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_PKTCNT
 & (1U << 19));

764 
	`USBx_INEP
(
ïnum
)->
DIEPTSIZ
 |(
USB_OTG_DIEPTSIZ_XFRSIZ
 & 
ï
->
x„r_Àn
);

768 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |(
USB_OTG_DIEPCTL_CNAK
 | 
USB_OTG_DIEPCTL_EPENA
);

771 i‡(
ï
->
x„r_Àn
 > 0U)

773 
USBx_DEVICE
->
DIEPEMPMSK
 |1UL << (
ï
->
num
 & 
EP_ADDR_MSK
);

782 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_XFRSIZ
);

783 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 &~(
USB_OTG_DOEPTSIZ_PKTCNT
);

785 i‡(
ï
->
x„r_Àn
 > 0U)

787 
ï
->
x„r_Àn
 =Ép->
max∑ckë
;

790 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1U << 19));

791 
	`USBx_OUTEP
(
ïnum
)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_XFRSIZ
 & (
ï
->
max∑ckë
));

794 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |(
USB_OTG_DOEPCTL_CNAK
 | 
USB_OTG_DOEPCTL_EPENA
);

797  
HAL_OK
;

798 
	}
}

809 
HAL_SètusTy≥Def
 
	$USB_WrôePackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
§c
,

810 
uöt8_t
 
ch_ï_num
, 
uöt16_t
 
Àn
)

812 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

813 
uöt32_t
 *
pSrc
 = (uöt32_à*)
§c
;

814 
uöt32_t
 
cou¡32b
, 
i
;

816 
cou¡32b
 = ((
uöt32_t
)
Àn
 + 3U) / 4U;

817 
i
 = 0U; i < 
cou¡32b
; i++)

819 
	`USBx_DFIFO
((
uöt32_t
)
ch_ï_num
Ë
	`__UNALIGNED_UINT32_READ
(
pSrc
);

820 
pSrc
++;

823  
HAL_OK
;

824 
	}
}

833 *
	$USB_RódPackë
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
de°
, 
uöt16_t
 
Àn
)

835 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

836 
uöt32_t
 *
pDe°
 = (uöt32_à*)
de°
;

837 
uöt32_t
 
i
;

838 
uöt32_t
 
cou¡32b
 = ((uöt32_t)
Àn
 + 3U) / 4U;

840 
i
 = 0U; i < 
cou¡32b
; i++)

842 
	`__UNALIGNED_UINT32_WRITE
(
pDe°
, 
	`USBx_DFIFO
(0U));

843 
pDe°
++;

846  ((*)
pDe°
);

847 
	}
}

855 
HAL_SètusTy≥Def
 
	$USB_EPSëSèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

857 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

858 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

860 i‡(
ï
->
is_ö
 == 1U)

862 i‡(((
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 & 
USB_OTG_DIEPCTL_EPENA
) == 0U) && (epnum != 0U))

864 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 &~(
USB_OTG_DIEPCTL_EPDIS
);

866 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_STALL
;

870 i‡(((
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == 0U) && (epnum != 0U))

872 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 &~(
USB_OTG_DOEPCTL_EPDIS
);

874 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_STALL
;

877  
HAL_OK
;

878 
	}
}

886 
HAL_SètusTy≥Def
 
	$USB_EPCÀ¨SèŒ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_EPTy≥Def
 *
ï
)

888 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

889 
uöt32_t
 
ïnum
 = (uöt32_t)
ï
->
num
;

891 i‡(
ï
->
is_ö
 == 1U)

893 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 &~
USB_OTG_DIEPCTL_STALL
;

894 i‡((
ï
->
ty≥
 =
EP_TYPE_INTR
Ë|| (ï->ty≥ =
EP_TYPE_BULK
))

896 
	`USBx_INEP
(
ïnum
)->
DIEPCTL
 |
USB_OTG_DIEPCTL_SD0PID_SEVNFRM
;

901 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 &~
USB_OTG_DOEPCTL_STALL
;

902 i‡((
ï
->
ty≥
 =
EP_TYPE_INTR
Ë|| (ï->ty≥ =
EP_TYPE_BULK
))

904 
	`USBx_OUTEP
(
ïnum
)->
DOEPCTL
 |
USB_OTG_DOEPCTL_SD0PID_SEVNFRM
;

907  
HAL_OK
;

908 
	}
}

915 
HAL_SètusTy≥Def
 
	$USB_St›Devi˚
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

917 
HAL_SètusTy≥Def
 
ªt
;

918 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

919 
uöt32_t
 
i
;

922 
i
 = 0U; i < 15U; i++)

924 
	`USBx_INEP
(
i
)->
DIEPINT
 = 0xFB7FU;

925 
	`USBx_OUTEP
(
i
)->
DOEPINT
 = 0xFB7FU;

929 
USBx_DEVICE
->
DIEPMSK
 = 0U;

930 
USBx_DEVICE
->
DOEPMSK
 = 0U;

931 
USBx_DEVICE
->
DAINTMSK
 = 0U;

934 
ªt
 = 
	`USB_FlushRxFifo
(
USBx
);

935 i‡(
ªt
 !
HAL_OK
)

937  
ªt
;

940 
ªt
 = 
	`USB_FlushTxFifo
(
USBx
, 0x10U);

941 i‡(
ªt
 !
HAL_OK
)

943  
ªt
;

946  
ªt
;

947 
	}
}

956 
HAL_SètusTy≥Def
 
	$USB_SëDevAddªss
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
addªss
)

958 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

960 
USBx_DEVICE
->
DCFG
 &~(
USB_OTG_DCFG_DAD
);

961 
USBx_DEVICE
->
DCFG
 |((
uöt32_t
)
addªss
 << 4Ë& 
USB_OTG_DCFG_DAD
;

963  
HAL_OK
;

964 
	}
}

971 
HAL_SètusTy≥Def
 
	$USB_DevC⁄√˘
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

973 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

976 
USBx_PCGCCTL
 &~(
USB_OTG_PCGCCTL_STOPCLK
 | 
USB_OTG_PCGCCTL_GATECLK
);

978 
USBx_DEVICE
->
DCTL
 &~
USB_OTG_DCTL_SDIS
;

980  
HAL_OK
;

981 
	}
}

988 
HAL_SètusTy≥Def
 
	$USB_DevDisc⁄√˘
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

990 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

993 
USBx_PCGCCTL
 &~(
USB_OTG_PCGCCTL_STOPCLK
 | 
USB_OTG_PCGCCTL_GATECLK
);

995 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_SDIS
;

997  
HAL_OK
;

998 
	}
}

1005 
uöt32_t
 
	$USB_RódI¡îru±s
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1007 
uöt32_t
 
tm¥eg
;

1009 
tm¥eg
 = 
USBx
->
GINTSTS
;

1010 
tm¥eg
 &
USBx
->
GINTMSK
;

1012  
tm¥eg
;

1013 
	}
}

1020 
uöt32_t
 
	$USB_RódDevAŒOutEpI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1022 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1023 
uöt32_t
 
tm¥eg
;

1025 
tm¥eg
 = 
USBx_DEVICE
->
DAINT
;

1026 
tm¥eg
 &
USBx_DEVICE
->
DAINTMSK
;

1028  ((
tm¥eg
 & 0xffff0000U) >> 16);

1029 
	}
}

1036 
uöt32_t
 
	$USB_RódDevAŒInEpI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1038 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1039 
uöt32_t
 
tm¥eg
;

1041 
tm¥eg
 = 
USBx_DEVICE
->
DAINT
;

1042 
tm¥eg
 &
USBx_DEVICE
->
DAINTMSK
;

1044  ((
tm¥eg
 & 0xFFFFU));

1045 
	}
}

1054 
uöt32_t
 
	$USB_RódDevOutEPI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ïnum
)

1056 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1057 
uöt32_t
 
tm¥eg
;

1059 
tm¥eg
 = 
	`USBx_OUTEP
((
uöt32_t
)
ïnum
)->
DOEPINT
;

1060 
tm¥eg
 &
USBx_DEVICE
->
DOEPMSK
;

1062  
tm¥eg
;

1063 
	}
}

1072 
uöt32_t
 
	$USB_RódDevInEPI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ïnum
)

1074 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1075 
uöt32_t
 
tm¥eg
, 
msk
, 
emp
;

1077 
msk
 = 
USBx_DEVICE
->
DIEPMSK
;

1078 
emp
 = 
USBx_DEVICE
->
DIEPEMPMSK
;

1079 
msk
 |((
emp
 >> (
ïnum
 & 
EP_ADDR_MSK
)) & 0x1U) << 7;

1080 
tm¥eg
 = 
	`USBx_INEP
((
uöt32_t
)
ïnum
)->
DIEPINT
 & 
msk
;

1082  
tm¥eg
;

1083 
	}
}

1091 
	$USB_CÀ¨I¡îru±s
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
)

1093 
USBx
->
GINTSTS
 |
öãºu±
;

1094 
	}
}

1104 
uöt32_t
 
	$USB_GëMode
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1106  ((
USBx
->
GINTSTS
) & 0x1U);

1107 
	}
}

1114 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eSëup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1116 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1119 
	`USBx_INEP
(0U)->
DIEPCTL
 &~
USB_OTG_DIEPCTL_MPSIZ
;

1121 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_CGINAK
;

1123  
HAL_OK
;

1124 
	}
}

1132 
HAL_SètusTy≥Def
 
	$USB_EP0_OutSèπ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
)

1134 
	`UNUSED
(
p£tup
);

1135 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1136 
uöt32_t
 
gSNPSiD
 = *(
__IO
 uöt32_à*)(&
USBx
->
CID
 + 0x1U);

1138 i‡(
gSNPSiD
 > 
USB_OTG_CORE_ID_300A
)

1140 i‡((
	`USBx_OUTEP
(0U)->
DOEPCTL
 & 
USB_OTG_DOEPCTL_EPENA
) == USB_OTG_DOEPCTL_EPENA)

1142  
HAL_OK
;

1146 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 = 0U;

1147 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 |(
USB_OTG_DOEPTSIZ_PKTCNT
 & (1U << 19));

1148 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 |= (3U * 8U);

1149 
	`USBx_OUTEP
(0U)->
DOEPTSIZ
 |
USB_OTG_DOEPTSIZ_STUPCNT
;

1151  
HAL_OK
;

1152 
	}
}

1159 
HAL_SètusTy≥Def
 
	$USB_C‹eRe£t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1161 
uöt32_t
 
cou¡
 = 0U;

1166 i‡(++
cou¡
 > 200000U)

1168  
HAL_TIMEOUT
;

1170 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_AHBIDL
) == 0U);

1173 
cou¡
 = 0U;

1174 
USBx
->
GRSTCTL
 |
USB_OTG_GRSTCTL_CSRST
;

1178 i‡(++
cou¡
 > 200000U)

1180  
HAL_TIMEOUT
;

1182 } (
USBx
->
GRSTCTL
 & 
USB_OTG_GRSTCTL_CSRST
) == USB_OTG_GRSTCTL_CSRST);

1184  
HAL_OK
;

1185 
	}
}

1195 
HAL_SètusTy≥Def
 
	$USB_Ho°Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_CfgTy≥Def
 
cfg
)

1197 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1198 
uöt32_t
 
i
;

1201 
USBx_PCGCCTL
 = 0U;

1204 
USBx
->
GCCFG
 &~(
USB_OTG_GCCFG_VBUSASEN
);

1205 
USBx
->
GCCFG
 &~(
USB_OTG_GCCFG_VBUSBSEN
);

1207 
USBx_HOST
->
HCFG
 &~(
USB_OTG_HCFG_FSLSS
);

1210 ()
	`USB_FlushTxFifo
(
USBx
, 0x10U);

1211 ()
	`USB_FlushRxFifo
(
USBx
);

1214 
i
 = 0U; i < 
cfg
.
Ho°_ch™√ls
; i++)

1216 
	`USBx_HC
(
i
)->
HCINT
 = 0xFFFFFFFFU;

1217 
	`USBx_HC
(
i
)->
HCINTMSK
 = 0U;

1221 ()
	`USB_DriveVbus
(
USBx
, 1U);

1223 
	`HAL_Dñay
(200U);

1226 
USBx
->
GINTMSK
 = 0U;

1229 
USBx
->
GINTSTS
 = 0xFFFFFFFFU;

1232 
USBx
->
GRXFSIZ
 = 0x80U;

1233 
USBx
->
DIEPTXF0_HNPTXFSIZ
 = (
uöt32_t
)(((0x60U << 16Ë& 
USB_OTG_NPTXFD
) | 0x80U);

1234 
USBx
->
HPTXFSIZ
 = (
uöt32_t
)(((0x40U << 16)& 
USB_OTG_HPTXFSIZ_PTXFD
) | 0xE0U);

1236 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_RXFLVLM
;

1239 
USBx
->
GINTMSK
 |(
USB_OTG_GINTMSK_PRTIM
 | 
USB_OTG_GINTMSK_HCIM
 | \

1240 
USB_OTG_GINTMSK_SOFM
 | 
USB_OTG_GINTSTS_DISCINT
 | \

1241 
USB_OTG_GINTMSK_PXFRM_IISOOXFRM
 | 
USB_OTG_GINTMSK_WUIM
);

1243  
HAL_OK
;

1244 
	}
}

1256 
HAL_SètusTy≥Def
 
	$USB_InôFSLSPClkSñ
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
‰eq
)

1258 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1260 
USBx_HOST
->
HCFG
 &~(
USB_OTG_HCFG_FSLSPCS
);

1261 
USBx_HOST
->
HCFG
 |(
uöt32_t
)
‰eq
 & 
USB_OTG_HCFG_FSLSPCS
;

1263 i‡(
‰eq
 =
HCFG_48_MHZ
)

1265 
USBx_HOST
->
HFIR
 = 48000U;

1267 i‡(
‰eq
 =
HCFG_6_MHZ
)

1269 
USBx_HOST
->
HFIR
 = 6000U;

1276  
HAL_OK
;

1277 
	}
}

1286 
HAL_SètusTy≥Def
 
	$USB_Re£tP‹t
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1288 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1290 
__IO
 
uöt32_t
 
h¥t0
 = 0U;

1292 
h¥t0
 = 
USBx_HPRT0
;

1294 
h¥t0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |

1295 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
);

1297 
USBx_HPRT0
 = (
USB_OTG_HPRT_PRST
 | 
h¥t0
);

1298 
	`HAL_Dñay
(100U);

1299 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PRST
Ë& 
h¥t0
);

1300 
	`HAL_Dñay
(10U);

1302  
HAL_OK
;

1303 
	}
}

1313 
HAL_SètusTy≥Def
 
	$USB_DriveVbus
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
°©e
)

1315 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1316 
__IO
 
uöt32_t
 
h¥t0
 = 0U;

1318 
h¥t0
 = 
USBx_HPRT0
;

1320 
h¥t0
 &~(
USB_OTG_HPRT_PENA
 | 
USB_OTG_HPRT_PCDET
 |

1321 
USB_OTG_HPRT_PENCHNG
 | 
USB_OTG_HPRT_POCCHNG
);

1323 i‡(((
h¥t0
 & 
USB_OTG_HPRT_PPWR
Ë=0UË&& (
°©e
 == 1U))

1325 
USBx_HPRT0
 = (
USB_OTG_HPRT_PPWR
 | 
h¥t0
);

1327 i‡(((
h¥t0
 & 
USB_OTG_HPRT_PPWR
Ë=USB_OTG_HPRT_PPWRË&& (
°©e
 == 0U))

1329 
USBx_HPRT0
 = ((~
USB_OTG_HPRT_PPWR
Ë& 
h¥t0
);

1331  
HAL_OK
;

1332 
	}
}

1342 
uöt32_t
 
	$USB_GëHo°S≥ed
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1344 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1345 
__IO
 
uöt32_t
 
h¥t0
 = 0U;

1347 
h¥t0
 = 
USBx_HPRT0
;

1348  ((
h¥t0
 & 
USB_OTG_HPRT_PSPD
) >> 17);

1349 
	}
}

1356 
uöt32_t
 
	$USB_GëCuºítFøme
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1358 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1360  (
USBx_HOST
->
HFNUM
 & 
USB_OTG_HFNUM_FRNUM
);

1361 
	}
}

1386 
HAL_SètusTy≥Def
 
	$USB_HC_Inô
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ch_num
,

1387 
uöt8_t
 
ïnum
, uöt8_à
dev_addªss
, uöt8_à
•ìd
,

1388 
uöt8_t
 
ï_ty≥
, 
uöt16_t
 
mps
)

1390 
HAL_SètusTy≥Def
 
ªt
 = 
HAL_OK
;

1391 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1392 
uöt32_t
 
HCch¨EpDú
, 
HCch¨LowS≥ed
;

1395 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCINT
 = 0xFFFFFFFFU;

1398 
ï_ty≥
)

1400 
EP_TYPE_CTRL
:

1401 
EP_TYPE_BULK
:

1402 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |

1403 
USB_OTG_HCINTMSK_STALLM
 |

1404 
USB_OTG_HCINTMSK_TXERRM
 |

1405 
USB_OTG_HCINTMSK_DTERRM
 |

1406 
USB_OTG_HCINTMSK_AHBERR
 |

1407 
USB_OTG_HCINTMSK_NAKM
;

1409 i‡((
ïnum
 & 0x80U) == 0x80U)

1411 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCINTMSK
 |
USB_OTG_HCINTMSK_BBERRM
;

1415 
EP_TYPE_INTR
:

1416 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |

1417 
USB_OTG_HCINTMSK_STALLM
 |

1418 
USB_OTG_HCINTMSK_TXERRM
 |

1419 
USB_OTG_HCINTMSK_DTERRM
 |

1420 
USB_OTG_HCINTMSK_NAKM
 |

1421 
USB_OTG_HCINTMSK_AHBERR
 |

1422 
USB_OTG_HCINTMSK_FRMORM
;

1424 i‡((
ïnum
 & 0x80U) == 0x80U)

1426 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCINTMSK
 |
USB_OTG_HCINTMSK_BBERRM
;

1431 
EP_TYPE_ISOC
:

1432 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCINTMSK
 = 
USB_OTG_HCINTMSK_XFRCM
 |

1433 
USB_OTG_HCINTMSK_ACKM
 |

1434 
USB_OTG_HCINTMSK_AHBERR
 |

1435 
USB_OTG_HCINTMSK_FRMORM
;

1437 i‡((
ïnum
 & 0x80U) == 0x80U)

1439 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCINTMSK
 |(
USB_OTG_HCINTMSK_TXERRM
 | 
USB_OTG_HCINTMSK_BBERRM
);

1444 
ªt
 = 
HAL_ERROR
;

1449 
USBx_HOST
->
HAINTMSK
 |1UL << (
ch_num
 & 0xFU);

1452 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_HCIM
;

1455 i‡((
ïnum
 & 0x80U) == 0x80U)

1457 
HCch¨EpDú
 = (0x1U << 15Ë& 
USB_OTG_HCCHAR_EPDIR
;

1461 
HCch¨EpDú
 = 0U;

1464 i‡(
•ìd
 =
HPRT0_PRTSPD_LOW_SPEED
)

1466 
HCch¨LowS≥ed
 = (0x1U << 17Ë& 
USB_OTG_HCCHAR_LSDEV
;

1470 
HCch¨LowS≥ed
 = 0U;

1473 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCCHAR
 = (((uöt32_t)
dev_addªss
 << 22Ë& 
USB_OTG_HCCHAR_DAD
) |

1474 ((((
uöt32_t
)
ïnum
 & 0x7FUË<< 11Ë& 
USB_OTG_HCCHAR_EPNUM
) |

1475 (((
uöt32_t
)
ï_ty≥
 << 18Ë& 
USB_OTG_HCCHAR_EPTYP
) |

1476 ((
uöt32_t
)
mps
 & 
USB_OTG_HCCHAR_MPSIZ
Ë| 
HCch¨EpDú
 | 
HCch¨LowS≥ed
;

1478 i‡(
ï_ty≥
 =
EP_TYPE_INTR
)

1480 
	`USBx_HC
((
uöt32_t
)
ch_num
)->
HCCHAR
 |
USB_OTG_HCCHAR_ODDFRM
 ;

1483  
ªt
;

1484 
	}
}

1492 
HAL_SètusTy≥Def
 
	$USB_HC_SèπX„r
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
USB_OTG_HCTy≥Def
 *
hc
)

1494 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1495 
uöt32_t
 
ch_num
 = (uöt32_t)
hc
->ch_num;

1496 
__IO
 
uöt32_t
 
tm¥eg
 = 0U;

1497 
uöt8_t
 
is_odd‰ame
;

1498 
uöt16_t
 
Àn_w‹ds
;

1499 
uöt16_t
 
num_∑ckës
;

1500 
uöt16_t
 
max_hc_pkt_cou¡
 = 256U;

1503 i‡(
hc
->
x„r_Àn
 > 0U)

1505 
num_∑ckës
 = (
uöt16_t
)((
hc
->
x„r_Àn
 + hc->
max_∑ckë
 - 1U) / hc->max_packet);

1507 i‡(
num_∑ckës
 > 
max_hc_pkt_cou¡
)

1509 
num_∑ckës
 = 
max_hc_pkt_cou¡
;

1510 
hc
->
x„r_Àn
 = (
uöt32_t
)
num_∑ckës
 * hc->
max_∑ckë
;

1515 
num_∑ckës
 = 1U;

1517 i‡(
hc
->
ï_is_ö
 != 0U)

1519 
hc
->
x„r_Àn
 = (
uöt32_t
)
num_∑ckës
 * hc->
max_∑ckë
;

1523 
	`USBx_HC
(
ch_num
)->
HCTSIZ
 = (
hc
->
x„r_Àn
 & 
USB_OTG_HCTSIZ_XFRSIZ
) |

1524 (((
uöt32_t
)
num_∑ckës
 << 19Ë& 
USB_OTG_HCTSIZ_PKTCNT
) |

1525 (((
uöt32_t
)
hc
->
d©a_pid
 << 29Ë& 
USB_OTG_HCTSIZ_DPID
);

1527 
is_odd‰ame
 = (((
uöt32_t
)
USBx_HOST
->
HFNUM
 & 0x01U) != 0U) ? 0U : 1U;

1528 
	`USBx_HC
(
ch_num
)->
HCCHAR
 &~
USB_OTG_HCCHAR_ODDFRM
;

1529 
	`USBx_HC
(
ch_num
)->
HCCHAR
 |(
uöt32_t
)
is_odd‰ame
 << 29;

1532 
tm¥eg
 = 
	`USBx_HC
(
ch_num
)->
HCCHAR
;

1533 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1536 i‡(
hc
->
ï_is_ö
 != 0U)

1538 
tm¥eg
 |
USB_OTG_HCCHAR_EPDIR
;

1542 
tm¥eg
 &~
USB_OTG_HCCHAR_EPDIR
;

1544 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1545 
	`USBx_HC
(
ch_num
)->
HCCHAR
 = 
tm¥eg
;

1547 i‡((
hc
->
ï_is_ö
 =0UË&& (hc->
x„r_Àn
 > 0U))

1549 
hc
->
ï_ty≥
)

1552 
EP_TYPE_CTRL
:

1553 
EP_TYPE_BULK
:

1555 
Àn_w‹ds
 = (
uöt16_t
)((
hc
->
x„r_Àn
 + 3U) / 4U);

1558 i‡(
Àn_w‹ds
 > (
USBx
->
HNPTXSTS
 & 0xFFFFU))

1561 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_NPTXFEM
;

1566 
EP_TYPE_INTR
:

1567 
EP_TYPE_ISOC
:

1568 
Àn_w‹ds
 = (
uöt16_t
)((
hc
->
x„r_Àn
 + 3U) / 4U);

1570 i‡(
Àn_w‹ds
 > (
USBx_HOST
->
HPTXSTS
 & 0xFFFFU))

1573 
USBx
->
GINTMSK
 |
USB_OTG_GINTMSK_PTXFEM
;

1582 ()
	`USB_WrôePackë
(
USBx
, 
hc
->
x„r_buff
, hc->
ch_num
, (
uöt16_t
)hc->
x„r_Àn
);

1585  
HAL_OK
;

1586 
	}
}

1593 
uöt32_t
 
	$USB_HC_RódI¡îru±
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1595 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1597  ((
USBx_HOST
->
HAINT
) & 0xFFFFU);

1598 
	}
}

1607 
HAL_SètusTy≥Def
 
	$USB_HC_HÆt
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
hc_num
)

1609 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1610 
uöt32_t
 
h˙um
 = (uöt32_t)
hc_num
;

1611 
uöt32_t
 
cou¡
 = 0U;

1612 
uöt32_t
 
HcEpTy≥
 = (
	`USBx_HC
(
h˙um
)->
HCCHAR
 & 
USB_OTG_HCCHAR_EPTYP
) >> 18;

1615 i‡((
HcEpTy≥
 =
HCCHAR_CTRL
Ë|| (HcEpTy≥ =
HCCHAR_BULK
))

1617 
	`USBx_HC
(
h˙um
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHDIS
;

1619 i‡((
USBx
->
HNPTXSTS
 & (0xFFU << 16)) == 0U)

1621 
	`USBx_HC
(
h˙um
)->
HCCHAR
 &~
USB_OTG_HCCHAR_CHENA
;

1622 
	`USBx_HC
(
h˙um
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1623 
	`USBx_HC
(
h˙um
)->
HCCHAR
 &~
USB_OTG_HCCHAR_EPDIR
;

1626 i‡(++
cou¡
 > 1000U)

1630 } (
	`USBx_HC
(
h˙um
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1634 
	`USBx_HC
(
h˙um
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1639 
	`USBx_HC
(
h˙um
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHDIS
;

1641 i‡((
USBx_HOST
->
HPTXSTS
 & (0xFFU << 16)) == 0U)

1643 
	`USBx_HC
(
h˙um
)->
HCCHAR
 &~
USB_OTG_HCCHAR_CHENA
;

1644 
	`USBx_HC
(
h˙um
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1645 
	`USBx_HC
(
h˙um
)->
HCCHAR
 &~
USB_OTG_HCCHAR_EPDIR
;

1648 i‡(++
cou¡
 > 1000U)

1652 } (
	`USBx_HC
(
h˙um
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1656 
	`USBx_HC
(
h˙um
)->
HCCHAR
 |
USB_OTG_HCCHAR_CHENA
;

1660  
HAL_OK
;

1661 
	}
}

1670 
HAL_SètusTy≥Def
 
	$USB_DoPög
(
USB_OTG_GlobÆTy≥Def
 *
USBx
, 
uöt8_t
 
ch_num
)

1672 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1673 
uöt32_t
 
chnum
 = (uöt32_t)
ch_num
;

1674 
uöt32_t
 
num_∑ckës
 = 1U;

1675 
uöt32_t
 
tm¥eg
;

1677 
	`USBx_HC
(
chnum
)->
HCTSIZ
 = ((
num_∑ckës
 << 19Ë& 
USB_OTG_HCTSIZ_PKTCNT
) |

1678 
USB_OTG_HCTSIZ_DOPING
;

1681 
tm¥eg
 = 
	`USBx_HC
(
chnum
)->
HCCHAR
;

1682 
tm¥eg
 &~
USB_OTG_HCCHAR_CHDIS
;

1683 
tm¥eg
 |
USB_OTG_HCCHAR_CHENA
;

1684 
	`USBx_HC
(
chnum
)->
HCCHAR
 = 
tm¥eg
;

1686  
HAL_OK
;

1687 
	}
}

1694 
HAL_SètusTy≥Def
 
	$USB_St›Ho°
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1696 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1697 
uöt32_t
 
cou¡
 = 0U;

1698 
uöt32_t
 
vÆue
;

1699 
uöt32_t
 
i
;

1701 ()
	`USB_DißbÀGlobÆI¡
(
USBx
);

1704 ()
	`USB_FlushTxFifo
(
USBx
, 0x10U);

1705 ()
	`USB_FlushRxFifo
(
USBx
);

1708 
i
 = 0U; i <= 15U; i++)

1710 
vÆue
 = 
	`USBx_HC
(
i
)->
HCCHAR
;

1711 
vÆue
 |
USB_OTG_HCCHAR_CHDIS
;

1712 
vÆue
 &~
USB_OTG_HCCHAR_CHENA
;

1713 
vÆue
 &~
USB_OTG_HCCHAR_EPDIR
;

1714 
	`USBx_HC
(
i
)->
HCCHAR
 = 
vÆue
;

1718 
i
 = 0U; i <= 15U; i++)

1720 
vÆue
 = 
	`USBx_HC
(
i
)->
HCCHAR
;

1721 
vÆue
 |
USB_OTG_HCCHAR_CHDIS
;

1722 
vÆue
 |
USB_OTG_HCCHAR_CHENA
;

1723 
vÆue
 &~
USB_OTG_HCCHAR_EPDIR
;

1724 
	`USBx_HC
(
i
)->
HCCHAR
 = 
vÆue
;

1728 i‡(++
cou¡
 > 1000U)

1732 } (
	`USBx_HC
(
i
)->
HCCHAR
 & 
USB_OTG_HCCHAR_CHENA
) == USB_OTG_HCCHAR_CHENA);

1736 
USBx_HOST
->
HAINT
 = 0xFFFFFFFFU;

1737 
USBx
->
GINTSTS
 = 0xFFFFFFFFU;

1739 ()
	`USB_E«bÀGlobÆI¡
(
USBx
);

1741  
HAL_OK
;

1742 
	}
}

1749 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1751 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1753 i‡((
USBx_DEVICE
->
DSTS
 & 
USB_OTG_DSTS_SUSPSTS
) == USB_OTG_DSTS_SUSPSTS)

1756 
USBx_DEVICE
->
DCTL
 |
USB_OTG_DCTL_RWUSIG
;

1759  
HAL_OK
;

1760 
	}
}

1767 
HAL_SètusTy≥Def
 
	$USB_DeA˘iv©eRemŸeWakeup
(
USB_OTG_GlobÆTy≥Def
 *
USBx
)

1769 
uöt32_t
 
USBx_BASE
 = (uöt32_t)
USBx
;

1772 
USBx_DEVICE
->
DCTL
 &~(
USB_OTG_DCTL_RWUSIG
);

1774  
HAL_OK
;

1775 
	}
}

1778 #i‡
deföed
 (
USB
)

1786 
HAL_SètusTy≥Def
 
	$USB_C‹eInô
(
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
cfg
)

1789 
	`UNUSED
(
USBx
);

1790 
	`UNUSED
(
cfg
);

1797  
HAL_OK
;

1798 
	}
}

1806 
HAL_SètusTy≥Def
 
	$USB_E«bÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
)

1808 
uöt32_t
 
wöãºu±mask
;

1811 
USBx
->
ISTR
 = 0U;

1814 
wöãºu±mask
 = 
USB_CNTR_CTRM
 | 
USB_CNTR_WKUPM
 |

1815 
USB_CNTR_SUSPM
 | 
USB_CNTR_ERRM
 |

1816 
USB_CNTR_SOFM
 | 
USB_CNTR_ESOFM
 |

1817 
USB_CNTR_RESETM
;

1820 
USBx
->
CNTR
 = (
uöt16_t
)
wöãºu±mask
;

1822  
HAL_OK
;

1823 
	}
}

1831 
HAL_SètusTy≥Def
 
	$USB_DißbÀGlobÆI¡
(
USB_Ty≥Def
 *
USBx
)

1833 
uöt32_t
 
wöãºu±mask
;

1836 
wöãºu±mask
 = 
USB_CNTR_CTRM
 | 
USB_CNTR_WKUPM
 |

1837 
USB_CNTR_SUSPM
 | 
USB_CNTR_ERRM
 |

1838 
USB_CNTR_SOFM
 | 
USB_CNTR_ESOFM
 |

1839 
USB_CNTR_RESETM
;

1842 
USBx
->
CNTR
 &(
uöt16_t
)(~
wöãºu±mask
);

1844  
HAL_OK
;

1845 
	}
}

1855 
HAL_SètusTy≥Def
 
	$USB_SëCuºítMode
(
USB_Ty≥Def
 *
USBx
, 
USB_ModeTy≥Def
 
mode
)

1858 
	`UNUSED
(
USBx
);

1859 
	`UNUSED
(
mode
);

1865  
HAL_OK
;

1866 
	}
}

1876 
HAL_SètusTy≥Def
 
	$USB_DevInô
(
USB_Ty≥Def
 *
USBx
, 
USB_CfgTy≥Def
 
cfg
)

1879 
	`UNUSED
(
cfg
);

1883 
USBx
->
CNTR
 = (
uöt16_t
)
USB_CNTR_FRES
;

1886 
USBx
->
CNTR
 = 0U;

1889 
USBx
->
ISTR
 = 0U;

1892 
USBx
->
BTABLE
 = 
BTABLE_ADDRESS
;

1894  
HAL_OK
;

1895 
	}
}

1905 
HAL_SètusTy≥Def
 
	$USB_FlushTxFifo
(
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
num
)

1908 
	`UNUSED
(
USBx
);

1909 
	`UNUSED
(
num
);

1916  
HAL_OK
;

1917 
	}
}

1924 
HAL_SètusTy≥Def
 
	$USB_FlushRxFifo
(
USB_Ty≥Def
 *
USBx
)

1927 
	`UNUSED
(
USBx
);

1934  
HAL_OK
;

1935 
	}
}

1943 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

1945 
HAL_SètusTy≥Def
 
ªt
 = 
HAL_OK
;

1946 
uöt16_t
 
wEpRegVÆ
;

1948 
wEpRegVÆ
 = 
	`PCD_GET_ENDPOINT
(
USBx
, 
ï
->
num
Ë& 
USB_EP_T_MASK
;

1951 
ï
->
ty≥
)

1953 
EP_TYPE_CTRL
:

1954 
wEpRegVÆ
 |
USB_EP_CONTROL
;

1957 
EP_TYPE_BULK
:

1958 
wEpRegVÆ
 |
USB_EP_BULK
;

1961 
EP_TYPE_INTR
:

1962 
wEpRegVÆ
 |
USB_EP_INTERRUPT
;

1965 
EP_TYPE_ISOC
:

1966 
wEpRegVÆ
 |
USB_EP_ISOCHRONOUS
;

1970 
ªt
 = 
HAL_ERROR
;

1974 
	`PCD_SET_ENDPOINT
(
USBx
, 
ï
->
num
, (
wEpRegVÆ
 | 
USB_EP_CTR_RX
 | 
USB_EP_CTR_TX
));

1976 
	`PCD_SET_EP_ADDRESS
(
USBx
, 
ï
->
num
,Ép->num);

1978 i‡(
ï
->
doubÀbuf„r
 == 0U)

1980 i‡(
ï
->
is_ö
 != 0U)

1983 
	`PCD_SET_EP_TX_ADDRESS
(
USBx
, 
ï
->
num
,Ép->
pmØdªss
);

1984 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

1986 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

1989 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_NAK
);

1994 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

2000 
	`PCD_SET_EP_RX_ADDRESS
(
USBx
, 
ï
->
num
,Ép->
pmØdªss
);

2003 
	`PCD_SET_EP_RX_CNT
(
USBx
, 
ï
->
num
,Ép->
max∑ckë
);

2004 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

2007 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

2014 
	`PCD_SET_EP_DBUF
(
USBx
, 
ï
->
num
);

2017 
	`PCD_SET_EP_DBUF_ADDR
(
USBx
, 
ï
->
num
,Ép->
pmØddr0
,Ép->
pmØddr1
);

2019 i‡(
ï
->
is_ö
 == 0U)

2022 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

2023 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

2025 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

2026 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

2031 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

2032 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

2034 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

2037 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_NAK
);

2042 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

2045 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

2049  
ªt
;

2050 
	}
}

2058 
HAL_SètusTy≥Def
 
	$USB_Dó˘iv©eEndpoöt
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

2060 i‡(
ï
->
doubÀbuf„r
 == 0U)

2062 i‡(
ï
->
is_ö
 != 0U)

2064 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

2067 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

2071 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

2074 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

2080 i‡(
ï
->
is_ö
 == 0U)

2083 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

2084 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

2087 
	`PCD_TX_DTOG
(
USBx
, 
ï
->
num
);

2089 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

2090 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

2095 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

2096 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

2097 
	`PCD_RX_DTOG
(
USBx
, 
ï
->
num
);

2100 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_DIS
);

2101 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_DIS
);

2105  
HAL_OK
;

2106 
	}
}

2114 
HAL_SètusTy≥Def
 
	$USB_EPSèπX„r
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

2116 
uöt32_t
 
Àn
;

2117 
uöt16_t
 
pmabuf„r
;

2118 
uöt16_t
 
wEPVÆ
;

2121 i‡(
ï
->
is_ö
 == 1U)

2124 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

2126 
Àn
 = 
ï
->
max∑ckë
;

2130 
Àn
 = 
ï
->
x„r_Àn
;

2134 i‡(
ï
->
doubÀbuf„r
 == 0U)

2136 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
,Ép->
pmØdªss
, (
uöt16_t
)
Àn
);

2137 
	`PCD_SET_EP_TX_CNT
(
USBx
, 
ï
->
num
, 
Àn
);

2142 i‡(
ï
->
ty≥
 =
EP_TYPE_BULK
)

2144 i‡(
ï
->
x„r_Àn_db
 >Ép->
max∑ckë
)

2147 
	`PCD_SET_EP_DBUF
(
USBx
, 
ï
->
num
);

2150 
ï
->
x„r_Àn_db
 -
Àn
;

2153 i‡((
	`PCD_GET_ENDPOINT
(
USBx
, 
ï
->
num
Ë& 
USB_EP_DTOG_TX
) != 0U)

2156 
	`PCD_SET_EP_DBUF1_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2157 
pmabuf„r
 = 
ï
->
pmØddr1
;

2160 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
, 
pmabuf„r
, (
uöt16_t
)
Àn
);

2161 
ï
->
x„r_buff
 +
Àn
;

2163 i‡(
ï
->
x„r_Àn_db
 >Ép->
max∑ckë
)

2165 
ï
->
x„r_Àn_db
 -
Àn
;

2169 
Àn
 = 
ï
->
x„r_Àn_db
;

2170 
ï
->
x„r_Àn_db
 = 0U;

2174 
	`PCD_SET_EP_DBUF0_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2175 
pmabuf„r
 = 
ï
->
pmØddr0
;

2178 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
, 
pmabuf„r
, (
uöt16_t
)
Àn
);

2183 
	`PCD_SET_EP_DBUF0_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2184 
pmabuf„r
 = 
ï
->
pmØddr0
;

2187 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
, 
pmabuf„r
, (
uöt16_t
)
Àn
);

2188 
ï
->
x„r_buff
 +
Àn
;

2190 i‡(
ï
->
x„r_Àn_db
 >Ép->
max∑ckë
)

2192 
ï
->
x„r_Àn_db
 -
Àn
;

2196 
Àn
 = 
ï
->
x„r_Àn_db
;

2197 
ï
->
x„r_Àn_db
 = 0U;

2201 
	`PCD_SET_EP_DBUF1_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2202 
pmabuf„r
 = 
ï
->
pmØddr1
;

2205 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
, 
pmabuf„r
, (
uöt16_t
)
Àn
);

2211 
Àn
 = 
ï
->
x„r_Àn_db
;

2214 
	`PCD_CLEAR_EP_DBUF
(
USBx
, 
ï
->
num
);

2217 
	`PCD_SET_EP_TX_CNT
(
USBx
, 
ï
->
num
, 
Àn
);

2218 
pmabuf„r
 = 
ï
->
pmØddr0
;

2221 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
, 
pmabuf„r
, (
uöt16_t
)
Àn
);

2229 i‡((
	`PCD_GET_ENDPOINT
(
USBx
, 
ï
->
num
Ë& 
USB_EP_DTOG_TX
) != 0U)

2232 
	`PCD_SET_EP_DBUF1_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2233 
pmabuf„r
 = 
ï
->
pmØddr1
;

2238 
	`PCD_SET_EP_DBUF0_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2239 
pmabuf„r
 = 
ï
->
pmØddr0
;

2242 
	`USB_WrôePMA
(
USBx
, 
ï
->
x„r_buff
, 
pmabuf„r
, (
uöt16_t
)
Àn
);

2243 
	`PCD_FªeU£rBuf„r
(
USBx
, 
ï
->
num
,Ép->
is_ö
);

2247 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_VALID
);

2251 i‡(
ï
->
doubÀbuf„r
 == 0U)

2254 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

2256 
Àn
 = 
ï
->
max∑ckë
;

2257 
ï
->
x„r_Àn
 -
Àn
;

2261 
Àn
 = 
ï
->
x„r_Àn
;

2262 
ï
->
x„r_Àn
 = 0U;

2265 
	`PCD_SET_EP_RX_CNT
(
USBx
, 
ï
->
num
, 
Àn
);

2271 i‡(
ï
->
ty≥
 =
EP_TYPE_BULK
)

2273 
	`PCD_SET_EP_DBUF_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
,Ép->
max∑ckë
);

2276 i‡(
ï
->
x„r_cou¡
 != 0U)

2279 
wEPVÆ
 = 
	`PCD_GET_ENDPOINT
(
USBx
, 
ï
->
num
);

2282 i‡((((
wEPVÆ
 & 
USB_EP_DTOG_RX
Ë!0UË&& ((wEPVÆ & 
USB_EP_DTOG_TX
) != 0U)) ||

2283 (((
wEPVÆ
 & 
USB_EP_DTOG_RX
Ë=0UË&& ((wEPVÆ & 
USB_EP_DTOG_TX
) == 0U)))

2285 
	`PCD_FªeU£rBuf„r
(
USBx
, 
ï
->
num
, 0U);

2290 i‡(
ï
->
ty≥
 =
EP_TYPE_ISOC
)

2293 i‡(
ï
->
x„r_Àn
 >Ép->
max∑ckë
)

2295 
Àn
 = 
ï
->
max∑ckë
;

2296 
ï
->
x„r_Àn
 -
Àn
;

2300 
Àn
 = 
ï
->
x„r_Àn
;

2301 
ï
->
x„r_Àn
 = 0U;

2303 
	`PCD_SET_EP_DBUF_CNT
(
USBx
, 
ï
->
num
,Ép->
is_ö
, 
Àn
);

2307  
HAL_ERROR
;

2311 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

2314  
HAL_OK
;

2315 
	}
}

2324 
HAL_SètusTy≥Def
 
	$USB_EPSëSèŒ
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

2326 i‡(
ï
->
is_ö
 != 0U)

2328 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_STALL
);

2332 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_STALL
);

2335  
HAL_OK
;

2336 
	}
}

2344 
HAL_SètusTy≥Def
 
	$USB_EPCÀ¨SèŒ
(
USB_Ty≥Def
 *
USBx
, 
USB_EPTy≥Def
 *
ï
)

2346 i‡(
ï
->
doubÀbuf„r
 == 0U)

2348 i‡(
ï
->
is_ö
 != 0U)

2350 
	`PCD_CLEAR_TX_DTOG
(
USBx
, 
ï
->
num
);

2352 i‡(
ï
->
ty≥
 !
EP_TYPE_ISOC
)

2355 
	`PCD_SET_EP_TX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_TX_NAK
);

2360 
	`PCD_CLEAR_RX_DTOG
(
USBx
, 
ï
->
num
);

2363 
	`PCD_SET_EP_RX_STATUS
(
USBx
, 
ï
->
num
, 
USB_EP_RX_VALID
);

2367  
HAL_OK
;

2368 
	}
}

2375 
HAL_SètusTy≥Def
 
	$USB_St›Devi˚
(
USB_Ty≥Def
 *
USBx
)

2378 
USBx
->
CNTR
 = (
uöt16_t
)
USB_CNTR_FRES
;

2381 
USBx
->
ISTR
 = 0U;

2384 
USBx
->
CNTR
 = (
uöt16_t
)(
USB_CNTR_FRES
 | 
USB_CNTR_PDWN
);

2386  
HAL_OK
;

2387 
	}
}

2396 
HAL_SètusTy≥Def
 
	$USB_SëDevAddªss
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
addªss
)

2398 i‡(
addªss
 == 0U)

2401 
USBx
->
DADDR
 = (
uöt16_t
)
USB_DADDR_EF
;

2404  
HAL_OK
;

2405 
	}
}

2412 
HAL_SètusTy≥Def
 
	$USB_DevC⁄√˘
(
USB_Ty≥Def
 *
USBx
)

2415 
	`UNUSED
(
USBx
);

2422  
HAL_OK
;

2423 
	}
}

2430 
HAL_SètusTy≥Def
 
	$USB_DevDisc⁄√˘
(
USB_Ty≥Def
 *
USBx
)

2433 
	`UNUSED
(
USBx
);

2440  
HAL_OK
;

2441 
	}
}

2448 
uöt32_t
 
	$USB_RódI¡îru±s
(
USB_Ty≥Def
 *
USBx
)

2450 
uöt32_t
 
tm¥eg
;

2452 
tm¥eg
 = 
USBx
->
ISTR
;

2453  
tm¥eg
;

2454 
	}
}

2461 
uöt32_t
 
	$USB_RódDevAŒOutEpI¡îru±
(
USB_Ty≥Def
 *
USBx
)

2464 
	`UNUSED
(
USBx
);

2470 
	}
}

2477 
uöt32_t
 
	$USB_RódDevAŒInEpI¡îru±
(
USB_Ty≥Def
 *
USBx
)

2480 
	`UNUSED
(
USBx
);

2486 
	}
}

2495 
uöt32_t
 
	$USB_RódDevOutEPI¡îru±
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
ïnum
)

2498 
	`UNUSED
(
USBx
);

2499 
	`UNUSED
(
ïnum
);

2505 
	}
}

2514 
uöt32_t
 
	$USB_RódDevInEPI¡îru±
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 
ïnum
)

2517 
	`UNUSED
(
USBx
);

2518 
	`UNUSED
(
ïnum
);

2524 
	}
}

2532 
	$USB_CÀ¨I¡îru±s
(
USB_Ty≥Def
 *
USBx
, 
uöt32_t
 
öãºu±
)

2535 
	`UNUSED
(
USBx
);

2536 
	`UNUSED
(
öãºu±
);

2541 
	}
}

2549 
HAL_SètusTy≥Def
 
	$USB_EP0_OutSèπ
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
p£tup
)

2552 
	`UNUSED
(
USBx
);

2553 
	`UNUSED
(
p£tup
);

2558  
HAL_OK
;

2559 
	}
}

2566 
HAL_SètusTy≥Def
 
	$USB_A˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
)

2568 
USBx
->
CNTR
 |(
uöt16_t
)
USB_CNTR_RESUME
;

2570  
HAL_OK
;

2571 
	}
}

2578 
HAL_SètusTy≥Def
 
	$USB_DeA˘iv©eRemŸeWakeup
(
USB_Ty≥Def
 *
USBx
)

2580 
USBx
->
CNTR
 &(
uöt16_t
)(~
USB_CNTR_RESUME
);

2582  
HAL_OK
;

2583 
	}
}

2593 
	$USB_WrôePMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

2595 
uöt32_t
 
n
 = ((uöt32_t)
wNByãs
 + 1U) >> 1;

2596 
uöt32_t
 
Ba£Addr
 = (uöt32_t)
USBx
;

2597 
uöt32_t
 
i
, 
ãmp1
, 
ãmp2
;

2598 
__IO
 
uöt16_t
 *
pdwVÆ
;

2599 
uöt8_t
 *
pBuf
 = 
pbU§Buf
;

2601 
pdwVÆ
 = (
__IO
 
uöt16_t
 *)(
Ba£Addr
 + 0x400U + ((
uöt32_t
)
wPMABufAddr
 * 
PMA_ACCESS
));

2603 
i
 = 
n
; i != 0U; i--)

2605 
ãmp1
 = *
pBuf
;

2606 
pBuf
++;

2607 
ãmp2
 = 
ãmp1
 | ((
uöt16_t
)((uöt16_tË*
pBuf
 << 8));

2608 *
pdwVÆ
 = (
uöt16_t
)
ãmp2
;

2609 
pdwVÆ
++;

2611 #i‡
PMA_ACCESS
 > 1U

2612 
pdwVÆ
++;

2615 
pBuf
++;

2617 
	}
}

2627 
	$USB_RódPMA
(
USB_Ty≥Def
 *
USBx
, 
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

2629 
uöt32_t
 
n
 = (uöt32_t)
wNByãs
 >> 1;

2630 
uöt32_t
 
Ba£Addr
 = (uöt32_t)
USBx
;

2631 
uöt32_t
 
i
, 
ãmp
;

2632 
__IO
 
uöt16_t
 *
pdwVÆ
;

2633 
uöt8_t
 *
pBuf
 = 
pbU§Buf
;

2635 
pdwVÆ
 = (
__IO
 
uöt16_t
 *)(
Ba£Addr
 + 0x400U + ((
uöt32_t
)
wPMABufAddr
 * 
PMA_ACCESS
));

2637 
i
 = 
n
; i != 0U; i--)

2639 
ãmp
 = *(
__IO
 
uöt16_t
 *)
pdwVÆ
;

2640 
pdwVÆ
++;

2641 *
pBuf
 = (
uöt8_t
)((
ãmp
 >> 0) & 0xFFU);

2642 
pBuf
++;

2643 *
pBuf
 = (
uöt8_t
)((
ãmp
 >> 8) & 0xFFU);

2644 
pBuf
++;

2646 #i‡
PMA_ACCESS
 > 1U

2647 
pdwVÆ
++;

2651 i‡((
wNByãs
 % 2U) != 0U)

2653 
ãmp
 = *
pdwVÆ
;

2654 *
pBuf
 = (
uöt8_t
)((
ãmp
 >> 0) & 0xFFU);

2656 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Inc\main.h

23 #i‚de‡
__MAIN_H


24 
	#__MAIN_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f1xx_hÆ.h
"

35 
	~"ps2_¥Ÿocﬁ.h
"

54 
Eº‹_H™dÀr
();

61 
	#ONBOARD_LED_Pö
 
GPIO_PIN_13


	)

62 
	#ONBOARD_LED_GPIO_P‹t
 
GPIOC


	)

63 
	#KB1_Pö
 
GPIO_PIN_1


	)

64 
	#KB1_GPIO_P‹t
 
GPIOA


	)

65 
	#MOUSE1_Pö
 
GPIO_PIN_2


	)

66 
	#MOUSE1_GPIO_P‹t
 
GPIOA


	)

67 
	#KB2_Pö
 
GPIO_PIN_3


	)

68 
	#KB2_GPIO_P‹t
 
GPIOA


	)

69 
	#MOUSE2_Pö
 
GPIO_PIN_4


	)

70 
	#MOUSE2_GPIO_P‹t
 
GPIOA


	)

71 
	#CLOCK1_Pö
 
GPIO_PIN_15


	)

72 
	#CLOCK1_GPIO_P‹t
 
GPIOA


	)

73 
	#CLOCK1_EXTI_IRQn
 
EXTI15_10_IRQn


	)

74 
	#DATA1_Pö
 
GPIO_PIN_3


	)

75 
	#DATA1_GPIO_P‹t
 
GPIOB


	)

76 
	#CLOCK2_Pö
 
GPIO_PIN_4


	)

77 
	#CLOCK2_GPIO_P‹t
 
GPIOB


	)

78 
	#CLOCK2_EXTI_IRQn
 
EXTI4_IRQn


	)

79 
	#DATA2_Pö
 
GPIO_PIN_6


	)

80 
	#DATA2_GPIO_P‹t
 
GPIOB


	)

85 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Inc\stm32f1xx_hal_conf.h

20 #i‚de‡
__STM32F1xx_HAL_CONF_H


21 
	#__STM32F1xx_HAL_CONF_H


	)

23 #ifde‡
__˝lu•lus


35 
	#HAL_MODULE_ENABLED


	)

47 
	#HAL_GPIO_MODULE_ENABLED


	)

55 
	#HAL_PCD_MODULE_ENABLED


	)

59 
	#HAL_RTC_MODULE_ENABLED


	)

71 
	#HAL_CORTEX_MODULE_ENABLED


	)

72 
	#HAL_DMA_MODULE_ENABLED


	)

73 
	#HAL_FLASH_MODULE_ENABLED


	)

74 
	#HAL_EXTI_MODULE_ENABLED


	)

75 
	#HAL_GPIO_MODULE_ENABLED


	)

76 
	#HAL_PWR_MODULE_ENABLED


	)

77 
	#HAL_RCC_MODULE_ENABLED


	)

85 #i‡!
deföed
 (
HSE_VALUE
)

86 
	#HSE_VALUE
 8000000U

	)

89 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

90 
	#HSE_STARTUP_TIMEOUT
 100U

	)

98 #i‡!
deföed
 (
HSI_VALUE
)

99 
	#HSI_VALUE
 8000000U

	)

105 #i‡!
deföed
 (
LSI_VALUE
)

106 
	#LSI_VALUE
 40000U

	)

108 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


109 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
. */

115 #i‡!
deföed
 (
LSE_VALUE
)

116 
	#LSE_VALUE
 32768U

	)

119 #i‡!
deföed
 (
LSE_STARTUP_TIMEOUT
)

120 
	#LSE_STARTUP_TIMEOUT
 5000U

	)

130 
	#VDD_VALUE
 3300U

	)

131 
	#TICK_INT_PRIORITY
 0U

	)

132 
	#USE_RTOS
 0U

	)

133 
	#PREFETCH_ENABLE
 1U

	)

135 
	#USE_HAL_ADC_REGISTER_CALLBACKS
 0U

	)

136 
	#USE_HAL_CAN_REGISTER_CALLBACKS
 0U

	)

137 
	#USE_HAL_CEC_REGISTER_CALLBACKS
 0U

	)

138 
	#USE_HAL_DAC_REGISTER_CALLBACKS
 0U

	)

139 
	#USE_HAL_ETH_REGISTER_CALLBACKS
 0U

	)

140 
	#USE_HAL_HCD_REGISTER_CALLBACKS
 0U

	)

141 
	#USE_HAL_I2C_REGISTER_CALLBACKS
 0U

	)

142 
	#USE_HAL_I2S_REGISTER_CALLBACKS
 0U

	)

143 
	#USE_HAL_MMC_REGISTER_CALLBACKS
 0U

	)

144 
	#USE_HAL_NAND_REGISTER_CALLBACKS
 0U

	)

145 
	#USE_HAL_NOR_REGISTER_CALLBACKS
 0U

	)

146 
	#USE_HAL_PCCARD_REGISTER_CALLBACKS
 0U

	)

147 
	#USE_HAL_PCD_REGISTER_CALLBACKS
 0U

	)

148 
	#USE_HAL_RTC_REGISTER_CALLBACKS
 0U

	)

149 
	#USE_HAL_SD_REGISTER_CALLBACKS
 0U

	)

150 
	#USE_HAL_SMARTCARD_REGISTER_CALLBACKS
 0U

	)

151 
	#USE_HAL_IRDA_REGISTER_CALLBACKS
 0U

	)

152 
	#USE_HAL_SRAM_REGISTER_CALLBACKS
 0U

	)

153 
	#USE_HAL_SPI_REGISTER_CALLBACKS
 0U

	)

154 
	#USE_HAL_TIM_REGISTER_CALLBACKS
 0U

	)

155 
	#USE_HAL_UART_REGISTER_CALLBACKS
 0U

	)

156 
	#USE_HAL_USART_REGISTER_CALLBACKS
 0U

	)

157 
	#USE_HAL_WWDG_REGISTER_CALLBACKS
 0U

	)

171 
	#MAC_ADDR0
 2U

	)

172 
	#MAC_ADDR1
 0U

	)

173 
	#MAC_ADDR2
 0U

	)

174 
	#MAC_ADDR3
 0U

	)

175 
	#MAC_ADDR4
 0U

	)

176 
	#MAC_ADDR5
 0U

	)

179 
	#ETH_RX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

180 
	#ETH_TX_BUF_SIZE
 
ETH_MAX_PACKET_SIZE


	)

181 
	#ETH_RXBUFNB
 8U

	)

182 
	#ETH_TXBUFNB
 4U

	)

187 
	#DP83848_PHY_ADDRESS
 0x01U

	)

189 
	#PHY_RESET_DELAY
 0x000000FFU

	)

191 
	#PHY_CONFIG_DELAY
 0x00000FFFU

	)

193 
	#PHY_READ_TO
 0x0000FFFFU

	)

194 
	#PHY_WRITE_TO
 0x0000FFFFU

	)

198 
	#PHY_BCR
 ((
uöt16_t
)0x00Ë

	)

199 
	#PHY_BSR
 ((
uöt16_t
)0x01Ë

	)

201 
	#PHY_RESET
 ((
uöt16_t
)0x8000Ë

	)

202 
	#PHY_LOOPBACK
 ((
uöt16_t
)0x4000Ë

	)

203 
	#PHY_FULLDUPLEX_100M
 ((
uöt16_t
)0x2100Ë

	)

204 
	#PHY_HALFDUPLEX_100M
 ((
uöt16_t
)0x2000Ë

	)

205 
	#PHY_FULLDUPLEX_10M
 ((
uöt16_t
)0x0100Ë

	)

206 
	#PHY_HALFDUPLEX_10M
 ((
uöt16_t
)0x0000Ë

	)

207 
	#PHY_AUTONEGOTIATION
 ((
uöt16_t
)0x1000Ë

	)

208 
	#PHY_RESTART_AUTONEGOTIATION
 ((
uöt16_t
)0x0200Ë

	)

209 
	#PHY_POWERDOWN
 ((
uöt16_t
)0x0800Ë

	)

210 
	#PHY_ISOLATE
 ((
uöt16_t
)0x0400Ë

	)

212 
	#PHY_AUTONEGO_COMPLETE
 ((
uöt16_t
)0x0020Ë

	)

213 
	#PHY_LINKED_STATUS
 ((
uöt16_t
)0x0004Ë

	)

214 
	#PHY_JABBER_DETECTION
 ((
uöt16_t
)0x0002Ë

	)

217 
	#PHY_SR
 ((
uöt16_t
)0x10UË

	)

219 
	#PHY_SPEED_STATUS
 ((
uöt16_t
)0x0002UË

	)

220 
	#PHY_DUPLEX_STATUS
 ((
uöt16_t
)0x0004UË

	)

229 
	#USE_SPI_CRC
 0U

	)

236 #ifde‡
HAL_RCC_MODULE_ENABLED


237 
	~"°m32f1xx_hÆ_rcc.h
"

240 #ifde‡
HAL_GPIO_MODULE_ENABLED


241 
	~"°m32f1xx_hÆ_gpio.h
"

244 #ifde‡
HAL_EXTI_MODULE_ENABLED


245 
	~"°m32f1xx_hÆ_exti.h
"

248 #ifde‡
HAL_DMA_MODULE_ENABLED


249 
	~"°m32f1xx_hÆ_dma.h
"

252 #ifde‡
HAL_ETH_MODULE_ENABLED


253 
	~"°m32f1xx_hÆ_ëh.h
"

256 #ifde‡
HAL_CAN_MODULE_ENABLED


257 
	~"°m32f1xx_hÆ_ˇn.h
"

260 #ifde‡
HAL_CAN_LEGACY_MODULE_ENABLED


261 
	~"Legacy/°m32f1xx_hÆ_ˇn_Àgacy.h
"

264 #ifde‡
HAL_CEC_MODULE_ENABLED


265 
	~"°m32f1xx_hÆ_˚c.h
"

268 #ifde‡
HAL_CORTEX_MODULE_ENABLED


269 
	~"°m32f1xx_hÆ_c‹ãx.h
"

272 #ifde‡
HAL_ADC_MODULE_ENABLED


273 
	~"°m32f1xx_hÆ_adc.h
"

276 #ifde‡
HAL_CRC_MODULE_ENABLED


277 
	~"°m32f1xx_hÆ_¸c.h
"

280 #ifde‡
HAL_DAC_MODULE_ENABLED


281 
	~"°m32f1xx_hÆ_dac.h
"

284 #ifde‡
HAL_FLASH_MODULE_ENABLED


285 
	~"°m32f1xx_hÆ_Êash.h
"

288 #ifde‡
HAL_SRAM_MODULE_ENABLED


289 
	~"°m32f1xx_hÆ_§am.h
"

292 #ifde‡
HAL_NOR_MODULE_ENABLED


293 
	~"°m32f1xx_hÆ_n‹.h
"

296 #ifde‡
HAL_I2C_MODULE_ENABLED


297 
	~"°m32f1xx_hÆ_i2c.h
"

300 #ifde‡
HAL_I2S_MODULE_ENABLED


301 
	~"°m32f1xx_hÆ_i2s.h
"

304 #ifde‡
HAL_IWDG_MODULE_ENABLED


305 
	~"°m32f1xx_hÆ_iwdg.h
"

308 #ifde‡
HAL_PWR_MODULE_ENABLED


309 
	~"°m32f1xx_hÆ_pwr.h
"

312 #ifde‡
HAL_RTC_MODULE_ENABLED


313 
	~"°m32f1xx_hÆ_πc.h
"

316 #ifde‡
HAL_PCCARD_MODULE_ENABLED


317 
	~"°m32f1xx_hÆ_pcˇrd.h
"

320 #ifde‡
HAL_SD_MODULE_ENABLED


321 
	~"°m32f1xx_hÆ_sd.h
"

324 #ifde‡
HAL_NAND_MODULE_ENABLED


325 
	~"°m32f1xx_hÆ_«nd.h
"

328 #ifde‡
HAL_SPI_MODULE_ENABLED


329 
	~"°m32f1xx_hÆ_•i.h
"

332 #ifde‡
HAL_TIM_MODULE_ENABLED


333 
	~"°m32f1xx_hÆ_tim.h
"

336 #ifde‡
HAL_UART_MODULE_ENABLED


337 
	~"°m32f1xx_hÆ_u¨t.h
"

340 #ifde‡
HAL_USART_MODULE_ENABLED


341 
	~"°m32f1xx_hÆ_ußπ.h
"

344 #ifde‡
HAL_IRDA_MODULE_ENABLED


345 
	~"°m32f1xx_hÆ_úda.h
"

348 #ifde‡
HAL_SMARTCARD_MODULE_ENABLED


349 
	~"°m32f1xx_hÆ_sm¨tˇrd.h
"

352 #ifde‡
HAL_WWDG_MODULE_ENABLED


353 
	~"°m32f1xx_hÆ_wwdg.h
"

356 #ifde‡
HAL_PCD_MODULE_ENABLED


357 
	~"°m32f1xx_hÆ_pcd.h
"

360 #ifde‡
HAL_HCD_MODULE_ENABLED


361 
	~"°m32f1xx_hÆ_hcd.h
"

364 #ifde‡
HAL_MMC_MODULE_ENABLED


365 
	~"°m32f1xx_hÆ_mmc.h
"

369 #ifde‡ 
USE_FULL_ASSERT


378 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0U : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

380 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

382 
	#as£π_∑øm
(
ex¥
Ë(()0U)

	)

385 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Inc\stm32f1xx_it.h

22 #i‚de‡
__STM32F1xx_IT_H


23 
	#__STM32F1xx_IT_H


	)

25 #ifde‡
__˝lu•lus


50 
NMI_H™dÀr
();

51 
H¨dFau…_H™dÀr
();

52 
MemM™age_H™dÀr
();

53 
BusFau…_H™dÀr
();

54 
UßgeFau…_H™dÀr
();

55 
SVC_H™dÀr
();

56 
DebugM⁄_H™dÀr
();

57 
PídSV_H™dÀr
();

58 
SysTick_H™dÀr
();

59 
EXTI4_IRQH™dÀr
();

60 
USB_LP_CAN1_RX0_IRQH™dÀr
();

61 
EXTI15_10_IRQH™dÀr
();

66 #ifde‡
__˝lu•lus


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\STM32F103C8TX_FLASH.ld

28 
	$ENTRY
(
Re£t_H™dÀr
)

31 
_e°ack
 = 
	`ORIGIN
(
RAM
Ë+ 
	`LENGTH
(RAM);

33 
_Mö_Hóp_Size
 = 0x200 ;

34 
_Mö_Sèck_Size
 = 0x400 ;

37 
MEMORY


39 
	`RAM
 (
xrw
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 20
K


40 
	`FLASH
 (
rx
Ë: 
ORIGIN
 = 0x8000000, 
LENGTH
 = 64
K


41 
	}
}

44 
	gSECTIONS


47 .
	gi§_ve˘‹
 :

49 . = 
ALIGN
(4);

50 
KEEP
(*(.
i§_ve˘‹
))

51 . = 
ALIGN
(4);

52 } >
	gFLASH


55 .
	gãxt
 :

57 . = 
ALIGN
(4);

58 *(.
	gãxt
)

59 *(.
	gãxt
*)

60 *(.
	gglue_7
)

61 *(.
	gglue_7t
)

62 *(.
	geh_‰ame
)

64 
KEEP
 (*(.
öô
))

65 
KEEP
 (*(.
föi
))

67 . = 
ALIGN
(4);

68 
	g_ëext
 = .;

69 } >
	gFLASH


72 .
	grod©a
 :

74 . = 
ALIGN
(4);

75 *(.
	grod©a
)

76 *(.
	grod©a
*)

77 . = 
ALIGN
(4);

78 } >
	gFLASH


80 .
	gARM
.
	gexèb
 : {

81 . = 
ALIGN
(4);

82 *(.
	gARM
.
	gexèb
* .
	ggnu
.
	glök⁄˚
.
	g¨mexèb
.*)

83 . = 
ALIGN
(4);

84 } >
	gFLASH


86 .
	gARM
 : {

87 . = 
ALIGN
(4);

88 
	g__exidx_°¨t
 = .;

89 *(.
	gARM
.
	gexidx
*)

90 
	g__exidx_íd
 = .;

91 . = 
ALIGN
(4);

92 } >
	gFLASH


94 .
	g¥eöô_¨øy
 :

96 . = 
ALIGN
(4);

97 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

98 
KEEP
 (*(.
¥eöô_¨øy
*))

99 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

100 . = 
ALIGN
(4);

101 } >
	gFLASH


103 .
	göô_¨øy
 :

105 . = 
ALIGN
(4);

106 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

107 
KEEP
 (*(
SORT
(.
öô_¨øy
.*)))

108 
KEEP
 (*(.
öô_¨øy
*))

109 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

110 . = 
ALIGN
(4);

111 } >
	gFLASH


113 .
	gföi_¨øy
 :

115 . = 
ALIGN
(4);

116 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

117 
KEEP
 (*(
SORT
(.
föi_¨øy
.*)))

118 
KEEP
 (*(.
föi_¨øy
*))

119 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

120 . = 
ALIGN
(4);

121 } >
FLASH


124 
	g_sid©a
 = 
LOADADDR
(.
d©a
);

127 .
	gd©a
 :

129 . = 
ALIGN
(4);

130 
	g_sd©a
 = .;

131 *(.
	gd©a
)

132 *(.
	gd©a
*)

134 . = 
ALIGN
(4);

135 
	g_ed©a
 = .;

137 } >
RAM
 
	gAT
> 
	gFLASH


140 . = 
ALIGN
(4);

141 .
	gbss
 :

144 
_sbss
 = .;

145 
	g__bss_°¨t__
 = 
_sbss
;

146 *(.
	gbss
)

147 *(.
	gbss
*)

148 *(
	gCOMMON
)

150 . = 
ALIGN
(4);

151 
	g_ebss
 = .;

152 
	g__bss_íd__
 = 
_ebss
;

153 } >
	gRAM


156 .
	g_u£r_hóp_°ack
 :

158 . = 
ALIGN
(8);

159 
PROVIDE
 ( 
íd
 = . );

160 
PROVIDE
 ( 
_íd
 = . );

161 . = . + 
_Mö_Hóp_Size
;

162 . = . + 
_Mö_Sèck_Size
;

163 . = 
ALIGN
(8);

164 } >
	gRAM


167 /
	gDISCARD
/ :

169 
libc
.
a
 ( * )

170 
libm
.
a
 ( * )

171 
libgcc
.
a
 ( * )

174 .
ARM
.
©åibuãs
 0 : { *(.ARM.attributes) }

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\main.c

21 
	~"maö.h
"

43 
RTC_H™dÀTy≥Def
 
	ghπc
;

45 
PCD_H™dÀTy≥Def
 
	ghpcd_USB_FS
;

52 
Sy°emClock_C⁄fig
();

53 
MX_GPIO_Inô
();

54 
MX_RTC_Inô
();

55 
MX_USB_PCD_Inô
();

57 
PS2_PINS_Ouçut_OD_High
();

69 
	$maö
()

78 
	`HAL_Inô
();

85 
	`Sy°emClock_C⁄fig
();

92 
	`MX_GPIO_Inô
();

93 
	`MX_RTC_Inô
();

94 
	`MX_USB_PCD_Inô
();

96 
	`PS2_PINS_Ouçut_OD_High
();

115 
	`HAL_GPIO_ToggÀPö
(
ONBOARD_LED_GPIO_P‹t
, 
ONBOARD_LED_Pö
);

116 
	`HAL_Dñay
(500);

123 
	}
}

129 
	$Sy°emClock_C⁄fig
()

131 
RCC_OscInôTy≥Def
 
RCC_OscInôSåu˘
 = {0};

132 
RCC_ClkInôTy≥Def
 
RCC_ClkInôSåu˘
 = {0};

133 
RCC_PîùhCLKInôTy≥Def
 
PîùhClkInô
 = {0};

138 
RCC_OscInôSåu˘
.
Oscûœt‹Ty≥
 = 
RCC_OSCILLATORTYPE_HSE
;

139 
RCC_OscInôSåu˘
.
HSESèã
 = 
RCC_HSE_ON
;

140 
RCC_OscInôSåu˘
.
HSEPªdivVÆue
 = 
RCC_HSE_PREDIV_DIV1
;

141 
RCC_OscInôSåu˘
.
HSISèã
 = 
RCC_HSI_ON
;

142 
RCC_OscInôSåu˘
.
PLL
.
PLLSèã
 = 
RCC_PLL_ON
;

143 
RCC_OscInôSåu˘
.
PLL
.
PLLSour˚
 = 
RCC_PLLSOURCE_HSE
;

144 
RCC_OscInôSåu˘
.
PLL
.
PLLMUL
 = 
RCC_PLL_MUL6
;

145 i‡(
	`HAL_RCC_OscC⁄fig
(&
RCC_OscInôSåu˘
Ë!
HAL_OK
)

147 
	`Eº‹_H™dÀr
();

151 
RCC_ClkInôSåu˘
.
ClockTy≥
 = 
RCC_CLOCKTYPE_HCLK
|
RCC_CLOCKTYPE_SYSCLK


152 |
RCC_CLOCKTYPE_PCLK1
|
RCC_CLOCKTYPE_PCLK2
;

153 
RCC_ClkInôSåu˘
.
SYSCLKSour˚
 = 
RCC_SYSCLKSOURCE_PLLCLK
;

154 
RCC_ClkInôSåu˘
.
AHBCLKDividî
 = 
RCC_SYSCLK_DIV1
;

155 
RCC_ClkInôSåu˘
.
APB1CLKDividî
 = 
RCC_HCLK_DIV2
;

156 
RCC_ClkInôSåu˘
.
APB2CLKDividî
 = 
RCC_HCLK_DIV1
;

158 i‡(
	`HAL_RCC_ClockC⁄fig
(&
RCC_ClkInôSåu˘
, 
FLASH_LATENCY_1
Ë!
HAL_OK
)

160 
	`Eº‹_H™dÀr
();

162 
PîùhClkInô
.
PîùhClockSñe˘i⁄
 = 
RCC_PERIPHCLK_RTC
|
RCC_PERIPHCLK_USB
;

163 
PîùhClkInô
.
RTCClockSñe˘i⁄
 = 
RCC_RTCCLKSOURCE_HSE_DIV128
;

164 
PîùhClkInô
.
UsbClockSñe˘i⁄
 = 
RCC_USBCLKSOURCE_PLL
;

165 i‡(
	`HAL_RCCEx_PîùhCLKC⁄fig
(&
PîùhClkInô
Ë!
HAL_OK
)

167 
	`Eº‹_H™dÀr
();

169 
	}
}

176 
	$MX_RTC_Inô
()

183 
RTC_TimeTy≥Def
 
sTime
 = {0};

184 
RTC_D©eTy≥Def
 
D©eToUpd©e
 = {0};

191 
hπc
.
In°™˚
 = 
RTC
;

192 
hπc
.
Inô
.
AsynchPªdiv
 = 
RTC_AUTO_1_SECOND
;

193 
hπc
.
Inô
.
OutPut
 = 
RTC_OUTPUTSOURCE_NONE
;

194 i‡(
	`HAL_RTC_Inô
(&
hπc
Ë!
HAL_OK
)

196 
	`Eº‹_H™dÀr
();

205 
sTime
.
Hours
 = 0x1;

206 
sTime
.
Möuãs
 = 0x0;

207 
sTime
.
Sec⁄ds
 = 0x0;

209 i‡(
	`HAL_RTC_SëTime
(&
hπc
, &
sTime
, 
RTC_FORMAT_BCD
Ë!
HAL_OK
)

211 
	`Eº‹_H™dÀr
();

213 
D©eToUpd©e
.
WìkDay
 = 
RTC_WEEKDAY_MONDAY
;

214 
D©eToUpd©e
.
M⁄th
 = 
RTC_MONTH_JANUARY
;

215 
D©eToUpd©e
.
D©e
 = 0x1;

216 
D©eToUpd©e
.
Yór
 = 0x0;

218 i‡(
	`HAL_RTC_SëD©e
(&
hπc
, &
D©eToUpd©e
, 
RTC_FORMAT_BCD
Ë!
HAL_OK
)

220 
	`Eº‹_H™dÀr
();

226 
	}
}

233 
	$MX_USB_PCD_Inô
()

243 
hpcd_USB_FS
.
In°™˚
 = 
USB
;

244 
hpcd_USB_FS
.
Inô
.
dev_ídpoöts
 = 8;

245 
hpcd_USB_FS
.
Inô
.
•ìd
 = 
PCD_SPEED_FULL
;

246 
hpcd_USB_FS
.
Inô
.
low_powî_íabÀ
 = 
DISABLE
;

247 
hpcd_USB_FS
.
Inô
.
Õm_íabÀ
 = 
DISABLE
;

248 
hpcd_USB_FS
.
Inô
.
b©ãry_ch¨gög_íabÀ
 = 
DISABLE
;

249 i‡(
	`HAL_PCD_Inô
(&
hpcd_USB_FS
Ë!
HAL_OK
)

251 
	`Eº‹_H™dÀr
();

257 
	}
}

264 
	$MX_GPIO_Inô
()

266 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
 = {0};

269 
	`__HAL_RCC_GPIOC_CLK_ENABLE
();

270 
	`__HAL_RCC_GPIOD_CLK_ENABLE
();

271 
	`__HAL_RCC_GPIOA_CLK_ENABLE
();

272 
	`__HAL_RCC_GPIOB_CLK_ENABLE
();

275 
	`HAL_GPIO_WrôePö
(
ONBOARD_LED_GPIO_P‹t
, 
ONBOARD_LED_Pö
, 
GPIO_PIN_RESET
);

278 
	`HAL_GPIO_WrôePö
(
GPIOA
, 
KB1_Pö
|
MOUSE1_Pö
|
KB2_Pö
|
MOUSE2_Pö
, 
GPIO_PIN_RESET
);

281 
GPIO_InôSåu˘
.
Pö
 = 
ONBOARD_LED_Pö
;

282 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

283 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

284 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

285 
	`HAL_GPIO_Inô
(
ONBOARD_LED_GPIO_P‹t
, &
GPIO_InôSåu˘
);

288 
GPIO_InôSåu˘
.
Pö
 = 
KB1_Pö
|
MOUSE1_Pö
|
KB2_Pö
|
MOUSE2_Pö
;

289 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_PP
;

290 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

291 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

292 
	`HAL_GPIO_Inô
(
GPIOA
, &
GPIO_InôSåu˘
);

295 
GPIO_InôSåu˘
.
Pö
 = 
CLOCK1_Pö
;

296 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_IT_FALLING
;

297 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

298 
	`HAL_GPIO_Inô
(
CLOCK1_GPIO_P‹t
, &
GPIO_InôSåu˘
);

301 
GPIO_InôSåu˘
.
Pö
 = 
DATA1_Pö
|
DATA2_Pö
;

302 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_INPUT
;

303 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

304 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

307 
GPIO_InôSåu˘
.
Pö
 = 
CLOCK2_Pö
;

308 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_IT_RISING
;

309 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

310 
	`HAL_GPIO_Inô
(
CLOCK2_GPIO_P‹t
, &
GPIO_InôSåu˘
);

313 
	`HAL_NVIC_SëPri‹ôy
(
EXTI4_IRQn
, 0, 0);

314 
	`HAL_NVIC_E«bÀIRQ
(
EXTI4_IRQn
);

316 
	`HAL_NVIC_SëPri‹ôy
(
EXTI15_10_IRQn
, 0, 0);

317 
	`HAL_NVIC_E«bÀIRQ
(
EXTI15_10_IRQn
);

319 
	}
}

327 
	$PS2_PINS_Ouçut_OD_High
()

329 
GPIO_InôTy≥Def
 
GPIO_InôSåu˘
 = {0};

332 
	`HAL_GPIO_WrôePö
(
CLOCK1_GPIO_P‹t
, 
CLOCK1_Pö
, 
GPIO_PIN_SET
);

333 
	`HAL_GPIO_WrôePö
(
DATA1_GPIO_P‹t
, 
DATA1_Pö
, 
GPIO_PIN_SET
);

334 
	`HAL_GPIO_WrôePö
(
CLOCK2_GPIO_P‹t
, 
CLOCK2_Pö
, 
GPIO_PIN_SET
);

335 
	`HAL_GPIO_WrôePö
(
DATA2_GPIO_P‹t
, 
DATA2_Pö
, 
GPIO_PIN_SET
);

338 
GPIO_InôSåu˘
.
Pö
 = 
CLOCK1_Pö
;

339 
GPIO_InôSåu˘
.
Mode
 = 
GPIO_MODE_OUTPUT_OD
;

340 
GPIO_InôSåu˘
.
PuŒ
 = 
GPIO_NOPULL
;

341 
GPIO_InôSåu˘
.
S≥ed
 = 
GPIO_SPEED_FREQ_LOW
;

342 
	`HAL_GPIO_Inô
(
CLOCK1_GPIO_P‹t
, &
GPIO_InôSåu˘
);

345 
GPIO_InôSåu˘
.
Pö
 = 
DATA1_Pö
 | 
CLOCK2_Pö
 | 
DATA2_Pö
;

346 
	`HAL_GPIO_Inô
(
GPIOB
, &
GPIO_InôSåu˘
);

348 
	}
}

357 
	$Eº‹_H™dÀr
()

361 
	`__dißbÀ_úq
();

366 
	}
}

368 #ifde‡ 
USE_FULL_ASSERT


376 
	$as£π_Áûed
(
uöt8_t
 *
fûe
, 
uöt32_t
 
löe
)

382 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\stm32f1xx_hal_msp.c

23 
	~"maö.h
"

64 
	$HAL_M•Inô
()

70 
	`__HAL_RCC_AFIO_CLK_ENABLE
();

71 
	`__HAL_RCC_PWR_CLK_ENABLE
();

77 
	`__HAL_AFIO_REMAP_SWJ_NOJTAG
();

82 
	}
}

90 
	$HAL_RTC_M•Inô
(
RTC_H™dÀTy≥Def
* 
hπc
)

92 if(
hπc
->
In°™˚
==
RTC
)

97 
	`HAL_PWR_E«bÀBkUpAc˚ss
();

99 
	`__HAL_RCC_BKP_CLK_ENABLE
();

101 
	`__HAL_RCC_RTC_ENABLE
();

107 
	}
}

115 
	$HAL_RTC_M•DeInô
(
RTC_H™dÀTy≥Def
* 
hπc
)

117 if(
hπc
->
In°™˚
==
RTC
)

123 
	`__HAL_RCC_RTC_DISABLE
();

129 
	}
}

137 
	$HAL_PCD_M•Inô
(
PCD_H™dÀTy≥Def
* 
hpcd
)

139 if(
hpcd
->
In°™˚
==
USB
)

145 
	`__HAL_RCC_USB_CLK_ENABLE
();

147 
	`HAL_NVIC_SëPri‹ôy
(
USB_LP_CAN1_RX0_IRQn
, 0, 0);

148 
	`HAL_NVIC_E«bÀIRQ
(
USB_LP_CAN1_RX0_IRQn
);

154 
	}
}

162 
	$HAL_PCD_M•DeInô
(
PCD_H™dÀTy≥Def
* 
hpcd
)

164 if(
hpcd
->
In°™˚
==
USB
)

170 
	`__HAL_RCC_USB_CLK_DISABLE
();

173 
	`HAL_NVIC_DißbÀIRQ
(
USB_LP_CAN1_RX0_IRQn
);

179 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\stm32f1xx_it.c

22 
	~"maö.h
"

23 
	~"°m32f1xx_ô.h
"

59 
PCD_H™dÀTy≥Def
 
hpcd_USB_FS
;

70 
	$NMI_H™dÀr
()

80 
	}
}

85 
	$H¨dFau…_H™dÀr
()

95 
	}
}

100 
	$MemM™age_H™dÀr
()

110 
	}
}

115 
	$BusFau…_H™dÀr
()

125 
	}
}

130 
	$UßgeFau…_H™dÀr
()

140 
	}
}

145 
	$SVC_H™dÀr
()

153 
	}
}

158 
	$DebugM⁄_H™dÀr
()

166 
	}
}

171 
	$PídSV_H™dÀr
()

179 
	}
}

184 
	$SysTick_H™dÀr
()

189 
	`HAL_IncTick
();

193 
	}
}

205 
	$EXTI4_IRQH™dÀr
()

210 
	`HAL_GPIO_EXTI_IRQH™dÀr
(
GPIO_PIN_4
);

214 
	}
}

219 
	$USB_LP_CAN1_RX0_IRQH™dÀr
()

224 
	`HAL_PCD_IRQH™dÀr
(&
hpcd_USB_FS
);

228 
	}
}

233 
	$EXTI15_10_IRQH™dÀr
()

238 
	`HAL_GPIO_EXTI_IRQH™dÀr
(
GPIO_PIN_15
);

242 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\syscalls.c

25 
	~<sys/°©.h
>

26 
	~<°dlib.h
>

27 
	~<î∫o.h
>

28 
	~<°dio.h
>

29 
	~<sig«l.h
>

30 
	~<time.h
>

31 
	~<sys/time.h
>

32 
	~<sys/times.h
>

37 
î∫o
;

38 
	$__io_putch¨
(
ch
Ë
	`__©åibuã__
((
wók
));

39 
	$__io_gëch¨
(Ë
	`__©åibuã__
((
wók
));

41 * 
°ack_±r
 
	`asm
("sp");

43 *
__ív
[1] = { 0 
	}
};

44 **
	gívú⁄
 = 
__ív
;

48 
	$öôüli£_m⁄ô‹_h™dÀs
()

50 
	}
}

52 
	$_gëpid
()

55 
	}
}

57 
	$_kûl
(
pid
, 
sig
)

59 
î∫o
 = 
EINVAL
;

61 
	}
}

63 
	$_exô
 (
°©us
)

65 
	`_kûl
(
°©us
, -1);

67 
	}
}

69 
__©åibuã__
((
wók
)Ë
	$_ªad
(
fûe
, *
±r
, 
Àn
)

71 
D©aIdx
;

73 
D©aIdx
 = 0; D©aIdx < 
Àn
; DataIdx++)

75 *
±r
++ = 
	`__io_gëch¨
();

78  
Àn
;

79 
	}
}

81 
__©åibuã__
((
wók
)Ë
	$_wrôe
(
fûe
, *
±r
, 
Àn
)

83 
D©aIdx
;

85 
D©aIdx
 = 0; D©aIdx < 
Àn
; DataIdx++)

87 
	`__io_putch¨
(*
±r
++);

89  
Àn
;

90 
	}
}

92 
	$_˛o£
(
fûe
)

95 
	}
}

98 
	$_f°©
(
fûe
, 
°©
 *
°
)

100 
°
->
°_mode
 = 
S_IFCHR
;

102 
	}
}

104 
	$_ißây
(
fûe
)

107 
	}
}

109 
	$_l£ek
(
fûe
, 
±r
, 
dú
)

112 
	}
}

114 
	$_›í
(*
∑th
, 
Êags
, ...)

118 
	}
}

120 
	$_waô
(*
°©us
)

122 
î∫o
 = 
ECHILD
;

124 
	}
}

126 
	$_u∆ök
(*
«me
)

128 
î∫o
 = 
ENOENT
;

130 
	}
}

132 
	$_times
(
tms
 *
buf
)

135 
	}
}

137 
	$_°©
(*
fûe
, 
°©
 *
°
)

139 
°
->
°_mode
 = 
S_IFCHR
;

141 
	}
}

143 
	$_lök
(*
ﬁd
, *
√w
)

145 
î∫o
 = 
EMLINK
;

147 
	}
}

149 
	$_f‹k
()

151 
î∫o
 = 
EAGAIN
;

153 
	}
}

155 
	$_execve
(*
«me
, **
¨gv
, **
ív
)

157 
î∫o
 = 
ENOMEM
;

159 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\sysmem.c

25 
	~<î∫o.h
>

26 
	~<°döt.h
>

31 
uöt8_t
 *
	g__sbrk_hóp_íd
 = 
NULL
;

54 *
	$_sbrk
(
±rdiff_t
 
ö¸
)

56 
uöt8_t
 
_íd
;

57 
uöt8_t
 
_e°ack
;

58 
uöt32_t
 
_Mö_Sèck_Size
;

59 c⁄° 
uöt32_t
 
°ack_limô
 = (uöt32_t)&
_e°ack
 - (uöt32_t)&
_Mö_Sèck_Size
;

60 c⁄° 
uöt8_t
 *
max_hóp
 = (uöt8_à*)
°ack_limô
;

61 
uöt8_t
 *
¥ev_hóp_íd
;

64 i‡(
NULL
 =
__sbrk_hóp_íd
)

66 
__sbrk_hóp_íd
 = &
_íd
;

70 i‡(
__sbrk_hóp_íd
 + 
ö¸
 > 
max_hóp
)

72 
î∫o
 = 
ENOMEM
;

76 
¥ev_hóp_íd
 = 
__sbrk_hóp_íd
;

77 
__sbrk_hóp_íd
 +
ö¸
;

79  (*)
¥ev_hóp_íd
;

80 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\system_stm32f1xx.c

59 
	~"°m32f1xx.h
"

77 #i‡!
deföed
 (
HSE_VALUE
)

78 
	#HSE_VALUE
 8000000U

	)

82 #i‡!
deföed
 (
HSI_VALUE
)

83 
	#HSI_VALUE
 8000000U

	)

88 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

99 #i‡
deföed
(
USER_VECT_TAB_ADDRESS
)

103 #i‡
deföed
(
VECT_TAB_SRAM
)

104 
	#VECT_TAB_BASE_ADDRESS
 
SRAM_BASE


	)

106 
	#VECT_TAB_OFFSET
 0x00000000U

	)

109 
	#VECT_TAB_BASE_ADDRESS
 
FLASH_BASE


	)

111 
	#VECT_TAB_OFFSET
 0x00000000U

	)

142 
uöt32_t
 
	gSy°emC‹eClock
 = 16000000;

143 c⁄° 
uöt8_t
 
	gAHBPªscTabÀ
[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

144 c⁄° 
uöt8_t
 
	gAPBPªscTabÀ
[8U] = {0, 0, 0, 0, 1, 2, 3, 4};

154 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

155 #ifde‡
DATA_IN_ExtSRAM


156 
Sy°emInô_ExtMemCé
();

176 
	$Sy°emInô
 ()

178 #i‡
	`deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

179 #ifde‡
DATA_IN_ExtSRAM


180 
	`Sy°emInô_ExtMemCé
();

185 #i‡
	`deföed
(
USER_VECT_TAB_ADDRESS
)

186 
SCB
->
VTOR
 = 
VECT_TAB_BASE_ADDRESS
 | 
VECT_TAB_OFFSET
;

188 
	}
}

225 
	$Sy°emC‹eClockUpd©e
 ()

227 
uöt32_t
 
tmp
 = 0U, 
∂lmuŒ
 = 0U, 
∂lsour˚
 = 0U;

229 #i‡
	`deföed
(
STM32F105xC
Ë|| deföed(
STM32F107xC
)

230 
uöt32_t
 
¥ediv1sour˚
 = 0U, 
¥ediv1Á˘‹
 = 0U, 
¥ediv2Á˘‹
 = 0U, 
∂l2muŒ
 = 0U;

233 #i‡
	`deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

234 
uöt32_t
 
¥ediv1Á˘‹
 = 0U;

238 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

240 
tmp
)

243 
Sy°emC‹eClock
 = 
HSI_VALUE
;

246 
Sy°emC‹eClock
 = 
HSE_VALUE
;

251 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

252 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

254 #i‡!
	`deföed
(
STM32F105xC
Ë&& !deföed(
STM32F107xC
)

255 
∂lmuŒ
 = (Öllmull >> 18U) + 2U;

257 i‡(
∂lsour˚
 == 0x00U)

260 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1UË* 
∂lmuŒ
;

264 #i‡
	`deföed
(
STM32F100xB
Ë|| deföed(
STM32F100xE
)

265 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1U;

267 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

270 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_PLLXTPRE
Ë!(
uöt32_t
)
RESET
)

272 
Sy°emC‹eClock
 = (
HSE_VALUE
 >> 1UË* 
∂lmuŒ
;

276 
Sy°emC‹eClock
 = 
HSE_VALUE
 * 
∂lmuŒ
;

281 
∂lmuŒ
 =Öllmull >> 18U;

283 i‡(
∂lmuŒ
 != 0x0DU)

285 
∂lmuŒ
 += 2U;

289 
∂lmuŒ
 = 13U / 2U;

292 i‡(
∂lsour˚
 == 0x00U)

295 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1UË* 
∂lmuŒ
;

301 
¥ediv1sour˚
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1SRC
;

302 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1U;

304 i‡(
¥ediv1sour˚
 == 0U)

307 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

313 
¥ediv2Á˘‹
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV2
) >> 4U) + 1U;

314 
∂l2muŒ
 = ((
RCC
->
CFGR2
 & 
RCC_CFGR2_PLL2MUL
) >> 8U) + 2U;

315 
Sy°emC‹eClock
 = (((
HSE_VALUE
 / 
¥ediv2Á˘‹
Ë* 
∂l2muŒ
Ë/ 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

322 
Sy°emC‹eClock
 = 
HSI_VALUE
;

328 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4U)];

330 
Sy°emC‹eClock
 >>
tmp
;

331 
	}
}

333 #i‡
deföed
(
STM32F100xE
Ë|| deföed(
STM32F101xE
Ë|| deföed(
STM32F101xG
Ë|| deföed(
STM32F103xE
Ë|| deföed(
STM32F103xG
)

340 #ifde‡
DATA_IN_ExtSRAM


350 
	$Sy°emInô_ExtMemCé
()

352 
__IO
 
uöt32_t
 
tm¥eg
;

357 
RCC
->
AHBENR
 = 0x00000114U;

360 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
AHBENR
, 
RCC_AHBENR_FSMCEN
);

363 
RCC
->
APB2ENR
 = 0x000001E0U;

366 
tm¥eg
 = 
	`READ_BIT
(
RCC
->
APB2ENR
, 
RCC_APB2ENR_IOPDEN
);

368 ()(
tm¥eg
);

376 
GPIOD
->
CRL
 = 0x44BB44BBU;

377 
GPIOD
->
CRH
 = 0xBBBBBBBBU;

379 
GPIOE
->
CRL
 = 0xB44444BBU;

380 
GPIOE
->
CRH
 = 0xBBBBBBBBU;

382 
GPIOF
->
CRL
 = 0x44BBBBBBU;

383 
GPIOF
->
CRH
 = 0xBBBB4444U;

385 
GPIOG
->
CRL
 = 0x44BBBBBBU;

386 
GPIOG
->
CRH
 = 0x444B4B44U;

391 
FSMC_B™k1
->
BTCR
[4U] = 0x00001091U;

392 
FSMC_B™k1
->
BTCR
[5U] = 0x00110212U;

393 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Startup\startup_stm32f103c8tx.s

29 .
sy¡ax
 
	gunifõd


30 .
˝u
 
	gc‹ãx
-
	gm3


31 .
Âu
 
	gso·vÂ


32 .
	gthumb


34 .
globÆ
 
	gg_p‚Ve˘‹s


35 .
globÆ
 
	gDeÁu…_H™dÀr


39 .
w‹d
 
	g_sid©a


41 .
w‹d
 
	g_sd©a


43 .
w‹d
 
	g_ed©a


45 .
w‹d
 
	g_sbss


47 .
w‹d
 
	g_ebss


49 .
equ
 
	gBoŸRAM
, 0xF108F85F

59 .
	g£˘i⁄
 .
	gãxt
.
	gRe£t_H™dÀr


60 .
wók
 
	gRe£t_H™dÀr


61 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


62 
	gRe£t_H™dÀr
:

65 
movs
 
r1
, #0

66 
b
 
Lo›C›yD©aInô


68 
	gC›yD©aInô
:

69 
ldr
 
r3
, =
_sid©a


70 
ldr
 
r3
, [r3, 
r1
]

71 
°r
 
	gr3
, [
r0
, 
r1
]

72 
adds
 
	gr1
,Ñ1, #4

74 
	gLo›C›yD©aInô
:

75 
ldr
 
r0
, =
_sd©a


76 
ldr
 
r3
, =
_ed©a


77 
adds
 
r2
, 
	gr0
, 
r1


78 
cmp
 
	gr2
, 
r3


79 
bcc
 
C›yD©aInô


80 
ldr
 
	gr2
, =
_sbss


81 
b
 
Lo›FûlZîobss


83 
FûlZîobss
:

84 
movs
 
r3
, #0

85 
°r
 
	gr3
, [
r2
], #4

87 
	gLo›FûlZîobss
:

88 
ldr
 
r3
, = 
_ebss


89 
cmp
 
r2
, 
r3


90 
bcc
 
FûlZîobss


93 
bl
 
Sy°emInô


95 
bl
 
__libc_öô_¨øy


97 
bl
 
maö


98 
bx
 
	gÃ


99 .
size
 
	gRe£t_H™dÀr
, .-Reset_Handler

109 .
	g£˘i⁄
 .
	gãxt
.
	gDeÁu…_H™dÀr
,"ax",%
¥ogbôs


110 
	gDeÁu…_H™dÀr
:

111 
Inföôe_Lo›
:

112 
b
 
Inföôe_Lo›


113 .
size
 
DeÁu…_H™dÀr
, .-
	gDeÁu…_H™dÀr


121 .
	g£˘i⁄
 .
	gi§_ve˘‹
,"a",%
	g¥ogbôs


122 .
ty≥
 
	gg_p‚Ve˘‹s
, %
	gobje˘


123 .
size
 
	gg_p‚Ve˘‹s
, .-
g_p‚Ve˘‹s


126 
	gg_p‚Ve˘‹s
:

128 .
w‹d
 
_e°ack


129 .
w‹d
 
Re£t_H™dÀr


130 .
w‹d
 
NMI_H™dÀr


131 .
w‹d
 
H¨dFau…_H™dÀr


132 .
w‹d
 
MemM™age_H™dÀr


133 .
w‹d
 
BusFau…_H™dÀr


134 .
w‹d
 
UßgeFau…_H™dÀr


135 .
w‹d
 0

136 .
w‹d
 0

137 .
w‹d
 0

138 .
w‹d
 0

139 .
w‹d
 
SVC_H™dÀr


140 .
w‹d
 
DebugM⁄_H™dÀr


141 .
w‹d
 0

142 .
w‹d
 
PídSV_H™dÀr


143 .
w‹d
 
SysTick_H™dÀr


144 .
w‹d
 
WWDG_IRQH™dÀr


145 .
w‹d
 
PVD_IRQH™dÀr


146 .
w‹d
 
TAMPER_IRQH™dÀr


147 .
w‹d
 
RTC_IRQH™dÀr


148 .
w‹d
 
FLASH_IRQH™dÀr


149 .
w‹d
 
RCC_IRQH™dÀr


150 .
w‹d
 
EXTI0_IRQH™dÀr


151 .
w‹d
 
EXTI1_IRQH™dÀr


152 .
w‹d
 
EXTI2_IRQH™dÀr


153 .
w‹d
 
EXTI3_IRQH™dÀr


154 .
w‹d
 
EXTI4_IRQH™dÀr


155 .
w‹d
 
DMA1_Ch™√l1_IRQH™dÀr


156 .
w‹d
 
DMA1_Ch™√l2_IRQH™dÀr


157 .
w‹d
 
DMA1_Ch™√l3_IRQH™dÀr


158 .
w‹d
 
DMA1_Ch™√l4_IRQH™dÀr


159 .
w‹d
 
DMA1_Ch™√l5_IRQH™dÀr


160 .
w‹d
 
DMA1_Ch™√l6_IRQH™dÀr


161 .
w‹d
 
DMA1_Ch™√l7_IRQH™dÀr


162 .
w‹d
 
ADC1_2_IRQH™dÀr


163 .
w‹d
 
USB_HP_CAN1_TX_IRQH™dÀr


164 .
w‹d
 
USB_LP_CAN1_RX0_IRQH™dÀr


165 .
w‹d
 
CAN1_RX1_IRQH™dÀr


166 .
w‹d
 
CAN1_SCE_IRQH™dÀr


167 .
w‹d
 
EXTI9_5_IRQH™dÀr


168 .
w‹d
 
TIM1_BRK_IRQH™dÀr


169 .
w‹d
 
TIM1_UP_IRQH™dÀr


170 .
w‹d
 
TIM1_TRG_COM_IRQH™dÀr


171 .
w‹d
 
TIM1_CC_IRQH™dÀr


172 .
w‹d
 
TIM2_IRQH™dÀr


173 .
w‹d
 
TIM3_IRQH™dÀr


174 .
w‹d
 
TIM4_IRQH™dÀr


175 .
w‹d
 
I2C1_EV_IRQH™dÀr


176 .
w‹d
 
I2C1_ER_IRQH™dÀr


177 .
w‹d
 
I2C2_EV_IRQH™dÀr


178 .
w‹d
 
I2C2_ER_IRQH™dÀr


179 .
w‹d
 
SPI1_IRQH™dÀr


180 .
w‹d
 
SPI2_IRQH™dÀr


181 .
w‹d
 
USART1_IRQH™dÀr


182 .
w‹d
 
USART2_IRQH™dÀr


183 .
w‹d
 
USART3_IRQH™dÀr


184 .
w‹d
 
EXTI15_10_IRQH™dÀr


185 .
w‹d
 
RTC_Aœrm_IRQH™dÀr


186 .
w‹d
 
USBWakeUp_IRQH™dÀr


187 .
w‹d
 0

188 .
w‹d
 0

189 .
w‹d
 0

190 .
w‹d
 0

191 .
w‹d
 0

192 .
w‹d
 0

193 .
w‹d
 0

194 .
w‹d
 
BoŸRAM


205 .
wók
 
NMI_H™dÀr


206 .
thumb_£t
 
NMI_H™dÀr
,
	gDeÁu…_H™dÀr


208 .
wók
 
	gH¨dFau…_H™dÀr


209 .
thumb_£t
 
	gH¨dFau…_H™dÀr
,
	gDeÁu…_H™dÀr


211 .
wók
 
	gMemM™age_H™dÀr


212 .
thumb_£t
 
	gMemM™age_H™dÀr
,
	gDeÁu…_H™dÀr


214 .
wók
 
	gBusFau…_H™dÀr


215 .
thumb_£t
 
	gBusFau…_H™dÀr
,
	gDeÁu…_H™dÀr


217 .
wók
 
	gUßgeFau…_H™dÀr


218 .
thumb_£t
 
	gUßgeFau…_H™dÀr
,
	gDeÁu…_H™dÀr


220 .
wók
 
	gSVC_H™dÀr


221 .
thumb_£t
 
	gSVC_H™dÀr
,
	gDeÁu…_H™dÀr


223 .
wók
 
	gDebugM⁄_H™dÀr


224 .
thumb_£t
 
	gDebugM⁄_H™dÀr
,
	gDeÁu…_H™dÀr


226 .
wók
 
	gPídSV_H™dÀr


227 .
thumb_£t
 
	gPídSV_H™dÀr
,
	gDeÁu…_H™dÀr


229 .
wók
 
	gSysTick_H™dÀr


230 .
thumb_£t
 
	gSysTick_H™dÀr
,
	gDeÁu…_H™dÀr


232 .
wók
 
	gWWDG_IRQH™dÀr


233 .
thumb_£t
 
	gWWDG_IRQH™dÀr
,
	gDeÁu…_H™dÀr


235 .
wók
 
	gPVD_IRQH™dÀr


236 .
thumb_£t
 
	gPVD_IRQH™dÀr
,
	gDeÁu…_H™dÀr


238 .
wók
 
	gTAMPER_IRQH™dÀr


239 .
thumb_£t
 
	gTAMPER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


241 .
wók
 
	gRTC_IRQH™dÀr


242 .
thumb_£t
 
	gRTC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


244 .
wók
 
	gFLASH_IRQH™dÀr


245 .
thumb_£t
 
	gFLASH_IRQH™dÀr
,
	gDeÁu…_H™dÀr


247 .
wók
 
	gRCC_IRQH™dÀr


248 .
thumb_£t
 
	gRCC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


250 .
wók
 
	gEXTI0_IRQH™dÀr


251 .
thumb_£t
 
	gEXTI0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


253 .
wók
 
	gEXTI1_IRQH™dÀr


254 .
thumb_£t
 
	gEXTI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


256 .
wók
 
	gEXTI2_IRQH™dÀr


257 .
thumb_£t
 
	gEXTI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


259 .
wók
 
	gEXTI3_IRQH™dÀr


260 .
thumb_£t
 
	gEXTI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


262 .
wók
 
	gEXTI4_IRQH™dÀr


263 .
thumb_£t
 
	gEXTI4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


265 .
wók
 
	gDMA1_Ch™√l1_IRQH™dÀr


266 .
thumb_£t
 
	gDMA1_Ch™√l1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


268 .
wók
 
	gDMA1_Ch™√l2_IRQH™dÀr


269 .
thumb_£t
 
	gDMA1_Ch™√l2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


271 .
wók
 
	gDMA1_Ch™√l3_IRQH™dÀr


272 .
thumb_£t
 
	gDMA1_Ch™√l3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


274 .
wók
 
	gDMA1_Ch™√l4_IRQH™dÀr


275 .
thumb_£t
 
	gDMA1_Ch™√l4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


277 .
wók
 
	gDMA1_Ch™√l5_IRQH™dÀr


278 .
thumb_£t
 
	gDMA1_Ch™√l5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


280 .
wók
 
	gDMA1_Ch™√l6_IRQH™dÀr


281 .
thumb_£t
 
	gDMA1_Ch™√l6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


283 .
wók
 
	gDMA1_Ch™√l7_IRQH™dÀr


284 .
thumb_£t
 
	gDMA1_Ch™√l7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


286 .
wók
 
	gADC1_2_IRQH™dÀr


287 .
thumb_£t
 
	gADC1_2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


289 .
wók
 
	gUSB_HP_CAN1_TX_IRQH™dÀr


290 .
thumb_£t
 
	gUSB_HP_CAN1_TX_IRQH™dÀr
,
	gDeÁu…_H™dÀr


292 .
wók
 
	gUSB_LP_CAN1_RX0_IRQH™dÀr


293 .
thumb_£t
 
	gUSB_LP_CAN1_RX0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


295 .
wók
 
	gCAN1_RX1_IRQH™dÀr


296 .
thumb_£t
 
	gCAN1_RX1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


298 .
wók
 
	gCAN1_SCE_IRQH™dÀr


299 .
thumb_£t
 
	gCAN1_SCE_IRQH™dÀr
,
	gDeÁu…_H™dÀr


301 .
wók
 
	gEXTI9_5_IRQH™dÀr


302 .
thumb_£t
 
	gEXTI9_5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


304 .
wók
 
	gTIM1_BRK_IRQH™dÀr


305 .
thumb_£t
 
	gTIM1_BRK_IRQH™dÀr
,
	gDeÁu…_H™dÀr


307 .
wók
 
	gTIM1_UP_IRQH™dÀr


308 .
thumb_£t
 
	gTIM1_UP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


310 .
wók
 
	gTIM1_TRG_COM_IRQH™dÀr


311 .
thumb_£t
 
	gTIM1_TRG_COM_IRQH™dÀr
,
	gDeÁu…_H™dÀr


313 .
wók
 
	gTIM1_CC_IRQH™dÀr


314 .
thumb_£t
 
	gTIM1_CC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


316 .
wók
 
	gTIM2_IRQH™dÀr


317 .
thumb_£t
 
	gTIM2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


319 .
wók
 
	gTIM3_IRQH™dÀr


320 .
thumb_£t
 
	gTIM3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


322 .
wók
 
	gTIM4_IRQH™dÀr


323 .
thumb_£t
 
	gTIM4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


325 .
wók
 
	gI2C1_EV_IRQH™dÀr


326 .
thumb_£t
 
	gI2C1_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


328 .
wók
 
	gI2C1_ER_IRQH™dÀr


329 .
thumb_£t
 
	gI2C1_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


331 .
wók
 
	gI2C2_EV_IRQH™dÀr


332 .
thumb_£t
 
	gI2C2_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


334 .
wók
 
	gI2C2_ER_IRQH™dÀr


335 .
thumb_£t
 
	gI2C2_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


337 .
wók
 
	gSPI1_IRQH™dÀr


338 .
thumb_£t
 
	gSPI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


340 .
wók
 
	gSPI2_IRQH™dÀr


341 .
thumb_£t
 
	gSPI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


343 .
wók
 
	gUSART1_IRQH™dÀr


344 .
thumb_£t
 
	gUSART1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


346 .
wók
 
	gUSART2_IRQH™dÀr


347 .
thumb_£t
 
	gUSART2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


349 .
wók
 
	gUSART3_IRQH™dÀr


350 .
thumb_£t
 
	gUSART3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


352 .
wók
 
	gEXTI15_10_IRQH™dÀr


353 .
thumb_£t
 
	gEXTI15_10_IRQH™dÀr
,
	gDeÁu…_H™dÀr


355 .
wók
 
	gRTC_Aœrm_IRQH™dÀr


356 .
thumb_£t
 
	gRTC_Aœrm_IRQH™dÀr
,
	gDeÁu…_H™dÀr


358 .
wók
 
	gUSBWakeUp_IRQH™dÀr


359 .
thumb_£t
 
	gUSBWakeUp_IRQH™dÀr
,
	gDeÁu…_H™dÀr


	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\ps2\Inc\ps2_protocol.h

20 #i‚de‡
PS2_PROTOCOL_H_INCLUDED


21 
	#PS2_PROTOCOL_H_INCLUDED


	)

27 
GPIO_Ty≥Def
 *
	m˛ockP‹t
;

28 
uöt16_t
 
	m˛ockPö
;

29 
GPIO_Ty≥Def
 *
	md©aP‹t
;

30 
uöt16_t
 
	md©aPö
;

31 
uöt16_t
 
	md©a
;

32 } 
	tPS2_H™dÀTy≥Def
;

38 
PS2_SídByãAsync
(
PS2_H™dÀTy≥Def
 *
dev
, 
uöt8_t
 
byã
);

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\ps2\Src\ps2_protocol.c

20 
	~"maö.h
"

30 
	$ªque°_to_£nd
(
PS2_H™dÀTy≥Def
 *
dev
)

32 
	`HAL_GPIO_WrôePö
(
dev
->
˛ockP‹t
, dev->
˛ockPö
, 
GPIO_PIN_RESET
);

33 
	`HAL_Dñay
(1);

34 
	`HAL_GPIO_WrôePö
(
dev
->
d©aP‹t
, dev->
d©aPö
, 
GPIO_PIN_RESET
);

35 
	`HAL_GPIO_WrôePö
(
dev
->
˛ockP‹t
, dev->
˛ockPö
, 
GPIO_PIN_SET
);

36 
	}
}

38 
	$PS2_SídByãAsync
(
PS2_H™dÀTy≥Def
 *
dev
, 
uöt8_t
 
byã
)

40 
i
, 
∑rôy
 = 1;

42 
dev
->
d©a
 = (
byã
 << 1) | 0x400;

45 
i
=0; i<8; i++) {

46 i‡(
byã
 & 1) {

47 
∑rôy
++;

49 
byã
 >>= 1;

52 
dev
->
d©a
 |(
∑rôy
 & 1) << 8;

54 
	`ªque°_to_£nd
(
dev
);

55 
	}
}

	@K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\stm103_ps2_to_usb.ioc

1 #Mi¸oX∂‹î 
C⁄figuøti⁄
 
£âögs
 - dÿ
nŸ
 
modify


2 
	gFûe
.
	gVîsi⁄
=6

3 
GPIO
.
grou≥dBy
=
Group
 
By
 
PîùhîÆs


4 
KìpU£rPœ˚mít
=
åue


5 
Mcu
.
Famûy
=
STM32F1


6 
Mcu
.
IP0
=
NVIC


7 
Mcu
.
IP1
=
RCC


8 
Mcu
.
IP2
=
RTC


9 
Mcu
.
IP3
=
SYS


10 
Mcu
.
IP4
=
USB


11 
Mcu
.
IPNb
=5

12 
Mcu
.
Name
=
STM32F103C
(8-
B
)
Tx


13 
Mcu
.
Package
=
LQFP48


14 
Mcu
.
Pö0
=
PC13
-
TAMPER
-
RTC


15 
Mcu
.
Pö1
=
PC14
-
OSC32_IN


16 
Mcu
.
Pö10
=
PA12


17 
Mcu
.
Pö11
=
PA13


18 
Mcu
.
Pö12
=
PA14


19 
Mcu
.
Pö13
=
PA15


20 
Mcu
.
Pö14
=
PB3


21 
Mcu
.
Pö15
=
PB4


22 
Mcu
.
Pö16
=
PB6


23 
Mcu
.
Pö17
=
VP_RTC_VS_RTC_A˘iv©e


24 
Mcu
.
Pö18
=
VP_RTC_No_RTC_Ouçut


25 
Mcu
.
Pö19
=
VP_SYS_VS_Sy°ick


26 
Mcu
.
Pö2
=
PC15
-
OSC32_OUT


27 
Mcu
.
Pö3
=
PD0
-
OSC_IN


28 
Mcu
.
Pö4
=
PD1
-
OSC_OUT


29 
Mcu
.
Pö5
=
PA1


30 
Mcu
.
Pö6
=
PA2


31 
Mcu
.
Pö7
=
PA3


32 
Mcu
.
Pö8
=
PA4


33 
Mcu
.
Pö9
=
PA11


34 
Mcu
.
PösNb
=20

35 
Mcu
.
ThúdP¨tyNb
=0

36 
Mcu
.
U£rC⁄°™ts
=

37 
Mcu
.
U£rName
=
STM32F103C8Tx


38 
MxCube
.
Vîsi⁄
=6.1.1

39 
MxDb
.
Vîsi⁄
=
DB
.6.0.10

40 
NVIC
.
BusFau…_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

41 
NVIC
.
DebugM⁄ô‹_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

42 
NVIC
.
EXTI15_10_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:true

43 
NVIC
.
EXTI4_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:true

44 
NVIC
.
F‹˚E«bÀDMAVe˘‹
=
åue


45 
NVIC
.
H¨dFau…_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

46 
NVIC
.
Mem‹yM™agemít_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

47 
NVIC
.
N⁄MaskabÀI¡_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

48 
NVIC
.
PídSV_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

49 
NVIC
.
Pri‹ôyGroup
=
NVIC_PRIORITYGROUP_4


50 
NVIC
.
SVCÆl_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

51 
NVIC
.
SysTick_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:true

52 
NVIC
.
USB_LP_CAN1_RX0_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:true

53 
NVIC
.
UßgeFau…_IRQn
=
åue
\:0\:0\:
Ál£
\:false\:true\:true\:false

54 
PA1
.
GPIOP¨amëîs
=
GPIO_Labñ


55 
PA1
.
GPIO_Labñ
=
KB1


56 
PA1
.
Locked
=
åue


57 
PA1
.
Sig«l
=
GPIO_Ouçut


58 
PA11
.
Locked
=
åue


59 
PA11
.
Mode
=
Devi˚


60 
PA11
.
Sig«l
=
USB_DM


61 
PA12
.
Locked
=
åue


62 
PA12
.
Mode
=
Devi˚


63 
PA12
.
Sig«l
=
USB_DP


64 
PA13
.
Locked
=
åue


65 
PA13
.
Mode
=
Sîül_Wúe


66 
PA13
.
Sig«l
=
SYS_JTMS
-
SWDIO


67 
PA14
.
Locked
=
åue


68 
PA14
.
Mode
=
Sîül_Wúe


69 
PA14
.
Sig«l
=
SYS_JTCK
-
SWCLK


70 
PA15
.
GPIOP¨amëîs
=
GPIO_Labñ
,
GPIO_ModeDeÁu…EXTI


71 
	gPA15
.
	gGPIO_Labñ
=
CLOCK1


72 
PA15
.
GPIO_ModeDeÁu…EXTI
=
GPIO_MODE_IT_FALLING


73 
PA15
.
Locked
=
åue


74 
PA15
.
Sig«l
=
GPXTI15


75 
PA2
.
GPIOP¨amëîs
=
GPIO_Labñ


76 
PA2
.
GPIO_Labñ
=
MOUSE1


77 
PA2
.
Locked
=
åue


78 
PA2
.
Sig«l
=
GPIO_Ouçut


79 
PA3
.
GPIOP¨amëîs
=
GPIO_Labñ


80 
PA3
.
GPIO_Labñ
=
KB2


81 
PA3
.
Locked
=
åue


82 
PA3
.
Sig«l
=
GPIO_Ouçut


83 
PA4
.
GPIOP¨amëîs
=
GPIO_Labñ


84 
PA4
.
GPIO_Labñ
=
MOUSE2


85 
PA4
.
Locked
=
åue


86 
PA4
.
Sig«l
=
GPIO_Ouçut


87 
PB3
.
GPIOP¨amëîs
=
GPIO_Labñ


88 
PB3
.
GPIO_Labñ
=
DATA1


89 
PB3
.
Locked
=
åue


90 
PB3
.
Sig«l
=
GPIO_I≈ut


91 
PB4
.
GPIOP¨amëîs
=
GPIO_Labñ


92 
PB4
.
GPIO_Labñ
=
CLOCK2


93 
PB4
.
Locked
=
åue


94 
PB4
.
Sig«l
=
GPXTI4


95 
PB6
.
GPIOP¨amëîs
=
GPIO_Labñ


96 
PB6
.
GPIO_Labñ
=
DATA2


97 
PB6
.
Locked
=
åue


98 
PB6
.
Sig«l
=
GPIO_I≈ut


99 
PC13
-
TAMPER
-
RTC
.
GPIOP¨amëîs
=
GPIO_Labñ


100 
PC13
-
TAMPER
-
RTC
.
GPIO_Labñ
=
ONBOARD_LED


101 
PC13
-
TAMPER
-
RTC
.
Locked
=
åue


102 
PC13
-
TAMPER
-
RTC
.
Sig«l
=
GPIO_Ouçut


103 
PC14
-
OSC32_IN
.
Locked
=
åue


104 
PC14
-
OSC32_IN
.
Sig«l
=
RCC_OSC32_IN


105 
PC15
-
OSC32_OUT
.
Locked
=
åue


106 
PC15
-
OSC32_OUT
.
Sig«l
=
RCC_OSC32_OUT


107 
PD0
-
OSC_IN
.
Locked
=
åue


108 
PD0
-
OSC_IN
.
Mode
=
HSE
-
Exã∫Æ
-
Oscûœt‹


109 
PD0
-
OSC_IN
.
Sig«l
=
RCC_OSC_IN


110 
PD1
-
OSC_OUT
.
Locked
=
åue


111 
PD1
-
OSC_OUT
.
Mode
=
HSE
-
Exã∫Æ
-
Oscûœt‹


112 
PD1
-
OSC_OUT
.
Sig«l
=
RCC_OSC_OUT


113 
PöOutP™ñ
.
RŸ©i⁄AngÀ
=0

114 
Proje˘M™agî
.
AskF‹Migøã
=
åue


115 
Proje˘M™agî
.
BackupPªvious
=
Ál£


116 
Proje˘M™agî
.
CompûîO±imize
=2

117 
Proje˘M™agî
.
CompuãrToﬁchaö
=
Ál£


118 
Proje˘M™agî
.
Cou∂eFûe
=
Ál£


119 
Proje˘M™agî
.
Cu°omîFúmw¨ePackage
=

120 
Proje˘M™agî
.
DeÁu…FWLoˇti⁄
=
åue


121 
Proje˘M™agî
.
DñëePªvious
=
åue


122 
Proje˘M™agî
.
Devi˚Id
=
STM32F103C8Tx


123 
Proje˘M™agî
.
Fúmw¨ePackage
=
STM32Cube
 
FW_F1
 
V1
.8.3

124 
Proje˘M™agî
.
FªePös
=
Ál£


125 
Proje˘M™agî
.
HÆAs£πFuŒ
=
Ál£


126 
Proje˘M™agî
.
HópSize
=0x200

127 
Proje˘M™agî
.
KìpU£rCode
=
åue


128 
Proje˘M™agî
.
La°Fúmw¨e
=
åue


129 
Proje˘M™agî
.
LibøryC›y
=1

130 
Proje˘M™agî
.
MaöLoˇti⁄
=
Src


131 
Proje˘M™agî
.
NoMaö
=
Ál£


132 
Proje˘M™agî
.
PªviousToﬁchaö
=
STM32CubeIDE


133 
Proje˘M™agî
.
Proje˘Buûd
=
Ál£


134 
Proje˘M™agî
.
Proje˘FûeName
=
°m103_ps2_to_usb
.
ioc


135 
Proje˘M™agî
.
Proje˘Name
=
°m103_ps2_to_usb


136 
Proje˘M™agî
.
Regi°îCÆlBack
=

137 
Proje˘M™agî
.
SèckSize
=0x400

138 
Proje˘M™agî
.
T¨gëToﬁchaö
=
STM32CubeIDE


139 
Proje˘M™agî
.
ToﬁChaöLoˇti⁄
=

140 
Proje˘M™agî
.
UndîRoŸ
=
åue


141 
Proje˘M™agî
.
fun˘i⁄li°s‹t
=1-
MX_GPIO_Inô
-
GPIO
-
Ál£
-
HAL
-
åue
,2-
	gMX_RTC_Inô
-
	gRTC
-
	gÁl£
-
	gHAL
-
	gåue
,3-
	gMX_USB_PCD_Inô
-
	gUSB
-Ál£-HAL-åue,4-
	gSy°emClock_C⁄fig
-
	gRCC
-false-HAL-true

142 
	gRCC
.
	gADCFªqVÆue
=24000000

143 
RCC
.
AHBFªq_VÆue
=48000000

144 
RCC
.
APB1CLKDividî
=
RCC_HCLK_DIV2


145 
RCC
.
APB1Fªq_VÆue
=24000000

146 
RCC
.
APB1TimFªq_VÆue
=48000000

147 
RCC
.
APB2Fªq_VÆue
=48000000

148 
RCC
.
APB2TimFªq_VÆue
=48000000

149 
RCC
.
FCLKC‹ãxFªq_VÆue
=48000000

150 
RCC
.
FamûyName
=
M


151 
RCC
.
HCLKFªq_VÆue
=48000000

152 
RCC
.
IPP¨amëîs
=
ADCFªqVÆue
,
	gAHBFªq_VÆue
,
	gAPB1CLKDividî
,
	gAPB1Fªq_VÆue
,
	gAPB1TimFªq_VÆue
,
	gAPB2Fªq_VÆue
,
	gAPB2TimFªq_VÆue
,
	gFCLKC‹ãxFªq_VÆue
,
	gFamûyName
,
	gHCLKFªq_VÆue
,
	gMCOFªq_VÆue
,
	gPLLCLKFªq_VÆue
,
	gPLLMCOFªq_VÆue
,
	gPLLMUL
,
	gRTCClockSñe˘i⁄
,
	gRTCFªq_VÆue
,
	gSYSCLKFªq_VALUE
,
	gSYSCLKSour˚
,
	gTimSysFªq_VÆue
,
	gUSBFªq_VÆue
,
VCOOuçut2Fªq_VÆue


153 
	gRCC
.
	gMCOFªq_VÆue
=48000000

154 
RCC
.
PLLCLKFªq_VÆue
=48000000

155 
RCC
.
PLLMCOFªq_VÆue
=24000000

156 
RCC
.
PLLMUL
=
RCC_PLL_MUL6


157 
RCC
.
RTCClockSñe˘i⁄
=
RCC_RTCCLKSOURCE_HSE_DIV128


158 
RCC
.
RTCFªq_VÆue
=62500

159 
RCC
.
SYSCLKFªq_VALUE
=48000000

160 
RCC
.
SYSCLKSour˚
=
RCC_SYSCLKSOURCE_PLLCLK


161 
RCC
.
TimSysFªq_VÆue
=48000000

162 
RCC
.
USBFªq_VÆue
=48000000

163 
RCC
.
VCOOuçut2Fªq_VÆue
=8000000

164 
RTC
.
F‹m©
=
RTC_FORMAT_BCD


165 
RTC
.
Hours
=1

166 
RTC
.
IPP¨amëîs
=
Hours
,
	gF‹m©
,
Möuãs


167 
	gRTC
.
	gMöuãs
=0

168 
SH
.
GPXTI15
.0=
GPIO_EXTI15


169 
SH
.
GPXTI15
.
C⁄fNb
=1

170 
SH
.
GPXTI4
.0=
GPIO_EXTI4


171 
SH
.
GPXTI4
.
C⁄fNb
=1

172 
VP_RTC_No_RTC_Ouçut
.
Mode
=
RTC_OUT_NO


173 
VP_RTC_No_RTC_Ouçut
.
Sig«l
=
RTC_No_RTC_Ouçut


174 
VP_RTC_VS_RTC_A˘iv©e
.
Mode
=
RTC_E«bÀd


175 
VP_RTC_VS_RTC_A˘iv©e
.
Sig«l
=
RTC_VS_RTC_A˘iv©e


176 
VP_SYS_VS_Sy°ick
.
Mode
=
SysTick


177 
VP_SYS_VS_Sy°ick
.
Sig«l
=
SYS_VS_Sy°ick


178 
bﬂrd
=
°m103_ãm∂©e


	@
1
.
0
78
7551
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Doc\PS2 Keyboard.pdf
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f103xb.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Device\ST\STM32F1xx\Include\stm32f1xx.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Device\ST\STM32F1xx\Include\system_stm32f1xx.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_armcc.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_armclang.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_compiler.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_gcc.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_iccarm.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\cmsis_version.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_armv8mbl.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_armv8mml.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm0.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm0plus.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm1.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm23.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm3.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm33.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm4.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_cm7.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_sc000.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\core_sc300.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\mpu_armv7.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\mpu_armv8.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\CMSIS\Include\tz_context.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\Legacy\stm32_hal_legacy.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_cortex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_def.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_dma_ex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_exti.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_flash_ex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_gpio_ex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pcd_ex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_pwr.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rcc_ex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_rtc_ex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_hal_tim_ex.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Inc\stm32f1xx_ll_usb.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_cortex.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_dma.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_exti.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_flash_ex.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_gpio_ex.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pcd_ex.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_pwr.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rcc_ex.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_rtc_ex.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_hal_tim_ex.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Drivers\STM32F1xx_HAL_Driver\Src\stm32f1xx_ll_usb.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Inc\main.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Inc\stm32f1xx_hal_conf.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Inc\stm32f1xx_it.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\STM32F103C8TX_FLASH.ld
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\main.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\stm32f1xx_hal_msp.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\stm32f1xx_it.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\syscalls.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\sysmem.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Src\system_stm32f1xx.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\Startup\startup_stm32f103c8tx.s
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\ps2\Inc\ps2_protocol.h
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\ps2\Src\ps2_protocol.c
K:\projets\STM32\STMicroelectronics\stm103_ps2_to_usb\stm103_ps2_to_usb.ioc
